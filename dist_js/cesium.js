
angular.module('cesium.settings.services', ['ngApi', 'cesium.config'])

.factory('csSettings', ['$rootScope', '$q', 'Api', 'localStorage', '$translate', 'csConfig', function($rootScope, $q, Api, localStorage, $translate, csConfig) {
  'ngInject';

  // Define app locales
  var locales = [
    {id:'en',    label:'English'},
    {id:'en-GB', label:'English (UK)'},
    {id:'fr-FR', label:'FranÃ§ais'},
    {id:'nl-NL', label:'Nederlands'},
    {id:'es-ES', label:'Spanish'},
    {id:'it-IT', label:'Italiano'}
  ];
  var fallbackLocale = csConfig.fallbackLanguage ? fixLocale(csConfig.fallbackLanguage) : 'en';

  // Convert browser locale to app locale (fix #140)
  function fixLocale (locale) {
    if (!locale) return fallbackLocale;

    // exists in app locales: use it
    if (_.findWhere(locales, {id: locale})) return locale;

    // not exists: reiterate with the root (e.g. 'fr-XX' -> 'fr')
    var localeParts = locale.split('-');
    if (localeParts.length > 1) {
      return fixLocale(localeParts[0]);
    }

    // If another locale exists with the same root: use it
    var similarLocale = _.find(locales, function(l) {
      return String.prototype.startsWith.call(l.id, locale);
    });
    if (similarLocale) return similarLocale.id;

    return fallbackLocale;
  }

  // Convert browser locale to app locale (fix #140)
  function fixLocaleWithLog (locale) {
    var fixedLocale = fixLocale(locale);
    if (locale != fixedLocale) {
      console.debug('[settings] Fix locale [{0}] -> [{1}]'.format(locale, fixedLocale));
    }
    return fixedLocale;
  }

  var
  constants = {
    OLD_STORAGE_KEY: 'CESIUM_SETTINGS', // for version < v1.1
    STORAGE_KEY: 'settings', // for version >= v1.1.0
    KEEP_AUTH_IDLE_SESSION: 9999
  },
  defaultSettings = angular.merge({
    timeout : 4000,
    cacheTimeMs: 60000, /*1 min*/
    useRelative: false,
    timeWarningExpireMembership: 2592000 * 2 /*=2 mois*/,
    timeWarningExpire: 2592000 * 3 /*=3 mois*/,
    useLocalStorage: true, // override to false if no device
    useLocalStorageEncryption: true,
    walletHistoryTimeSecond: 30 * 24 * 60 * 60 /*30 days*/,
    walletHistorySliceSecond: 5 * 24 * 60 * 60 /*download using 5 days slice*/,
    walletHistoryAutoRefresh: true, // override to false if device
    rememberMe: true,
    keepAuthIdle: 10 * 60,
    showUDHistory: true,
    httpsMode: false,
    expertMode: false,
    decimalCount: 4,
    uiEffects: true,
    minVersion: '1.1.0',
    newIssueUrl: "https://git.duniter.org/clients/cesium/cesium/issues/new",
    userForumUrl: "https://forum.monnaie-libre.fr",
    latestReleaseUrl: "https://api.github.com/repos/duniter/cesium/releases/latest",
    duniterLatestReleaseUrl: "https://api.github.com/repos/duniter/duniter/releases/latest",
    blockValidityWindow: 6,
    helptip: {
      enable: true,
      installDocUrl: "https://duniter.org/en/wiki/duniter/install/",
      currency: 0,
      network: 0,
      wotLookup: 0,
      wot: 0,
      wotCerts: 0,
      wallet: 0,
      walletCerts: 0,
      header: 0,
      settings: 0
    },
    currency: {
      allRules: false,
      allWotRules: false
    },
    wallet: {
      showPubkey: true,
      alertIfUnusedWallet: true,
      notificationReadTime: 0
    },
    locale: {
      id: fixLocaleWithLog(csConfig.defaultLanguage || $translate.use()) // use config locale if set, or browser default
    }
  }, csConfig),

  data = {},
  previousData,
  started = false,
  startPromise,
  api = new Api(this, "csSettings");

  var
  reset = function() {
    _.keys(data).forEach(function(key){
      delete data[key];
    });

    applyData(defaultSettings);

    return api.data.raisePromise.reset(data)
      .then(store);
  },

  getByPath = function(path, defaultValue) {
    var obj = data;
    _.each(path.split('.'), function(key) {
      obj = obj[key];
      if (angular.isUndefined(obj)) {
        obj = defaultValue;
        return; // stop
      }
    });

    return obj;
  },

  emitChangedEvent = function() {
    var hasChanged = previousData && !angular.equals(previousData, data);
    previousData = angular.copy(data);
    if (hasChanged) {
      api.data.raise.changed(data);
    }
  },

  store = function() {
    if (!started) {
      console.debug('[setting] Waiting start finished...');
      return (startPromise || start()).then(store);
    }

    var promise;
    if (data.useLocalStorage) {
      // When node is temporary (fallback node): keep previous node address - issue #476
      if (data.node.temporary === true) {
        promise = localStorage.getObject(constants.STORAGE_KEY)
          .then(function(previousSettings) {
            var savedData = angular.copy(data);
            savedData.node = previousSettings && previousSettings.node || {};
            delete savedData.temporary; // never store temporary flag
            return localStorage.setObject(constants.STORAGE_KEY, savedData);
          });
      }
      else {
        promise = localStorage.setObject(constants.STORAGE_KEY, data);
      }
    }
    else {
      promise  = localStorage.setObject(constants.STORAGE_KEY, null);
    }

    return promise
      .then(function() {
        if (data.useLocalStorage) {
          console.debug('[setting] Saved locally');
        }

        // Emit event on store
        return api.data.raisePromise.store(data);
      })

      // Emit event on store
      .then(emitChangedEvent);
  },

  applyData = function(newData) {
    var localeChanged = false;
    if (newData.locale && newData.locale.id) {
      // Fix previously stored locale (could use bad format)
      newData.locale.id = fixLocale(newData.locale.id);
      localeChanged = !data.locale || newData.locale.id !== data.locale.id || newData.locale.id !== $translate.use();
    }

    // Apply stored settings
    angular.merge(data, newData);

    // Always force the usage of default settings
    // This is a workaround for DEV (TODO: implement edition in settings ?)
    data.timeWarningExpire = defaultSettings.timeWarningExpire;
    data.timeWarningExpireMembership = defaultSettings.timeWarningExpireMembership;
    data.cacheTimeMs = defaultSettings.cacheTimeMs;
    data.timeout = defaultSettings.timeout;
    data.minVersion = defaultSettings.minVersion;
    data.latestReleaseUrl = defaultSettings.latestReleaseUrl;
    data.duniterLatestReleaseUrl = defaultSettings.duniterLatestReleaseUrl;
    data.newIssueUrl = defaultSettings.newIssueUrl;
    data.userForumUrl = defaultSettings.userForumUrl;

    // Apply the new locale (only if need)
    if (localeChanged) {
      $translate.use(fixLocale(data.locale.id)); // will produce an event cached by onLocaleChange();
    }

  },

  restore = function() {
    var now = new Date().getTime();

    return $q.all([
        localStorage.getObject(constants.OLD_STORAGE_KEY), // for version < v1.1
        localStorage.getObject(constants.STORAGE_KEY)
      ])
        .then(function(res) {
          // Clean old storage
          localStorage.put(constants.OLD_STORAGE_KEY, null);
          var storedData = res[1] || res[0];
          // No settings stored
          if (!storedData) {
            console.debug("[settings] No settings in local storage. Using defaults.");
            applyData(defaultSettings);
            emitChangedEvent();
            return;
          }

          // Apply stored data
          applyData(storedData);

          console.debug('[settings] Loaded from local storage in '+(new Date().getTime()-now)+'ms');
          emitChangedEvent();
        });
  },

  getLicenseUrl = function() {
    var locale = data.locale && data.locale.id || csConfig.defaultLanguage || 'en';
    return (csConfig.license) ?
      (csConfig.license[locale] ? csConfig.license[locale] : csConfig.license[csConfig.defaultLanguage || 'en'] || csConfig.license) : undefined;
  },

  // Detect locale successful changes, then apply to vendor libs
  onLocaleChange = function() {
    var locale = $translate.use();
    console.debug('[settings] Locale ['+locale+']');

    // config moment lib
    try {
      moment.locale(locale.substr(0,2));
    }
    catch(err) {
      moment.locale('en');
      console.warn('[settings] Unknown local for moment lib. Using default [en]');
    }

    // config numeral lib
    try {
      numeral.language(locale.substr(0,2));
    }
    catch(err) {
      numeral.language('en');
      console.warn('[settings] Unknown local for numeral lib. Using default [en]');
    }

    // Emit event
    api.locale.raise.changed(locale);
  },


  ready = function() {
    if (started) return $q.when();
    return startPromise || start();
  },

  start = function() {
    console.debug('[settings] Starting...');

    startPromise = localStorage.ready()

      // Restore
      .then(restore)

      // Emit ready event
      .then(function() {
        console.debug('[settings] Started');
        started = true;
        startPromise = null;
        // Emit event (used by plugins)
        api.data.raise.ready(data);
      });

    return startPromise;
  };

  $rootScope.$on('$translateChangeSuccess', onLocaleChange);

  api.registerEvent('data', 'reset');
  api.registerEvent('data', 'changed');
  api.registerEvent('data', 'store');
  api.registerEvent('data', 'ready');
  api.registerEvent('locale', 'changed');

  // Apply default settings. This is required on some browser (web or mobile - see #361)
  applyData(defaultSettings);

  // Default action
  //start();

  return {
    ready: ready,
    start: start,
    data: data,
    getByPath: getByPath,
    reset: reset,
    store: store,
    restore: restore,
    getLicenseUrl: getLicenseUrl,
    defaultSettings: defaultSettings,
    // api extension
    api: api,
    locales: locales,
    constants: constants
  };
}]);


angular.module('cesium.network.services', ['ngApi', 'cesium.bma.services', 'cesium.http.services'])

.factory('csNetwork', ['$rootScope', '$q', '$interval', '$timeout', '$window', 'csConfig', 'BMA', 'csHttp', 'Api', function($rootScope, $q, $interval, $timeout, $window, csConfig, BMA, csHttp, Api) {
  'ngInject';

  factory = function(id) {

    var
      interval,
      constants = {
        UNKNOWN_BUID: -1
      },
      isHttpsMode = $window.location.protocol === 'https:',
      api = new Api(this, "csNetwork-" + id),

      data = {
        bma: null,
        listeners: [],
        loading: true,
        peers: [],
        filter: {
          member: true,
          mirror: true,
          endpointFilter: null,
          online: false,
          ssl: undefined,
          tor: undefined
        },
        sort:{
          type: null,
          asc: true
        },
        expertMode: false,
        knownBlocks: [],
        mainBlock: null,
        uidsByPubkeys: null,
        searchingPeersOnNetwork: false,
        difficulties: null,
        ws2pHeads: null,
        timeout: csConfig.timeout
      },

      // Return the block uid
      buid = function(block) {
        return block && [block.number, block.hash].join('-');
      },

      resetData = function() {
        data.bma = null;
        data.listeners = [];
        data.peers.splice(0);
        data.filter = {
          member: true,
          mirror: true,
          endpointFilter: null,
          online: true
        };
        data.sort = {
          type: null,
          asc: true
        };
        data.expertMode = false;
        data.memberPeersCount = 0;
        data.knownBlocks = [];
        data.mainBlock = null;
        data.uidsByPubkeys = {};
        data.loading = true;
        data.searchingPeersOnNetwork = false;
        data.difficulties = null;
        data.ws2pHeads = null;
        data.timeout = csConfig.timeout;
      },

      hasPeers = function() {
        return data.peers && data.peers.length > 0;
      },

      getPeers = function() {
        return data.peers;
      },

      isBusy = function() {
        return data.loading;
      },

      getKnownBlocks = function() {
        return data.knownBlocks;
      },

      // Load WS2P heads
      loadW2spHeads = function() {
        return data.bma.network.ws2p.heads()
          .then(function (res) {
            data.ws2pHeads = res.heads ? res.heads.reduce(function (res, hit) {
              if (hit.message && hit.sig) {
                try {
                  var head = new Ws2pMessage(hit.message);
                  res[[head.pubkey, head.ws2pid].join('-')] = head;
                }
                catch(err) {
                  // just log, then ignore
                  console.error('[network] Ignoring WS2P head.', err && err.message || err);
                }
              }
              return res;
            }, {}) : {};
          })
          .catch(function(err) {
            // When too many request, retry in 3s
            if (err && err.ucode == BMA.errorCodes.HTTP_LIMITATION) {
              return $timeout(function() {
                return loadW2spHeads();
              }, 3000);
            }
            console.error(err); // can occur on duniter v1.6
            data.ws2pHeads = {};
          });
      },

      // Load personal difficulties
      loadDifficulties = function() {
        return data.bma.blockchain.stats.difficulties()
          .then(function (res) {
            data.difficulties = res.levels ? res.levels.reduce(function (res, hit) {
              if (hit.uid && hit.level) res[hit.uid] = hit.level;
              return res;
            }, {}) : {};
          })
          .catch(function(err) {
            // When too many request, retry in 3s
            if (err && err.ucode == BMA.errorCodes.HTTP_LIMITATION) {
              return $timeout(function() {
                return loadDifficulties();
              }, 3000);
            }
            console.error(err);
            data.difficulties = {};
          });
      },

      loadPeers = function() {
        data.peers = [];
        data.searchingPeersOnNetwork = true;
        data.loading = true;
        data.bma = data.bma || BMA;
        var newPeers = [];

        if (interval) {
          $interval.cancel(interval);
        }

        interval = $interval(function() {
          // not same job instance
          if (newPeers.length) {
            flushNewPeersAndSort(newPeers);
          }
          else if (data.loading && !data.searchingPeersOnNetwork) {
            data.loading = false;
            $interval.cancel(interval);
            // The peer lookup end, we can make a clean final report
            sortPeers(true/*update main buid*/);

            console.debug('[network] Finish: {0} peers found.'.format(data.peers.length));
          }
        }, 1000);

        var initJobs = [
          // Load uids
          data.bma.wot.member.uids()
            .then(function(uids) {
              data.uidsByPubkeys = uids;
            })
            .catch(function(err) {
              data.uidsByPubkeys = {};
              //throw err;
            }),

          // Load WS2P heads
          loadW2spHeads()
        ];

        // Get difficulties (expert mode only)
        if (data.expertMode) {
          initJobs.push(loadDifficulties());
        }

        return $q.all(initJobs)
          .then(function(){
            // online nodes
            if (data.filter.online) {
              /*return data.bma.network.peering.peers({leaves: true})
                .then(function(res){
                  return $q.all(res.leaves.map(function(leaf) {
                    return data.bma.network.peering.peers({ leaf: leaf })
                      .then(function(subres){
                        return addOrRefreshPeerFromJson(subres.leaf.value, newPeers);
                      });
                  }));
                });*/
              return data.bma.network.peers()
                .then(function(res){
                  var jobs = [];
                  _.forEach(res.peers, function(json) {
                    if (json.status == 'UP') {
                      jobs.push(addOrRefreshPeerFromJson(json, newPeers));

                      // Mark WS2P
                      _.forEach(json.endpoints||[], function(ep) {
                        if (ep.startsWith('WS2P')) {
                          var key = json.pubkey + '-' + ep.split(' ')[1];
                          if (data.ws2pHeads[key]) {
                            data.ws2pHeads[key].hasEndpoint = true;
                          }
                        }
                      });
                    }
                  });

                  // Add private WS2P endpoints
                  var privateWs2pHeads = _.values(data.ws2pHeads);
                  if (privateWs2pHeads && privateWs2pHeads.length) {
                    var privateEPCount = 0;
                    //console.debug("[http] Found WS2P endpoints without endpoint:", data.ws2pHeads);
                    _.forEach(privateWs2pHeads, function(head) {
                      if (!head.hasEndPoint) {
                        var peer = new Peer({
                          buid: head.buid,
                          currentNumber: head.buid && head.buid.split('-')[0],
                          pubkey: head.pubkey,
                          version: head.version,
                          powPrefix: head.powPrefix,
                          online: true,
                          uid: data.uidsByPubkeys[head.pubkey],
                          bma: {
                            useWs2p: true,
                            private: true,
                            ws2pid: head.ws2pid
                          },
                          endpoints: [
                            // fake endpoint
                            'WS2P ' + head.ws2pid
                          ]
                        });
                        peer.id = peer.keyID();
                        if (peer.uid && data.expertMode && data.difficulties) {
                          peer.difficulty = data.difficulties[peer.uid];
                        }
                        if (applyPeerFilter(peer)) {
                          newPeers.push(peer);
                          privateEPCount++;
                        }
                      }
                    });

                    if (privateEPCount) {
                      console.debug("[http] Found {0} WS2P endpoints without endpoint (private ?)".format(privateEPCount));
                    }
                  }

                  if (jobs.length) return $q.all(jobs);
                })
                .catch(function(err) {
                  // Log and continue
                  console.error(err);
                });
            }

            // offline nodes
            return data.bma.network.peers()
              .then(function(res){
                var jobs = [];
                _.forEach(res.peers, function(json) {
                  if (json.status !== 'UP') {
                    jobs.push(addOrRefreshPeerFromJson(json, newPeers));
                  }
                });
                if (jobs.length) return $q.all(jobs);
              });
          })

          .then(function(){
            data.searchingPeersOnNetwork = false;
          })
          .catch(function(err){
            console.error(err);
            data.searchingPeersOnNetwork = false;
          });
      },

      /**
       * Apply filter on a peer. (peer uid should have been filled BEFORE)
       */
      applyPeerFilter = function(peer) {
        // no filter
        if (!data.filter) return true;

        // Filter member and mirror
        if ((data.filter.member && !data.filter.mirror && !peer.uid) ||
            (data.filter.mirror && !data.filter.member && peer.uid)) {
          return false;
        }

        // Filter on endpoints
        if (data.filter.endpointFilter && !peer.hasEndpoint(data.filter.endpointFilter)) {
          return false;
        }

        // Filter on status
        if (!data.filter.online && peer.status == 'UP') {
          return false;
        }

        // Filter on ssl
        if (angular.isDefined(data.filter.ssl) && peer.isSsl() != data.filter.ssl) {
          return false;
        }

        // Filter on tor
        if (angular.isDefined(data.filter.tor) && peer.isTor() != data.filter.tor) {
          return false;
        }

        return true;
      },

      addOrRefreshPeerFromJson = function(json, list) {
        list = list || data.newPeers;

        var peers = createPeerEntities(json);
        var hasUpdates = false;

        var jobs = peers.reduce(function(jobs, peer) {
            var existingPeer = _.findWhere(data.peers, {id: peer.id});
            var existingMainBuid = existingPeer ? existingPeer.buid : null;
            var existingOnline = existingPeer ? existingPeer.online : false;

            return jobs.concat(
              refreshPeer(peer)
                .then(function (refreshedPeer) {
                  if (existingPeer) {
                    // remove existing peers, when reject or offline
                    if (!refreshedPeer || (refreshedPeer.online !== data.filter.online && data.filter.online !== 'all')) {
                      console.debug('[network] Peer [{0}] removed (cause: {1})'.format(peer.server, !refreshedPeer ? 'filtered' : (refreshedPeer.online ? 'UP': 'DOWN')));
                      data.peers.splice(data.peers.indexOf(existingPeer), 1);
                      hasUpdates = true;
                    }
                    else if (refreshedPeer.buid !== existingMainBuid){
                      console.debug('[network] {0} endpoint [{1}] new current block'.format(
                        refreshedPeer.bma.useBma ? 'BMA' : 'WS2P',
                        refreshedPeer.server));
                      hasUpdates = true;
                    }
                    else if (existingOnline !== refreshedPeer.online){
                      console.debug('[network] {0} endpoint [{1}] is now {2}'.format(
                        refreshedPeer.bma.useBma ? 'BMA' : 'WS2P',
                        refreshedPeer.server,
                        refreshedPeer.online ? 'UP' : 'DOWN'));
                      hasUpdates = true;
                    }
                    else {
                      console.debug("[network] {0} endpoint [{1}] unchanged".format(
                        refreshedPeer.bma.useBma ? 'BMA' : 'WS2P',
                        refreshedPeer.server));
                    }
                  }
                  else if (refreshedPeer && (refreshedPeer.online === data.filter.online || data.filter.online === 'all')) {
                    console.debug("[network] {0} endpoint [{1}] is {2}".format(
                      refreshedPeer.bma.useBma ? 'BMA' : 'WS2P',
                      refreshedPeer.server,
                      refreshedPeer.online ? 'UP' : 'DOWN'
                    ));
                    list.push(refreshedPeer);
                    hasUpdates = true;
                  }
                })
           );
        }, []);
        return (jobs.length === 1 ? jobs[0] : $q.all(jobs))
          .then(function() {
            return hasUpdates;
          });
      },

      createPeerEntities = function(json, ep) {
        if (!json) return [];
        var peer = new Peer(json);

        // Read bma endpoints
        if (!ep) {
          var endpointsAsString = peer.getEndpoints();
          if (!endpointsAsString) return []; // no BMA

          var endpoints = endpointsAsString.reduce(function (res, epStr) {
            var ep = BMA.node.parseEndPoint(epStr);
            return ep ? res.concat(ep) : res;
          }, []);

          // recursive call, on each endpoint
          if (endpoints.length > 1) {
            return endpoints.reduce(function (res, ep) {
              return res.concat(createPeerEntities(json, ep));
            }, []);
          }

          // if only one bma endpoint: use it and continue
          ep = endpoints[0];
        }
        peer.bma = ep;
        peer.server = peer.getServer();
        peer.dns = peer.getDns();
        peer.blockNumber = peer.block.replace(/-.+$/, '');
        peer.uid = data.uidsByPubkeys[peer.pubkey];
        peer.id = peer.keyID();
        return [peer];
      },

      refreshPeer = function(peer) {

        // Apply filter
        if (!applyPeerFilter(peer)) return $q.when();

        if (!data.filter.online || (data.filter.online === 'all' && peer.status === 'DOWN') || !peer.getHost() /*fix #537*/) {
          peer.online = false;
          return $q.when(peer);
        }

        if (peer.bma.useWs2p && data.ws2pHeads) {
          var ws2pHeadKey = [peer.pubkey, peer.bma.ws2pid].join('-');
          var head = data.ws2pHeads[ws2pHeadKey];
          delete data.ws2pHeads[ws2pHeadKey];
          if (head) {
            peer.buid = head.buid;
            peer.currentNumber=peer.buid && peer.buid.split('-')[0];
            peer.version = head.version;
            peer.powPrefix = head.powPrefix;
          }
          peer.online = !!peer.buid;

          if (peer.uid && data.expertMode && data.difficulties) {
            peer.difficulty = data.difficulties[peer.uid];
          }

          return $q.when(peer);
        }

        // Cesium running in SSL: Do not try to access not SSL node,
        if (!peer.bma.useWs2p && isHttpsMode && !peer.bma.useSsl) {
          peer.online = (peer.status === 'UP');
          peer.buid = constants.UNKNOWN_BUID;
          delete peer.version;

          if (peer.uid && data.expertMode && data.difficulties) {
            peer.difficulty = data.difficulties[peer.uid];
          }

          return $q.when(peer);
        }

        // Do not try to access TOR or WS2P endpoints
        if (peer.bma.useTor || peer.bma.useWs2p) {
          peer.online = (peer.status == 'UP');
          peer.buid = constants.UNKNOWN_BUID;
          delete peer.version;

          if (peer.uid && data.expertMode && data.difficulties) {
            peer.difficulty = data.difficulties[peer.uid];
          }
          return $q.when(peer);
        }

        peer.api = peer.api ||  BMA.lightInstance(peer.getHost(), peer.getPort(), peer.isSsl(), data.timeout);

        // Get current block
        return peer.api.blockchain.current()
          .then(function(block) {
            peer.currentNumber = block.number;
            peer.online = true;
            peer.buid = buid(block);
            peer.medianTime = block.medianTime;
            if (data.knownBlocks.indexOf(peer.buid) === -1) {
              data.knownBlocks.push(peer.buid);
            }
            return peer;
          })
          .catch(function(err) {
            // Special case for currency init (root block not exists): use fixed values
            if (err && err.ucode == BMA.errorCodes.NO_CURRENT_BLOCK) {
              peer.online = true;
              peer.buid = buid({number:0, hash: BMA.constants.ROOT_BLOCK_HASH});
              peer.difficulty  = 0;
              return peer;
            }
            if (!peer.secondTry) {
              var bma = peer.bma || peer.getBMA();
              if (bma.dns && peer.server.indexOf(bma.dns) == -1) {
                // try again, using DNS instead of IPv4 / IPV6
                peer.secondTry = true;
                peer.api = BMA.lightInstance(bma.dns, bma.port, bma.useSsl);
                return refreshPeer(peer); // recursive call
              }
            }

            peer.online=false;
            peer.currentNumber = null;
            peer.buid = null;
            peer.uid = data.uidsByPubkeys[peer.pubkey];
            return peer;
          })
          .then(function(peer) {
            // Exit if offline, or not expert mode or too small device
            if (!data.filter.online || !peer || !peer.online || !data.expertMode) return peer;
            var jobs = [];

            // Get hardship (only for a member peer)
            if (peer.uid) {
              jobs.push(peer.api.blockchain.stats.hardship({pubkey: peer.pubkey})
                .then(function (res) {
                  peer.difficulty = res ? res.level : null;
                })
                .catch(function() {
                  peer.difficulty = null; // continue
                }));
            }

            // Get Version
            jobs.push(peer.api.node.summary()
              .then(function(res){
                peer.version = res && res.duniter && res.duniter.version;
              })
              .catch(function() {
                peer.version = '?'; // continue
              }));

            return $q.all(jobs)
              .then(function(){
                return peer;
              });
          });
      },

      flushNewPeersAndSort = function(newPeers, updateMainBuid) {
        newPeers = newPeers || data.newPeers;
        if (!newPeers.length) return;
        var ids = _.map(data.peers, function(peer){
          return peer.id;
        });
        var hasUpdates = false;
        var newPeersAdded = 0;
        _.forEach(newPeers.splice(0), function(peer) {
          if (!ids[peer.id]) {
            data.peers.push(peer);
            ids[peer.id] = peer;
            hasUpdates = true;
            newPeersAdded++;
          }
        });
        if (hasUpdates) {
          console.debug('[network] Flushing {0} new peers...'.format(newPeersAdded));
          sortPeers(updateMainBuid);
        }
      },

      computeScoreAlphaValue = function(value, nbChars, asc) {
        if (!value) return 0;
        var score = 0;
        value = value.toLowerCase();
        if (nbChars > value.length) {
          nbChars = value.length;
        }
        score += value.charCodeAt(0);
        for (var i=1; i < nbChars; i++) {
          score += Math.pow(0.001, i) * value.charCodeAt(i);
        }
        return asc ? (1000 - score) : score;
      },

      sortPeers = function(updateMainBuid) {
        // Construct a map of buid, with peer count and medianTime
        var buids = {};
        data.memberPeersCount = 0;
        _.forEach(data.peers, function(peer){
          if (peer.buid) {
            var buid = buids[peer.buid];
            if (!buid || !buid.medianTime) {
              buid = {
                buid: peer.buid,
                count: 0,
                medianTime: peer.medianTime
              };
              buids[peer.buid] = buid;
            }
            // If not already done, try to fill medianTime (need to compute consensusBlockDelta)
            else if (!buid.medianTime && peer.medianTime) {
              buid.medianTime = peer.medianTime;
            }
            if (buid.buid != constants.UNKNOWN_BUID) {
              buid.count++;
            }
          }
          data.memberPeersCount += peer.uid ? 1 : 0;
        });
        // Compute pct of use, per buid
        _.forEach(_.values(buids), function(buid) {
          buid.pct = buid.count * 100 / data.peers.length;
        });
        var mainBlock = _.max(buids, function(obj) {
          return obj.count;
        });
        _.forEach(data.peers, function(peer){
          peer.hasMainConsensusBlock = peer.buid == mainBlock.buid;
          peer.hasConsensusBlock = peer.buid && !peer.hasMainConsensusBlock && buids[peer.buid].count > 1;
          if (peer.hasConsensusBlock) {
            peer.consensusBlockDelta = buids[peer.buid].medianTime - mainBlock.medianTime;
          }
        });
        data.peers = _.uniq(data.peers, false, function(peer) {
          return peer.id;
        });
        data.peers = _.sortBy(data.peers, function(peer) {
          var score = 0;
          if (data.sort.type) {
            var sortScore = 0;
            sortScore += (data.sort.type == 'uid' ? computeScoreAlphaValue(peer.uid||peer.pubkey, 3, data.sort.asc) : 0);
            sortScore += (data.sort.type == 'api') &&
              ((peer.isWs2p() && (data.sort.asc ? 1 : -1) || 0) +
              (peer.hasEndpoint('ES_USER_API') && (data.sort.asc ? 0.01 : -0.01) || 0) +
              (peer.isSsl() && (data.sort.asc ? 0.75 : -0.75) || 0)) || 0;
            sortScore += (data.sort.type == 'difficulty' ? (peer.difficulty ? (data.sort.asc ? (10000-peer.difficulty) : peer.difficulty): 0) : 0);
            sortScore += (data.sort.type == 'current_block' ? (peer.currentNumber ? (data.sort.asc ? (1000000000 - peer.currentNumber) : peer.currentNumber) : 0) : 0);
            score += (10000000000 * sortScore);
          }
          score += (1000000000 * (peer.online ? 1 : 0));
          score += (100000000  * (peer.hasMainConsensusBlock ? 1 : 0));
          score += (1000000    * (peer.hasConsensusBlock ? buids[peer.buid].pct : 0));
          if (data.expertMode) {
            score += (100     * (peer.difficulty ? (10000-peer.difficulty) : 0));
            score += (1       * (peer.uid ? computeScoreAlphaValue(peer.uid, 2, true) : 0));
          }
          else {
            score += (100     * (peer.uid ? computeScoreAlphaValue(peer.uid, 2, true) : 0));
            score += (1       * (!peer.uid ? computeScoreAlphaValue(peer.pubkey, 2, true) : 0));
          }
          return -score;
        });

        // Raise event on new main block
        if (updateMainBuid && mainBlock.buid && (!data.mainBlock || data.mainBlock.buid !== mainBlock.buid)) {
          data.mainBlock = mainBlock;
          api.data.raise.mainBlockChanged(mainBlock);
        }

        // Raise event when changed
        api.data.raise.changed(data); // raise event
      },

      removeListeners = function() {
        _.forEach(data.listeners, function(remove){
          remove();
        });
        data.listeners = [];
      },

      addListeners = function() {
        data.listeners = [

          // Listen for new block
          data.bma.websocket.block().onListener(function(block) {
            if (!block || data.loading) return;
            var buid = [block.number, block.hash].join('-');
            if (data.knownBlocks.indexOf(buid) === -1) {
              console.debug('[network] Receiving block: ' + buid.substring(0, 20));
              data.knownBlocks.push(buid);
              // If first block: do NOT refresh peers (will be done in start() method)
              var skipRefreshPeers = data.knownBlocks.length === 1;
              if (!skipRefreshPeers) {
                data.loading = true;
                // We wait 2s when a new block is received, just to wait for network propagation
                $timeout(function() {
                  console.debug('[network] new block received by WS: will refresh peers');
                  loadPeers();
                }, 2000, false /*invokeApply*/);
              }
            }
          }),

          // Listen for new peer
          data.bma.websocket.peer().onListener(function(json) {
            if (!json || data.loading) return;
            var newPeers = [];
            addOrRefreshPeerFromJson(json, newPeers)
              .then(function(hasUpdates) {
                if (!hasUpdates) return;
                if (newPeers.length>0) {
                  flushNewPeersAndSort(newPeers, true);
                }
                else {
                  console.debug('[network] [ws] Peers updated received');
                  sortPeers(true);
                }
              });
          })
        ];
      },

      sort = function(options) {
        options = options || {};
        data.filter = options.filter ? angular.merge(data.filter, options.filter) : data.filter;
        data.sort = options.sort ? angular.merge(data.sort, options.sort) : data.sort;
        sortPeers(false);
      },

      start = function(bma, options) {
        options = options || {};
        return BMA.ready()
          .then(function() {
            close();
            data.bma = bma ? bma : BMA;
            data.filter = options.filter ? angular.merge(data.filter, options.filter) : data.filter;
            data.sort = options.sort ? angular.merge(data.sort, options.sort) : data.sort;
            data.expertMode = angular.isDefined(options.expertMode) ? options.expertMode : data.expertMode;
            data.timeout = angular.isDefined(options.timeout) ? options.timeout : csConfig.timeout;
            console.info('[network] Starting network from [{0}]'.format(bma.server));
            var now = new Date().getTime();

            addListeners();

            return loadPeers()
              .then(function(peers){
                console.debug('[network] Started in '+(new Date().getTime() - now)+'ms');
                return peers;
              });
          });
      },

      close = function() {
        if (data.bma) {
          console.info('[network-service] Stopping...');
          removeListeners();
          resetData();
        }
      },

      isStarted = function() {
        return !data.bma;
      },

      $q_started = function(callback) {
        if (!isStarted()) { // start first
          return start()
            .then(function() {
              return $q(callback);
            });
        }
        else {
          return $q(callback);
        }
      },

      getMainBlockUid = function() {
        return $q_started(function(resolve, reject){
          resolve (data.mainBuid);
        });
      },

      // Get peers on the main consensus blocks
      getTrustedPeers = function() {
        return $q_started(function(resolve, reject){
          resolve(data.peers.reduce(function(res, peer){
            return (peer.hasMainConsensusBlock && peer.uid) ? res.concat(peer) : res;
          }, []));
        });
      }
      ;

    // Register extension points
    api.registerEvent('data', 'changed');
    api.registerEvent('data', 'mainBlockChanged');
    api.registerEvent('data', 'rollback');

    return {
      id: id,
      data: data,
      start: start,
      close: close,
      hasPeers: hasPeers,
      getPeers: getPeers,
      sort: sort,
      getTrustedPeers: getTrustedPeers,
      getKnownBlocks: getKnownBlocks,
      getMainBlockUid: getMainBlockUid,
      loadPeers: loadPeers,
      isBusy: isBusy,
      // api extension
      api: api
    };
  };

  var service = factory('default');

  service.instance = factory;
  return service;
}]);

//var Base58, Base64, scrypt_module_factory = null, nacl_factory = null;

angular.module('cesium.crypto.services', ['cesium.utils.services'])

  .factory('CryptoUtils', ['$q', '$timeout', 'ionicReady', function($q, $timeout, ionicReady) {
    'ngInject';

    /**
     * CryptoAbstract, abstract class with useful methods
     * @type {number}
     */
    function CryptoAbstractService() {
      this.loaded = false;
      var that = this;

      this.copy = function(source) {
        _.forEach(_.keys(source), function(key) {
          that[key] = source[key];
        });
      };

      this.isLoaded = function() {
        return this.loaded;
      };

      this.util = this.util || {};

      /**
       * Converts an array buffer to a string
       *
       * @private
       * @param {ArrayBuffer} buf The buffer to convert
       * @param {Function} callback The function to call when conversion is complete
       */
      this.util.array_to_string = function(buf, callback) {
        var bb = new Blob([new Uint8Array(buf)]);
        var f = new FileReader();
        f.onload = function(e) {
          callback(e.target.result);
        };
        f.readAsText(bb);
      };
    }

    CryptoAbstractService.prototype.constants = {
      crypto_sign_BYTES: 64,
      crypto_secretbox_NONCEBYTES: 24,
      crypto_box_MACBYTES: 16,
      SEED_LENGTH: 32, // Length of the key
      SCRYPT_PARAMS:{
        SIMPLE: {
          N: 2048,
          r: 8,
          p: 1,
          memory: -1 // default
        },
        DEFAULT: {
          N: 4096,
          r: 16,
          p: 1,
          memory: -1 // default
        },
        SECURE: {
          N: 16384,
          r: 32,
          p: 2,
          memory: -1 // default
        },
        HARDEST: {
          N: 65536,
          r: 32,
          p: 4,
          memory: -1 // default
        },
        EXTREME: {
          N: 262144,
          r: 64,
          p: 8,
          memory: -1 // default
        }
      }
    };

    CryptoAbstractService.prototype.async_load_base58 = function(on_ready) {
      var that = this;
      if (Base58 !== null){return on_ready(Base58);}
      else {$timeout(function(){that.async_load_base58(on_ready);}, 100);}
    };

    CryptoAbstractService.prototype.async_load_scrypt = function(on_ready, options) {
      var that = this;
      if (scrypt_module_factory !== null){
        on_ready(scrypt_module_factory(options.requested_total_memory));
        that.scrypt.requested_total_memory = options.requested_total_memory;
        //console.log('inside async_load_scrypt', that); // TODO manage memory changes
      }
      else {$timeout(function(){that.async_load_scrypt(on_ready, options);}, 100);}
    };

    CryptoAbstractService.prototype.async_load_nacl_js = function(on_ready, options) {
      var that = this;
      if (nacl_factory !== null) {nacl_factory.instantiate(on_ready, options);}
      else {$timeout(function(){that.async_load_nacl_js(on_ready, options);}, 100);}
    };

    CryptoAbstractService.prototype.async_load_base64 = function(on_ready) {
      var that = this;
      if (Base64 !== null) {on_ready(Base64);}
      else {$timetout(function(){that.async_load_base64(on_ready);}, 100);}
    };

    CryptoAbstractService.prototype.async_load_sha256 = function(on_ready) {
      var that = this;
      if (sha256 !== null){return on_ready(sha256);}
      else {$timeout(function(){that.async_load_sha256(on_ready);}, 100);}
    };

    CryptoAbstractService.prototype.seed_from_signSk = function(signSk) {
      var that = this;
      var seed = new Uint8Array(that.constants.SEED_LENGTH);
      for (var i = 0; i < seed.length; i++) seed[i] = signSk[i];
      return seed;
    };

    // Web crypto API - see https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API
    var crypto =  window.crypto || window.msCrypto || window.Crypto;
    if (crypto && crypto.getRandomValues) {
      CryptoAbstractService.prototype.crypto = crypto;
      CryptoAbstractService.prototype.util = {};
      CryptoAbstractService.prototype.util.random_nonce = function() {
        var nonce = new Uint8Array(crypto_secretbox_NONCEBYTES);
        this.crypto.getRandomValues(nonce);
        return $q.when(nonce);
      };
    }
    else {
      // TODO: add a default function ?
      //CryptoAbstractService.prototype.random_nonce = function() {
      // var nonce = new Uint8Array(crypto_secretbox_NONCEBYTES);
      // var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
      // for(var i = 0; i < length; i++) {
      //   text += possible.charAt(Math.floor(Math.random() * possible.length));
      // }
      //}
    }

    function FullJSServiceFactory() {
      this.id = 'FullJS';

      // libraries handlers
      this.scrypt = null;
      this.nacl = null;
      this.base58 = null;
      this.base64 = null;
      var that = this;

      this.util = this.util || {};
      this.util.decode_utf8 = function (s) {
        var i, d = unescape(encodeURIComponent(s)), b = new Uint8Array(d.length);
        for (i = 0; i < d.length; i++) b[i] = d.charCodeAt(i);
        return b;
      };
      this.util.encode_utf8 = function (s) {
        return that.nacl.encode_utf8(s);
      };
      this.util.encode_base58 = function (a) { // TODO : move to abstract factory
        return that.base58.encode(a);
      };
      this.util.decode_base58 = function (a) { // TODO : move to abstract factory
        var i;
        a = that.base58.decode(a);
        var b = new Uint8Array(a.length);
        for (i = 0; i < a.length; i++) b[i] = a[i];
        return b;
      };
      this.util.decode_base64 = function (a) {
        return that.base64.decode(a);
      };
      this.util.encode_base64 = function (b) {
        return that.base64.encode(b);
      };

      this.util.hash_sha256 = function (message) {
        return $q(function (resolve) {
          var msg = that.util.decode_utf8(message);
          var hash = that.nacl.to_hex(that.nacl.crypto_hash_sha256(msg));
          resolve(hash.toUpperCase());
        });
      };
      this.util.random_nonce = function () {
        if (that.crypto && that.crypto.getRandomValues) {
          var nonce = new Uint8Array(that.constants.crypto_secretbox_NONCEBYTES);
          that.crypto.getRandomValues(nonce);
          return $q.when(nonce);
        }
        else {
          return $q.when(that.nacl.crypto_box_random_nonce());
        }
      };
      this.util.crypto_hash_sha256 = function(msg_int8) {
        return that.nacl.crypto_hash_sha256(msg_int8);
      };
      this.util.crypto_scrypt = function(password, salt, N, r, p, seedLength) {
        return $q(function(resolve, reject) {
          try {
            var seed = that.scrypt.crypto_scrypt(
              password,
              salt,
              N,
              r,
              p,
              seedLength);
            resolve(seed);
          }
          catch(err) {
            reject(err);
          }
        });
      };

      /**
       * Compute the box key pair, from a sign key pair
       */
      this.box_keypair_from_sign = function (signKeyPair) {
        if (signKeyPair.boxSk && signKeyPair.boxPk) return $q.when(signKeyPair);
        return $q.when(that.nacl.crypto_box_keypair_from_sign_sk(signKeyPair.signSk));
      };

      /**
       * Compute the box public key, from a sign public key
       */
      this.box_pk_from_sign = function (signPk) {
        return $q.when(that.nacl.crypto_box_pk_from_sign_pk(signPk));
      };

      this.box_sk_from_sign = function (signSk) {
        return $q.when(that.nacl.crypto_box_sk_from_sign_sk(signSk));
      };

      /**
       * Encrypt a message, from a key pair
       */
      this.box = function(message, nonce, recipientPk, senderSk) {
        return $q(function (resolve, reject) {
          if (!message) {
            resolve(message);
            return;
          }
          var messageBin = that.util.decode_utf8(message);
          if (typeof recipientPk === "string") {
            recipientPk = that.util.decode_base58(recipientPk);
          }

          //console.debug('Original message: ' + message);
          try {
            var ciphertextBin = that.nacl.crypto_box(messageBin, nonce, recipientPk, senderSk);
            var ciphertext = that.util.encode_base64(ciphertextBin);

            //console.debug('Encrypted message: ' + ciphertext);
            resolve(ciphertext);
          }
          catch (err) {
            reject(err);
          }
        });
      };

      /**
       * Decrypt a message, from a key pair
       */
      this.box_open = function (cypherText, nonce, senderPk, recipientSk) {
        return $q(function (resolve, reject) {
          if (!cypherText) {
            resolve(cypherText);
            return;
          }
          var ciphertextBin = that.util.decode_base64(cypherText);
          if (typeof senderPk === "string") {
            senderPk = that.util.decode_base58(senderPk);
          }

          try {
            var message = that.nacl.crypto_box_open(ciphertextBin, nonce, senderPk, recipientSk);
            that.util.array_to_string(message, function (result) {
              //console.debug('Decrypted text: ' + result);
              resolve(result);
            });
          }
          catch (err) {
            reject(err);
          }

        });
      };

      /**
       * Create key pairs (sign and box), from salt+password (Scrypt auth)
       */
      this.scryptKeypair = function(salt, password, scryptParams) {
        return $q(function(resolve, reject) {
          var seed = that.scrypt.crypto_scrypt(
            that.util.encode_utf8(password),
            that.util.encode_utf8(salt),
            scryptParams && scryptParams.N || that.constants.SCRYPT_PARAMS.DEFAULT.N,
            scryptParams && scryptParams.r || that.constants.SCRYPT_PARAMS.DEFAULT.r,
            scryptParams && scryptParams.p || that.constants.SCRYPT_PARAMS.DEFAULT.p,
            that.constants.SEED_LENGTH);
          var signKeypair = that.nacl.crypto_sign_seed_keypair(seed);
          var boxKeypair = that.nacl.crypto_box_seed_keypair(seed);
          resolve({
            signPk: signKeypair.signPk,
            signSk: signKeypair.signSk,
            boxPk: boxKeypair.boxPk,
            boxSk: boxKeypair.boxSk
          });
        });
      };

      /**
       * Create key pairs from a seed
       */
      this.seedKeypair = function(seed) {
        return $q(function(resolve, reject) {
          var signKeypair = that.nacl.crypto_sign_seed_keypair(seed);
          var boxKeypair = that.nacl.crypto_box_seed_keypair(seed);
          resolve({
            signPk: signKeypair.signPk,
            signSk: signKeypair.signSk,
            boxPk: boxKeypair.boxPk,
            boxSk: boxKeypair.boxSk
          });
        });
      };

      /**
       * Get sign pk from salt+password (scrypt auth)
       */
      this.scryptSignPk = function(salt, password, scryptParams) {
        return $q(function(resolve, reject) {
          try {
            var seed = that.scrypt.crypto_scrypt(
              that.util.encode_utf8(password),
              that.util.encode_utf8(salt),
              scryptParams && scryptParams.N || that.constants.SCRYPT_PARAMS.DEFAULT.N,
              scryptParams && scryptParams.r || that.constants.SCRYPT_PARAMS.DEFAULT.r,
              scryptParams && scryptParams.p || that.constants.SCRYPT_PARAMS.DEFAULT.p,
              that.constants.SEED_LENGTH);
            var signKeypair = that.nacl.crypto_sign_seed_keypair(seed);
            resolve(signKeypair.signPk);
          }
          catch(err) {
            reject(err);
          }
        });
      };

      /**
       * Verify a signature of a message, for a pubkey
       */
      this.verify = function (message, signature, pubkey) {
        return $q(function(resolve, reject) {
          var msg = that.util.decode_utf8(message);
          var sig = that.util.decode_base64(signature);
          var pub = that.util.decode_base58(pubkey);
          var sm = new Uint8Array(that.constants.crypto_sign_BYTES + msg.length);
          var i;
          for (i = 0; i < that.constants.crypto_sign_BYTES; i++) sm[i] = sig[i];
          for (i = 0; i < msg.length; i++) sm[i+that.constants.crypto_sign_BYTES] = msg[i];

          // Call to verification lib...
          var verified = that.nacl.crypto_sign_open(sm, pub) !== null;
          resolve(verified);
        });
      };

      /**
       * Sign a message, from a key pair
       */
      this.sign = function(message, keypair) {
        return $q(function(resolve, reject) {
          var m = that.util.decode_utf8(message);
          var sk = keypair.signSk;
          var signedMsg = that.nacl.crypto_sign(m, sk);
          var sig = new Uint8Array(that.constants.crypto_sign_BYTES);
          for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];
          var signature = that.base64.encode(sig);
          resolve(signature);
        });
      };

      this.load = function() {
        var deferred = $q.defer();
        var naclOptions = {};
        var scryptOptions = {};
        if (ionic.Platform.grade.toLowerCase()!='a') {
          console.info('Reduce NaCl memory because plateform grade is not [a] but [' + ionic.Platform.grade + ']');
          naclOptions.requested_total_memory = 16 * 1048576; // 16 Mo
        }
        var loadedLib = 0;
        var checkAllLibLoaded = function() {
          loadedLib++;
          if (loadedLib === 4) {
            that.loaded = true;
            deferred.resolve();
          }
        };
        this.async_load_nacl_js(function(lib) {
          that.nacl = lib;
          checkAllLibLoaded();
        }, naclOptions);
        this.async_load_scrypt(function(lib) {
          that.scrypt = lib;
          checkAllLibLoaded();
        }, scryptOptions);
        this.async_load_base58(function(lib) {
          that.base58 = lib;
          checkAllLibLoaded();
        });
        this.async_load_base64(function(lib) {
          that.base64 = lib;
          checkAllLibLoaded();
        });
        return deferred.promise;
      };

      // Shortcuts
      this.util.hash = that.util.hash_sha256;
      this.box = {
        keypair: {
          fromSignKeypair: that.box_keypair_from_sign,
          skFromSignSk: that.box_sk_from_sign,
          pkFromSignPk: that.box_pk_from_sign
        },
        pack: that.box,
        open: that.box_open
      };
    }
    FullJSServiceFactory.prototype = new CryptoAbstractService();


    /* -----------------------------------------------------------------------------------------------------------------
     * Service that use Cordova MiniSodium plugin
     * ----------------------------------------------------------------------------------------------------------------*/

    /***
     * Factory for crypto, using Cordova plugin
     */
    function CordovaServiceFactory() {

      this.id = 'MiniSodium';

      // libraries handlers
      this.nacl = null; // the cordova plugin
      this.base58= null;
      this.sha256= null;
      var that = this;

      // functions
      this.util = this.util || {};
      this.util.decode_utf8 = function(s) {
        return that.nacl.to_string(s);
      };
      this.util.encode_utf8 = function(s) {
        return that.nacl.from_string(s);
      };
      this.util.encode_base58 = function(a) {
        return that.base58.encode(a);
      };
      this.util.decode_base58 = function(a) {
        var i;
        a = that.base58.decode(a);
        var b = new Uint8Array(a.length);
        for (i = 0; i < a.length; i++) b[i] = a[i];
        return b;
      };
      this.util.decode_base64 = function (a) {
        return that.nacl.from_base64(a);
      };
      this.util.encode_base64 = function (b) {
        return that.nacl.to_base64(b);
      };
      this.util.hash_sha256 = function(message) {
        return $q.when(that.sha256(message).toUpperCase());
      };
      this.util.random_nonce = function() {
        var nonce = new Uint8Array(that.constants.crypto_secretbox_NONCEBYTES);
        that.crypto.getRandomValues(nonce);
        return $q.when(nonce);
      };
      this.util.crypto_hash_sha256 = function (message) {
        return that.nacl.from_hex(that.sha256(message));
      };

      this.util.crypto_scrypt = function(password, salt, N, r, p, seedLength) {
        var deferred = $q.defer();
        that.nacl.crypto_pwhash_scryptsalsa208sha256_ll(
          password,
          salt,
          N,
          r,
          p,
          seedLength,
          function (err, seed) {
            if (err) { deferred.reject(err); return;}
            deferred.resolve(seed);
          }
        );
        return deferred.promise;
      };

      /**
       * Create key pairs (sign and box), from salt+password (Scrypt), using cordova
       */
      this.scryptKeypair = function(salt, password, scryptParams) {
        var deferred = $q.defer();

        that.nacl.crypto_pwhash_scryptsalsa208sha256_ll(
          that.nacl.from_string(password),
          that.nacl.from_string(salt),
          scryptParams && scryptParams.N || that.constants.SCRYPT_PARAMS.DEFAULT.N,
          scryptParams && scryptParams.r || that.constants.SCRYPT_PARAMS.DEFAULT.r,
          scryptParams && scryptParams.p || that.constants.SCRYPT_PARAMS.DEFAULT.p,
          that.constants.SEED_LENGTH,
          function (err, seed) {
            if (err) { deferred.reject(err); return;}

            that.nacl.crypto_sign_seed_keypair(seed, function (err, signKeypair) {
              if (err) { deferred.reject(err); return;}
              var result = {
                signPk: signKeypair.pk,
                signSk: signKeypair.sk
              };
              that.box_keypair_from_sign(result)
                .then(function(boxKeypair) {
                  result.boxPk = boxKeypair.pk;
                  result.boxSk = boxKeypair.sk;
                  deferred.resolve(result);
                })
                .catch(function(err) {
                  deferred.reject(err);
                });
            });

          }
        );

        return deferred.promise;
      };

      /**
       * Create key pairs from a seed
       */
      this.seedKeypair = function(seed) {
        var deferred = $q.defer();

        that.nacl.crypto_sign_seed_keypair(seed, function (err, signKeypair) {
          if (err) { deferred.reject(err); return;}
          deferred.resolve({
            signPk: signKeypair.pk,
            signSk: signKeypair.sk
          });
        });
        return deferred.promise;
      };


      /**
       * Get sign PK from salt+password (Scrypt), using cordova
       */
      this.scryptSignPk = function(salt, password, scryptParams) {
        var deferred = $q.defer();

        that.nacl.crypto_pwhash_scryptsalsa208sha256_ll(
          that.nacl.from_string(password),
          that.nacl.from_string(salt),
          scryptParams && scryptParams.N || that.constants.SCRYPT_PARAMS.DEFAULT.N,
          scryptParams && scryptParams.r || that.constants.SCRYPT_PARAMS.DEFAULT.r,
          scryptParams && scryptParams.p || that.constants.SCRYPT_PARAMS.DEFAULT.p,
          that.constants.SEED_LENGTH,
          function (err, seed) {
            if (err) { deferred.reject(err); return;}

            that.nacl.crypto_sign_seed_keypair(seed, function (err, signKeypair) {
              if (err) { deferred.reject(err); return;}
              deferred.resolve(signKeypair.pk);
            });

          }
        );

        return deferred.promise;
      };

      /**
       * Verify a signature of a message, for a pubkey
       */
      this.verify = function (message, signature, pubkey) {
        var deferred = $q.defer();
        that.nacl.crypto_sign_verify_detached(
          that.nacl.from_base64(signature),
          that.nacl.from_string(message),
          that.nacl.from_base64(pubkey),
          function(err, verified) {
            if (err) { deferred.reject(err); return;}
            deferred.resolve(verified);
          });
        return deferred.promise;
      };

      /**
       * Sign a message, from a key pair
       */
      this.sign = function(message, keypair) {
        var deferred = $q.defer();

        that.nacl.crypto_sign(
          that.nacl.from_string(message), // message
          keypair.signSk, // sk
          function(err, signedMsg) {
            if (err) { deferred.reject(err); return;}
            var sig;
            if (signedMsg.length > that.constants.crypto_sign_BYTES) {
              sig = new Uint8Array(that.constants.crypto_sign_BYTES);
              for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];
            }
            else {
              sig = signedMsg;
            }
            var signature = that.nacl.to_base64(sig);
            deferred.resolve(signature);
          });

        return deferred.promise;
      };

      /**
       * Compute the box key pair, from a sign key pair
       */
      this.box_keypair_from_sign = function(signKeyPair) {
        if (signKeyPair.boxSk && signKeyPair.boxPk) return $q.when(signKeyPair);
        var deferred = $q.defer();
        var result = {};
        that.nacl.crypto_sign_ed25519_pk_to_curve25519(signKeyPair.signPk, function(err, boxPk) {
          if (err) { deferred.reject(err); return;}
          result.boxPk = boxPk;
          if (result.boxSk) deferred.resolve(result);
        });
        that.nacl.crypto_sign_ed25519_sk_to_curve25519(signKeyPair.signSk, function(err, boxSk) {
          if (err) { deferred.reject(err); return;}
          result.boxSk = boxSk;
          if (result.boxPk) deferred.resolve(result);
        });

        return deferred.promise;
      };

      /**
       * Compute the box public key, from a sign public key
       */
      this.box_pk_from_sign = function(signPk) {
        var deferred = $q.defer();
        that.nacl.crypto_sign_ed25519_pk_to_curve25519(signPk, function(err, boxPk) {
          if (err) { deferred.reject(err); return;}
          deferred.resolve(boxPk);
        });
        return deferred.promise;
      };

      /**
       * Compute the box secret key, from a sign secret key
       */
      this.box_sk_from_sign = function(signSk) {
        var deferred = $q.defer();
        that.nacl.crypto_sign_ed25519_sk_to_curve25519(signSk, function(err, boxSk) {
          if (err) { deferred.reject(err); return;}
          deferred.resolve(boxSk);
        });
        return deferred.promise;
      };

      /**
       * Encrypt a message, from a key pair
       */
      this.box = function(message, nonce, recipientPk, senderSk) {
        if (!message) {
          return $q.reject('No message');
        }
        var deferred = $q.defer();

        var messageBin = that.nacl.from_string(message);
        if (typeof recipientPk === "string") {
          recipientPk = that.util.decode_base58(recipientPk);
        }

        that.nacl.crypto_box_easy(messageBin, nonce, recipientPk, senderSk, function(err, ciphertextBin) {
          if (err) { deferred.reject(err); return;}
          var ciphertext = that.util.encode_base64(ciphertextBin);
          //console.debug('Encrypted message: ' + ciphertext);
          deferred.resolve(ciphertext);
        });
        return deferred.promise;
      };

      /**
       * Decrypt a message, from a key pair
       */
      this.box_open = function(cypherText, nonce, senderPk, recipientSk) {
        if (!cypherText) {
          return $q.reject('No cypherText');
        }
        var deferred = $q.defer();

        var ciphertextBin = that.nacl.from_base64(cypherText);
        if (typeof senderPk === "string") {
          senderPk = that.util.decode_base58(senderPk);
        }

        // Avoid crash if content has not the minimal length - Fix #346
        if (ciphertextBin.length < that.constants.crypto_box_MACBYTES) {
          deferred.reject('Invalid cypher content length');
          return;
        }

        that.nacl.crypto_box_open_easy(ciphertextBin, nonce, senderPk, recipientSk, function(err, message) {
          if (err) { deferred.reject(err); return;}
          that.util.array_to_string(message, function(result) {
            //console.debug('Decrypted text: ' + result);
            deferred.resolve(result);
          });
        });

        return deferred.promise;
      };

      this.load = function() {
        var deferred = $q.defer();
        if (!window.plugins || !window.plugins.MiniSodium) {
          deferred.reject("Cordova plugin 'MiniSodium' not found. Please load Full JS implementation instead.");
        }
        else {
          that.nacl = window.plugins.MiniSodium;

          var loadedLib = 0;
          var checkAllLibLoaded = function() {
            loadedLib++;
            if (loadedLib == 2) {
              that.loaded = true;
              deferred.resolve();
            }
          };
          that.async_load_base58(function(lib) {
            that.base58 = lib;
            checkAllLibLoaded();
          });
          that.async_load_sha256(function(lib) {
            that.sha256 = lib;
            checkAllLibLoaded();
          });
        }

        return deferred.promise;
      };

      // Shortcuts
      this.util.hash = that.util.hash_sha256;
      this.box = {
        keypair: {
          fromSignKeypair: that.box_keypair_from_sign,
          skFromSignSk: that.box_sk_from_sign,
          pkFromSignPk: that.box_pk_from_sign
        },
        pack: that.box,
        open: that.box_open
      };
    }
    CordovaServiceFactory.prototype = new CryptoAbstractService();

    /* -----------------------------------------------------------------------------------------------------------------
     * Create service instance
     * ----------------------------------------------------------------------------------------------------------------*/


    var service = new CryptoAbstractService();

    var isDevice = true;
    // removeIf(android)
    // removeIf(ios)
    isDevice = false;
    // endRemoveIf(ios)
    // endRemoveIf(android)

    //console.debug("[crypto] Created CryptotUtils service. device=" + isDevice);

    ionicReady().then(function() {
      console.debug('[crypto] Starting...');
      var now = new Date().getTime();

      var serviceImpl;

      // Use Cordova plugin implementation, when exists
      if (isDevice && window.plugins && window.plugins.MiniSodium && crypto && crypto.getRandomValues) {
        console.debug('[crypto] Loading Cordova MiniSodium implementation...');
        serviceImpl = new CordovaServiceFactory();
      }
      else {
        console.debug('[crypto] Loading FullJS implementation...');
        serviceImpl = new FullJSServiceFactory();
      }

      // Load (async lib)
      serviceImpl.load()
        .catch(function(err) {
          console.error(err);
          throw err;
        })
        .then(function() {
          service.copy(serviceImpl);
          console.debug('[crypto] Loaded \'{0}\' implementation in {1}ms'.format(service.id, new Date().getTime() - now));
        });

    });


    return service;
  }])


  /* -----------------------------
     Crypto advanced service for Cesium
   */

  .factory('csCrypto', ['$q', '$rootScope', 'CryptoUtils', 'UIUtils', 'Modals', function($q, $rootScope, CryptoUtils, UIUtils, Modals) {
    'ngInject';

    function test(regexpContent) {
      return new RegExp(regexpContent);
    }

    function xor(a, b) {
      var length = Math.max(a.length, b.length);
      var buffer = new Uint8Array(length);
      for (var i = 0; i < length; ++i) {
        buffer[i] = a[i] ^ b[i];
      }
      return buffer;
    }

    function concat_Uint8Array( buffer1, buffer2 ) {
      var tmp = new Uint8Array( buffer1.byteLength + buffer2.byteLength );
      tmp.set( new Uint8Array( buffer1 ), 0 );
      tmp.set( new Uint8Array( buffer2 ), buffer1.byteLength );
      return tmp;
    }

    var constants = {
      WIF: {
        DATA_LENGTH: 35
      },
      EWIF: {
        SALT_LENGTH: 4,
        DERIVED_HALF_LENGTH: 16,
        DATA_LENGTH: 39,
        SCRYPT_PARAMS: {
          N: 16384,
          r: 8,
          p: 8
        }
      },
      REGEXP: {
        PUBKEY: '[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}',
        SECKEY: '[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{86,88}',
        FILE: {
        TYPE_LINE: '^Type: ([a-zA-Z0-9]+)\n',
          VERSION: 'Version: ([0-9]+)\n',
          PUB: '[Pp]ub: ([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44})\n',
          SEC: '[Ss]ec: ([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{86,88})(\n|$)',
          DATA: '[Dd]ata: ([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]+)(\n|$)'
        }
      }
    },
    regexp = {
      FILE: {
        TYPE_LINE: test(constants.REGEXP.FILE.TYPE_LINE),
        VERSION: test(constants.REGEXP.FILE.VERSION),
        PUB: test(constants.REGEXP.FILE.PUB),
        SEC: test(constants.REGEXP.FILE.SEC),
        DATA: test(constants.REGEXP.FILE.DATA)
      }
    },
    errorCodes = {
      BAD_PASSWORD: 3001,
      BAD_CHECKSUM: 3002
    };

    /* -- keyfile -- */

    function readKeyFile(file, options) {

      if (file && file.content) {
        return parseKeyFileContent(file.content, options);
      }

      return $q(function(resolve, reject) {
        if (!file) {
          return reject('Argument [file] is missing');
        }

        //console.debug('[crypto] [keypair] reading file: ', file);
        var reader = new FileReader();
        reader.onload = function (event) {
          parseKeyFileContent(event.target.result, options)
            .then(resolve)
            .catch(reject);
        };
        reader.readAsText(file, 'utf8');
      });
    }

    function parseKeyFileContent(content, options) {

      if (!content) return $q.reject('Argument [content] is missing');

      options = options || {};
      options.withSecret = angular.isDefined(options.withSecret) ? options.withSecret : false;
      options.defaultType = options.defaultType || 'PubSec';

      var matches;

      var typeMatch = regexp.FILE.TYPE_LINE.exec(content);

      // If no Type field: add default type
      var type = typeMatch && typeMatch[1];
      if (!type && options.defaultType) {
        return parseKeyFileContent('Type: {0}\n{1}'.format(options.defaultType, content), options);
      }

      // Type: PubSec
      if (type == 'PubSec') {

        // Read Pub field
        matches = regexp.FILE.PUB.exec(content);
        if (!matches) return $q.reject('Missing [pub] field in file, or invalid public key value');
        var signKeypair = {
          signPk: CryptoUtils.base58.decode(matches[1])
        };
        if (!options.withSecret) return $q.resolve(signKeypair);

        // Read Sec field
        matches= regexp.FILE.SEC.exec(content);
        if (!matches) return $q.reject('Missing [sec] field in file, or invalid secret key value');
        signKeypair.signSk = CryptoUtils.base58.decode(matches[1]);
        return $q.resolve(signKeypair);
      }

      // Type: WIF or EWIF
      else if (type == 'WIF' || type == 'EWIF') {
        matches = regexp.FILE.DATA.exec(content);
        if (!matches) {
          return $q.reject('Missing [Data] field in file. This is required for WIF or EWIF format');
        }

        return parseWIF_or_EWIF(matches[1], {
          type: type,
          password: options.password
        })
          .then(function(signKeypair) {
            return signKeypair && !options.withSecret ? {signPk: signKeypair.signPk} : signKeypair;
          });
      }

      // Type: unknown
      if (options.defaultType) {
        return $q.reject('Bad file format: missing Type field');
      }
      else {
        return $q.reject('Bad file format, unknown type [' + type + ']');
      }
    }


    /**
     *
     * @param data_base58
     * @param options
     * @returns {*}
     */
    function parseWIF_or_EWIF(data_base58, options) {
      options = options || {};

      var data_int8 = CryptoUtils.base58.decode(data_base58);
      if (data_int8.length != constants.EWIF.DATA_LENGTH && data_int8.length != constants.WIF.DATA_LENGTH) {
        return $q.reject('Invalid WIF or EWIF format (invalid bytes count).');
      }

      // Detect the type from the first byte
      options.type = options.type || (data_int8[0] == 1 && 'WIF') || (data_int8[0] == 2 && 'EWIF');

      // Type: WIF
      if (options.type == 'WIF') {
        return parseWIF_v1(data_base58);
      }

      // Type: EWIF
      if (options.type == 'EWIF') {

        // If not set, resolve password using the given callback
        if (typeof options.password == "function") {
          //console.debug("[crypto] [EWIF] Executing 'options.password()' to resolve the password...");
          options.password = options.password();
          if (!options.password) {
            return $q.reject({message: "Invalid callback result for 'options.password()': must return a promise or a string."});
          }
        }

        // If password is a promise, get the result then read data
        if (typeof options.password === "object" && options.password.then) {
          return options.password.then(function(password) {
            if (!password) throw 'CANCELLED';
            return parseEWIF_v1(data_base58, password);
          });
        }

        // If password is a valid string, read data
        if (typeof options.password == "string") {
          return parseEWIF_v1(data_base58, options.password);
        }

        return $q.reject({message: 'Invalid EWIF options.password. Waiting a callback function, a promise or a string.'});
      }

      // Unknown type
      return $q.reject({message: 'Invalid WIF or EWIF format: unknown first byte identifier.'});
    }


    function parseWIF_v1(wif_base58) {
      var wif_int8 = CryptoUtils.util.decode_base58(wif_base58);

      // Check identifier byte = 0x01
      if (wif_int8[0] != 1) {
        return $q.reject({message: 'Invalid WIF v1 format: expected [0x01] as first byte'});
      }

      // Check length
      if (wif_int8.length != constants.WIF.DATA_LENGTH) {
        return $q.reject({message: 'Invalid WIF v1 format: Data must be a '+constants.WIF.DATA_LENGTH+' bytes array, encoded in base 58.'});
      }

      var wif_int8_no_checksum = wif_int8.slice(0, -2),
        seed = wif_int8.slice(1, -2),
        checksum =  wif_int8.slice(-2);

      // Compute expected checksum
      var expectedChecksum = CryptoUtils.util.crypto_hash_sha256(CryptoUtils.util.crypto_hash_sha256(wif_int8_no_checksum)).slice(0,2);
      if (CryptoUtils.util.encode_base58(checksum) != CryptoUtils.util.encode_base58(expectedChecksum)) {
        $q.reject({message: 'Invalid WIF format: bad checksum'});
      }

      // Generate keypair from seed
      return CryptoUtils.seedKeypair(seed);
    }

    function parseEWIF_v1(ewif_base58, password) {
      var ewif_int8 = CryptoUtils.util.decode_base58(ewif_base58);

      // Check identifier byte = 0x02
      if (ewif_int8[0] != 2) {
        return $q.reject({message: 'Invalid EWIF v1 format: Expected [0x02] as first byte'});
      }

      // Check length
      if (ewif_int8.length != constants.EWIF.DATA_LENGTH) {
        return $q.reject({message: 'Invalid EWIF v1 format: Expected {0} bytes, encoded in base 58.'.format(constants.EWIF.DATA_LENGTH)});
      }

      var ewif_int8_no_checksum = ewif_int8.slice(0,-2);
      var checksum = ewif_int8.slice(-2);
      var salt = ewif_int8.slice(1,5);
      var encryptedhalf1 = ewif_int8.slice(5,21);
      var encryptedhalf2 = ewif_int8.slice(21,37);

      // Retrieve the scrypt_seed
      return CryptoUtils.util.crypto_scrypt(
        CryptoUtils.util.encode_utf8(password),
        salt,
        constants.EWIF.SCRYPT_PARAMS.N,
        constants.EWIF.SCRYPT_PARAMS.r,
        constants.EWIF.SCRYPT_PARAMS.p,
        64)

      // Compute the final seed
        .then(function(scrypt_seed) {

          var derivedhalf1 = scrypt_seed.slice(0, 32);
          var derivedhalf2 = scrypt_seed.slice(32, 64);

          //AES
          var aesEcb = new aesjs.ModeOfOperation.ecb(derivedhalf2);
          var decryptedhalf1 = aesEcb.decrypt(encryptedhalf1);
          var decryptedhalf2 = aesEcb.decrypt(encryptedhalf2);

          decryptedhalf1 = new Uint8Array(decryptedhalf1);
          decryptedhalf2 = new Uint8Array(decryptedhalf2);

          //xor
          var seed1 = xor(decryptedhalf1, derivedhalf1.slice(0, 16));
          var seed2 = xor(decryptedhalf2, derivedhalf1.slice(16, 32));
          var seed = concat_Uint8Array(seed1, seed2);

          return seed;
        })

        // Get the keypair, from the seed
        .then(CryptoUtils.seedKeypair)

        // Do some controls
        .then(function(keypair) {

          // Check salt
          var expectedSalt = CryptoUtils.util.crypto_hash_sha256(CryptoUtils.util.crypto_hash_sha256(keypair.signPk)).slice(0,4);
          if(CryptoUtils.util.encode_base58(salt) !== CryptoUtils.util.encode_base58(expectedSalt)) {
            throw {ucode: errorCodes.BAD_PASSWORD, message: 'ERROR.BAD_PASSWORD'};
          }

          // Check checksum
          var expectedChecksum = CryptoUtils.util.crypto_hash_sha256(CryptoUtils.util.crypto_hash_sha256(ewif_int8_no_checksum)).slice(0,2);
          if (CryptoUtils.util.encode_base58(checksum) != CryptoUtils.util.encode_base58(expectedChecksum)) {
            throw {ucode: errorCodes.BAD_CHECKSUM, message: 'ERROR.BAD_CHECKSUM'};
          }

          return keypair;
        });
    }


    function wif_v1_from_keypair(keypair) {

      var seed = CryptoUtils.seed_from_signSk(keypair.signSk);
      if (!seed || seed.byteLength !== CryptoUtils.constants.SEED_LENGTH)
        throw "Bad see format. Expected {0} bytes".format(CryptoUtils.constants.SEED_LENGTH);

      var fi = new Uint8Array(1);
      fi[0] = 0x01;
      var seed_fi = concat_Uint8Array(fi, seed);

      // checksum
      var checksum = CryptoUtils.util.crypto_hash_sha256(CryptoUtils.util.crypto_hash_sha256(seed_fi)).slice(0,2);

      var wif_int8 = concat_Uint8Array(seed_fi, checksum);
      return $q.when(CryptoUtils.util.encode_base58(wif_int8));
    }

    function ewif_v1_from_keypair(keypair, password) {

      var seed = CryptoUtils.seed_from_signSk(keypair.signSk);
      if (!seed || seed.byteLength !== CryptoUtils.constants.SEED_LENGTH)
        return $q.reject({message: "Bad see format. Expected {0} bytes".format(CryptoUtils.constants.SEED_LENGTH)});

      // salt
      var salt = CryptoUtils.util.crypto_hash_sha256(CryptoUtils.util.crypto_hash_sha256(keypair.signPk)).slice(0,4);

      // scrypt_seed
      return CryptoUtils.util.crypto_scrypt(
        CryptoUtils.util.encode_utf8(password),
        salt,
        constants.EWIF.SCRYPT_PARAMS.N,
        constants.EWIF.SCRYPT_PARAMS.r,
        constants.EWIF.SCRYPT_PARAMS.p,
        64)
        .then(function(scrypt_seed) {
          var derivedhalf1 = scrypt_seed.slice(0,32);
          var derivedhalf2 = scrypt_seed.slice(32,64);

          //XOR & AES
          var seed1_xor_derivedhalf1_1 = xor(seed.slice(0,16), derivedhalf1.slice(0,16));
          var seed2_xor_derivedhalf1_2 = xor(seed.slice(16,32), derivedhalf1.slice(16,32));

          var aesEcb = new aesjs.ModeOfOperation.ecb(derivedhalf2);
          var encryptedhalf1 = aesEcb.encrypt(seed1_xor_derivedhalf1_1);
          var encryptedhalf2 = aesEcb.encrypt(seed2_xor_derivedhalf1_2);

          encryptedhalf1 = new Uint8Array(encryptedhalf1);
          encryptedhalf2 = new Uint8Array(encryptedhalf2);

          // concatenate ewif
          var ewif_int8 = new Uint8Array(1);
          ewif_int8[0] = 0x02;
          ewif_int8 = concat_Uint8Array(ewif_int8,salt);
          ewif_int8 = concat_Uint8Array(ewif_int8,encryptedhalf1);
          ewif_int8 = concat_Uint8Array(ewif_int8,encryptedhalf2);

          var checksum = CryptoUtils.util.crypto_hash_sha256(CryptoUtils.util.crypto_hash_sha256(ewif_int8)).slice(0,2);
          ewif_int8 = concat_Uint8Array(ewif_int8,checksum);

          return CryptoUtils.util.encode_base58(ewif_int8);
        });
    }

    function generateKeyFileContent(keypair, options) {
      options = options || {};
      options.type = options.type || "PubSec";

      switch(options.type) {

        // PubSec
        case "PubSec" :
          return $q.resolve(
            "Type: PubSec\n" +
            "Version: 1\n" +
            "pub: " + CryptoUtils.base58.encode(keypair.signPk) + "\n" +
            "sec: " + CryptoUtils.base58.encode(keypair.signSk) + "\n");

        // WIF - v1
        case "WIF" :
          return wif_v1_from_keypair(keypair)
            .then(function(data) {
              return "Type: WIF\n" +
                "Version: 1\n" +
                "Data: " + data + "\n";
            });

        // EWIF - v1
        case "EWIF" :

          if (!options.password) return $q.reject({message: 'Missing EWIF options.password.'});

          // If not set, resolve password using the given callback
          if (options.password && typeof options.password == "function") {
            console.debug("[crypto] [EWIF] Executing 'options.password()' to resolve the password...");
            options.password = options.password();
            if (!options.password) {
              return $q.reject({message: "Invalid callback result for 'options.password()': must return a promise or a string."});
            }
          }

          // If password is a promise, get the result then read data
          if (options.password && typeof options.password == "object" && options.password.then) {
            return options.password.then(function(password) {
              if (!password) throw 'CANCELLED';
              // Recursive call, with the string password in options
              return generateKeyFileContent(keypair, angular.merge({}, options, {password: password}));
            });
          }

          // If password is a valid string, read data
          if (options.password && typeof options.password == "string") {
            return ewif_v1_from_keypair(keypair, options.password)
              .then(function(data) {
                return "Type: EWIF\n" +
                  "Version: 1\n" +
                  "Data: " + data + "\n";
              });
          }

          return $q.reject({message: 'Invalid EWIF options.password. Waiting a callback function, a promise or a string.'});

        default:
          return $q.reject({message: "Unknown keyfile format: " + options.type});
      }
    }



    /* -- usefull methods -- */

    function pkChecksum(pubkey) {
      var signPk_int8 = CryptoUtils.util.decode_base58(pubkey);
      return CryptoUtils.util.encode_base58(CryptoUtils.util.crypto_hash_sha256(CryptoUtils.util.crypto_hash_sha256(signPk_int8))).substring(0,3);
    }

    /* -- box (pack/unpack a record) -- */

    function getBoxKeypair(keypair) {
      if (!keypair) {
        throw new Error('Missing keypair');
      }
      if (keypair.boxPk && keypair.boxSk) {
        return $q.when(keypair);
      }

      return $q.all([
        CryptoUtils.box.keypair.skFromSignSk(keypair.signSk),
        CryptoUtils.box.keypair.pkFromSignPk(keypair.signPk)
      ])
        .then(function(res) {
          return {
            boxSk: res[0],
            boxPk: res[1]
          };
        });
    }

    function packRecordFields(record, keypair, recipientFieldName, cypherFieldNames, nonce) {

      recipientFieldName = recipientFieldName || 'recipient';
      if (!record[recipientFieldName]) {
        return $q.reject({message:'ES_WALLET.ERROR.RECIPIENT_IS_MANDATORY'});
      }

      cypherFieldNames = cypherFieldNames || 'content';
      if (typeof cypherFieldNames == 'string') {
        cypherFieldNames = [cypherFieldNames];
      }

      // Work on a copy, to keep the original record (as it could be use again - fix #382)
      record = angular.copy(record);

      // Get recipient
      var recipientPk = CryptoUtils.util.decode_base58(record[recipientFieldName]);

      return $q.all([
        getBoxKeypair(keypair),
        CryptoUtils.box.keypair.pkFromSignPk(recipientPk),
        nonce ? $q.when(nonce) : CryptoUtils.util.random_nonce()
      ])
        .then(function(res) {
          //var senderSk = res[0];
          var boxKeypair = res[0];
          var senderSk = boxKeypair.boxSk;
          var boxRecipientPk = res[1];
          var nonce = res[2];

          return $q.all(
            cypherFieldNames.reduce(function(res, fieldName) {
              if (!record[fieldName]) return res; // skip undefined fields
              return res.concat(
                CryptoUtils.box.pack(record[fieldName], nonce, boxRecipientPk, senderSk)
              );
            }, []))

            .then(function(cypherTexts){
              // Replace field values with cypher texts
              var i = 0;
              _.forEach(cypherFieldNames, function(cypherFieldName) {
                if (!record[cypherFieldName]) {
                  // Force undefined fields to be present in object
                  // This is better for ES storage, that always works on lazy update mode
                  record[cypherFieldName] = null;
                }
                else {
                  record[cypherFieldName] = cypherTexts[i++];
                }
              });

              // Set nonce
              record.nonce = CryptoUtils.util.encode_base58(nonce);

              return record;
            });
        });
    }

    function openRecordFields(records, keypair, issuerFieldName, cypherFieldNames) {

      issuerFieldName = issuerFieldName || 'issuer';
      cypherFieldNames = cypherFieldNames || 'content';
      if (typeof cypherFieldNames == 'string') {
        cypherFieldNames = [cypherFieldNames];
      }

      var now = new Date().getTime();
      var issuerBoxPks = {}; // a map used as cache

      var jobs = [getBoxKeypair(keypair)];
      return $q.all(records.reduce(function(jobs, message) {
        var issuer = message[issuerFieldName];
        if (!issuer) {throw 'Record has no ' + issuerFieldName;}
        if (issuerBoxPks[issuer]) return res;
        return jobs.concat(
          CryptoUtils.box.keypair.pkFromSignPk(CryptoUtils.util.decode_base58(issuer))
            .then(function(issuerBoxPk) {
              issuerBoxPks[issuer] = issuerBoxPk; // fill box pk cache
            }));
      }, jobs))
        .then(function(res){
          var boxKeypair = res[0];
          return $q.all(records.reduce(function(jobs, record) {
            var issuerBoxPk = issuerBoxPks[record[issuerFieldName]];
            var nonce = CryptoUtils.util.decode_base58(record.nonce);
            record.valid = true;

            return jobs.concat(
              cypherFieldNames.reduce(function(res, cypherFieldName) {
                if (!record[cypherFieldName]) return res;
                return res.concat(CryptoUtils.box.open(record[cypherFieldName], nonce, issuerBoxPk, boxKeypair.boxSk)
                  .then(function(text) {
                    record[cypherFieldName] = text;
                  })
                  .catch(function(err){
                    console.error(err);
                    console.warn('[ES] [crypto] a record may have invalid cypher ' + cypherFieldName);
                    record.valid = false;
                  }));
              }, []));
          }, []));
        })
        .then(function() {
          console.debug('[ES] [crypto] All record decrypted in ' + (new Date().getTime() - now) + 'ms');
          return records;
        });

    }

    function parseKeyFileData(data, options){
      options = options || {};
      options.withSecret = angular.isDefined(options.withSecret) ? options.withSecret : true;
      options.silent = angular.isDefined(options.withSecret) ? options.silent : false;
      options.password = function() {
        UIUtils.loading.hide();
        return Modals.showPassword({
          title: 'ACCOUNT.SECURITY.KEYFILE.PASSWORD_POPUP.TITLE',
          subTitle: 'ACCOUNT.SECURITY.KEYFILE.PASSWORD_POPUP.HELP',
          error: options.error,
          scope: $scope
        })
          .then(function(password) {
            // Timeout is need to force popup to be hide
            return $timeout(function() {
              if (password) UIUtils.loading.show();
              return password;
            }, 150);
          });
      };

      if (!options.silent) {
        UIUtils.loading.show();
      }

      return parseWIF_or_EWIF(data, options)
        .then(function(res){
          return res;
        })
        .catch(function(err) {
          if (err && err == 'CANCELLED') return;
          if (err && err.ucode == csCrypto.errorCodes.BAD_PASSWORD) {
            // recursive call
            return parseKeyFileData(data, {withSecret: options.withSecret, error: 'ACCOUNT.SECURITY.KEYFILE.ERROR.BAD_PASSWORD'});
          }
          console.error("[crypto] Unable to parse as WIF or EWIF format: " + (err && err.message || err));
          throw err; // rethrow
        });
    }

    // exports
    return {
      errorCodes: errorCodes,
      constants: constants,
      // copy CryptoUtils
      util: angular.extend({
          pkChecksum: pkChecksum
        }, CryptoUtils.util),
      keyfile: {
        read: readKeyFile,
        parseData: parseKeyFileData,
        generateContent: generateKeyFileContent
      },
      box: {
        getKeypair: getBoxKeypair,
        pack: packRecordFields,
        open: openRecordFields
      }
    };
  }])
;

angular.module('cesium.utils.services', [])

// Replace the '$ionicPlatform.ready()', to enable multiple calls
// See http://stealthcode.co/multiple-calls-to-ionicplatform-ready/
.factory('ionicReady', ['$ionicPlatform', function($ionicPlatform) {
  'ngInject';

  var readyPromise;

  return function () {
    if (!readyPromise) {
      readyPromise = $ionicPlatform.ready();
    }
    return readyPromise;
  };
}])

.factory('UIUtils', ['$ionicLoading', '$ionicPopup', '$ionicConfig', '$translate', '$q', 'ionicMaterialInk', 'ionicMaterialMotion', '$window', '$timeout', '$ionicPopover', '$state', '$rootScope', 'screenmatch', 'csSettings', function($ionicLoading, $ionicPopup, $ionicConfig, $translate, $q, ionicMaterialInk, ionicMaterialMotion, $window, $timeout,
                             $ionicPopover, $state, $rootScope, screenmatch, csSettings) {
  'ngInject';


  var
    loadingTextCache=null,
    CONST = {
      MAX_HEIGHT: 400,
      MAX_WIDTH: 400,
      THUMB_MAX_HEIGHT: 100,
      THUMB_MAX_WIDTH: 100
    },
    data = {
      smallscreen: screenmatch.bind('xs, sm', $rootScope)
    },
    exports,
    raw = {}
  ;

  function alertError(err, subtitle) {
    if (!err) {
      return $q.when();
    }

    return $q(function(resolve) {
      $translate([err, subtitle, 'ERROR.POPUP_TITLE', 'ERROR.UNKNOWN_ERROR', 'COMMON.BTN_OK'])
      .then(function (translations) {
        var message = err.message || translations[err];
        return $ionicPopup.show({
          template: '<p>' + (message || translations['ERROR.UNKNOWN_ERROR']) + '</p>',
          title: translations['ERROR.POPUP_TITLE'],
          subTitle: translations[subtitle],
          buttons: [
            {
              text: '<b>'+translations['COMMON.BTN_OK']+'</b>',
              type: 'button-assertive',
              onTap: function(e) {
                resolve(e);
              }
            }
          ]
        });
      });
    });
  }

  function alertInfo(message, subtitle) {
    return $q(function(resolve) {
      $translate([message, subtitle, 'INFO.POPUP_TITLE', 'COMMON.BTN_OK'])
      .then(function (translations) {
        $ionicPopup.show({
          template: '<p>' + translations[message] + '</p>',
          title: translations['INFO.POPUP_TITLE'],
          subTitle: translations[subtitle],
          buttons: [
            {
              text: translations['COMMON.BTN_OK'],
              type: 'button-positive',
              onTap: function(e) {
                resolve(e);
              }
            }
          ]
        });
      });
    });
  }

  function alertNotImplemented() {
    return alertInfo('INFO.FEATURES_NOT_IMPLEMENTED');
  }

  function askConfirm(message, title, options) {
    title = title || 'CONFIRM.POPUP_TITLE';

    options = options || {};
    options.cssClass = options.cssClass || 'confirm';
    options.okText = options.okText || 'COMMON.BTN_OK';
    options.cancelText = options.cancelText || 'COMMON.BTN_CANCEL';

    return $translate([message, title, options.cancelText, options.okText])
      .then(function (translations) {
        return $ionicPopup.confirm({
          template: translations[message],
          cssClass: options.cssClass,
          title: translations[title],
          cancelText: translations[options.cancelText],
          cancelType: options.cancelType,
          okText: translations[options.okText],
          okType: options.okType
        });
      });
  }

  function hideLoading(timeout){
    if (timeout) {
      return $timeout(function(){
        return $ionicLoading.hide();
      }, timeout);
    }
    else {
      return $ionicLoading.hide();
    }
  }

  function showLoading(options) {
    if (!loadingTextCache) {
      return $translate('COMMON.LOADING')
        .then(function(translation){
          loadingTextCache = translation;
          return showLoading(options);
        });
    }
    options = options || {};
    options.template = options.template||loadingTextCache;

    return $ionicLoading.show(options);
  }

  function showToast(message, duration, position) {
    duration = duration || 'short';
    position = position || 'bottom';

    return $translate([message])
      .then(function(translations){

        // removeIf(device)
        // Use the $ionicLoading toast.
        // First, make sure to convert duration in number
        if (typeof duration == 'string') {
          if (duration == 'short') {
            duration = 2000;
          }
          else {
            duration = 5000;
          }
        }
        return $ionicLoading.show({ template: translations[message], noBackdrop: true, duration: duration });
        // endRemoveIf(device)
      });
  }

  function onError(msg, reject/*optional*/) {
    return function(err) {
      var fullMsg = msg;
      var subtitle;
      if (!!err && !!err.message) {
        fullMsg = err.message;
        subtitle = msg;
      }
      else if (!msg){
        fullMsg = err;
      }
      // If reject has been given, use it
      if (!!reject) {
        reject(fullMsg);
      }
      // If just a user cancellation: silent
      else if (fullMsg == 'CANCELLED') {
        return hideLoading(10); // timeout, to avoid bug on transfer (when error on reference)
      }

      // Otherwise, log to console and display error
      else {
        hideLoading(10); // timeout, to avoid bug on transfer (when error on reference)
        return alertError(fullMsg, subtitle);
      }
    };
  }

  function isSmallScreen() {
    return data.smallscreen.active;
  }

  function selectElementText(el) {
    if (el.value || el.type == "text" || el.type == "textarea") {
      // Source: http://stackoverflow.com/questions/14995884/select-text-on-input-focus
      if ($window.getSelection && !$window.getSelection().toString()) {
        el.setSelectionRange(0, el.value.length);
      }
    }
    else {
      if (el.childNodes && el.childNodes.length > 0) {
        selectElementText(el.childNodes[0]);
      }
      else {
        // See http://www.javascriptkit.com/javatutors/copytoclipboard.shtml
        var range = $window.document.createRange(); // create new range object
        range.selectNodeContents(el); // set range to encompass desired element text
        var selection = $window.getSelection(); // get Selection object from currently user selected text
        selection.removeAllRanges(); // unselect any user selected text (if any)
        selection.addRange(range); // add range to Selection object to select it
      }
    }
  }

  function getSelectionText(){
    var selectedText = "";
    if (window.getSelection){ // all modern browsers and IE9+
        selectedText = $window.getSelection().toString();
    }
    return selectedText;
  }

  function imageOnLoadResize(resolve, reject, thumbnail) {
    return function(event) {
          var width = event.target.width;
          var height = event.target.height;
       var maxWidth = (thumbnail ? CONST.THUMB_MAX_WIDTH : CONST.MAX_WIDTH);
       var maxHeight = (thumbnail ? CONST.THUMB_MAX_HEIGHT : CONST.MAX_HEIGHT);

          if (width > height) {
         if (width > maxWidth) {
           height *= maxWidth / width;
           width = maxWidth;
            }
          } else {
         if (height > maxHeight) {
           width *= maxHeight / height;
           height = maxHeight;
            }
          }
          var canvas = document.createElement("canvas");
          canvas.width = width;
          canvas.height = height;
          var ctx = canvas.getContext("2d");
          ctx.drawImage(event.target, 0, 0,  canvas.width, canvas.height);

          var dataurl = canvas.toDataURL();

          canvas.remove();

          resolve(dataurl);
        };
  }

  function resizeImageFromFile(file, thumbnail) {
    var img = document.createElement("img");
    return $q(function(resolve, reject) {

      if (file) {
        var reader = new FileReader();
        reader.onload = function(event){
          img.onload = imageOnLoadResize(resolve, reject, thumbnail);
          img.src = event.target.result;
        };
        reader.readAsDataURL(file);
      }
      else {
        reject('no file to resize');
      }
    })
    .then(function(dataurl) {
      img.remove();
      return dataurl;
    })
    ;
  }

  function resizeImageFromSrc(imageSrc, thumbnail) {
    var img = document.createElement("img");
    return $q(function(resolve, reject) {
        img.onload = imageOnLoadResize(resolve, reject, thumbnail);
        img.src = imageSrc;
      })
      .then(function(data){
        img.remove();
        return data;
      });
  }

  function imageOnLoadRotate(resolve, reject) {
    var deg = Math.PI / 180;
    var angle = 90 * deg;
    return function(event) {
      var width = event.target.width;
      var height = event.target.height;
      var maxWidth = CONST.MAX_WIDTH;
      var maxHeight = CONST.MAX_HEIGHT;

      if (width > height) {
        if (width > maxWidth) {
          height *= maxWidth / width;
          width = maxWidth;
        }
      } else {
        if (height > maxHeight) {
          width *= maxHeight / height;
          height = maxHeight;
        }
      }

      var canvas = document.createElement("canvas");
      canvas.width = height;
      canvas.height = width;

      var ctx = canvas.getContext("2d");
      ctx.rotate(angle);
      ctx.drawImage(event.target, 0, (-1) * canvas.width);

      var dataurl = canvas.toDataURL();

      canvas.remove();

      resolve(dataurl);
    };
  }

  function rotateFromSrc(imageSrc, angle) {
    var img = document.createElement("img");
    return $q(function(resolve, reject) {
        img.onload = imageOnLoadRotate(resolve, reject, angle);
        img.src = imageSrc;
      })
      .then(function(data){
        img.remove();
        return data;
      });
  }

  function showPopover(event, options) {

    var deferred = $q.defer();

    options = options || {};
    options.templateUrl = options.templateUrl ? options.templateUrl : 'templates/common/popover_copy.html';
    options.scope = options.scope || $rootScope;
    options.scope.popovers = options.scope.popovers || {};
    options.autoselect = options.autoselect || false;
    options.bindings = options.bindings || {};
    options.autoremove = angular.isDefined(options.autoremove) ? options.autoremove : true;
    options.backdropClickToClose = angular.isDefined(options.backdropClickToClose) ? options.backdropClickToClose : true;
    options.focusFirstInput = angular.isDefined(options.focusFirstInput) ? options.focusFirstInput : false;

    var _show = function(popover) {
      popover = popover || options.scope.popovers[options.templateUrl];
      popover.isResolved=false;
      popover.deferred=deferred;
      popover.options=options;
      // Fill the popover scope
      angular.merge(popover.scope, options.bindings);
      $timeout(function() { // This is need for Firefox
        popover.show(event)
        .then(function() {
          var element;
          // Auto select text
          if (options.autoselect) {
            element = document.querySelectorAll(options.autoselect)[0];
            if (element) {
              if ($window.getSelection && !$window.getSelection().toString()) {
                element.setSelectionRange(0, element.value.length);
                element.focus();
              }
              else {
                element.focus();
              }
            }
          }
          else {
            // Auto focus on a element
            if (options.autofocus) {
              element = document.querySelectorAll(options.autofocus)[0];
              if (element) element.focus();
            }
          }

          popover.scope.$parent.$emit('popover.shown');

          // Callback 'afterShow'
          if (options.afterShow) options.afterShow(popover);
        });
      });
    };

    var _cleanup = function(popover) {
      popover = popover || options.scope.popovers[options.templateUrl];
      if (popover) {
        delete options.scope.popovers[options.templateUrl];
        // Remove the popover
        popover.remove()
          // Workaround for issue #244
          // See also https://github.com/driftyco/ionic-v1/issues/71
          // and https://github.com/driftyco/ionic/issues/9069
          .then(function() {
            var bodyEl = angular.element($window.document.querySelectorAll('body')[0]);
            bodyEl.removeClass('popover-open');
          });
      }
    };

    var popover = options.scope.popovers[options.templateUrl];
    if (!popover) {

      $ionicPopover.fromTemplateUrl(options.templateUrl, {
        scope: options.scope,
        backdropClickToClose: options.backdropClickToClose
      })
        .then(function (popover) {
          popover.isResolved = false;

          popover.scope.closePopover = function(result) {
            var autoremove = popover.options.autoremove;
            delete popover.options.autoremove; // remove to avoid to trigger 'popover.hidden'
            popover.hide()
              .then(function() {
                if (autoremove) {
                  return _cleanup(popover);
                }
              })
              .then(function() {
                if (popover.deferred) {
                  popover.deferred.resolve(result);
                }
                delete popover.deferred;
                delete popover.options;
              });
          };

          // Execute action on hidden popover
          popover.scope.$on('popover.hidden', function() {
            if (popover.options && popover.options.afterHidden) {
              popover.options.afterHidden();
            }
            if (popover.options && popover.options.autoremove) {
              _cleanup(popover);
            }
          });

          // Cleanup the popover when hidden
          options.scope.$on('$remove', function() {
            if (popover.deferred) {
              popover.deferred.resolve();
            }
            _cleanup();
          });

          options.scope.popovers[options.templateUrl] = popover;
          _show(popover);
        });
    }
    else {
      _show(popover);
    }

    return deferred.promise;
  }

  function showCopyPopover(event, value) {
    var rows = value && value.indexOf('\n') >= 0 ? value.split('\n').length : 1;
    return showPopover(event, {
      templateUrl: 'templates/common/popover_copy.html',
      bindings: {
        value: value,
        rows: rows
      },
      autoselect: '.popover-copy ' + (rows <= 1 ? 'input' : 'textarea')
    });
  }

  function showSharePopover(event, options) {
    options = options || {};
    options.templateUrl = options.templateUrl ? options.templateUrl : 'templates/common/popover_share.html';
    options.autoselect = options.autoselect || '.popover-share input';
    options.bindings = options.bindings || {};
    options.bindings.value = options.bindings.value || options.bindings.url ||
      $state.href($state.current, $state.params, {absolute: true});
    options.bindings.postUrl = options.bindings.postUrl || options.bindings.value;
    options.bindings.postMessage = options.bindings.postMessage || '';
    options.bindings.titleKey = options.bindings.titleKey || 'COMMON.POPOVER_SHARE.TITLE';
    return showPopover(event, options);
  }

  function showHelptip(id, options) {
    var element = (typeof id == 'string') && id ? $window.document.getElementById(id) : id;
    if (!id && !element && options.selector) {
      element = $window.document.querySelector(options.selector);
    }

    options = options || {};
    var deferred = options.deferred || $q.defer();

    if(element && !options.timeout) {
      if (options.preAction) {
        element[options.preAction]();
      }
      options.templateUrl = options.templateUrl ? options.templateUrl : 'templates/common/popover_helptip.html';
      options.autofocus = options.autofocus || '#helptip-btn-ok';
      options.bindings = options.bindings || {};
      options.bindings.icon = options.bindings.icon || {};
      options.bindings.icon.position = options.bindings.icon.position || false;
      options.bindings.icon.glyph = options.bindings.icon.glyph ||
        (options.bindings.icon.position && options.bindings.icon.position.startsWith('bottom-') ? 'ion-arrow-down-c' :'ion-arrow-up-c');
      options.bindings.icon.class = options.bindings.icon.class || 'calm icon ' + options.bindings.icon.glyph;
      options.bindings.tour = angular.isDefined(options.bindings.tour) ? options.bindings.tour : false;
      showPopover(element, options)
        .then(function(result){
          if (options.postAction) {
            element[options.postAction]();
          }
          deferred.resolve(result);
        })
        .catch(function(err){
          if (options.postAction) {
            element[options.postAction]();
          }
          deferred.reject(err);
        });
    }
    else {

      // Do timeout if ask
      if (options.timeout) {
        var timeout = options.timeout;
        options.retryTimeout = options.retryTimeout || timeout;
        delete options.timeout;
        options.deferred = deferred;
        $timeout(function () {
          showHelptip(id, options);
        }, timeout);
      }

      // No element: reject
      else if (angular.isDefined(options.retry) && !options.retry) {

        if (options.onError === 'continue') {
          $timeout(function () {
            deferred.resolve(true);
          });
        }
        else {
          $timeout(function () {
            deferred.reject("[helptip] element now found: " + id);
          });
        }
      }

      // Retry until element appears
      else {
        options.retry = angular.isUndefined(options.retry) ? 2 : (options.retry-1);
        options.deferred = deferred;
        $timeout(function() {
          showHelptip(id, options);
        }, options.timeout || options.retryTimeout || 100);
      }
    }

    return deferred.promise;
  }

  function showFab(id, timeout) {
    if (!timeout) {
      timeout = 900;
    }
    $timeout(function () {
      // Could not use 'getElementById', because it return only once element,
      // but many fabs can have the same id (many view could be loaded at the same time)
      var fabs = document.getElementsByClassName('button-fab');
      _.forEach(fabs, function(fab){
        if (fab.id == id) {
          fab.classList.toggle('on', true);
        }
      });
    }, timeout);
  }

  function hideFab(id, timeout) {
    if (!timeout) {
      timeout = 10;
    }
    $timeout(function () {
      // Could not use 'getElementById', because it return only once element,
      // but many fabs can have the same id (many view could be loaded at the same time)
      var fabs = document.getElementsByClassName('button-fab');
      _.forEach(fabs, function(fab){
        if (fab.id == id) {
          fab.classList.toggle('on', false);
        }
      });
    }, timeout);
  }

  function motionDelegate(delegate, ionListClass) {
    var motionTimeout = isSmallScreen() ? 100 : 10;
    var defaultSelector = '.list.{0} .item, .list .{0} .item'.format(ionListClass, ionListClass);
      return {
      ionListClass: ionListClass,
      show: function(options) {
        options = options || {};
        options.selector = options.selector || defaultSelector;
        options.ink = angular.isDefined(options.ink) ? options.ink : true;
        options.startVelocity = options.startVelocity || (isSmallScreen() ? 1100 : 3000);
        return $timeout(function(){

          // Display ink effect (no selector need)
          if (options.ink) exports.ink();

          // Display the delegated motion effect
          delegate(options);
        }, options.timeout || motionTimeout);
      }
    };
  }

  function setEffects(enable) {
    if (exports.motion.enable === enable) return; // same
    console.debug('[UI] [effects] ' + (enable ? 'Enable' : 'Disable'));

    if (enable) {
      $ionicConfig.views.transition('platform');
      exports.motion = raw.motion;
    }
    else {
      $ionicConfig.views.transition('none');
      var nothing = {
        class: undefined,
        show: function(){}
      };
      exports.motion = {
        enable : false,
        default: nothing,
        fadeSlideIn: nothing,
        fadeSlideInRight: nothing,
        panInLeft: nothing,
        pushDown: nothing,
        ripple: nothing,
        slideUp: nothing,
        fadeIn: nothing,
        toggleOn: toggleOn,
        toggleOff: toggleOff
      };
    }
  }

  raw.motion = {
    enable: true,
    default: motionDelegate(ionicMaterialMotion.ripple, 'animate-ripple'),
    blinds: motionDelegate(ionicMaterialMotion.blinds, 'animate-blinds'),
    fadeSlideIn: motionDelegate(ionicMaterialMotion.fadeSlideIn, 'animate-fade-slide-in'),
    fadeSlideInRight: motionDelegate(ionicMaterialMotion.fadeSlideInRight, 'animate-fade-slide-in-right'),
    panInLeft: motionDelegate(ionicMaterialMotion.panInLeft, 'animate-pan-in-left'),
    pushDown: motionDelegate(ionicMaterialMotion.pushDown, 'push-down'),
    ripple: motionDelegate(ionicMaterialMotion.ripple, 'animate-ripple'),
    slideUp: motionDelegate(ionicMaterialMotion.slideUp, 'slide-up'),
    fadeIn: motionDelegate(function(options) {
        toggleOn(options);
      }, 'fade-in'),
    toggleOn: toggleOn,
    toggleOff: toggleOff
  };


  function toggleOn(options, timeout) {
    // We have a single option, so it may be passed as a string or property
    if (typeof options === 'string') {
      options = {
        selector: options
      };
    }

    // Fail early & silently log
    var isInvalidSelector = typeof options.selector === 'undefined' || options.selector === '';

    if (isInvalidSelector) {
      console.error('invalid toggleOn selector');
      return false;
    }

    $timeout(function () {
      var elements = document.querySelectorAll(options.selector);
      if (elements) _.forEach(elements, function(element){
        element.classList.toggle('on', true);
      });
    }, timeout || 100);
  }

  function toggleOff(options, timeout) {
    // We have a single option, so it may be passed as a string or property
    if (typeof options === 'string') {
      options = {
        selector: options
      };
    }

    // Fail early & silently log
    var isInvalidSelector = typeof options.selector === 'undefined' || options.selector === '';

    if (isInvalidSelector) {
      console.error('invalid toggleOff selector');
      return false;
    }

    $timeout(function () {
      var elements = document.querySelectorAll(options.selector);
      if (elements) _.forEach(elements, function(element){
        element.classList.toggle('on', false);
      });
    }, timeout || 900);
  }



  csSettings.api.data.on.changed($rootScope, function(data) {
   setEffects(data.uiEffects);
  });

  exports = {
    alert: {
      error: alertError,
      info: alertInfo,
      confirm: askConfirm,
      notImplemented: alertNotImplemented
    },
    loading: {
      show: showLoading,
      hide: hideLoading
    },
    toast: {
      show: showToast
    },
    onError: onError,
    screen: {
      isSmall: isSmallScreen
    },
    ink: ionicMaterialInk.displayEffect,
    motion: raw.motion,
    setEffects: setEffects,
    fab: {
      show: showFab,
      hide: hideFab
    },
    popover: {
      show: showPopover,
      copy: showCopyPopover,
      share: showSharePopover,
      helptip: showHelptip
    },
    selection: {
      select: selectElementText,
      get: getSelectionText
    },
    image: {
      resizeFile: resizeImageFromFile,
      resizeSrc: resizeImageFromSrc,
      rotateSrc: rotateFromSrc
    },
    raw: raw
  };

  return exports;
}])


// See http://plnkr.co/edit/vJQXtsZiX4EJ6Uvw9xtG?p=preview
.factory('$focus', ['$timeout', '$window', function($timeout, $window) {
  'ngInject';

  return function(id) {
    // timeout makes sure that it is invoked after any other event has been triggered.
    // e.g. click events that need to run before the focus or
    // inputs elements that are in a disabled state but are enabled when those events
    // are triggered.
    $timeout(function() {
      var element = $window.document.getElementById(id);
      if(element)
        element.focus();
    });
  };
}])

;

angular.module('cesium.cache.services', ['angular-cache'])

.factory('csCache', ['$http', 'csSettings', 'CacheFactory', function($http, csSettings, CacheFactory) {
  'ngInject';

  var
    constants = {
      LONG: 1 * 60  * 60 * 1000 /*1 hour*/,
      MEDIUM: 5  * 60 * 1000 /*5 min*/,
      SHORT: csSettings.defaultSettings.cacheTimeMs
    },
    cacheNames = []
  ;

  function getOrCreateCache(prefix, maxAge, onExpire){
    prefix = prefix || 'csCache-';
    maxAge = maxAge || constants.SHORT;
    var cacheName = prefix + maxAge;
    if (!onExpire) {
      if (!cacheNames[cacheName]) {
        cacheNames[cacheName] = true;
      }
      return CacheFactory.get(cacheName) ||
        CacheFactory.createCache(cacheName, {
          maxAge: maxAge,
          deleteOnExpire: 'aggressive',
          //cacheFlushInterval: 60 * 60 * 1000, //  clear itself every hour
          recycleFreq: Math.max(maxAge - 1000, 5 * 60 * 1000 /*5min*/),
          storageMode: 'memory'
            // FIXME : enable this when cache is cleaning on rollback
            //csSettings.data.useLocalStorage ? 'localStorage' : 'memory'
        });
    }
    else {
      var counter = 1;
      while(CacheFactory.get(cacheName + counter)) {
        counter++;
      }
      cacheName = cacheName + counter;
      if (!cacheNames[cacheName]) {
        cacheNames[cacheName] = true;
      }
      return CacheFactory.createCache(cacheName, {
          maxAge: maxAge,
          deleteOnExpire: 'aggressive',
          //cacheFlushInterval: 60 * 60 * 1000, // This cache will clear itself every hour
          recycleFreq: maxAge,
          onExpire: onExpire,
          storageMode: 'memory'
            // FIXME : enable this when cache is cleaning on rollback
            //csSettings.data.useLocalStorage ? 'localStorage' : 'memory'
        });
    }
  }

  function clearAllCaches() {
    console.debug("[cache] cleaning all caches");
    _.forEach(_.keys(cacheNames), function(cacheName) {
      var cache = CacheFactory.get(cacheName);
      if (cache) {
        cache.removeAll();
      }
    });
  }

  function clearFromPrefix(cachePrefix) {
    _.forEach(_.keys(cacheNames), function(cacheName) {
      if (cacheName.startsWith(cachePrefix)) {
        var cache = CacheFactory.get(cacheNames);
        if (cache) {
          cache.removeAll();
        }
      }
    });
  }

  return {
    get: getOrCreateCache,
    clear: clearFromPrefix,
    clearAll: clearAllCaches,
    constants: {
      LONG : constants.LONG,
      SHORT: constants.SHORT
    }
  };
}])
;

angular.module('cesium.modal.services', [])

// Useful for modal with no controller
.controller('EmptyModalCtrl', function () {
  'ngInject';

})

.controller('AboutModalCtrl', ['$scope', 'UIUtils', 'csHttp', function ($scope, UIUtils, csHttp) {
  'ngInject';

  $scope.openLink = function(event, uri, options) {
    options = options || {};

    // If unable to open, just copy value
    options.onError = function() {
      return UIUtils.popover.copy(event, uri);
    };

    return csHttp.uri.open(uri, options);
  };
}])

.factory('ModalUtils', ['$ionicModal', '$rootScope', '$q', '$injector', '$controller', '$timeout', function($ionicModal, $rootScope, $q, $injector, $controller, $timeout) {
  'ngInject';


  function _evalController(ctrlName) {
    var result = {
        isControllerAs: false,
        controllerName: '',
        propName: ''
    };
    var fragments = (ctrlName || '').trim().split(/\s+/);
    result.isControllerAs = fragments.length === 3 && (fragments[1] || '').toLowerCase() === 'as';
    if (result.isControllerAs) {
        result.controllerName = fragments[0];
        result.propName = fragments[2];
    } else {
        result.controllerName = ctrlName;
    }

    return result;
  }

  function DefaultModalController($scope, deferred, parameters) {

    $scope.deferred = deferred || $q.defer();
    $scope.resolved = false;

    $scope.openModal = function () {
      return $scope.modal.show();
    };

    $scope.hideModal = function () {
      return $scope.modal.hide();
    };

    $scope.closeModal = function (result) {
      $scope.resolved = true;
      return $scope.modal.remove()
        .then(function() {
          $scope.deferred.resolve(result);
          return result;
        });
    };


    // Useful method for modal with forms
    $scope.setForm = function (form, propName) {
      if (propName) {
        $scope[propName] = form;
      }
      else {
        $scope.form = form;
      }
    };

    // Useful method for modal to get input parameters
    $scope.getParameters = function () {
      return parameters;
    };

    $scope.$on('modal.hidden', function () {
      // If not resolved yet: send result
      // (after animation out)
      if (!$scope.resolved) {
        $scope.resolved = true;

        $timeout(function() {
          $scope.deferred.resolve();
          return $scope.modal.remove();
        }, ($scope.modal.hideDelay || 320) + 20);
      }
    });
  }

  function show(templateUrl, controller, parameters, options) {
    var deferred = $q.defer();

    options = options ? options : {} ;
    options.animation = options.animation || 'slide-in-up';

    // If modal has a controller
    if (controller) {
      // If a controller defined, always use a new scope
      options.scope = options.scope ? options.scope.$new() : $rootScope.$new();
      DefaultModalController.call({}, options.scope, deferred, parameters);

      // Invoke the controller on this new scope
      var locals = { '$scope': options.scope, 'parameters': parameters };
      var ctrlEval = _evalController(controller);
      var ctrlInstance = $controller(controller, locals);
      if (ctrlEval.isControllerAs) {
        ctrlInstance.openModal = options.scope.openModal;
        ctrlInstance.closeModal = options.scope.closeModal;
      }
    }

    $ionicModal.fromTemplateUrl(templateUrl, options)
      .then(function (modal) {
          if (controller) {
            // Set modal into the controller's scope
            modal.scope.$parent.modal = modal;
          }
          else {
            var scope = modal.scope;
            // Define default scope functions
            DefaultModalController.call({}, scope, deferred, parameters);
            // Set modal
            scope.modal = modal;
          }

          // Show the modal
          return modal.show();
        },
        function (err) {
          deferred.reject(err);
        });

    return deferred.promise;
  }

  return {
    show: show
  };
}])

.factory('Modals', ['$rootScope', '$translate', '$ionicPopup', '$timeout', 'ModalUtils', 'UIUtils', function($rootScope, $translate, $ionicPopup, $timeout, ModalUtils, UIUtils) {
  'ngInject';

  function showTransfer(parameters) {
    var useDigitKeyboard = UIUtils.screen.isSmall();
    return ModalUtils.show('templates/wallet/modal_transfer.html','TransferModalCtrl',
      parameters, {
        focusFirstInput: !useDigitKeyboard
      });
  }

  function showLogin(parameters) {
    return ModalUtils.show('templates/login/modal_login.html','LoginModalCtrl',
      parameters, {focusFirstInput: true, backdropClickToClose: false});
  }

  function showWotLookup(parameters) {
    return ModalUtils.show('templates/wot/modal_lookup.html','WotLookupModalCtrl',
      parameters || {}, {focusFirstInput: true});
  }

  function showNetworkLookup(parameters) {
    return ModalUtils.show('templates/network/modal_network.html', 'NetworkLookupModalCtrl',
      parameters, {focusFirstInput: true});
  }

  function showAbout(parameters) {
    return ModalUtils.show('templates/modal_about.html','AboutModalCtrl',
      parameters);
  }

  function showAccountSecurity(parameters) {
    return ModalUtils.show('templates/wallet/modal_security.html', 'WalletSecurityModalCtrl',
      parameters);
  }

  function showJoin(parameters) {
    return ModalUtils.show('templates/join/modal_choose_account_type.html','JoinChooseAccountTypeModalCtrl',
      parameters)
      .then(function(res){
        if (!res) return;
        return (res.accountType == 'member') ?
          showJoinMember(res) :
          showJoinWallet(res);
      });
  }

  function showJoinMember(parameters) {
    return ModalUtils.show('templates/join/modal_join_member.html','JoinModalCtrl',
      parameters);
  }

  function showJoinWallet(parameters) {
    return ModalUtils.show('templates/join/modal_join_wallet.html','JoinModalCtrl',
      parameters);
  }

  function showHelp(parameters) {
    return ModalUtils.show('templates/help/modal_help.html','HelpModalCtrl',
      parameters);
  }

  function showLicense(parameters) {
    return ModalUtils.show('templates/currency/modal_license.html','CurrencyLicenseModalCtrl',
      parameters);
  }

  function showSelectPubkeyIdentity(parameters) {
    return ModalUtils.show('templates/wot/modal_select_pubkey_identity.html', 'WotSelectPubkeyIdentityModalCtrl',
      parameters);
  }

  function showSelectWallet(parameters) {
    return ModalUtils.show('templates/wallet/list/modal_wallets.html','WalletSelectModalCtrl',
      parameters);
  }

  function showPassword(options) {
    options = options || {};
    options.title = options.title || 'COMMON.SET_PASSWORD_TITLE';
    options.subTitle = options.subTitle || 'COMMON.SET_PASSWORD_SUBTITLE';
    var scope = options.scope ? options.scope.$new() : $rootScope.$new();
    scope.formData = {password: undefined};
    scope.setForm = function(form) {
      scope.form=form;
    };
    scope.submit = function(e) {
      scope.form.$submitted=true;
      if (e && e.preventDefault) e.preventDefault();
      if(scope.form.$valid && scope.formData.password) {
        options.popup.close(scope.formData.password);
      }
    };

    scope.error = options.error || undefined;

    // Choose password popup
    return $translate([options.title, options.subTitle, 'COMMON.BTN_OK', 'COMMON.BTN_CANCEL'])
      .then(function (translations) {
        options.popup = $ionicPopup.show({
          templateUrl: 'templates/common/popup_password.html',
          title: translations[options.title],
          subTitle: translations[options.subTitle],
          scope: scope,
          buttons: [
            { text: translations['COMMON.BTN_CANCEL'] },
            { text: translations['COMMON.BTN_OK'],
              type: 'button-positive',
              onTap: scope.submit
            }
          ]
        });
        return options.popup;
      });

  }

  return {
    showTransfer: showTransfer,
    showLogin: showLogin,
    showWotLookup: showWotLookup,
    showNetworkLookup: showNetworkLookup,
    showAbout: showAbout,
    showJoin: showJoin,
    showJoinMember: showJoinMember,
    showJoinWallet: showJoinWallet,
    showHelp: showHelp,
    showAccountSecurity: showAccountSecurity,
    showLicense: showLicense,
    showSelectPubkeyIdentity: showSelectPubkeyIdentity,
    showSelectWallet: showSelectWallet,
    showPassword: showPassword
  };

}])

.factory('csPopovers', ['$rootScope', '$translate', '$ionicPopup', '$timeout', 'UIUtils', function($rootScope, $translate, $ionicPopup, $timeout, UIUtils) {
    'ngInject';

    function showSelectWallet(event, options) {
      options = options || {};
      var scope = options.scope && options.scope.$new() || $rootScope.$new(true);
      scope.parameters = options;
      delete options.scope;
      return UIUtils.popover.show(event, angular.merge({
        templateUrl :'templates/wallet/list/popover_wallets.html',
        autoremove: true
      }, options));
    }

    return {
      showSelectWallet: showSelectWallet
    };

  }]);

angular.module('cesium.http.services', ['cesium.cache.services'])

.factory('csHttp', ['$http', '$q', '$timeout', '$window', 'csSettings', 'csCache', 'Device', function($http, $q, $timeout, $window, csSettings, csCache, Device) {
  'ngInject';

  var timeout = csSettings.data.timeout;

  var
    sockets = [],
    cachePrefix = 'csHttp'
  ;

  if (!timeout) {
    timeout=4000; // default
  }

  function getServer(host, port) {
    // Remove port if 80 or 443
    return  !host ? null : (host + (port && port != 80 && port != 443 ? ':' + port : ''));
  }

  function getUrl(host, port, path, useSsl) {
    var protocol = (port == 443 || useSsl) ? 'https' : 'http';
    return  protocol + '://' + getServer(host, port) + (path ? path : '');
  }

  function getWsUrl(host, port, path, useSsl) {
    var protocol = (port == 443 || useSsl) ? 'wss' : 'ws';
    return  protocol + '://' + getServer(host, port) + (path ? path : '');
  }

  function processError(reject, data, url, status) {
    if (data && data.message) {
      reject(data);
    }
    else {
      if (status == 404) {
        reject({ucode: 404, message: 'Resource not found' + (url ? ' ('+url+')' : '')});
      }
      else if (url) {
        reject('Error while requesting [' + url + ']');
      }
      else {
        reject('Unknown error from node');
      }
    }
  }

  function prepare(url, params, config, callback) {
    var pkeys = [], queryParams = {}, newUri = url;
    if (typeof params == 'object') {
      pkeys = _.keys(params);
    }

    _.forEach(pkeys, function(pkey){
      var prevURI = newUri;
      newUri = newUri.replace(':' + pkey, params[pkey]);
      if (prevURI == newUri) {
        queryParams[pkey] = params[pkey];
      }
    });
    config.params = queryParams;
    return callback(newUri, config);
  }

  function getResource(host, port, path, useSsl, forcedTimeout) {
    // Make sure host is defined - fix #537
    if (!host) {
      return $q.reject('[http] invalid URL from host: ' + host);
    }
    var url = getUrl(host, port, path, useSsl);
    return function(params) {
      return $q(function(resolve, reject) {
        var config = {
          timeout: forcedTimeout || timeout,
          responseType: 'json'
        };

        prepare(url, params, config, function(url, config) {
            $http.get(url, config)
            .success(function(data, status, headers, config) {
              resolve(data);
            })
            .error(function(data, status, headers, config) {
              processError(reject, data, url, status);
            });
        });
      });
    };
  }

  function getResourceWithCache(host, port, path, useSsl, maxAge, autoRefresh, forcedTimeout) {
    var url = getUrl(host, port, path, useSsl);
    maxAge = maxAge || csCache.constants.LONG;
    //console.debug('[http] will cache ['+url+'] ' + maxAge + 'ms' + (autoRefresh ? ' with auto-refresh' : ''));

    return function(params) {
      return $q(function(resolve, reject) {
        var config = {
          timeout: forcedTimeout || timeout,
          responseType: 'json'
        };
        if (autoRefresh) { // redo the request if need
          config.cache = csCache.get(cachePrefix, maxAge, function (key, value) {
              console.debug('[http] Refreshing cache for ['+key+'] ');
              $http.get(key, config)
                .success(function (data) {
                  config.cache.put(key, data);
              });
            });
        }
        else {
          config.cache = csCache.get(cachePrefix, maxAge);
        }

        prepare(url, params, config, function(url, config) {
          $http.get(url, config)
            .success(function(data) {
              resolve(data);
            })
            .error(function(data, status) {
              processError(reject, data, url, status);
            });
        });
      });
    };
  }

  function postResource(host, port, path, useSsl, forcedTimeout) {
    var url = getUrl(host, port, path, useSsl);
    return function(data, params) {
      return $q(function(resolve, reject) {
        var config = {
          timeout: forcedTimeout || timeout,
          headers : {'Content-Type' : 'application/json;charset=UTF-8'}
        };

        prepare(url, params, config, function(url, config) {
            $http.post(url, data, config)
            .success(function(data) {
              resolve(data);
            })
            .error(function(data, status) {
              processError(reject, data, url, status);
            });
        });
      });
    };
  }

  function ws(host, port, path, useSsl, timeout) {
    if (!path) {
      console.error('calling csHttp.ws without path argument');
      throw 'calling csHttp.ws without path argument';
    }
    var uri = getWsUrl(host, port, path, useSsl);
    timeout = timeout || csSettings.data.timeout;

    function _waitOpen(self) {
      if (!self.delegate) throw new Error('Websocket not opened');
      if (self.delegate.readyState == 1) {
        return $q.when(self.delegate);
      }
      if (self.delegate.readyState == 3) {
        return $q.reject('Unable to connect to websocket ['+self.delegate.url+']');
      }
      console.debug('[http] Waiting websocket ['+self.path+'] opening...');

      if (self.waitDuration >= timeout) {
        console.debug("[http] Will retry openning websocket later...");
        self.waitRetryDelay = 2000; // 2 seconds
      }

      return $timeout(function(){
        self.waitDuration += self.waitRetryDelay;
        return _waitOpen(self);
      }, self.waitRetryDelay);
    }

    function _open(self, callback, params) {
      if (!self.delegate) {
        self.path = path;
        self.callbacks = [];
        self.waitDuration = 0;
        self.waitRetryDelay = 200;

        prepare(uri, params, {}, function(uri) {
          self.delegate = new WebSocket(uri);
          self.delegate.onerror = function(e) {
            self.delegate.readyState=3;
          };
          self.delegate.onmessage = function(e) {
            var obj = JSON.parse(e.data);
            _.forEach(self.callbacks, function(callback) {
              callback(obj);
            });
          };
          self.delegate.onopen = function(e) {
            console.debug('[http] Listening on websocket ['+self.path+']...');
            sockets.push(self);
            self.delegate.openTime = new Date().getTime();
          };
          self.delegate.onclose = function() {

            // Remove from sockets arrays
            var index = _.findIndex(sockets, function(socket){return socket.path === self.path;});
            if (index >= 0) {
              sockets.splice(index,1);
            }

            // If close event comes from Cesium
            if (self.delegate.closing) {
              self.delegate = null;
            }

            // If unexpected close event, reopen the socket (fix #535)
            else {
              console.debug('[http] Unexpected close of websocket ['+path+'] (open '+ (new Date().getTime() - self.delegate.openTime) +'ms ago): re-opening...');

              self.delegate = null;

              // Loop, but without the already registered callback
              _open(self, null, params);
            }
          };
        });
      }

      if (callback) self.callbacks.push(callback);
      return _waitOpen(self);
    }

    function _close(self) {
      if (self.delegate) {
        self.delegate.closing = true;
        console.debug('[http] Closing websocket ['+self.path+']...');
        self.delegate.close();
        self.callbacks = [];
        if (self.onclose) self.onclose();
      }
    }

    function _remove(self, callback) {
      self.callbacks = _.reject(self.callbacks, function(item) {
        return item === callback;
      });
      if (!self.callbacks.length) {
        _close(self);
      }
    }

    return {
      open: function(params) {
        return _open(this, null, params);
      },
      on: function(callback, params) {
        return _open(this, callback, params);
      },
      onListener: function(callback, params) {
        var self = this;
        _open(self, callback, params);
        return function() {
          _remove(self, callback);
        };
      },
      send: function(data) {
        var self = this;
        return _waitOpen(self)
          .then(function(){
            if (self.delegate) self.delegate.send(data);
          });
      },
      close: function() {
        var self = this;
        _close(self);
      },
      isClosed: function() {
        var self = this;
        return !self.delegate || self.delegate.closing;
      }
    };
  }

  function closeAllWs() {
    if (sockets.length > 0) {
      console.debug('[http] Closing all websocket...');
      _.forEach(sockets, function(sock) {
        sock.close();
      });
      sockets = []; // Reset socks list
    }
  }

  // See doc : https://gist.github.com/jlong/2428561
  function parseUri(uri) {
    var protocol;
    if (uri.startsWith('duniter://')) {
      protocol = 'duniter';
      uri = uri.replace('duniter://', 'http://');
    }

    var parser = document.createElement('a');
    parser.href = uri;

    var pathname = parser.pathname;
    if (pathname && pathname.startsWith('/')) {
      pathname = pathname.substring(1);
    }

    var result = {
      protocol: protocol ? protocol : parser.protocol,
      hostname: parser.hostname,
      host: parser.host,
      port: parser.port,
      username: parser.username,
      password: parser.password,
      pathname: pathname,
      search: parser.search,
      hash: parser.hash
    };
    parser.remove();
    return result;
  }

  /**
   * Open a URI (url, email, phone, ...)
   * @param event
   * @param link
   * @param type
   */
  function openUri(uri, options) {
    options = options || {};

    if (!uri.startsWith('http://') && !uri.startsWith('https://')) {
      var parts = parseUri(uri);

      if (!parts.protocol && options.type) {
        parts.protocol = (options.type == 'email')  ? 'mailto:' :
          ((options.type == 'phone') ? 'tel:' : '');
        uri = parts.protocol + uri;
      }

      // Check if device is enable, on special tel: or mailto: protocole
      var validProtocol = (parts.protocol == 'mailto:' || parts.protocol == 'tel:') && Device.enable;
      if (!validProtocol) {
        if (options.onError && typeof options.onError == 'function') {
          options.onError(uri);
        }
        return;
      }
    }

    // Note: If device enable, then target=_system will use InAppBrowser cordova plugin
    var openTarget = (options.target || (Device.enable ? '_system' : '_blank'));

    // If desktop, should always open in new window (no tabs)
    var openOptions;
    if (openTarget == '_blank' && Device.isDesktop()) {
      openOptions= "location=1,titlebar=1,status=1,menubar=1,toolbar=1,resizable=1,scrollbars=1";
      // Add width/height
      if ($window.screen && $window.screen.width && $window.screen.height) {
        openOptions += ",width={0},height={1}".format(Math.trunc($window.screen.width/2), Math.trunc($window.screen.height/2));
      }
    }
    var win = $window.open(uri,
      openTarget,
      openOptions);

    // Center the opened window
    if (openOptions && $window.screen && $window.screen.width && $window.screen.height) {
      win.moveTo($window.screen.width/2/2, $window.screen.height/2/2);
      win.focus();
    }

  }

  // Get time in second (UTC)
  function getDateNow() {
    return Math.trunc(new Date().getTime() / 1000);
  }

  function isPositiveInteger(x) {
    // http://stackoverflow.com/a/1019526/11236
    return /^\d+$/.test(x);
  }

  /**
   * Compare two software version numbers (e.g. 1.7.1)
   * Returns:
   *
   *  0 if they're identical
   *  negative if v1 < v2
   *  positive if v1 > v2
   *  Nan if they in the wrong format
   *
   *  E.g.:
   *
   *  assert(version_number_compare("1.7.1", "1.6.10") > 0);
   *  assert(version_number_compare("1.7.1", "1.7.10") < 0);
   *
   *  "Unit tests": http://jsfiddle.net/ripper234/Xv9WL/28/
   *
   *  Taken from http://stackoverflow.com/a/6832721/11236
   */
  function compareVersionNumbers(v1, v2){
    var v1parts = v1.split('.');
    var v2parts = v2.split('.');

    // First, validate both numbers are true version numbers
    function validateParts(parts) {
      for (var i = 0; i < parts.length; ++i) {
        if (!isPositiveInteger(parts[i])) {
          return false;
        }
      }
      return true;
    }
    if (!validateParts(v1parts) || !validateParts(v2parts)) {
      return NaN;
    }

    for (var i = 0; i < v1parts.length; ++i) {
      if (v2parts.length === i) {
        return 1;
      }

      if (v1parts[i] === v2parts[i]) {
        continue;
      }
      if (v1parts[i] > v2parts[i]) {
        return 1;
      }
      return -1;
    }

    if (v1parts.length != v2parts.length) {
      return -1;
    }

    return 0;
  }

  function isVersionCompatible(minVersion, actualVersion) {
    // TODO: add implementation
    console.debug('[http] TODO: implement check version [{0}] compatible with [{1}]'.format(actualVersion, minVersion));
    return compareVersionNumbers(minVersion, actualVersion) <= 0;
  }

  var cache = angular.copy(csCache.constants);
  cache.clear = function() {
    console.debug('[http] Cleaning cache...');
    csCache.clear(cachePrefix);
  };

  return {
    get: getResource,
    getWithCache: getResourceWithCache,
    post: postResource,
    ws: ws,
    closeAllWs: closeAllWs,
    getUrl : getUrl,
    getServer: getServer,
    uri: {
      parse: parseUri,
      open: openUri
    },
    date: {
      now: getDateNow
    },
    version: {
      compare: compareVersionNumbers,
      isCompatible: isVersionCompatible
    },
    cache: cache
  };
}])
;

angular.module('cesium.storage.services', [ 'cesium.config'])


  .factory('sessionStorage', ['$window', '$q', function($window, $q) {
    'ngInject';

    var
      exports = {
        storage: $window.sessionStorage || {}
      };

    exports.put = function(key, value) {
      exports.storage[key] = value;
      return $q.when();
    };

    exports.get = function(key, defaultValue) {
      return $q.when(exports.storage[key] || defaultValue);
    };

    exports.setObject = function(key, value) {
      exports.storage[key] = JSON.stringify(value);
      return $q.when();
    };

    exports.getObject = function(key) {
      return $q.when(JSON.parse(exports.storage[key] || 'null'));
    };

    return exports;
  }])

  .factory('localStorage', ['$window', '$q', 'sessionStorage', function($window, $q, sessionStorage) {
    'ngInject';

    var
      appName = "Cesium",
      started = false,
      startPromise,
      isDevice = true, // default for device (override later)
      exports = {
        standard: {
          storage: null
        },
        secure: {
          storage: null
        }
      };

    // removeIf(device)
    // Use this workaround to avoid to wait ionicReady() event
    isDevice = false;
    // endRemoveIf(device)

    /* -- Use standard browser implementation -- */

    exports.standard.put = function(key, value) {
      if (angular.isDefined(value) && value != null) {
        exports.standard.storage[key] = value;
      }
      else {
        exports.standard.storage.removeItem(key);
      }
      return $q.when();
    };

    exports.standard.get = function(key, defaultValue) {
      return $q.when(exports.standard.storage[key] || defaultValue);
    };

    exports.standard.setObject = function(key, value) {
      exports.standard.storage[key] = JSON.stringify(value);
      return $q.when();
    };

    exports.standard.getObject = function(key) {
      return $q.when(JSON.parse(exports.standard.storage[key] || 'null'));
    };

    /* -- Use secure storage (using a cordova plugin) -- */

    // Set a value to the secure storage (or remove if value is not defined)
    exports.secure.put = function(key, value) {
      var deferred = $q.defer();
      if (angular.isDefined(value)) {
        exports.secure.storage.set(
          function (key) { deferred.resolve(); },
          function (err) { deferred.reject(err); },
          key, value);
      }
      // Remove
      else {
        exports.secure.storage.remove(
          function (key) { deferred.resolve(); },
          function (err) { deferred.reject(err); },
          key);
      }
      return deferred.promise;
    };

    // Get a value from the secure storage
    exports.secure.get = function(key, defaultValue) {
      var deferred = $q.defer();
      exports.secure.storage.get(
        function (value) {
          if (!value && defaultValue) {
            deferred.resolve(defaultValue);
          }
          else {
            deferred.resolve(value);
          }
        },
        function (err) { deferred.reject(err); },
        key);
      return deferred.promise;
    };

    // Set a object to the secure storage
    exports.secure.setObject = function(key, value) {
      return exports.secure.put(key, value ? JSON.stringify(value) : undefined);
    };

    // Get a object from the secure storage
    exports.secure.getObject = function(key) {
      return exports.secure.storage.get(key)
        .then(function(value) {
          return JSON.parse(value||'null');
        });
    };

    function initStandardStorage() {
      // use local browser storage
      if ($window.localStorage) {
        console.debug('[storage] Starting {local} storage...');
        exports.standard.storage = $window.localStorage;
        // Set standard storage as default
        _.forEach(_.keys(exports.standard), function(key) {
          exports[key] = exports.standard[key];
        });
      }

      // Fallback to session storage (locaStorage could have been disabled on some browser)
      else {
        console.debug('[storage] Starting {session} storage...');
        // Set standard storage as default
        _.forEach(_.keys(sessionStorage), function(key) {
          exports[key] = sessionStorage[key];
        });
      }
      return $q.when();
    }

    function initSecureStorage() {
      console.debug('[storage] Starting {secure} storage...');
      // Set secure storage as default
      _.forEach(_.keys(exports.secure), function(key) {
        exports[key] = exports.secure[key];
      });

      var deferred = $q.defer();

      // No secure storage plugin: fall back to standard storage
      if (!cordova.plugins || !cordova.plugins.SecureStorage) {
        initStandardStorage();
        deferred.resolve();
      }
      else {

        exports.secure.storage = new cordova.plugins.SecureStorage(
          function () {
            deferred.resolve();
          },
          function (err) {
            console.error('[storage] Could not use secure storage. Will use standard.', err);
            initStandardStorage();
            deferred.resolve();
          },
          appName);
      }
      return deferred.promise;
    }

    exports.isStarted = function() {
      return started;
    };

    exports.ready = function() {
      if (started) return $q.when();
      return startPromise || start();
    };

    function start() {
      if (startPromise) return startPromise;

      var now = new Date().getTime();

      // Use Cordova secure storage plugin
      if (isDevice) {
        console.debug("[storage] Starting secure storage...");
        startPromise = initSecureStorage();
      }

      // Use default browser local storage
      else {
        startPromise = initStandardStorage();
      }

      return startPromise
        .then(function() {
          console.debug('[storage] Started in ' + (new Date().getTime() - now) + 'ms');
          started = true;
          startPromise = null;
        });
    }

    // default action
    start();

    return exports;
  }])


;

var App;

angular.module('cesium.device.services', ['cesium.utils.services', 'cesium.settings.services'])

  .factory('Device',
    ['$rootScope', '$translate', '$ionicPopup', '$q', 'ionicReady', function($rootScope, $translate, $ionicPopup, $q,
      ionicReady) {
      'ngInject';

      var
        CONST = {
          MAX_HEIGHT: 400,
          MAX_WIDTH: 400
        },
        exports = {
          // workaround to quickly no is device or not (even before the ready() event)
          enable: true
        },
        cache = {},
        started = false,
        startPromise;

      // removeIf(device)
      // workaround to quickly no is device or not (even before the ready() event)
      exports.enable = false;
      // endRemoveIf(device)

      function getPicture(options) {
        if (!exports.camera.enable) {
          return $q.reject("Camera not enable. Please call 'ionicReady()' once before use (e.g in app.js).");
        }

        // Options is the sourceType by default
        if (options && (typeof options === "string")) {
          options = {
            sourceType: options
          };
        }
        options = options || {};

        // Make sure a source type has been given (if not, ask user)
        if (angular.isUndefined(options.sourceType)) {
          return $translate(['SYSTEM.PICTURE_CHOOSE_TYPE', 'SYSTEM.BTN_PICTURE_GALLERY', 'SYSTEM.BTN_PICTURE_CAMERA'])
            .then(function(translations){
              return $ionicPopup.show({
                title: translations['SYSTEM.PICTURE_CHOOSE_TYPE'],
                buttons: [
                  {
                    text: translations['SYSTEM.BTN_PICTURE_GALLERY'],
                    type: 'button',
                    onTap: function(e) {
                      return navigator.camera.PictureSourceType.PHOTOLIBRARY;
                    }
                  },
                  {
                    text: translations['SYSTEM.BTN_PICTURE_CAMERA'],
                    type: 'button button-positive',
                    onTap: function(e) {
                      return navigator.camera.PictureSourceType.CAMERA;
                    }
                  }
                ]
              })
              .then(function(sourceType){
                console.info('[camera] User select sourceType:' + sourceType);
                options.sourceType = sourceType;
                return exports.camera.getPicture(options);
              });
            });
        }

        options.quality = options.quality || 50;
        options.destinationType = options.destinationType || navigator.camera.DestinationType.DATA_URL;
        options.encodingType = options.encodingType || navigator.camera.EncodingType.PNG;
        options.targetWidth = options.targetWidth || CONST.MAX_WIDTH;
        options.targetHeight = options.targetHeight || CONST.MAX_HEIGHT;
        return $cordovaCamera.getPicture(options);
      }

      function scan(n) {
        if (!exports.enable) {
          return $q.reject("Barcode scanner not enable. Please call 'ionicReady()' once before use (e.g in app.js).");
        }
        var deferred = $q.defer();
        cordova.plugins.barcodeScanner.scan(
          function(result) {
            if (!result.cancelled) {
              console.debug('[device] barcode scanner scan: ' + result.text);
              deferred.resolve(result.text); // make sure to convert into String
            }
            else {
              console.debug('[device] barcode scanner scan: CANCELLED');
              deferred.resolve();
            }
          },
          function(err) {
            console.error('[device] Error while using barcode scanner: ' + err);
            deferred.reject(err);
          },
          n);
        return deferred.promise;
      }

      function copy(text, callback) {
        if (!exports.enable) {
          return $q.reject('Device disabled');
        }
        var deferred = $q.defer();
        $cordovaClipboard
          .copy(text)
          .then(function () {
            // success
            if (callback) {
              callback();
            }
            deferred.resolve();
          }, function () {
            // error
            deferred.reject({message: 'ERROR.COPY_CLIPBOARD'});
          });
        return deferred.promise;
      }

      exports.clipboard = {copy: copy};
      exports.camera = {
          getPicture : getPicture,
          scan: function(n){
            console.warn('Deprecated use of Device.camera.scan(). Use Device.barcode.scan() instead');
            return scan(n);
          }
        };
      exports.barcode = {
        enable : false,
        scan: scan
      };
      exports.keyboard = {
        enable: false,
        close: function() {
          if (!exports.keyboard.enable) return;
          cordova.plugins.Keyboard.close();
        }
      };

      // Numerical keyboard - fix #30
      exports.keyboard.digit = {
        settings: {
          bindModel: function(modelScope, modelPath, settings) {
            settings = settings || {};
            modelScope = modelScope || $rootScope;
            var getModelValue = function() {
              return (modelPath||'').split('.').reduce(function(res, path) {
                return res ? res[path] : undefined;
              }, modelScope);
            };
            var setModelValue = function(value) {
              var paths = (modelPath||'').split('.');
              var property = paths.length && paths[paths.length-1];
              paths.reduce(function(res, path) {
                if (path == property) {
                  res[property] = value;
                  return;
                }
                return res[path];
              }, modelScope);
            };

            settings.action = settings.action || function(number) {
                setModelValue((getModelValue() ||'') + number);
              };
            if (settings.decimal) {
              settings.decimalSeparator = settings.decimalSeparator || '.';
              settings.leftButton = settings.leftButton = {
                html: '<span>.</span>',
                action: function () {
                  var text = getModelValue() || '';
                  // only one '.' allowed
                  if (text.indexOf(settings.decimalSeparator) >= 0) return;
                  // Auto add zero when started with '.'
                  if (!text.trim().length) {
                    text = '0';
                  }
                  setModelValue(text + settings.decimalSeparator);
                }
              };
            }
            settings.rightButton = settings.rightButton || {
                html: '<i class="icon ion-backspace-outline"></i>',
                action: function() {
                  var text = getModelValue();
                  if (text && text.length) {
                    text = text.slice(0, -1);
                    setModelValue(text);
                  }
                }
              };
            return settings;
          }
        }
      };

      exports.isIOS = function() {
        return !!navigator.userAgent.match(/iPhone | iPad | iPod/i) || ionic.Platform.isIOS();
      };

      exports.isDesktop = function() {
        if (!angular.isDefined(cache.isDesktop)) {
          try {
            // Should have NodeJs and NW
            cache.isDesktop = !exports.enable && !!process && !!App;
          } catch (err) {
            cache.isDesktop = false;
          }
        }
        return cache.isDesktop;
      };

      exports.isWeb = function() {
        return !exports.enable && !exports.isDesktop();
      };

      exports.ready = function() {
        if (started) return $q.when();
        return startPromise || exports.start();
      };

      exports.start = function() {

        startPromise = ionicReady()
          .then(function(){

            exports.enable = window.cordova && cordova && cordova.plugins;

            if (exports.enable){
              exports.camera.enable = !!navigator.camera;
              exports.keyboard.enable = cordova && cordova.plugins && !!cordova.plugins.Keyboard;
              exports.barcode.enable = cordova && cordova.plugins && !!cordova.plugins.barcodeScanner;
              exports.clipboard.enable = cordova && cordova.plugins && !!cordova.plugins.clipboard;

              if (exports.keyboard.enable) {
                angular.extend(exports.keyboard, cordova.plugins.Keyboard);
              }

              console.debug('[device] Ionic platform ready, with [camera: {0}] [barcode scanner: {1}] [keyboard: {2}] [clipboard: {3}]'
                .format(exports.camera.enable, exports.barcode.enable, exports.keyboard.enable, exports.clipboard.enable));

              if (cordova.InAppBrowser) {
                console.debug('[device] Enabling InAppBrowser');
              }
            }
            else {
              console.debug('[device] Ionic platform ready - no device detected.');
            }

            started = true;
            startPromise = null;
          });

        return startPromise;
      };

      return exports;
    }])

  ;


angular.module('cesium.currency.services', ['ngApi', 'cesium.bma.services'])

.factory('csCurrency', ['$rootScope', '$q', '$timeout', 'BMA', 'Api', 'csSettings', function($rootScope, $q, $timeout, BMA, Api, csSettings) {
  'ngInject';

  function factory(id, BMA) {
    var
      constants = {
        // Avoid to many call on well known currencies
        WELL_KNOWN_CURRENCIES: {
          g1: {
            firstBlockTime: 1488987127,
            medianTimeOffset: 3600
          }
        }
      },

      data = {},
      started = false,
      startPromise,
      listeners,
      api = new Api(this, "csCurrency-" + id);

    function powBase(amount, base) {
      return base <= 0 ? amount : amount * Math.pow(10, base);
    }

    function resetData() {
      data.name = null;
      data.parameters = null;
      data.firstBlockTime = null;
      data.membersCount = null;
      data.cache = {};
      data.node = BMA;
      data.currentUD = null;
      data.medianTimeOffset = 0;
      started = false;
      startPromise = undefined;
      api.data.raise.reset(data);
    }

    function loadData() {

      // Load currency from default node
      return $q.all([

        // get parameters
        loadParameters()
          .then(function(parameters) {
            // load first block info
            return loadFirstBlock(parameters.currency);
          }),

        // get current UD
        loadCurrentUD(),

        // call extensions
        api.data.raisePromise.load(data)
      ])
      .catch(function(err) {
        resetData();
        throw err;
      });
    }

    function loadParameters() {
      return BMA.blockchain.parameters()
        .then(function(res){
          data.name = res.currency;
          data.parameters = res;
          data.medianTimeOffset = res.avgGenTime * res.medianTimeBlocks / 2;
          return res;
        });
    }

    function loadFirstBlock(currencyName) {
      // Well known currencies
      if (constants.WELL_KNOWN_CURRENCIES[currencyName]){
        angular.merge(data, constants.WELL_KNOWN_CURRENCIES[currencyName]);
        return $q.when();
      }

      return BMA.blockchain.block({block:0})
        .then(function(json) {
          // Need by graph plugin
          data.firstBlockTime = json.medianTime;
        })
        .catch(function(err) {
          // Special case, when currency not started yet
          if (err && err.ucode === BMA.errorCodes.BLOCK_NOT_FOUND) {
            data.firstBlockTime = 0;
            data.initPhase = true;
            console.warn('[currency] Blockchain not launched: Enable init phase mode');
            return;
          }
          throw err;
        });
    }

    function loadCurrentUD() {
      return BMA.blockchain.stats.ud()
        .then(function(res){
          // Special case for currency init
          if (!res.result.blocks.length) {
            data.currentUD = data.parameters ? data.parameters.ud0 : -1;
            return data.currentUD ;
          }
          else {
            var lastBlockWithUD = res.result.blocks[res.result.blocks.length - 1];
            return BMA.blockchain.block({ block: lastBlockWithUD })
              .then(function(block){
                data.currentUD = powBase(block.dividend, block.unitbase);
                return data.currentUD;
              })
              .catch(function(err) {
                console.error("[currency] Unable to load last block with UD, with number {0}".format(lastBlockWithUD));
                data.currentUD = null;
                throw err;
              });
          }
        })
        .catch(function(err) {
          data.currentUD = null;
          throw err;
        });
    }

    function getData() {

      if (started) { // load only once
        return $q.when(data);
      }

      // Previous load not finished: return the existing promise - fix #452
      return startPromise || start();
    }

    function getDataField(field) {
      return function() {
        if (started) { // load only once
          return $q.when(data[field]);
        }

        // Previous load not finished: return the existing promise - fix #452
        return startPromise || start() // load only once
            .then(function(){
              return data[field];
            });
      };
    }

    function onBlock(json) {
      var block = new Block(json);
      block.cleanData(); // Remove unused content (arrays...) and keep items count

      //console.debug('[currency] Received new block', block);
      console.debug('[currency] Received new block [' + block.number + '-' + block.hash + ']');

      data.currentBlock = block;
      data.currentBlock.receivedAt = Math.trunc(new Date().getTime() / 1000);

      data.medianTime = block.medianTime;
      data.membersCount = block.membersCount;

      // Update UD
      if (block.dividend) {
        data.currentUD = block.dividend;
      }

      // Dispatch to extensions
      api.data.raise.newBlock(block);
    }

    function addListeners() {
      listeners = [
        // Listen if node changed
        BMA.api.node.on.restart($rootScope, restart, this),
        // open web socket on block
        BMA.websocket.block().onListener(onBlock)
      ];
    }

    function removeListeners() {
      _.forEach(listeners, function(remove){
        remove();
      });
      listeners = [];
    }

    function ready() {
      if (started) return $q.when(data);
      return startPromise || start();
    }

    function stop() {
      console.debug('[currency] Stopping...');
      removeListeners();
      resetData();
    }

    function restart() {
      stop();
      return $timeout(start, 200);
    }

    function start() {
      console.debug('[currency] Starting...');
      var now = new Date().getTime();

      startPromise = BMA.ready()

        // Load data
        .then(loadData)

        // Emit ready event
        .then(function() {
          addListeners();

          console.debug('[currency] Started in ' + (new Date().getTime() - now) + 'ms');

          started = true;
          startPromise = null;

          // Emit event (used by plugins)
          api.data.raise.ready(data);
        })
        .then(function(){
          return data;
        });

      return startPromise;
    }

    var currentBlockField = getDataField('currentBlock');

    function getCurrent(cache) {
      // Get field (and make sure service is started)
      return currentBlockField()

        .then(function(currentBlock) {

          var now = Math.trunc(new Date().getTime() / 1000);

          if (cache) {
            if (currentBlock && (now - currentBlock.receivedAt) < 60/*1min*/) {
              //console.debug('[currency] Use current block #'+ currentBlock.number +' from cache (age='+ (now - currentBlock.receivedAt) + 's)');
              return currentBlock;
            }

            if (!currentBlock) {
              // Should never occur, if websocket /ws/block works !
              console.warn('[currency] No current block in cache: get it from network. Websocket [/ws/block] may not be started ?');
            }
          }

          return BMA.blockchain.current()
            .catch(function(err){
              // Special case for currency init (root block not exists): use fixed values
              if (err && err.ucode == BMA.errorCodes.NO_CURRENT_BLOCK) {
                return {number: 0, hash: BMA.constants.ROOT_BLOCK_HASH, medianTime: Math.trunc(new Date().getTime() / 1000)};
              }
              throw err;
            })
            .then(function(current) {
              data.currentBlock = current;
              data.currentBlock.receivedAt = now;
              return current;
            });
        });
    }

    function getLastValidBlock() {
      if (csSettings.data.blockValidityWindow <= 0) {
        return getCurrent(true);
      }

      return getCurrent(true)
        .then(function(current) {
          var number = current.number - csSettings.data.blockValidityWindow;
          return (number > 0) ? BMA.blockchain.block({block: number}) : current;
        });
    }

    // Get time in second (UTC - medianTimeOffset)
    function getDateNow() {
      return Math.trunc(new Date().getTime() / 1000) - (data.medianTimeOffset || constants.WELL_KNOWN_CURRENCIES.g1.medianTimeOffset);
    }

    // TODO register new block event, to get new UD value

    // Register extension points
    api.registerEvent('data', 'ready');
    api.registerEvent('data', 'load');
    api.registerEvent('data', 'reset');
    api.registerEvent('data', 'newBlock');

    // init data
    resetData();

    // Default action
    //start();

    return {
      ready: ready,
      start: start,
      stop: stop,
      data: data,
      get: getData,
      name: getDataField('name'),
      parameters: getDataField('parameters'),
      currentUD: getDataField('currentUD'),
      medianTimeOffset: getDataField('medianTimeOffset'),
      blockchain: {
        current: getCurrent,
        lastValid: getLastValidBlock
      },
      date: {
        now: getDateNow
      },
      // api extension
      api: api,
      // deprecated methods
      default: function() {
        console.warn('[currency] \'csCurrency.default()\' has been DEPRECATED - Please use \'csCurrency.get()\' instead.');
        return getData();
      }
    };
  }

  var service = factory('default', BMA);
  service.instance = factory;
  return service;
}]);

//var Base58, Base64, scrypt_module_factory = null, nacl_factory = null;

angular.module('cesium.bma.services', ['ngApi', 'cesium.http.services', 'cesium.settings.services'])

.factory('BMA', ['$q', '$window', '$rootScope', '$timeout', 'csCrypto', 'Api', 'Device', 'csConfig', 'csSettings', 'csHttp', function($q, $window, $rootScope, $timeout, csCrypto, Api, Device, csConfig, csSettings, csHttp) {
  'ngInject';

  function BMA(host, port, useSsl, useCache) {

    var pubkey = "[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}";
    var
      // TX output conditions
      SIG = "SIG\\(([0-9a-zA-Z]{43,44})\\)",
      XHX = 'XHX\\(([A-F0-9]{1,64})\\)',
      CSV = 'CSV\\(([0-9]{1,8})\\)',
      CLTV = 'CLTV\\(([0-9]{1,10})\\)',
      OUTPUT_FUNCTION = SIG+'|'+XHX+'|'+CSV+'|'+CLTV,
      OUTPUT_OPERATOR = '(&&)|(\\|\\|)',
      OUTPUT_FUNCTIONS = OUTPUT_FUNCTION+'([ ]*' + OUTPUT_OPERATOR + '[ ]*' + OUTPUT_FUNCTION +')*',
      OUTPUT_OBJ = 'OBJ\\(([0-9]+)\\)',
      OUTPUT_OBJ_OPERATOR = OUTPUT_OBJ + '[ ]*' + OUTPUT_OPERATOR + '[ ]*' + OUTPUT_OBJ,
      REGEX_ENDPOINT_PARAMS = "( ([a-z_][a-z0-9-_.ÄÄ]*))?( ([0-9.]+))?( ([0-9a-f:]+))?( ([0-9]+))( (.+))?",
      regexp = {
        USER_ID: "[A-Za-z0-9_-]+",
        CURRENCY: "[A-Za-z0-9_-]+",
        PUBKEY: pubkey,
        PUBKEY_WITH_CHECKSUM: "(" + pubkey +")" + ":([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{3})",
        COMMENT: "[ a-zA-Z0-9-_:/;*\\[\\]()?!^\\+=@&~#{}|\\\\<>%.]*",
        INVALID_COMMENT_CHARS: "[^ a-zA-Z0-9-_:/;*\\[\\]()?!^\\+=@&~#{}|\\\\<>%.]*",
        // duniter://[uid]:[pubkey]@[host]:[port]
        URI_WITH_AT: "duniter://(?:([A-Za-z0-9_-]+):)?("+pubkey+"@([a-zA-Z0-9-.]+.[ a-zA-Z0-9-_:/;*?!^\\+=@&~#|<>%.]+)",
        URI_WITH_PATH: "duniter://([a-zA-Z0-9-.]+.[a-zA-Z0-9-_:.]+)/("+pubkey+")(?:/([A-Za-z0-9_-]+))?",
        BMA_ENDPOINT: "BASIC_MERKLED_API" + REGEX_ENDPOINT_PARAMS,
        BMAS_ENDPOINT: "BMAS" + REGEX_ENDPOINT_PARAMS,
        WS2P_ENDPOINT: "WS2P ([a-f0-9]{8})"+ REGEX_ENDPOINT_PARAMS,
        BMATOR_ENDPOINT: "BMATOR ([a-z0-9-_.]*|[0-9.]+|[0-9a-f:]+.onion)(?: ([0-9]+))?",
        WS2PTOR_ENDPOINT: "WS2PTOR ([a-f0-9]{8}) ([a-z0-9-_.]*|[0-9.]+|[0-9a-f:]+.onion)(?: ([0-9]+))?(?: (.+))?"
      },
      errorCodes = {
        REVOCATION_ALREADY_REGISTERED: 1002,
        HTTP_LIMITATION: 1006,
        IDENTITY_SANDBOX_FULL: 1007,
        NO_MATCHING_IDENTITY: 2001,
        UID_ALREADY_USED: 2003,
        NO_MATCHING_MEMBER: 2004,
        NO_IDTY_MATCHING_PUB_OR_UID: 2021,
        WRONG_SIGNATURE_MEMBERSHIP: 2006,
        MEMBERSHIP_ALREADY_SEND: 2007,
        NO_CURRENT_BLOCK: 2010,
        BLOCK_NOT_FOUND: 2011,
        SOURCE_ALREADY_CONSUMED: 2015,
        TX_INPUTS_OUTPUTS_NOT_EQUAL: 2024,
        TX_OUTPUT_SUM_NOT_EQUALS_PREV_DELTAS: 2025,
        TX_ALREADY_PROCESSED: 2030
      },
      constants = {
        PROTOCOL_VERSION: 10,
        ROOT_BLOCK_HASH: 'E3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855',
        LIMIT_REQUEST_COUNT: 5, // simultaneous async request to a Duniter node
        LIMIT_REQUEST_DELAY: 1000, // time (in second) to wait between to call of a rest request
        regex: regexp, // deprecated
        regexp: regexp
      },
      listeners,
      that = this;

    that.date = {now: csHttp.date.now};
    that.api = new Api(this, 'BMA-' + that.server);
    that.started = false;
    that.init = init;

    // Allow to force SSL connection with port different from 443
    that.forceUseSsl = (csConfig.httpsMode === 'true' || csConfig.httpsMode === true || csConfig.httpsMode === 'force') ||
    ($window.location && $window.location.protocol === 'https:') ? true : false;
    if (that.forceUseSsl) {
      console.debug('[BMA] Enable SSL (forced by config or detected in URL)');
    }


    if (host) {
      init(host, port, useSsl, useCache);
    }
    that.useCache = useCache; // need here because used in get() function

    function init(host, port, useSsl, useCache) {
      if (that.started) that.stop();
      that.alive = false;
      that.cache = _emptyCache();

      // Use settings as default, if exists
      if (csSettings.data && csSettings.data.node) {
        host = host || csSettings.data.node.host;
        port = port || csSettings.data.node.port;

        useSsl = angular.isDefined(useSsl) ? useSsl : (port == 443 || csSettings.data.node.useSsl || that.forceUseSsl);
        useCache =  angular.isDefined(useCache) ? useCache : true;
      }

      if (!host) {
        return; // could not init yet
      }
      that.host = host;
      that.port = port || 80;
      that.useSsl = angular.isDefined(useSsl) ? useSsl : (that.port == 443 || that.forceUseSsl);
      that.useCache = angular.isDefined(useCache) ? useCache : false;
      that.server = csHttp.getServer(host, port);
      that.url = csHttp.getUrl(host, port, ''/*path*/, useSsl);
    }

    function exact(regexpContent) {
      return new RegExp("^" + regexpContent + "$");
    }

    function test(regexpContent) {
      return new RegExp(regexpContent);
    }

    function _emptyCache() {
      return {
        getByPath: {},
        postByPath: {},
        wsByPath: {}
      };
    }

    function closeWs() {
      console.warn('[BMA] Closing all websockets...');
      _.keys(that.cache.wsByPath).forEach(function(key) {
        var sock = that.cache.wsByPath[key];
        sock.close();
      });
      that.cache.wsByPath = {};
    }

    that.cleanCache = function() {
      console.debug('[BMA] Cleaning requests cache...');
      closeWs();
      that.cache = _emptyCache();
    };

    get = function (path, cacheTime) {

      cacheTime = that.useCache && cacheTime;
      var cacheKey = path + (cacheTime ? ('#'+cacheTime) : '');

      var getRequest = function(params) {

        if (!that.started) {
          if (!that._startPromise) {
            console.error('[BMA] Trying to get [{0}] before start()...'.format(path));
          }
          return that.ready().then(function() {
            return getRequest(params);
          });
        }

        var request = that.cache.getByPath[cacheKey];
        if (!request) {
          if (cacheTime) {
            request = csHttp.getWithCache(that.host, that.port, path, that.useSsl, cacheTime);
          }
          else {
            request = csHttp.get(that.host, that.port, path, that.useSsl);
          }
          that.cache.getByPath[cacheKey] = request;
        }
        return request(params);
      };

      return getRequest;
    };

    post = function(path) {
      var postRequest = function(obj, params) {
        if (!that.started) {
          if (!that._startPromise) {
            console.error('[BMA] Trying to post [{0}] before start()...'.format(path));
          }
          return that.ready().then(function() {
            return postRequest(obj, params);
          });
        }

        var request = that.cache.postByPath[path];
        if (!request) {
          request =  csHttp.post(that.host, that.port, path, that.useSsl);
          that.cache.postByPath[path] = request;
        }
        return request(obj, params);
      };

      return postRequest;
    };

    ws = function(path) {
      return function() {
        var sock = that.cache.wsByPath[path];
        if (!sock || sock.isClosed()) {
          sock =  csHttp.ws(that.host, that.port, path, that.useSsl);

          // When close, remove from cache
          sock.onclose = function() {
            delete that.cache.wsByPath[path];
          };

          that.cache.wsByPath[path] = sock;
        }
        return sock;
      };
    };

    that.isAlive = function() {
      return csHttp.get(that.host, that.port, '/node/summary', that.useSsl)()
        .then(function(json) {
          var isDuniter = json && json.duniter && json.duniter.software == 'duniter' && json.duniter.version;
          var isCompatible = isDuniter && csHttp.version.isCompatible(csSettings.data.minVersion, json.duniter.version);
          if (isDuniter && !isCompatible) {
            console.error('[BMA] Uncompatible version [{0}] - expected at least [{1}]'.format(json.duniter.version, csSettings.data.minVersion));
          }
          return isCompatible;
        })
        .catch(function() {
          return false;
        });
    };

    function removeListeners() {
      _.forEach(listeners, function(remove){
        remove();
      });
      listeners = [];
    }

    function addListeners() {
      listeners = [
        // Listen if node changed
        csSettings.api.data.on.changed($rootScope, onSettingsChanged, this)
      ];
    }

    function onSettingsChanged(settings) {

      var server = csHttp.getUrl(settings.node.host, settings.node.port, ''/*path*/, settings.node.useSsl);
      var hasChanged = (server != that.url);
      if (hasChanged) {
        init(settings.node.host, settings.node.port, settings.node.useSsl, that.useCache);
        that.restart();
      }
    }

    that.isStarted = function() {
      return that.started;
    };

    that.ready = function() {
      if (that.started) return $q.when(true);
      return that._startPromise || that.start();
    };

    that.start = function() {
      if (that._startPromise) return that._startPromise;
      if (that.started) return $q.when(that.alive);

      if (!that.host) {
        return csSettings.ready()
          .then(function() {
            that.init();

            // Always enable cache
            that.useCache = true;

            return that.start(); // recursive call
          });
      }

      if (that.useSsl) {
        console.debug('[BMA] Starting [{0}] (SSL on)...'.format(that.server));
      }
      else {
        console.debug('[BMA] Starting [{0}]...'.format(that.server));
      }

      var now = new Date().getTime();

      that._startPromise = $q.all([
          csSettings.ready,
          that.isAlive()
        ])
        .then(function(res) {
          that.alive = res[1];
          if (!that.alive) {
            console.error('[BMA] Could not start [{0}]: node unreachable'.format(that.server));
            that.started = true;
            delete that._startPromise;
            return false;
          }

          // Add listeners
          if (!listeners || listeners.length === 0) {
            addListeners();
          }
          console.debug('[BMA] Started in '+(new Date().getTime()-now)+'ms');

          that.api.node.raise.start();
          that.started = true;
          delete that._startPromise;
          return true;
        });
      return that._startPromise;
    };

    that.stop = function() {
      console.debug('[BMA] Stopping...');
      removeListeners();
      csHttp.cache.clear();
      that.cleanCache();
      that.alive = false;
      that.started = false;
      delete that._startPromise;
      that.api.node.raise.stop();
    };

    that.restart = function() {
      that.stop();
      return $timeout(that.start, 200)
        .then(function(alive) {
          if (alive) {
            that.api.node.raise.restart();
          }
          return alive;
        });
    };

    that.api.registerEvent('node', 'start');
    that.api.registerEvent('node', 'stop');
    that.api.registerEvent('node', 'restart');

    var exports = {
      errorCodes: errorCodes,
      constants: constants,
      regexp: {
        USER_ID: exact(regexp.USER_ID),
        COMMENT: exact(regexp.COMMENT),
        PUBKEY: exact(regexp.PUBKEY),
        PUBKEY_WITH_CHECKSUM: exact(regexp.PUBKEY_WITH_CHECKSUM),
        CURRENCY: exact(regexp.CURRENCY),
        URI: exact(regexp.URI),
        BMA_ENDPOINT: exact(regexp.BMA_ENDPOINT),
        BMAS_ENDPOINT: exact(regexp.BMAS_ENDPOINT),
        WS2P_ENDPOINT: exact(regexp.WS2P_ENDPOINT),
        BMATOR_ENDPOINT: exact(regexp.BMATOR_ENDPOINT),
        WS2PTOR_ENDPOINT: exact(regexp.WS2PTOR_ENDPOINT),
        // TX output conditions
        TX_OUTPUT_SIG: exact(SIG),
        TX_OUTPUT_FUNCTION: test(OUTPUT_FUNCTION),
        TX_OUTPUT_OBJ_OPERATOR_AND: test(OUTPUT_OBJ + '([ ]*&&[ ]*(' + OUTPUT_OBJ + '))+'),
        TX_OUTPUT_OBJ_OPERATOR_OR: test(OUTPUT_OBJ + '([ ]*\\|\\|[ ]*(' + OUTPUT_OBJ + '))+'),
        TX_OUTPUT_OBJ: test(OUTPUT_OBJ),
        TX_OUTPUT_OBJ_OPERATOR: test(OUTPUT_OBJ_OPERATOR),
        TX_OUTPUT_OBJ_PARENTHESIS: test('\\(('+OUTPUT_OBJ+')\\)'),
        TX_OUTPUT_FUNCTIONS: test(OUTPUT_FUNCTIONS)
      },
      node: {
        summary: get('/node/summary', csHttp.cache.LONG),
        same: function(host2, port2) {
          return host2 == that.host && ((!that.port && !port2) || (that.port == port2||80));
        },
      },
      network: {
        peering: {
          self: get('/network/peering'),
          peers: get('/network/peering/peers')
        },
        peers: get('/network/peers'),
        ws2p: {
          info: get('/network/ws2p/info'),
          heads: get('/network/ws2p/heads')
        }
      },
      wot: {
        lookup: get('/wot/lookup/:search'),
        certifiedBy: get('/wot/certified-by/:pubkey'),
        certifiersOf: get('/wot/certifiers-of/:pubkey'),
        member: {
          all: get('/wot/members', csHttp.cache.LONG),
          pending: get('/wot/pending', csHttp.cache.SHORT)
        },
        requirements: get('/wot/requirements/:pubkey'),
        add: post('/wot/add'),
        certify: post('/wot/certify'),
        revoke: post('/wot/revoke')
      },
      blockchain: {
        parameters: get('/blockchain/parameters', csHttp.cache.LONG),
        block: get('/blockchain/block/:block', csHttp.cache.SHORT),
        blocksSlice: get('/blockchain/blocks/:count/:from'),
        current: get('/blockchain/current'),
        membership: post('/blockchain/membership'),
        stats: {
          ud: get('/blockchain/with/ud', csHttp.cache.SHORT),
          tx: get('/blockchain/with/tx'),
          newcomers: get('/blockchain/with/newcomers'),
          hardship: get('/blockchain/hardship/:pubkey'),
          difficulties: get('/blockchain/difficulties')
        }
      },
      tx: {
        sources: get('/tx/sources/:pubkey'),
        process: post('/tx/process'),
        history: {
          all: get('/tx/history/:pubkey'),
          times: get('/tx/history/:pubkey/times/:from/:to', csHttp.cache.LONG),
          timesNoCache: get('/tx/history/:pubkey/times/:from/:to'),
          blocks: get('/tx/history/:pubkey/blocks/:from/:to', csHttp.cache.LONG),
          pending: get('/tx/history/:pubkey/pending')
        }
      },
      ud: {
        history: get('/ud/history/:pubkey')
      },
      uri: {},
      version: {},
      raw: {}
    };
    exports.regex = exports.regexp; // deprecated

    exports.tx.parseUnlockCondition = function(unlockCondition) {

      //console.debug('[BMA] Parsing unlock condition: {0}.'.format(unlockCondition));
      var convertedOutput = unlockCondition;
      var treeItems = [];
      var treeItem;
      var treeItemId;
      var childrenContent;
      var childrenMatches;
      var functions = {};

      // Parse functions, then replace with an 'OBJ()' generic function, used to build a object tree
      var matches = exports.regexp.TX_OUTPUT_FUNCTION.exec(convertedOutput);
      while(matches) {
        treeItem = {};
        treeItemId = 'OBJ(' + treeItems.length + ')';
        treeItem.type = convertedOutput.substr(matches.index, matches[0].indexOf('('));
        treeItem.value = matches[1] || matches[2] || matches[3] || matches[4]; // get value from regexp OUTPUT_FUNCTION
        treeItems.push(treeItem);

        functions[treeItem.type] = functions[treeItem.type]++ || 1;

        convertedOutput = convertedOutput.replace(matches[0], treeItemId);
        matches = exports.regexp.TX_OUTPUT_FUNCTION.exec(convertedOutput);
      }

      var loop = true;
      while(loop) {
        // Parse AND operators
        matches = exports.regexp.TX_OUTPUT_OBJ_OPERATOR_AND.exec(convertedOutput);
        loop = !!matches;
        while (matches) {
          treeItem = {};
          treeItemId = 'OBJ(' + treeItems.length + ')';
          treeItem.type = 'AND';
          treeItem.children = [];
          treeItems.push(treeItem);

          childrenContent = matches[0];
          childrenMatches = exports.regexp.TX_OUTPUT_OBJ.exec(childrenContent);
          while(childrenMatches) {

            treeItem.children.push(treeItems[childrenMatches[1]]);
            childrenContent = childrenContent.replace(childrenMatches[0], '');
            childrenMatches = exports.regexp.TX_OUTPUT_OBJ.exec(childrenContent);
          }

          convertedOutput = convertedOutput.replace(matches[0], treeItemId);
          matches = exports.regexp.TX_OUTPUT_OBJ_OPERATOR_AND.exec(childrenContent);
        }

        // Parse OR operators

        matches = exports.regexp.TX_OUTPUT_OBJ_OPERATOR_OR.exec(convertedOutput);
        loop = loop || !!matches;
        while (matches) {
          treeItem = {};
          treeItemId = 'OBJ(' + treeItems.length + ')';
          treeItem.type = 'OR';
          treeItem.children = [];
          treeItems.push(treeItem);

          childrenContent = matches[0];
          childrenMatches = exports.regexp.TX_OUTPUT_OBJ.exec(childrenContent);
          while(childrenMatches) {
            treeItem.children.push(treeItems[childrenMatches[1]]);
            childrenContent = childrenContent.replace(childrenMatches[0], '');
            childrenMatches = exports.regexp.TX_OUTPUT_OBJ.exec(childrenContent);
          }

          convertedOutput = convertedOutput.replace(matches[0], treeItemId);
          matches = exports.regexp.TX_OUTPUT_OBJ_OPERATOR_AND.exec(convertedOutput);
        }

        // Remove parenthesis
        matches = exports.regexp.TX_OUTPUT_OBJ_PARENTHESIS.exec(convertedOutput);
        loop = loop || !!matches;
        while (matches) {
          convertedOutput = convertedOutput.replace(matches[0], matches[1]);
          matches = exports.regexp.TX_OUTPUT_OBJ_PARENTHESIS.exec(convertedOutput);
        }
      }

      functions = _.keys(functions);
      if (functions.length === 0) {
        console.error('[BMA] Unparseable unlock condition: ', output);
        return;
      }
      console.debug('[BMA] Unlock conditions successfully parsed:', treeItem);
      return {
        unlockFunctions: functions,
        unlockTree: treeItem
      };
    };

    exports.node.parseEndPoint = function(endpoint) {
      // Try BMA
      var matches = exports.regexp.BMA_ENDPOINT.exec(endpoint);
      if (matches) {
        return {
          "dns": matches[2] || '',
          "ipv4": matches[4] || '',
          "ipv6": matches[6] || '',
          "port": matches[8] || 80,
          "useSsl": matches[8] && matches[8] == 443,
          "path": matches[10],
          "useBma": true
        };
      }
      // Try BMAS
      matches = exports.regexp.BMAS_ENDPOINT.exec(endpoint);
      if (matches) {
        return {
          "dns": matches[2] || '',
          "ipv4": matches[4] || '',
          "ipv6": matches[6] || '',
          "port": matches[8] || 80,
          "useSsl": true,
          "path": matches[10],
          "useBma": true
        };
      }
      // Try BMATOR
      matches = exports.regexp.BMATOR_ENDPOINT.exec(endpoint);
      if (matches) {
        return {
          "dns": matches[1] || '',
          "port": matches[2] || 80,
          "useSsl": false,
          "useTor": true,
          "useBma": true
        };
      }
      // Try WS2P
      matches = exports.regexp.WS2P_ENDPOINT.exec(endpoint);
      if (matches) {
        return {
          "ws2pid": matches[1] || '',
          "dns": matches[3] || '',
          "ipv4": matches[5] || '',
          "ipv6": matches[7] || '',
          "port": matches[9] || 80,
          "useSsl": matches[9] && matches[9] == 443,
          "path": matches[11] || '',
          "useWs2p": true
        };
      }
      // Try WS2PTOR
      matches = exports.regexp.WS2PTOR_ENDPOINT.exec(endpoint);
      if (matches) {
        return {
          "ws2pid": matches[1] || '',
          "dns": matches[2] || '',
          "port": matches[3] || 80,
          "path": matches[4] || '',
          "useSsl": false,
          "useTor": true,
          "useWs2p": true
        };
      }
    };

    exports.copy = function(otherNode) {
      if (that.started) that.stop();
      that.init(otherNode.host, otherNode.port, otherNode.useSsl, that.useCache/*keep original value*/);
      return that.start();
    };

    exports.wot.member.uids = function() {
      return exports.wot.member.all()
        .then(function(res){
          return res.results.reduce(function(res, member){
            res[member.pubkey] = member.uid;
            return res;
          }, {});
        });
    };

    exports.wot.member.get = function(pubkey) {
      return exports.wot.member.uids()
        .then(function(memberUidsByPubkey){
          var uid = memberUidsByPubkey[pubkey];
          return {
              pubkey: pubkey,
              uid: (uid ? uid : null)
            };
        });
    };

    exports.wot.member.getByUid = function(uid) {
      return exports.wot.member.all()
        .then(function(res){
          return _.findWhere(res.results, {uid: uid});
        });
    };

    /**
     * Return all expected blocks
     * @param blockNumbers a rray of block number
    */
    exports.blockchain.blocks = function(blockNumbers){
      return exports.raw.getHttpRecursive(exports.blockchain.block, 'block', blockNumbers);
    };

    /**
     * Return all expected blocks
     * @param blockNumbers a rray of block number
     */
    exports.network.peering.peersByLeaves = function(leaves){
      return exports.raw.getHttpRecursive(exports.network.peering.peers, 'leaf', leaves, 0, 10, callbackFlush);
    };

    exports.raw.getHttpRecursive = function(httpGetRequest, paramName, paramValues, offset, size, callbackFlush) {
      offset = angular.isDefined(offset) ? offset : 0;
      size = size || exports.constants.LIMIT_REQUEST_COUNT;
      return $q(function(resolve, reject) {
        var result = [];
        var jobs = [];
        _.each(paramValues.slice(offset, offset+size), function(paramValue) {
          var requestParams = {};
          requestParams[paramName] = paramValue;
          jobs.push(
            httpGetRequest(requestParams)
              .then(function(res){
                if (!res) return;
                result.push(res);
              })
          );
        });

        $q.all(jobs)
          .then(function() {
            if (offset < paramValues.length - 1) {
              $timeout(function() {
                exports.raw.getHttpRecursive(httpGetRequest, paramName, paramValues, offset+size, size)
                  .then(function(res) {
                    if (!res || !res.length) {
                      resolve(result);
                      return;
                    }

                    resolve(result.concat(res));
                  })
                  .catch(function(err) {
                    reject(err);
                  });
              }, exports.constants.LIMIT_REQUEST_DELAY);
            }
            else {
              resolve(result);
            }
          })
          .catch(function(err){
            if (err && err.ucode === exports.errorCodes.HTTP_LIMITATION) {
              resolve(result);
            }
            else {
              reject(err);
            }
          });
      });
    };

    exports.raw.getHttpWithRetryIfLimitation = function(exec) {
      return exec()
        .catch(function(err){
          // When too many request, retry in 3s
          if (err && err.ucode == exports.errorCodes.HTTP_LIMITATION) {
            return $timeout(function() {
              // retry
              return exports.raw.getHttpWithRetryIfLimitation(exec);
            }, exports.constants.LIMIT_REQUEST_DELAY);
          }
        });
    };

    exports.blockchain.lastUd = function() {
      return exports.blockchain.stats.ud()
        .then(function(res) {
          if (!res.result.blocks || !res.result.blocks.length) {
            return null;
          }
          var lastBlockWithUD = res.result.blocks[res.result.blocks.length - 1];
          return exports.blockchain.block({block: lastBlockWithUD})
            .then(function(block){
              return (block.unitbase > 0) ? block.dividend * Math.pow(10, block.unitbase) : block.dividend;
            });
        });
    };

    exports.uri.parse = function(uri) {
      return $q(function(resolve, reject) {
        var pubkey;

        // If pubkey: not need to parse
        if (exact(regexp.PUBKEY).test(uri)) {
          resolve({
            pubkey: uri
          });
        }
        // If pubkey+checksum
        else if (exact(regexp.PUBKEY_WITH_CHECKSUM).test(uri)) {
          console.debug("[BMA.parse] Detecting a pubkey with checksum: " + uri);
          var matches = exports.regexp.PUBKEY_WITH_CHECKSUM.exec(uri);
          pubkey = matches[1];
          var checksum = matches[2];
          console.debug("[BMA.parse] Detecting a pubkey {"+pubkey+"} with checksum {" + checksum + "}");
          var expectedChecksum = csCrypto.util.pkChecksum(pubkey);
          console.debug("[BMA.parse] Expecting checksum for pubkey is {" + expectedChecksum + "}");
          if (checksum != expectedChecksum) {
            reject( {message: 'ERROR.PUBKEY_INVALID_CHECKSUM'});
          }
          else {
            resolve({
              pubkey: pubkey
            });
          }
        }
        else if(uri.startsWith('duniter://')) {
          var parser = csHttp.uri.parse(uri),
            uid,
            currency = parser.host.indexOf('.') === -1 ? parser.host : null,
            host = parser.host.indexOf('.') !== -1 ? parser.host : null;
          if (parser.username) {
            if (parser.password) {
              uid = parser.username;
              pubkey = parser.password;
            }
            else {
              pubkey = parser.username;
            }
          }
          if (parser.pathname) {
            var paths = parser.pathname.split('/');
            var pathCount = !paths ? 0 : paths.length;
            var index = 0;
            if (!currency && pathCount > index) {
              currency = paths[index++];
            }
            if (!pubkey && pathCount > index) {
              pubkey = paths[index++];
            }
            if (!uid && pathCount > index) {
              uid = paths[index++];
            }
            if (pathCount > index) {
              reject( {message: 'Bad Duniter URI format. Invalid path (incomplete or redundant): '+ parser.pathname}); return;
            }
          }

          if (!currency){
            if (host) {
              csHttp.get(host + '/blockchain/parameters')()
              .then(function(parameters){
                resolve({
                  uid: uid,
                  pubkey: pubkey,
                  host: host,
                  currency: parameters.currency
                });
              })
              .catch(function(err) {
                console.error(err);
                reject({message: 'Could not get node parameter. Currency could not be retrieve'});
              });
            }
            else {
              reject({message: 'Bad Duniter URI format. Missing currency name (or node address).'}); return;
            }
          }
          else {
            if (!host) {
              resolve({
                uid: uid,
                pubkey: pubkey,
                currency: currency
              });
            }

            // Check if currency are the same (between node and uri)
            return csHttp.get(host + '/blockchain/parameters')()
              .then(function(parameters){
                if (parameters.currency !== currency) {
                  reject( {message: "Node's currency ["+parameters.currency+"] does not matched URI's currency ["+currency+"]."}); return;
                }
                resolve({
                  uid: uid,
                  pubkey: pubkey,
                  host: host,
                  currency: currency
                });
              })
              .catch(function(err) {
                console.error(err);
                reject({message: 'Could not get node parameter. Currency could not be retrieve'});
              });
          }
        }
        else {
          console.debug("[BMA.parse] Could not parse URI: " + uri);
          reject({message: 'ERROR.UNKNOWN_URI_FORMAT'});
        }
      })

      // Check values against regex
      .then(function(result) {
        if (!result) return;
        if (result.pubkey && !(exact(regexp.PUBKEY).test(result.pubkey))) {
          throw {message: "Invalid pubkey format [" + result.pubkey + "]"};
        }
        if (result.uid && !(exact(regexp.USER_ID).test(result.uid))) {
          throw {message: "Invalid uid format [" + result.uid + "]"};
        }
        if (result.currency && !(exact(regexp.CURRENCY).test(result.currency))) {
          throw {message: "Invalid currency format ["+result.currency+"]"};
        }
        return result;
      });
    };

    // Define get latest release (or fake function is no URL defined)
    var duniterLatestReleaseUrl = csSettings.data.duniterLatestReleaseUrl && csHttp.uri.parse(csSettings.data.duniterLatestReleaseUrl);
    exports.raw.getLatestRelease = duniterLatestReleaseUrl ?
      csHttp.getWithCache(duniterLatestReleaseUrl.host,
        duniterLatestReleaseUrl.port,
        "/" + duniterLatestReleaseUrl.pathname,
        /*useSsl*/ (duniterLatestReleaseUrl.port == 443 || duniterLatestReleaseUrl.protocol == 'https:' || that.forceUseSsl),
        csHttp.cache.LONG
      ) :
      // No URL define: use a fake function
      function() {
        return $q.when();
      };

    exports.version.latest = function() {
      return exports.raw.getLatestRelease()
        .then(function (json) {
          if (!json) return;
          if (json.name && json.html_url) {
            return {
              version: json.name,
              url: json.html_url
            };
          }
          if (json.tag_name && json.html_url) {
            return {
              version: json.tag_name.substring(1),
              url: json.html_url
            };
          }
        })
        .catch(function(err) {
          // silent (just log it)
          console.error('[BMA] Failed to get Duniter latest version', err);
        });
    };

    exports.websocket = {
        block: ws('/ws/block'),
        peer: ws('/ws/peer'),
        close : closeWs
      };

    angular.merge(that, exports);
  }

  var service = new BMA(undefined, undefined, undefined, true);

  service.instance = function(host, port, useSsl, useCache) {
    var bma = new BMA();
    bma.init(host, port, useSsl, useCache);
    return bma;
  };

  service.lightInstance = function(host, port, useSsl, timeout) {
    port = port || 80;
    useSsl = angular.isDefined(useSsl) ? useSsl : (port == 443);
    return {
      host: host,
      port: port,
      useSsl: useSsl,
      url: csHttp.getUrl(host, port, ''/*path*/, useSsl),
      node: {
        summary: csHttp.getWithCache(host, port, '/node/summary', useSsl, csHttp.cache.LONG, false, timeout)
      },
      network: {
        peering: {
          self: csHttp.get(host, port, '/network/peering', useSsl, timeout)
        },
        peers: csHttp.get(host, port, '/network/peers', useSsl, timeout)
      },
      blockchain: {
        current: csHttp.get(host, port, '/blockchain/current', useSsl, timeout),
        stats: {
          hardship: csHttp.get(host, port, '/blockchain/hardship/:pubkey', useSsl, timeout)
        }
      }
    };
  };

  // default action
  //service.start();

  return service;
}])

;


angular.module('cesium.wot.services', ['ngApi', 'cesium.bma.services', 'cesium.crypto.services', 'cesium.utils.services',
  'cesium.settings.services'])

.factory('csWot', ['$q', '$timeout', 'BMA', 'Api', 'CacheFactory', 'csConfig', 'csCurrency', 'csSettings', 'csCache', function($q, $timeout, BMA, Api, CacheFactory, csConfig, csCurrency, csSettings, csCache) {
  'ngInject';

  function factory(id) {

    var
      api = new Api(this, "csWot-" + id),
      identityCache = csCache.get('csWot-idty-', csCache.constants.SHORT),

      // Add id, and remove duplicated id
      _addUniqueIds = function(idties) {
        var idtyKeys = {};
        return idties.reduce(function(res, idty) {
          idty.id = idty.id || idty.uid + '-' + idty.pubkey;
          if (!idtyKeys[idty.id]) {
            idtyKeys[idty.id] = true;
            return res.concat(idty);
          }
          return res;
        }, []);
      },

      _sortAndSliceIdentities = function(idties, offset, size) {
        offset = offset || 0;

        // Add unique ids
        idties = _addUniqueIds(idties);

        // Sort by block and
        idties = _.sortBy(idties, function(idty){
          var score = 1;
          score += (1000000 * (idty.block));
          score += (10      * (900 - idty.uid.toLowerCase().charCodeAt(0)));
          return -score;
        });
        if (angular.isDefined(size) && idties.length > size) {
          idties = idties.slice(offset, offset+size); // limit if more than expected size
        }


        return idties;
      },

      _sortCertifications = function(certifications) {
        certifications = _.sortBy(certifications, function(cert){
          var score = 1;
          score += (1000000000000 * (cert.expiresIn ? cert.expiresIn : 0));
          score += (10000000      * (cert.isMember ? 1 : 0));
          score += (10            * (cert.block ? cert.block : 0));
          return -score;
        });
        return certifications;
      },

      _resetRequirements = function(data) {
        data.requirements = {
          needSelf: true,
          needMembership: true,
          canMembershipOut: false,
          needRenew: false,
          pendingMembership: false,
          wasMember: false,
          certificationCount: 0,
          needCertifications: false,
          needCertificationCount: 0,
          willNeedCertificationCount: 0,
          alternatives: undefined
        };
        data.blockUid = null;
        data.isMember = false;
        data.sigDate = null;
      },

      _fillRequirements = function(requirements, currencyParameters) {
        // Add useful custom fields
        requirements.hasSelf = true;
        requirements.needSelf = false;
        requirements.wasMember = angular.isDefined(requirements.wasMember) ? requirements.wasMember : false; // Compat with Duniter 0.9
        requirements.needMembership = (!requirements.revoked && requirements.membershipExpiresIn <= 0 && requirements.membershipPendingExpiresIn <= 0 && !requirements.wasMember);
        requirements.needRenew = (!requirements.needMembership && !requirements.revoked &&
          requirements.membershipExpiresIn <= csSettings.data.timeWarningExpireMembership &&
          requirements.membershipPendingExpiresIn <= 0) ||
          (requirements.wasMember && requirements.membershipExpiresIn === 0 &&
          requirements.membershipPendingExpiresIn === 0);
        requirements.canMembershipOut = (!requirements.revoked && requirements.membershipExpiresIn > 0);
        requirements.pendingMembership = (!requirements.revoked && requirements.membershipExpiresIn <= 0 && requirements.membershipPendingExpiresIn > 0);
        requirements.isMember = (!requirements.revoked && requirements.membershipExpiresIn > 0);
        requirements.blockUid = requirements.meta.timestamp;
        // Force certification count to 0, is not a member yet - fix #269
        requirements.certificationCount = (requirements.isMember && requirements.certifications) ? requirements.certifications.length : 0;
        requirements.willExpireCertificationCount = requirements.certifications ? requirements.certifications.reduce(function(count, cert){
          return count + (cert.expiresIn <= csSettings.data.timeWarningExpire ? 1 : 0);
        }, 0) : 0;
        requirements.willExpire = requirements.willExpireCertificationCount > 0;
        requirements.pendingRevocation = !requirements.revoked && !!requirements.revocation_sig;

        // Fix pending certifications count - Fix #624
        if (!requirements.isMember && !requirements.wasMember) {
          var certifiers = _.union(
            _.pluck(requirements.pendingCerts || [], 'from'),
            _.pluck(requirements.certifications || [], 'from')
          );
          requirements.pendingCertificationCount = _.size(certifiers);
        }
        else {
          requirements.pendingCertificationCount = angular.isDefined(requirements.pendingCerts) ? requirements.pendingCerts.length : 0 ;
        }

        // Compute
        requirements.needCertificationCount = (!requirements.needSelf && (requirements.certificationCount < currencyParameters.sigQty)) ?
          (currencyParameters.sigQty - requirements.certificationCount) : 0;
        requirements.willNeedCertificationCount = (!requirements.needMembership && !requirements.needCertificationCount &&
        (requirements.certificationCount - requirements.willExpireCertificationCount) < currencyParameters.sigQty) ?
          (currencyParameters.sigQty - requirements.certificationCount + requirements.willExpireCertificationCount) : 0;


        return requirements;
      },

      loadRequirements = function(data) {
        if (!data || (!data.pubkey && !data.uid)) return $q.when(data);

        return $q.all([
          // Get currency
          csCurrency.get(),
          // Get requirements
          BMA.wot.requirements({pubkey: data.pubkey||data.uid})
        ])
          .then(function(res){
            var currency = res[0];

            res = res[1];

            if (!res.identities || !res.identities.length)  return;

            // Sort to select the best identity
            if (res.identities.length > 1) {
              // Select the best identity, by sorting using this order
              //  - same wallet uid
              //  - is member
              //  - has a pending membership
              //  - is not expired (in sandbox)
              //  - is not outdistanced
              //  - if has certifications
              //      max(count(certification)
              //    else
              //      max(membershipPendingExpiresIn) = must recent membership
              res.identities = _.sortBy(res.identities, function(idty) {
                var score = 0;
                score += (10000000000 * ((data.uid && idty.uid === data.uid) ? 1 : 0));
                score += (10000000000 * ((data.blockUid && idty.meta && idty.meta.timestamp === data.blockUid) ? 1 : 0));
                score += (1000000000  * (idty.membershipExpiresIn > 0 ? 1 : 0));
                score += (100000000   * (idty.membershipPendingExpiresIn > 0 ? 1 : 0));
                score += (10000000    * (!idty.expired ? 1 : 0));
                score += (1000000     * (!idty.outdistanced ? 1 : 0));
                score += (100000      * (idty.wasMember ? 1 : 0));
                var certCount = !idty.expired && idty.certifications ? idty.certifications.length : 0;
                score += (1         * (certCount ? certCount : 0));
                score += (1         * (!certCount && idty.membershipPendingExpiresIn > 0 ? idty.membershipPendingExpiresIn/1000 : 0));
                return -score;
              });
              console.debug('[wot] Found {0} identities. Will selected the best one'.format(res.identities.length));
            }

            // Select the first identity
            var requirements = _fillRequirements(res.identities[0], currency.parameters);

            data.requirements = requirements;
            data.pubkey = requirements.pubkey;
            data.uid = requirements.uid;
            data.isMember =  requirements.isMember;
            data.blockUid =  requirements.blockUid;

            // Prepare alternatives identities if any
            if (!requirements.isMember && !requirements.wasMember && res.identities.length > 1) {
              requirements.alternatives = res.identities.splice(1);
              _.forEach(requirements.alternatives, function(requirements) {
                _fillRequirements(requirements, currency.parameters);
              });
            }

            // TODO : get sigDate from blockUid ??

            return data;
          })
          .catch(function(err) {
            _resetRequirements(data);
            // If not a member: continue
            if (!!err &&
                (err.ucode == BMA.errorCodes.NO_MATCHING_MEMBER ||
                 err.ucode == BMA.errorCodes.NO_IDTY_MATCHING_PUB_OR_UID)) {
              return data;
            }
            throw err;
          })
          ;
      },

      loadIdentityByLookup = function(pubkey, uid) {
        return BMA.wot.lookup({ search: pubkey||uid })
          .then(function(res){
            var identities = res.results.reduce(function(idties, res) {
              return idties.concat(res.uids.reduce(function(uids, idty) {
                var blockUid = idty.meta.timestamp.split('-', 2);
                return uids.concat({
                  uid: idty.uid,
                  pubkey: res.pubkey,
                  timestamp: idty.meta.timestamp,
                  number: parseInt(blockUid[0]),
                  hash: blockUid[1],
                  revoked: idty.revoked,
                  revocationNumber: idty.revoked_on,
                  sig: idty.self
                });
              }, []));
            }, []);

            // Sort identities if need
            if (identities.length) {
              // Select the best identity, by sorting using this order
              //  - same given uid
              //  - not revoked
              //  - max(block_number)
              identities = _.sortBy(identities, function(idty) {
                var score = 0;
                score += (10000000000 * ((uid && idty.uid === uid) ? 1 : 0));
                score += (1000000000  * (!idty.revoked ? 1 : 0));
                score += (1           * (idty.number ? idty.number : 0));
                return -score;
              });
            }
            var identity = identities[0];

            identity.hasSelf = !!(identity.uid && identity.timestamp && identity.sig);
            identity.lookup = {};

            // Store received certifications
            var certPubkeys = [];
            identity.lookup.certifications = !res.results ? {} : res.results.reduce(function(certsMap, res) {
              return res.uids.reduce(function(certsMap, idty) {
                var idtyFullKey = idty.uid + '-' + (idty.meta ? idty.meta.timestamp : '');
                certsMap[idtyFullKey] = idty.others.reduce(function(certs, cert) {
                  var certFullKey = idtyFullKey + '-' + cert.pubkey;
                  var result = {
                    pubkey: cert.pubkey,
                    uid: cert.uids[0],
                    cert_time:  {
                      block: (cert.meta && cert.meta.block_number)  ? cert.meta.block_number : 0,
                      block_hash: (cert.meta && cert.meta.block_hash)  ? cert.meta.block_hash : null
                    },
                    isMember: cert.isMember,
                    wasMember: cert.wasMember,
                  };
                  if (!certPubkeys[certFullKey]) {
                    certPubkeys[certFullKey] = result;
                  }
                  else { // if duplicated cert: keep the most recent
                    if (result.cert_time.block > certPubkeys[certFullKey].cert_time.block) {
                      certPubkeys[certFullKey] = result;
                      certs.splice(_.findIndex(certs, {pubkey: cert.pubkey}), 1, result);
                      return certs;
                    }
                    else {
                      return certs; // skip this cert
                    }
                  }
                  return certs.concat(result);
                }, []);
                return certsMap;
              }, certsMap);
            }, {});

            // Store given certifications
            certPubkeys = [];
            identity.lookup.givenCertifications = !res.results ? [] : res.results.reduce(function(certs, res) {
              return res.signed.reduce(function(certs, cert) {
                var result = {
                  pubkey: cert.pubkey,
                  uid: cert.uid,
                  cert_time:  {
                    block: (cert.cert_time && cert.cert_time.block)  ? cert.cert_time.block : 0,
                    block_hash: (cert.cert_time && cert.cert_time.block_hash)  ? cert.cert_time.block_hash : null
                  },
                  sigDate: cert.meta ? cert.meta.timestamp : null,
                  isMember: cert.isMember,
                  wasMember: cert.wasMember
                };
                if (!certPubkeys[cert.pubkey]) {
                  certPubkeys[cert.pubkey] = result;
                  // TODO : to not add, but replace the old one
                }
                else { // if duplicated cert: keep the most recent
                  if (result.block > certPubkeys[cert.pubkey].block) {
                    certPubkeys[cert.pubkey] = result;
                  }
                  else {
                    return certs; // skip this result
                  }
                }
                return certs.concat(result);
              }, certs);
            }, []);

            // Retrieve time (self and revocation)
            var blocks = [identity.number];
            if (identity.revocationNumber) {
              blocks.push(identity.revocationNumber);
            }
            return BMA.blockchain.blocks(blocks)
              .then(function(blocks){
                identity.sigDate = blocks[0].medianTime;

                // Check if self has been done on a valid block
                if (identity.number !== 0 && identity.hash !== blocks[0].hash) {
                  identity.hasBadSelfBlock = true;
                }

                // Set revocation time
                if (identity.revocationNumber) {
                  identity.revocationTime = blocks[1].medianTime;
                }

                return identity;
              })
              .catch(function(err){
                // Special case for currency init (root block not exists): use now
                if (err && err.ucode == BMA.errorCodes.BLOCK_NOT_FOUND && identity.number === 0) {
                  identity.sigDate = Math.trunc(new Date().getTime() / 1000);
                  return identity;
                }
                else {
                  // FIXME workaround for issue #1304 ?
                  /*
                  if (identity.revocationNumber) {
                    identity.revocationTime = identity.revocationNumber;
                    return identity;
                  }*/
                  throw err;
                }
              });
          })
          .catch(function(err) {
            if (!!err && err.ucode == BMA.errorCodes.NO_MATCHING_IDENTITY) { // Identity not found (if no self)
              var identity = {
                uid: null,
                pubkey: pubkey,
                hasSelf: false
              };
              return identity;
            }
            else {
              throw err;
            }
          });
      },

      loadCertifications = function(getFunction, pubkey, lookupCertifications, parameters, medianTime, certifiersOf) {

        function _certId(pubkey, block) {
          return pubkey + '-' + block;
        }

        // TODO : remove this later (when all node will use duniter v0.50+)
        var lookupHasCertTime = true; // Will be set ti FALSE before Duniter v0.50
        var lookupCerticationsByCertId = lookupCertifications ? lookupCertifications.reduce(function(res, cert){
          var certId = _certId(cert.pubkey, cert.cert_time ? cert.cert_time.block : cert.sigDate);
          if (!cert.cert_time) lookupHasCertTime = false;
          res[certId] = cert;
          return res;
        }, {}) : {};

        var isMember = true;

        return getFunction({ pubkey: pubkey })
          .then(function(res) {
            return res.certifications.reduce(function (res, cert) {
              // Rappel :
              //   cert.sigDate = blockstamp de l'identitÃ©
              //   cert.cert_time.block : block au moment de la certification
              //   cert.written.number : block oÃ¹ la certification est Ã©crite

              var pending = !cert.written;
              var certTime = cert.cert_time ? cert.cert_time.medianTime : null;
              var expiresIn = (!certTime) ? 0 : (pending ?
                (certTime + parameters.sigWindow - medianTime) :
                (certTime + parameters.sigValidity - medianTime));
              expiresIn = (expiresIn < 0) ? 0 : expiresIn;
              // Remove from lookup certs
              var certId = _certId(cert.pubkey, lookupHasCertTime && cert.cert_time ? cert.cert_time.block : cert.sigDate);
              delete lookupCerticationsByCertId[certId];

              // Add to result list
              return res.concat({
                pubkey: cert.pubkey,
                uid: cert.uid,
                time: certTime,
                isMember: cert.isMember,
                wasMember: cert.wasMember,
                expiresIn: expiresIn,
                willExpire: (expiresIn && expiresIn <= csSettings.data.timeWarningExpire),
                pending: pending,
                block: (cert.written !== null) ? cert.written.number :
                  (cert.cert_time ? cert.cert_time.block : null),
                valid: (expiresIn > 0)
              });
            }, []);
          })
          .catch(function(err) {
            if (!!err && err.ucode == BMA.errorCodes.NO_MATCHING_MEMBER) { // member not found
              isMember = false;
              return []; // continue (append pendings cert if exists in lookup)
            }
            /*FIXME: workaround for Duniter issue #1309 */
            else if (!!err && err.ucode == 1002) {
              console.warn("[wallet-service] Detecting Duniter issue #1309 ! Applying workaround... ");
              isMember = false;
              return []; // not found
            }
            else {
              throw err;
            }
          })

          // Add pending certs (found in lookup - see loadIdentityByLookup())
          .then(function(certifications) {
            var pendingCertifications = _.values(lookupCerticationsByCertId);
            if (!pendingCertifications.length) return certifications; // No more pending continue

            // Special case for initPhase - issue #
            if (csCurrency.data.initPhase) {
              return pendingCertifications.reduce(function(res, cert) {
                return res.concat({
                  pubkey: cert.pubkey,
                  uid: cert.uid,
                  isMember: cert.isMember,
                  wasMember: cert.wasMember,
                  time: null,
                  expiresIn: parameters.sigWindow,
                  willExpire: false,
                  pending: true,
                  block: 0,
                  valid: true
                });
              }, certifications);
            }

            var pendingCertByBlocks = pendingCertifications.reduce(function(res, cert){
              var block = lookupHasCertTime && cert.cert_time ? cert.cert_time.block :
                (cert.sigDate ? cert.sigDate.split('-')[0] : null);
              if (angular.isDefined(block)) {
                if (!res[block]) {
                  res[block] = [cert];
                }
                else {
                  res[block].push(cert);
                }
              }
              return res;
            }, {});

            // Set time to pending cert, from blocks
            return BMA.blockchain.blocks(_.keys(pendingCertByBlocks)).then(function(blocks){
              certifications = blocks.reduce(function(res, block){
                return res.concat(pendingCertByBlocks[block.number].reduce(function(res, cert) {
                  var certTime = block.medianTime;
                  var expiresIn = Math.max(0, certTime + parameters.sigWindow - medianTime);
                  var validBuid = (!cert.cert_time || !cert.cert_time.block_hash || cert.cert_time.block_hash == block.hash);
                  if (!validBuid) {
                    console.debug("[wot] Invalid cert {0}: block hash changed".format(cert.pubkey.substring(0,8)));
                  }
                  var valid = (expiresIn > 0) && (!certifiersOf || cert.isMember) && validBuid;
                  return res.concat({
                    pubkey: cert.pubkey,
                    uid: cert.uid,
                    isMember: cert.isMember,
                    wasMember: cert.wasMember,
                    time: certTime,
                    expiresIn: expiresIn,
                    willExpire: (expiresIn && expiresIn <= csSettings.data.timeWarningExpire),
                    pending: true,
                    block: lookupHasCertTime && cert.cert_time ? cert.cert_time.block :
                    (cert.sigDate ? cert.sigDate.split('-')[0] : null),
                    valid: valid
                  });
                }, []));
              }, certifications);
              return certifications;
            });
          })

          // Sort and return result
          .then(function(certifications) {

            // Remove pending cert duplicated with a written & valid cert
            var writtenCertByPubkey = certifications.reduce(function(res, cert) {
              if (!cert.pending && cert.valid && cert.expiresIn >= parameters.sigWindow) {
                res[cert.pubkey] = true;
              }
              return res;
            }, {});

            // Final sort
            certifications = _sortCertifications(certifications);

            // Split into valid/pending/error
            var pendingCertifications = [];
            var errorCertifications = [];
            var validCertifications = certifications.reduce(function(res, cert) {
              if (cert.pending) {
                if (cert.valid && !writtenCertByPubkey[cert.pubkey]) {
                  pendingCertifications.push(cert);
                }
                else if (!cert.valid && !writtenCertByPubkey[cert.pubkey]){
                  errorCertifications.push(cert);
                }
                return res;
              }
              return res.concat(cert);
            }, []);

            return {
              valid: validCertifications,
              pending: pendingCertifications,
              error: errorCertifications
            };
          })
          ;
      },

      // Add events on given account
      addEvents = function(data) {

        if (data.requirements.revoked) {
          delete data.hasBadSelfBlock;
          addEvent(data, {type: 'error', message: 'ERROR.IDENTITY_REVOKED', messageParams: {revocationTime: data.revocationTime}});
          console.debug("[wot] Identity [{0}] has been revoked".format(data.uid));
        }
        else if (data.requirements.pendingRevocation) {
          addEvent(data, {type:'error', message: 'ERROR.IDENTITY_PENDING_REVOCATION'});
          console.debug("[wot] Identity [{0}] has pending revocation".format(data.uid));
        }
        else if (data.hasBadSelfBlock) {
          delete data.hasBadSelfBlock;
          if (!data.isMember) {
            addEvent(data, {type: 'error', message: 'ERROR.IDENTITY_INVALID_BLOCK_HASH'});
            console.debug("[wot] Invalid membership for uid {0}: block hash changed".format(data.uid));
          }
        }
        else if (data.requirements.expired) {
          addEvent(data, {type: 'error', message: 'ERROR.IDENTITY_EXPIRED'});
          console.debug("[wot] Identity {0} expired (in sandbox)".format(data.uid));
        }
        else if (data.requirements.willNeedCertificationCount > 0) {
          addEvent(data, {type: 'error', message: 'INFO.IDENTITY_WILL_MISSING_CERTIFICATIONS', messageParams: data.requirements});
          console.debug("[wot] Identity {0} will need {1} certification(s)".format(data.uid, data.requirements.willNeedCertificationCount));
        }
        else if (!data.requirements.needSelf && data.requirements.needMembership) {
          addEvent(data, {type: 'error', message: 'INFO.IDENTITY_NEED_MEMBERSHIP'});
          console.debug("[wot] Identity {0} has a self but no membership".format(data.uid));
        }
      },

      loadData = function(pubkey, withCache, uid, force) {

        var data;

        if (!pubkey && uid && !force) {
          return BMA.wot.member.getByUid(uid)
            .then(function(member) {
              if (member) return loadData(member.pubkey, withCache, member.uid); // recursive call
              //throw {message: 'NOT_A_MEMBER'};
              return loadData(pubkey, withCache, uid, true/*force*/);
            });
        }

        // Check cached data
        if (pubkey) {
          data = withCache ? identityCache.get(pubkey) : null;
          if (data && (!uid || data.uid == uid)) {
            console.debug("[wot] Identity " + pubkey.substring(0, 8) + " found in cache");
            return $q.when(data);
          }
          console.debug("[wot] Loading identity " + pubkey.substring(0, 8) + "...");
          data = {
            pubkey: pubkey,
            uid: uid
          };
        }
        else {
          console.debug("[wot] Loading identity from uid " + uid);
          data = {
            uid: uid
          };
        }

        var now = new Date().getTime();

        var parameters;
        var medianTime;

        return $q.all([
            // Get parameters
            BMA.blockchain.parameters()
              .then(function(res) {
                parameters = res;

              }),
            // Get current time
            BMA.blockchain.current()
              .then(function(current) {
                medianTime = current.medianTime;
              })
              .catch(function(err){
                // Special case for currency init (root block not exists): use now
                if (err && err.ucode == BMA.errorCodes.NO_CURRENT_BLOCK) {
                  medianTime = Math.trunc(new Date().getTime()/1000);
                }
                else {
                  throw err;
                }
              }),

            // Get requirements
            loadRequirements(data),

            // Get identity using lookup
            loadIdentityByLookup(pubkey, uid)
              .then(function (identity) {
                  angular.merge(data, identity);
              })
          ])
          .then(function() {
            if (!data.requirements.uid) return;

            var idtyFullKey = data.requirements.uid + '-' + data.requirements.meta.timestamp;

            return $q.all([
              // Get received certifications
              loadCertifications(BMA.wot.certifiersOf, data.pubkey, data.lookup ? data.lookup.certifications[idtyFullKey] : null, parameters, medianTime, true /*certifiersOf*/)
                .then(function (res) {
                  data.received_cert = res.valid;
                  data.received_cert_pending = res.pending;
                  data.received_cert_error = res.error;
                }),

              // Get given certifications
              loadCertifications(BMA.wot.certifiedBy, data.pubkey, data.lookup ? data.lookup.givenCertifications : null, parameters, medianTime, false/*certifiersOf*/)
                .then(function (res) {
                  data.given_cert = res.valid;
                  data.given_cert_pending = res.pending;
                  data.given_cert_error = res.error;
                })
            ]);
          })
          .then(function() {

            // Add compute some additional requirements (that required all data like certifications)
            data.requirements.pendingCertificationCount = data.received_cert_pending ? data.received_cert_pending.length : data.requirements.pendingCertificationCount;
            // Use /wot/lookup.revoked when requirements not filled
            data.requirements.revoked = angular.isDefined(data.requirements.revoked) ? data.requirements.revoked : data.revoked;

            // Add account events
            addEvents(data);

            // API extension
            return api.data.raisePromise.load(data)
              .catch(function(err) {
                console.debug('Error while loading identity data, on extension point.');
                console.error(err);
              });
          })
          .then(function() {
            if (!data.pubkey) return undefined; // not found
            delete data.lookup; // not need anymore
            identityCache.put(data.pubkey, data); // add to cache
            console.debug('[wot] Identity '+ data.pubkey.substring(0, 8) +' loaded in '+ (new Date().getTime()-now) +'ms');
            return data;
          });
      },

      search = function(text, options) {
        if (!text || text.trim() !== text) {
          return $q.when(undefined);
        }

        // Remove first special characters (to avoid request error)
        var safeText = text.replace(/(^|\s)#\w+/g, ''); // remove tags
        safeText = safeText.replace(/[^a-zA-Z0-9_-\s]+/g, '');
        safeText = safeText.replace(/\s+/g, ' ').trim();

        options = options || {};
        options.addUniqueId = angular.isDefined(options.addUniqueId) ? options.addUniqueId : true;
        options.allowExtension = angular.isDefined(options.allowExtension) ? options.allowExtension : true;
        options.excludeRevoked = angular.isDefined(options.excludeRevoked) ? options.excludeRevoked : false;

        var promise;
        if (!safeText) {
          promise = $q.when([]);
        }
        else {
          promise = $q.all(
            safeText.split(' ').reduce(function(res, text) {
              console.debug('[wot] Will search on: \'' + text + '\'');
              return res.concat(BMA.wot.lookup({ search: text }));
            }, [])
          ).then(function(res){
              return res.reduce(function(idties, res) {
                return idties.concat(res.results.reduce(function(idties, res) {
                  return idties.concat(res.uids.reduce(function(uids, idty) {
                    var blocUid = idty.meta.timestamp.split('-', 2);
                    var revoked = !idty.revoked && idty.revocation_sig;
                    if (!options.excludeRevoked || !revoked) {
                      return uids.concat({
                        uid: idty.uid,
                        pubkey: res.pubkey,
                        number: blocUid[0],
                        hash: blocUid[1],
                        revoked: revoked
                      });
                    }
                    return uids;
                  }, []));
                }, []));
              }, []);
            })
            .catch(function(err) {
              if (err && err.ucode == BMA.errorCodes.NO_MATCHING_IDENTITY) {
                return [];
              }
              else {
                throw err;
              }
            });
        }

        return promise
          .then(function(idties) {
            if (!options.allowExtension) {
              // Add unique id (if enable)
              return options.addUniqueId ? _addUniqueIds(idties) : idties;
            }
            var lookupResultCount = idties.length;
            // call extension point
            return api.data.raisePromise.search(text, idties, 'pubkey')
              .then(function() {

                // Make sure to add uid to new results - fix #488
                if (idties.length > lookupResultCount) {
                  var idtiesWithoutUid = _.filter(idties, function(idty) {
                    return !idty.uid && idty.pubkey;
                  });
                  if (idtiesWithoutUid.length) {
                    return BMA.wot.member.uids()
                      .then(function(uids) {
                        _.forEach(idties, function(idty) {
                          if (!idty.uid && idty.pubkey) {
                            idty.uid = uids[idty.pubkey];
                          }
                        });
                      });
                  }
                }
              })
              .then(function() {
                // Add unique id (if enable)
                return options.addUniqueId ? _addUniqueIds(idties) : idties;
              });
          });
      },

      getNewcomers = function(offset, size) {
        offset = offset || 0;
        size = size || 20;
        var total;
        return $q.all([
            csCurrency.blockchain.current(true)
              .then(function(block) {
                total = block.membersCount;
              }),
            BMA.blockchain.stats.newcomers()
          ])
          .then(function(res) {
            res = res[1];
            if (!res.result.blocks || !res.result.blocks.length) {
              return null;
            }
            var blocks = _.sortBy(res.result.blocks, function (n) {
              return -n;
            });
            return getNewcomersRecursive(blocks, 0, 5, offset+size);
          })
          .then(function(idties){
            if (!idties || !idties.length) {
              return null;
            }
            idties = _sortAndSliceIdentities(idties, offset, size);

            // Extension point
            return extendAll(idties, 'pubkey', true/*skipAddUid*/);
          })
            .then(function(idties) {
              return {
                hits: idties,
                total: total
              };
            })
          ;
      },


      getNewcomersRecursive = function(blocks, offset, size, maxResultSize) {
        return $q(function(resolve, reject) {
          var result = [];
          var jobs = [];
          _.each(blocks.slice(offset, offset+size), function(number) {
            jobs.push(
              BMA.blockchain.block({block: number})
                .then(function(block){
                  if (!block || !block.joiners) return;
                  _.each(block.joiners, function(joiner){
                    var parts = joiner.split(':');
                    var idtyKey = parts[parts.length-1]/*uid*/ + '-' + parts[0]/*pubkey*/;
                    result.push({
                      id: idtyKey,
                      uid: parts[parts.length-1],
                      pubkey:parts[0],
                      memberDate: block.medianTime,
                      block: block.number
                    });
                  });
                })
            );
          });

          $q.all(jobs)
            .then(function() {
              if (result.length < maxResultSize && offset < blocks.length - 1) {
                $timeout(function() {
                  getNewcomersRecursive(blocks, offset+size, size, maxResultSize - result.length)
                    .then(function(res) {
                      resolve(result.concat(res));
                    })
                    .catch(function(err) {
                      reject(err);
                    });
                }, 1000);
              }
              else {
                resolve(result);
              }
            })
            .catch(function(err){
              if (err && err.ucode === BMA.errorCodes.HTTP_LIMITATION) {
                resolve(result);
              }
              else {
                reject(err);
              }
            });
        });
      },

      getPending = function(offset, size) {
        offset = offset || 0;
        size = size || 20;
        var now = new Date().getTime();
        return $q.all([
          BMA.wot.member.uids(),
          BMA.wot.member.pending()
            .then(function(res) {
              return (res.memberships && res.memberships.length) ? res.memberships : undefined;
            })
          ])
          .then(function(res) {
            var uids = res[0];
            var memberships = res[1];
            if (!memberships) return;

            var idtiesByBlock = {};
            var idtiesByPubkey = {};
            _.forEach(memberships, function(ms){
              if (ms.membership == 'IN' && !uids[ms.pubkey]) {
                var idty = {
                  uid: ms.uid,
                  pubkey: ms.pubkey,
                  block: ms.blockNumber,
                  blockHash: ms.blockHash
                };
                var otherIdtySamePubkey = idtiesByPubkey[ms.pubkey];
                if (otherIdtySamePubkey && idty.block > otherIdtySamePubkey.block) {
                  return; // skip
                }
                idtiesByPubkey[idty.pubkey] = idty;
                if (!idtiesByBlock[idty.block]) {
                  idtiesByBlock[idty.block] = [idty];
                }
                else {
                  idtiesByBlock[idty.block].push(idty);
                }

                // Remove previous idty from map
                if (otherIdtySamePubkey) {
                  idtiesByBlock[otherIdtySamePubkey.block] = idtiesByBlock[otherIdtySamePubkey.block].reduce(function(res, aidty){
                    if (aidty.pubkey == otherIdtySamePubkey.pubkey) return res; // if match idty to remove, to NOT add
                    return (res||[]).concat(aidty);
                  }, null);
                  if (idtiesByBlock[otherIdtySamePubkey.block] === null) {
                    delete idtiesByBlock[otherIdtySamePubkey.block];
                  }
                }
              }
            });

            var idties = _.values(idtiesByPubkey);
            var total = idties.length; // get total BEFORE slice

            idties = _sortAndSliceIdentities(idties, offset, size);
            var blocks = idties.reduce(function(res, aidty) {
              return res.concat(aidty.block);
            }, []);

            return  $q.all([
              // Get time from blocks
              BMA.blockchain.blocks(_.uniq(blocks))
              .then(function(blocks) {

                _.forEach(blocks, function(block){
                  _.forEach(idtiesByBlock[block.number], function(idty) {
                    idty.sigDate = block.medianTime;
                    if (block.number !== 0 && idty.blockHash !== block.hash) {
                      addEvent(idty, {type:'error', message: 'ERROR.WOT_PENDING_INVALID_BLOCK_HASH'});
                      console.debug("Invalid membership for uid={0}: block hash changed".format(idty.uid));
                    }
                  });
                });
              }),

              // Extension point
              extendAll(idties, 'pubkey', true/*skipAddUid*/)
            ])
            .then(function() {
              console.debug("[ES] [wot] Loaded {0}/{1} pending identities in {2} ms".format(idties && idties.length || 0, total, new Date().getTime() - now));
              return {
                hits: idties,
                total: total
              };
            });
          });
      },

      getAll = function() {
        var letters = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','u','v','w','x','y','z'];
        return getAllRecursive(letters, 0, BMA.constants.LIMIT_REQUEST_COUNT)
          .then(function(idties) {
            return extendAll(idties, 'pubkey', true/*skipAddUid*/);
          })
          .then(_addUniqueIds)
          .then(function() {
            return {
              hits: idties,
              total: idties.length
            };
          });
      },

      getAllRecursive = function(letters, offset, size) {
        return $q(function(resolve, reject) {
          var result = [];
          var pubkeys = {};
          var jobs = [];
          _.each(letters.slice(offset, offset+size), function(letter) {
            jobs.push(
              search(letter, {
                addUniqueId: false, // will be done in parent method
                allowExtension: false // extension point will be called in parent method
              })
            .then(function(idties){
                if (!idties || !idties.length) return;
                result = idties.reduce(function(res, idty) {
                  if (!pubkeys[idty.pubkey]) {
                    pubkeys[idty.pubkey] = true;
                    return res.concat(idty);
                  }
                  return res;
                }, result);
              })
            );
          });

          $q.all(jobs)
            .then(function() {
              if (offset < letters.length - 1) {
                $timeout(function() {
                  getAllRecursive(letters, offset+size, size)
                    .then(function(idties) {
                      if (!idties || !idties.length) {
                        resolve(result);
                        return;
                      }
                      resolve(idties.reduce(function(res, idty) {
                        if (!pubkeys[idty.pubkey]) {
                          pubkeys[idty.pubkey] = true;
                          return res.concat(idty);
                        }
                        return res;
                      }, result));
                    })
                    .catch(function(err) {
                      reject(err);
                    });
                }, BMA.constants.LIMIT_REQUEST_DELAY);
              }
              else {
                resolve(result);
              }
            })
            .catch(function(err){
              if (err && err.ucode === BMA.errorCodes.HTTP_LIMITATION) {
                resolve(result);
              }
              else {
                reject(err);
              }
            });
        });
      },

      extend = function(idty, pubkeyAttributeName, skipAddUid) {
        return extendAll([idty], pubkeyAttributeName, skipAddUid)
          .then(function(res) {
            return res[0];
          });
      },

      extendAll = function(idties, pubkeyAttributeName, skipAddUid) {

        pubkeyAttributeName = pubkeyAttributeName || 'pubkey';

        var jobs = [];
        if (!skipAddUid) jobs.push(BMA.wot.member.uids());

        jobs.push(api.data.raisePromise.search(null, idties, pubkeyAttributeName)
          .catch(function(err) {
            console.debug('Error while search identities, on extension point.');
            console.error(err);
          }));

        return $q.all(jobs)
        .then(function(res) {
          if (!skipAddUid) {
            var uidsByPubkey = res[0];
            // Set uid (on every data)
            _.forEach(idties, function(data) {
              if (!data.uid && data[pubkeyAttributeName]) {
                data.uid = uidsByPubkey[data[pubkeyAttributeName]];
                // Remove name if redundant with uid
                if (data.uid && data.uid == data.name) {
                  delete data.name;
                }
              }
            });
          }

          return idties;
        });
      },

      addEvent = function(data, event) {
        event = event || {};
        event.type = event.type || 'info';
        event.message = event.message || '';
        event.messageParams = event.messageParams || {};
        data.events = data.events || [];
        data.events.push(event);
      }
    ;

    // Register extension points
    api.registerEvent('data', 'load');
    api.registerEvent('data', 'search');

    return {
      id: id,
      load: loadData,
      loadRequirements: loadRequirements,
      search: search,
      newcomers: getNewcomers,
      pending: getPending,
      all: getAll,
      extend: extend,
      extendAll: extendAll,
      // api extension
      api: api
    };
  }

  var service = factory('default', BMA);

  service.instance = factory;
  return service;
}]);


angular.module('cesium.tx.services', ['ngApi', 'cesium.bma.services',
  'cesium.settings.services', 'cesium.wot.services' ])

.factory('csTx', ['$q', '$timeout', '$filter', '$translate', 'FileSaver', 'UIUtils', 'BMA', 'Api', 'csConfig', 'csSettings', 'csWot', 'csCurrency', function($q, $timeout, $filter, $translate, FileSaver, UIUtils, BMA, Api,
                          csConfig, csSettings, csWot, csCurrency) {
  'ngInject';

  var defaultBMA = BMA;

  function factory(id, BMA) {

    BMA = BMA || defaultBMA;
    var
      api = new Api(this, "csTx-" + id),

      _reduceTxAndPush = function(pubkey, txArray, result, processedTxMap, allowPendings) {
        if (!txArray || txArray.length === 0) {
          return;
        }

        _.forEach(txArray, function(tx) {
          if (tx.block_number || allowPendings) {
            var walletIsIssuer = false;
            var otherIssuer = tx.issuers.reduce(function(issuer, res) {
              walletIsIssuer = (res === pubkey) ? true : walletIsIssuer;
              return issuer + ((res !== pubkey) ? ', ' + res : '');
            }, '');
            if (otherIssuer.length > 0) {
              otherIssuer = otherIssuer.substring(2);
            }
            var otherReceiver;
            var outputBase;
            var sources = [];
            var lockedOutputs;
            var amount = tx.outputs.reduce(function(sum, output, noffset) {
              // FIXME duniter v1.4.13
              var outputArray = (typeof output == 'string') ? output.split(':',3) : [output.amount,output.base,output.conditions];
              outputBase = parseInt(outputArray[1]);
              var outputAmount = powBase(parseInt(outputArray[0]), outputBase);
              var outputCondition = outputArray[2];
              var sigMatches =  BMA.regexp.TX_OUTPUT_SIG.exec(outputCondition);

              // Simple unlock condition
              if (sigMatches) {
                var outputPubkey = sigMatches[1];
                if (outputPubkey == pubkey) { // output is for the wallet
                  if (!walletIsIssuer) {
                    return sum + outputAmount;
                  }
                  // If pending: use output as new sources
                  else if (tx.block_number === null) {
                    sources.push({
                      amount: parseInt(outputArray[0]),
                      base: outputBase,
                      type: 'T',
                      identifier: tx.hash,
                      noffset: noffset,
                      consumed: false
                    });
                  }
                }
                else { // output is for someone else
                  if (outputPubkey !== '' && outputPubkey != otherIssuer) {
                    otherReceiver = outputPubkey;
                  }
                  if (walletIsIssuer) {
                    return sum - outputAmount;
                  }
                }
              }

              // Complex unlock condition, on the issuer pubkey
              else if (outputCondition.indexOf('SIG('+pubkey+')') != -1) {
                var lockedOutput = BMA.tx.parseUnlockCondition(outputCondition);
                if (lockedOutput) {
                  // Add a source
                  // FIXME: should be uncomment when filtering source on transfer()
                  /*sources.push(angular.merge({
                   amount: parseInt(outputArray[0]),
                   base: outputBase,
                   type: 'T',
                   identifier: tx.hash,
                   noffset: noffset,
                   consumed: false
                   }, lockedOutput));
                   */
                  lockedOutput.amount = outputAmount;
                  lockedOutputs = lockedOutputs || [];
                  lockedOutputs.push(lockedOutput);
                  console.debug('[tx] has locked output:', lockedOutput);

                  return sum + outputAmount;
                }
              }
              return sum;
            }, 0);

            var txPubkey = amount > 0 ? otherIssuer : otherReceiver;
            var time = tx.time || tx.blockstampTime;

            // Avoid duplicated tx, or tx to him self
            var txKey = amount + ':' + tx.hash + ':' + time;
            if (!processedTxMap[txKey] && amount !== 0) {
              processedTxMap[txKey] = true;
              var newTx = {
                time: time,
                amount: amount,
                pubkey: txPubkey,
                comment: tx.comment,
                isUD: false,
                hash: tx.hash,
                locktime: tx.locktime,
                block_number: tx.block_number
              };
              // If pending: store sources and inputs for a later use - see method processTransactionsAndSources()
              if (walletIsIssuer && tx.block_number === null) {
                newTx.inputs = tx.inputs;
                newTx.sources = sources;
              }
              if (lockedOutputs) {
                newTx.lockedOutputs = lockedOutputs;
              }
              result.push(newTx);
            }
          }
        });
      },

      loadTx = function(pubkey, fromTime) {
        return $q(function(resolve, reject) {
          var txHistory = [];
          var udHistory = [];
          var txPendings = [];

          var nowInSec = Math.trunc(new Date().getTime() / 1000); // TODO test to replace using moment().utc().unix()
          fromTime = fromTime || (nowInSec - csSettings.data.walletHistoryTimeSecond);
          var processedTxMap = {};
          var tx = {};

          var _reduceTx = function(res){
            _reduceTxAndPush(pubkey, res.history.sent, txHistory, processedTxMap);
            _reduceTxAndPush(pubkey, res.history.received, txHistory, processedTxMap);
            _reduceTxAndPush(pubkey, res.history.sending, txPendings, processedTxMap, true /*allow pendings*/);
            _reduceTxAndPush(pubkey, res.history.pending, txPendings, processedTxMap, true /*allow pendings*/);
          };

          var jobs = [
            // get current block
            csCurrency.blockchain.current(true),

            // get pendings history
            BMA.tx.history.pending({pubkey: pubkey})
              .then(_reduceTx)
          ];

          // get TX history since
          if (fromTime > 0) {
            var sliceTime = csSettings.data.walletHistorySliceSecond;
            fromTime = fromTime - (fromTime % sliceTime);
            for(var i = fromTime; i - sliceTime < nowInSec; i += sliceTime)  {
              jobs.push(BMA.tx.history.times({pubkey: pubkey, from: i, to: i+sliceTime-1})
                .then(_reduceTx)
              );
            }

            jobs.push(BMA.tx.history.timesNoCache({pubkey: pubkey, from: nowInSec - (nowInSec % sliceTime), to: nowInSec+999999999})
              .then(_reduceTx));
          }

          // get all TX
          else if (fromTime !== 'pending') {
            jobs.push(BMA.tx.history.all({pubkey: pubkey})
              .then(_reduceTx)
            );
          }

          // get UD history
          if (csSettings.data.showUDHistory && fromTime > 0) {
            /*jobs.push(
              BMA.ud.history({pubkey: pubkey})
                .then(function(res){
                  udHistory = !res.history || !res.history.history ? [] :
                    res.history.history.reduce(function(res, ud){
                      if (ud.time < fromTime) return res; // skip to old UD
                      var amount = powBase(ud.amount, ud.base);
                      return res.concat({
                        time: ud.time,
                        amount: amount,
                        isUD: true,
                        block_number: ud.block_number
                      });
                    }, []);
                }));*/
            // API extension
            jobs.push(
              api.data.raisePromise.loadUDs({
                pubkey: pubkey,
                fromTime: fromTime
              })
                .then(function(res) {
                  if (!res || !res.length) return;
                  udHistory = res.reduce(function(res, hits) {
                    return res.concat(hits);
                  }, udHistory);
                })

                .catch(function(err) {
                  console.debug('Error while loading UDs history, on extension point.');
                  console.error(err);
                })
              );
          }

          // Execute jobs
          $q.all(jobs)
            .then(function(res){
              var current = res[0];

              // sort by time desc
              txHistory = txHistory.concat(udHistory).sort(function(tx1, tx2) {
                return (tx2.time - tx1.time);
              });
              tx.validating = txHistory.filter(function(tx) {
                return (tx.block_number > current.number - csSettings.data.blockValidityWindow);
              });
              tx.history = (!tx.validating.length) ? txHistory : txHistory.slice(tx.validating.length);

              tx.pendings = txPendings;
              tx.fromTime = fromTime;
              tx.toTime = tx.history.length ? tx.history[0].time /*=max(tx.time)*/: fromTime;

              resolve(tx);
            })
            .catch(function(err) {
              tx.history = [];
              tx.pendings = [];
              tx.errors = [];
              delete tx.fromTime;
              delete tx.toTime;
              reject(err);
            });
        });
      },

      powBase = function(amount, base) {
        return base <= 0 ? amount : amount * Math.pow(10, base);
      },

      addSource = function(src, sources, sourcesIndexByKey) {
        var srcKey = src.type+':'+src.identifier+':'+src.noffset;
        if (angular.isUndefined(sourcesIndexByKey[srcKey])) {
          sources.push(src);
          sourcesIndexByKey[srcKey] = sources.length - 1;
        }
      },

      addSources = function(result, sources) {
        _(sources).forEach(function(src) {
          addSource(src, result.sources, result.sourcesIndexByKey);
        });
      },

      loadSourcesAndBalance = function(pubkey) {
        return BMA.tx.sources({pubkey: pubkey})
          .then(function(res){
            var result = {
              sources: [],
              sourcesIndexByKey: [],
              balance: 0
            };
            if (res.sources && res.sources.length) {
              _.forEach(res.sources, function(src) {
                src.consumed = false;
                result.balance += powBase(src.amount, src.base);
              });
              addSources(result, res.sources);
            }
            return result;
          });
      },

      loadData = function(pubkey, fromTime) {
        var now = new Date().getTime();

        var data = {};
        return $q.all([

            // Load Sources
            loadSourcesAndBalance(pubkey),

            // Load Tx
            loadTx(pubkey, fromTime)
          ])

          .then(function(res) {
            angular.merge(data, res[0]);
            data.tx = res[1];

            var txPendings = [];
            var txErrors = [];
            var balance = data.balance;

            function _processPendingTx(tx) {
              var consumedSources = [];
              var valid = true;
              if (tx.amount > 0) { // do not check sources from received TX
                valid = false;
                // TODO get sources from the issuer ?
              }
              else {
                _.forEach(tx.inputs, function(input) {
                  var inputKey = input.split(':').slice(2).join(':');
                  var srcIndex = data.sourcesIndexByKey[inputKey];
                  if (angular.isDefined(srcIndex)) {
                    consumedSources.push(data.sources[srcIndex]);
                  }
                  else {
                    valid = false;
                    return false; // break
                  }
                });
                if (tx.sources) { // add source output
                  addSources(data, tx.sources);
                }
                delete tx.sources;
                delete tx.inputs;
              }
              if (valid) {
                balance += tx.amount; // update balance
                txPendings.push(tx);
                _.forEach(consumedSources, function(src) {
                  src.consumed=true;
                });
              }
              else {
                txErrors.push(tx);
              }
            }

            var txs = data.tx.pendings;
            var retry = true;
            while(txs && txs.length > 0) {
              // process TX pendings
              _.forEach(txs, _processPendingTx);

              // Retry once (TX could be chained and processed in a wrong order)
              if (txErrors.length > 0 && txPendings.length > 0 && retry) {
                txs = txErrors;
                txErrors = [];
                retry = false;
              }
              else {
                txs = null;
              }
            }

            data.tx.pendings = txPendings;
            data.tx.errors = txErrors;
            data.balance = balance;

            // Will add uid (+ plugin will add name, avatar, etc. if enable)
            return csWot.extendAll((data.tx.history || []).concat(data.tx.validating||[]).concat(data.tx.pendings||[]), 'pubkey');
          })
          .then(function() {
            console.debug('[tx] TX and sources loaded in '+ (new Date().getTime()-now) +'ms');
            return data;
          });
      },

      loadSources = function(pubkey) {
        return loadData(pubkey, 'pending');
      };

    // Download TX history file
    downloadHistoryFile = function(pubkey, options) {

      options = options || {};
      options.fromTime = options.fromTime || -1;

      console.debug("[tx] Exporting TX history for pubkey [{0}]".format(pubkey.substr(0,8)));

      return $q.all([
        $translate(['ACCOUNT.HEADERS.TIME',
          'COMMON.UID',
          'COMMON.PUBKEY',
          'COMMON.UNIVERSAL_DIVIDEND',
          'ACCOUNT.HEADERS.AMOUNT',
          'ACCOUNT.HEADERS.COMMENT']),
        csCurrency.blockchain.current(true/*withCache*/),
        loadData(pubkey, options.fromTime)
      ])
        .then(function(result){

          var translations = result[0];

          var currentBlock = result[1];
          var currentTime = (currentBlock && currentBlock.medianTime) || moment().utc().unix();
          var currency = currentBlock && currentBlock.currency;

          result = result[2];

          // no TX
          if (!result || !result.tx || !result.tx.history) {
            return UIUtils.toast.show('INFO.EMPTY_TX_HISTORY');
          }

          return $translate('ACCOUNT.FILE_NAME', {currency: currency, pubkey: pubkey, currentTime : currentTime})
            .then(function(filename){

              var formatDecimal = $filter('formatDecimal');
              var formatPubkey = $filter('formatPubkey');
              var formatDate = $filter('formatDate');
              var formatDateForFile = $filter('formatDateForFile');
              var formatSymbol = $filter('currencySymbolNoHtml');

              var headers = [
                translations['ACCOUNT.HEADERS.TIME'],
                translations['COMMON.UID'],
                translations['COMMON.PUBKEY'],
                translations['ACCOUNT.HEADERS.AMOUNT'] + ' (' + formatSymbol(currency) + ')',
                translations['ACCOUNT.HEADERS.COMMENT']
              ];
              var content = result.tx.history.reduce(function(res, tx){
                return res.concat([
                    formatDate(tx.time),
                    tx.uid,
                    tx.pubkey,
                    formatDecimal(tx.amount/100),
                    '"' + (tx.isUD ? translations['COMMON.UNIVERSAL_DIVIDEND'] : tx.comment) + '"'
                  ].join(';') + '\n');
              }, [headers.join(';') + '\n']);

              var file = new Blob(content, {type: 'text/plain; charset=utf-8'});
              FileSaver.saveAs(file, filename);
            });
        });
    };

    // Register extension points
    api.registerEvent('data', 'loadUDs');

    return {
      id: id,
      load: loadData,
      loadSources: loadSources,
      downloadHistoryFile: downloadHistoryFile,
      // api extension
      api: api
    };
  }

  var service = factory('default', BMA);

  service.instance = factory;
  return service;
}]);


angular.module('cesium.wallet.services', ['ngApi', 'ngFileSaver', 'cesium.bma.services', 'cesium.crypto.services', 'cesium.utils.services',
  'cesium.settings.services'])


.factory('csWallet', ['$q', '$rootScope', '$timeout', '$translate', '$filter', '$ionicHistory', 'UIUtils', 'Api', 'Idle', 'localStorage', 'sessionStorage', 'Modals', 'CryptoUtils', 'csCrypto', 'BMA', 'csConfig', 'csSettings', 'FileSaver', 'Blob', 'csWot', 'csTx', 'csCurrency', function($q, $rootScope, $timeout, $translate, $filter, $ionicHistory, UIUtils,
                              Api, Idle, localStorage, sessionStorage, Modals,
                              CryptoUtils, csCrypto, BMA, csConfig, csSettings, FileSaver, Blob, csWot, csTx, csCurrency) {
  'ngInject';

  var defaultBMA = BMA;
  var service;

  function factory(id, BMA) {

    BMA = BMA || defaultBMA;
    var
    exports,
    constants = {
      // @Deprecated
      OLD_STORAGE_KEY: 'CESIUM_DATA',
      STORAGE_PUBKEY: 'pubkey',
      STORAGE_UID: 'uid',
      STORAGE_DATA_PREFIX: 'data-',
      STORAGE_SECKEY: 'seckey',
      /* Need for compat with old currencies (test_net and sou) */
      TX_VERSION:   csConfig.compatProtocol_0_80 ? 3 : BMA.constants.PROTOCOL_VERSION,
      IDTY_VERSION: csConfig.compatProtocol_0_80 ? 2 : BMA.constants.PROTOCOL_VERSION,
      MS_VERSION:   csConfig.compatProtocol_0_80 ? 2 : BMA.constants.PROTOCOL_VERSION,
      CERT_VERSION: csConfig.compatProtocol_0_80 ? 2 : BMA.constants.PROTOCOL_VERSION,
      REVOKE_VERSION: csConfig.compatProtocol_0_80 ? 2 : BMA.constants.PROTOCOL_VERSION,
      TX_MAX_INPUTS_COUNT: 40 // Allow to get a TX with less than 100 rows (=max row count in Duniter protocol)
    },
    data = {},
    settings,
    listeners,
    started,
    startPromise,
    loadPromise,
    enableAuthIdle = false,
    api = new Api(this, 'csWallet-' + id),

    resetData = function(init) {
      data.loaded = false;
      data.pubkey= null;

      data.uid = null;
      data.localName = null;
      data.isNew = null;
      data.sourcesIndexByKey = null;
      data.medianTime = null;
      data.requirements = {};
      data.blockUid = null;
      data.sigDate = null;
      data.sigStock = null;
      data.isMember = false;
      data.events = [];

      // children's wallets
      data.children = [];

      // Encrypted (need auth() to be encrypted)
      data.encryptedData = null;

      resetKeypair();
      resetTxAndSources();

      started = false;
      startPromise = undefined;

      if (init) {
        api.data.raise.init(data);
      }
      else {
        if (isDefault() && settings && !settings.useLocalStorage) {
          csSettings.reset();
        }
        api.data.raise.reset(data);
      }
    },

    resetKeypair = function(){
      data.keypair = {
        signSk: null,
        signPk: null
      };
    },

    resetSources = function(){
      // reset sources data
      data.sources = undefined;
      data.sourcesIndexByKey = undefined;
      data.balance = 0;
    },

    resetTx = function(){
      // reset TX data
      data.tx = data.tx || {};
      data.tx.history = [];
      data.tx.pendings = [];
      data.tx.errors = [];
      delete data.tx.fromTime;
      delete data.tx.toTime;
    },

    resetTxAndSources = function(){
      // reset sources data
      resetSources();
      // reset TX data
      resetTx();
    },

    isDefault = function(){
      return id === 'default';
    },

    hasEncryptedData = function(){
      return data.encryptedData && data.encryptedData.nonce && data.encryptedData.content;
    },

    addSource = function(src, sources, sourcesIndexByKey) {
      var srcKey = src.type+':'+src.identifier+':'+src.noffset;
      if (angular.isUndefined(sourcesIndexByKey[srcKey])) {
        sources.push(src);
        sourcesIndexByKey[srcKey] = sources.length - 1;
      }
    },

    addSources = function(sources) {
      data.sources = data.sources || [];
      data.sourcesIndexByKey = data.sourcesIndexByKey || {};
      _(sources).forEach(function(src) {
        addSource(src, data.sources, data.sourcesIndexByKey);
      });
    },

    // Show login modal
    login = function(options) {
      if (!started) {
        return (startPromise || start())
          .then(function () {
            return login(options); // loop
          });
      }

      var needLogin = !isLogin();
      var needAuth = options && ((options.auth && !isAuth()) || options.forceAuth);

      // user already login
      if (!needLogin && !needAuth) {
        if (!isDataLoaded(options)) {
          return loadData(options);
        }
        return $q.when(data);
      }
      var keepAuth = csSettings.data.keepAuthIdle > 0;

      var authData;
      return (options && options.authData && $q.when(options.authData) ||
        Modals.showLogin(options))
        .then(function(res){
          if (!res || !res.pubkey ||
             (!needLogin && res.pubkey !== data.pubkey) ||
             (needAuth && (!res.keypair || !res.keypair.signPk || !res.keypair.signSk))) {
            throw 'CANCELLED';
          } // invalid data

          authData = res;
          data.pubkey = authData.pubkey;
          data.isNew = options && angular.isDefined(options.isNew) ? options.isNew : data.isNew;
          if (keepAuth) {
            data.keypair = authData.keypair || {
                signSk: null,
                signPk: null
              };
          }

          if (needLogin) {
            // extend API to check login validity
            return api.data.raisePromise.loginCheck(data)
              .catch(function (err) {
                resetData(); // Reset data if not valid, then exit process
                throw err;
              })
              // Call extend api
              .then(function() {
                if (needLogin) {
                  return api.data.raisePromise.login(data)
                    .catch(function(err) {
                      console.warn('Error during extension call [wallet.api.data.on.login]', err);
                      // continue
                    });
                }
              });
          }
        })

        .then(function() {
          // Read data from pubkey (when first login)
          if (needLogin) {
            return restoreData();
          }
          // Or the was login but now auth: just try to decrypt data
          else if (needAuth) {
            return openEncryptedData();
          }
        })

        .then(function() {
          if (needLogin) {

            // store wallet
            store();
          }

          // Send auth event (if need)
          if (needAuth || isAuth()) {
            // Check if need to start/stop auth idle
            checkAuthIdle(true);

            return api.data.raisePromise.auth(keepAuth ? data : authData);
          }
        })
        .then(function() {
          // Load data if need
          // If user just login, force data full load (even if min data asked)
          // because the user can wait (after the login modal)
          var loadOptions = !needLogin && options && options.minData ? {minData: true} : undefined/*=load all*/;
          if (!isDataLoaded(loadOptions)) {
            return loadData(loadOptions);
          }
        })
        .then(function() {
          if (options && options.silent) {
            UIUtils.loading.hide();
          }

          return keepAuth ? data : angular.merge({}, data, authData);
        })
        .catch(function(err) {
          if (err == 'RETRY' && (!options || !options.authData)) {
            return $timeout(function(){
              return login(options);
            }, 300);
          }
          throw err;
        });
    },

    logout = function() {
      var wasAuth = isAuth();

      return $q(function(resolve, reject) {

        var pubkey = data.pubkey;
        resetData(); // will reset keypair
        resetStore(pubkey); // reset store

        // Send logout event
        api.data.raise.logout();

        if (wasAuth) {
          api.data.raise.unauth();
        }

        checkAuthIdle(false);

        $ionicHistory.clearCache();

        resolve();
      });
    },

    isLogin = function() {
      return !!data.pubkey;
    },

    auth = function(options) {
      if (!started) {
        return (startPromise || start())
          .then(function () {
            return auth(options); // loop
          });
      }

      if (isAuth() && (!options || !options.forceAuth)) {
        return $q.when(data);
      }

      options = options || {};
      options.expectedPubkey = isLogin() && data.pubkey;
      options.auth = true;
      return login(options);
    },

    unauth = function() {
      return $q(function(resolve, reject) {

        resetKeypair();
        store();

        // Send unauth event
        api.data.raise.unauth();

        checkAuthIdle(false);

        $ionicHistory.clearCache();

        resolve();
      });
    },

    isAuth = function() {
      return !!(data.pubkey && data.keypair && data.keypair.signSk);
    },

    getKeypair = function(options) {
      if (!started) {
        return (startPromise || start())
          .then(function () {
            return getKeypair(options); // loop
          });
      }

      if (isAuth()) {
        return $q.when(data.keypair);
      }
      options = options || {};
      options.silent = angular.isDefined(options.silent) ? options.silent : true;
      return auth(options)
        .then(function() {
          return data.keypair;
        });
    },

    hasSelf = function() {
      return !!data.pubkey && data.requirements && !data.requirements.needSelf;
    },

    isDataLoaded = function(options) {
      if (options) {
        if (options.minData) return data.loaded;
        if (options.requirements && !data.requirements) return false;
        if (options.tx && options.tx.enable && (!data.tx.fromTime || data.tx.fromTime == 'pending')) return false;
        if (options.sigStock && !data.sigStock) return false;
      }
      return data.loaded && data.sources;
    },

    isNeverUsed = function() {
      if (!data.loaded) return undefined; // undefined if not full loaded
      return !data.pubkey || !(
         // Check registration
         data.isMember ||
         data.requirements.pendingMembership ||
         data.requirements.revoked ||
         !data.requirements.needSelf ||
         data.requirements.wasMember ||

         // Check TX history
         data.tx.history.length ||
         data.tx.pendings.length ||

         // Check extended data (name+avatar)
         data.localName ||
         data.name ||
         data.avatar
        );
    },

    isNew = function() {return !!data.isNew;},

    // If connected and same pubkey
    isUserPubkey = function(pubkey) {
      return isLogin() && data.pubkey === pubkey;
    },

    // store pubkey and uid
    store = function(pubkey) {
      pubkey = pubkey && typeof pubkey == 'string' ? pubkey : data.pubkey;
      if (settings.useLocalStorage) {

        if (isLogin() && settings.rememberMe) {

          var now = new Date().getTime();
          console.debug("[wallet] Storing...");

          var jobs = [];

          // Use session storage for secret key - fix #372
          if (settings.keepAuthIdle == constants.KEEP_AUTH_IDLE_SESSION && isAuth()) {
            jobs.push(sessionStorage.put(constants.STORAGE_SECKEY, CryptoUtils.base58.encode(data.keypair.signSk)));
          }
          else {
            jobs.push(sessionStorage.put(constants.STORAGE_SECKEY, null));
          }

          // Use local storage for pubkey
          jobs.push(localStorage.put(constants.STORAGE_PUBKEY, data.pubkey));

          // Use local storage for uid - fix #625
          if (data.uid) {
            jobs.push(localStorage.put(constants.STORAGE_UID, data.uid));
          }
          else {
            jobs.push(localStorage.put(constants.STORAGE_UID, null));
          }

          return $q.all(jobs)
            .then(function() {
              console.debug("[wallet] Stored in "+ (new Date().getTime() - now) +"ms");
            });
        }
        else {
          // Resetting local storage
          return $q.all([
            sessionStorage.put(constants.STORAGE_SECKEY, null),
            localStorage.put(constants.STORAGE_PUBKEY, null),
            localStorage.put(constants.STORAGE_UID, null),
            // Clean data (only in the session storage - keep local)
            pubkey ? sessionStorage.put(constants.STORAGE_DATA_PREFIX + pubkey, null) : $q.when()
          ]);
        }
      }
      else {
        return $q.all([
          sessionStorage.put(constants.STORAGE_SECKEY, null),
          localStorage.put(constants.STORAGE_PUBKEY, null),
          localStorage.put(constants.STORAGE_UID, null),
          // Clean data
          pubkey ? sessionStorage.put(constants.STORAGE_DATA_PREFIX + pubkey, null) : $q.when(),
          pubkey ? localStorage.put(constants.STORAGE_DATA_PREFIX + pubkey, null) : $q.when()
        ]);
      }
    },

    // reset data store for this pubkey
    resetStore = function(pubkey) {

      console.debug("[wallet] Resetting stored pubkey (and uid) in local storage...");

      sessionStorage.put(constants.STORAGE_SECKEY, null);
      localStorage.put(constants.STORAGE_PUBKEY, null);
      localStorage.put(constants.STORAGE_UID, null);

      if (settings.useLocalStorage) {
        // Clean data (only in the session storage - keep local)
        return pubkey ? sessionStorage.put(constants.STORAGE_DATA_PREFIX + pubkey, null) : $q.when();
      }
      else {
        console.debug("[wallet] Resetting stored data in local storage...");
        return $q.all([
          pubkey ? sessionStorage.put(constants.STORAGE_DATA_PREFIX + pubkey, null) : $q.when(),
          pubkey ? localStorage.put(constants.STORAGE_DATA_PREFIX + pubkey, null) : $q.when()
        ]);
      }
    },

    // store children wallet, notifications read Time, ...
    storeData = function() {
      if (!isLogin()) throw {message:'ERROR.NEED_LOGIN_FIRST'};

      var useEncryption = settings.useLocalStorageEncryption;
      var storageKey = constants.STORAGE_DATA_PREFIX + data.pubkey;

      var content; // Init only if used
      var secureContent; // Init only if used

      // Add readTime
      if (data.notifications && data.notifications.readTime) {
        content = content || {};
        content.notifications = {
          readTime: data.notifications.readTime
        };
      }
      if (data.invitations && data.invitations.readTime) {
        content = content || {};
        content.invitations = {
          readTime: data.invitations.readTime
        };
      }

      // Add children wallets
      if (data.children && data.children.length) {
        // remember children count - need when data still encrypted, by method getChildrenCount()
        content = content || {};
        content.childrenCount = data.children.length;

        secureContent = secureContent || {}; // Init th secured content
        // Add children wallet
        secureContent.children = _.map(data.children, function(wallet) {
          return {
            pubkey: wallet.data.pubkey,
            uid: wallet.data.uid,
            localName: wallet.data.localName
          };
        });
      }
      var contentStr = (content || secureContent) && JSON.stringify(angular.merge({}, content||{}, secureContent||{}));

      // Not encryption (or nothing to secure content): store without encryption
      if (!useEncryption || !secureContent) {
        return $q.all([
          sessionStorage.put(storageKey, null), // clear session storage (not used if no encryption)
          localStorage.put(storageKey, contentStr || null)
        ]);
      }

      // Encryption is enable, but user not auth: use the session storage
      // (and keep the localstorage value)
      if (!isAuth()) return sessionStorage.put(storageKey, contentStr||null);

      return $q.all([
        // Get a unique nonce
        CryptoUtils.util.random_nonce(),
        // Get box keypair
        CryptoUtils.box.keypair.fromSignKeypair(data.keypair),
        // Put also (without encryption) in the session storage
        sessionStorage.put(storageKey, contentStr || null)
      ])
      .then(function(res) {
        var nonce = res[0];
        var keypair = res[1];

        return CryptoUtils.box.pack(JSON.stringify(secureContent), nonce, keypair.boxPk, keypair.boxSk)
          .then(function(cypherContent) {
            content = angular.merge(content||{}, {
              encryptedData: {
                nonce: CryptoUtils.util.encode_base58(nonce),
                content: cypherContent
              }
            });
            //console.debug("[wallet] Storing with encryption: ", content);
            return localStorage.put(storageKey, JSON.stringify(content));
          });
      });
    },

    restore = function() {
      // Clean old storage,
      localStorage.get(constants.OLD_STORAGE_KEY)
        .then(function(res) {
          if (res && res != "null") localStorage.put(constants.OLD_STORAGE_KEY, null); // remove
        });

      return  $q.all([
          sessionStorage.get(constants.STORAGE_SECKEY),
          localStorage.get(constants.STORAGE_PUBKEY),
          localStorage.get(constants.STORAGE_UID)
        ])
        .then(function(res) {
          var seckey = res[0];
          var pubkey = res[1];
          var uid = res[2];
          if (!pubkey || pubkey == 'null') return;

          console.debug('[wallet] Restore {' + pubkey.substring(0, 8) + '} from local storage');

          var keypair;
          if (seckey && seckey.length && seckey != 'null') {
            try {
              keypair = {
                signPk: CryptoUtils.util.decode_base58(pubkey),
                signSk: CryptoUtils.util.decode_base58(seckey)
              };
            }
            catch (err) {
              console.warn('[wallet] Secret key restoration failed: ', err);
              keypair = undefined;
            }
          }

          data.pubkey = pubkey;
          data.uid = uid && uid != 'null' ? uid : undefined;
          data.keypair = keypair || {signPk: undefined, signSk: undefined};

          // Get pubkey's data
          return restoreData();
        })

        .then(function() {
          // Successful restored: raise API event
          if (isLogin()) {
            return api.data.raisePromise.login(data)
              .catch(function(err) {
                console.warn('Error during extension call [wallet.api.data.on.login]', err);
                // continue
              });
          }
        })

        .then(function(){
          return data;
        });
    },

    restoreData = function() {
      if (!isLogin()) throw {message:'ERROR.NEED_LOGIN_FIRST'};
      if (isNew()) return $q.when(data); // Skip restore
      // Get pubkey's data
      return $q.all([
        sessionStorage.getObject(constants.STORAGE_DATA_PREFIX + data.pubkey),
        localStorage.getObject(constants.STORAGE_DATA_PREFIX + data.pubkey)
      ])
      // Apply data, first from the session storage, then from local storage
      .then(function (res) {
        return applyRestoredData(res[0] || res[1]);
      });
    },

    applyRestoredData = function(content) {
      if (!content) return $q.when(); // skip

      // Apply children
      if (content.children) {
        removeAllChildrenWallets({store: false/*skip store*/});

        _.forEach(content.children, function(child, index) {
          var walletId = index+1;
          var wallet = service.instance(walletId, BMA);
          wallet.data.pubkey = child.pubkey;
          wallet.data.localName = child.localName;
          wallet.data.uid = child.uid;
          addChildWallet(wallet, {store: false/*skip store*/});
        });
        delete content.children;
        // childrenCount not need anymore
        delete data.childrenCount;
      }

      // make sure to remove pubkey before copy
      delete content.pubkey;
      delete content.uid;

      // Copy to data
      angular.merge(data, content);

      // If auth: open encrypted data
      if (hasEncryptedData() && isAuth()) {
        return openEncryptedData({store: false})
          .then(function(){
            return data; // Important: return the data
          });
      }

      return $q.when(data); // Important: return the data
    },

    getData = function() {
      return data;
    },

    loadRequirements = function() {
      // Clean existing events
      cleanEventsByContext('requirements');

      // Get requirements
      return csWot.loadRequirements(data)
        .then(function(){

          if (!data.requirements.uid) return;

          // Get sigDate
          var blockParts = data.requirements.blockUid.split('-', 2);
          var blockNumber = parseInt(blockParts[0]);
          var blockHash = blockParts[1];
          // Retrieve registration date
          return BMA.blockchain.block({block: blockNumber})
            .then(function(block) {
              data.sigDate = block.medianTime;

              // Check if self has been done on a valid block
              if (!data.isMember && blockNumber !== 0 && blockHash !== block.hash) {
                data.requirements.hasBadSelfBlock = true;
              }
            })
            .catch(function(err){
              // Special case for currency init (root block not exists): use now
              if (err && err.ucode == BMA.errorCodes.BLOCK_NOT_FOUND && blockNumber === 0) {
                data.sigDate = Math.trunc(new Date().getTime() / 1000);
              }
              else {
                throw err;
              }
            });
        });
    },

    loadTxAndSources = function(fromTime) {
      return csTx.load(data.pubkey, fromTime)
        .then(function(res){
          resetTxAndSources();
          angular.merge(data, res);
        })
        .catch(function(err) {
          resetTxAndSources();
          throw err;
        });
    },

    loadSources = function() {
      return csTx.loadSources(data.pubkey)
        .then(function(res){
          resetSources();
          angular.merge(data, res);
        })
        .catch(function(err) {
          resetSources();
          throw err;
        });
    },

    // Generate events from requirements
    addEvents = function() {
      // Add user events
      if (data.requirements.revoked) {
        delete data.requirements.hasBadSelfBlock;
        addEvent({type:'info', message: 'ERROR.WALLET_REVOKED', context: 'requirements'});
      }
      else if (data.requirements.pendingRevocation) {
        delete data.requirements.hasBadSelfBlock;
        addEvent({type:'pending', message: 'INFO.REVOCATION_SENT_WAITING_PROCESS', context: 'requirements'});
      }
      else {
        if (!data.isMember && data.requirements.hasBadSelfBlock) {
          addEvent({type: 'error', message: 'ERROR.WALLET_INVALID_BLOCK_HASH', context: 'requirements'});
          console.debug("Invalid membership for uid={0}: block hash changed".format(data.uid));
        }
        // Check if self expired
        else if (!data.isMember && data.requirements.expired) {
          addEvent({type: 'error', message: 'ERROR.WALLET_IDENTITY_EXPIRED', context: 'requirements'});
          console.debug("Identity expired for uid={0}.".format(data.uid));
        }
        else if (data.requirements.pendingMembership) {
          addEvent({type:'pending', message: 'ACCOUNT.WAITING_MEMBERSHIP', context: 'requirements'});
        }
        // If user has send a SELF, ask for membership - fix #625
        else if (!data.requirements.needSelf && data.requirements.needMembership){
          addEvent({type:'warn', message: 'ACCOUNT.NO_WAITING_MEMBERSHIP', context: 'requirements'});
        }
        if (data.requirements.needRenew) {
          if (data.requirements.membershipExpiresIn > 0) {
            addEvent({type:'warn', message: 'ACCOUNT.WILL_NEED_RENEW_MEMBERSHIP', messageParams: data.requirements, context: 'requirements'});
          }
          else {
            addEvent({type:'warn', message: 'ACCOUNT.NEED_RENEW_MEMBERSHIP', messageParams: data.requirements, context: 'requirements'});
          }
        }
        else
        {
          if (data.requirements.needCertificationCount > 0) {
            addEvent({type:'info', message: 'ACCOUNT.WAITING_CERTIFICATIONS', messageParams: data.requirements, context: 'requirements'});
          }
          if (data.requirements.willNeedCertificationCount > 0) {
            addEvent({type:'warn', message: 'ACCOUNT.WILL_MISSING_CERTIFICATIONS', messageParams: data.requirements, context: 'requirements'});
          }
          if (data.requirements.wasMember && data.requirements.needMembership) {
            addEvent({type:'warn', message: 'ACCOUNT.NEED_RENEW_MEMBERSHIP', messageParams: data.requirements, context: 'requirements'});
          }
        }
      }
    },

    loadSigStock = function() {
      return $q(function(resolve, reject) {
        // Get certified by, then count written certification
        BMA.wot.certifiedBy({pubkey: data.pubkey})
          .then(function(res){
            data.sigStock = !res.certifications ? 0 : res.certifications.reduce(function(res, cert) {
              return cert.written === null ? res : res+1;
            }, 0);
            resolve();
          })
          .catch(function(err) {
            if (!!err && err.ucode == BMA.errorCodes.NO_MATCHING_MEMBER) {
              data.sigStock = 0;
              resolve(); // not found
            }
            /*FIXME: workaround for Duniter issue #1309 */
            else if (!!err && err.ucode == 1002) {
              console.warn("[wallet-service] Detecting Duniter issue #1309 ! Applying workaround... ");
              data.sigStock = 0;
              resolve(); // not found
            }
            else {
              reject(err);
            }
          });
      });
    },

    loadData = function(options) {

      var alertIfUnusedWallet = !csCurrency.data.initPhase && (!csSettings.data.wallet || csSettings.data.wallet.alertIfUnusedWallet) &&
        !data.loaded && (!options || !options.minData || !options.silent);

      // Make sure to load once at a time
      if (loadPromise) {
        return loadPromise.then(function() {
          return isDataLoaded(options) ? data : refreshData(options);
        });
      }

      if (options && options.minData) {
        loadPromise = loadMinData(options);
      }
      else if (options || data.loaded) {
        loadPromise = refreshData(options);
      }
      else  {
        loadPromise = loadFullData();
      }

      return loadPromise

        // Warn if wallet has been never used - see #167
        .then(function() {
          var unused = isNeverUsed();
          var showAlert = alertIfUnusedWallet && !isNew() && angular.isDefined(unused) && unused;
          if (!showAlert) return true;
          return UIUtils.loading.hide()
            .then(function() {
              return UIUtils.alert.confirm('CONFIRM.LOGIN_UNUSED_WALLET', 'CONFIRM.LOGIN_UNUSED_WALLET_TITLE', {
                cancelText: 'COMMON.BTN_CONTINUE',
                okText: 'COMMON.BTN_RETRY'
              });
            })
            .then(function(retry) {
              if (retry) {
                return logout().then(function() {
                  throw 'RETRY';
                });
              }
              else {
                // Remembering to not ask for confirmation
                if (csSettings.data.wallet.alertIfUnusedWallet) {
                  csSettings.data.wallet.alertIfUnusedWallet = false;
                  csSettings.store();
                }
              }
              return true;
            });
        })

        // Return wallet data
        .then(function(confirm) {
          loadPromise = null;
          if (confirm) {
            return data;
          }
          else { // cancel

            throw 'CANCELLED';
          }
        });
    },

    loadFullData = function() {
      data.loaded = false;

      return $q.all([

          // Get requirements
          loadRequirements(),

          // Get TX and sources
          loadTxAndSources(),

          // Load sigStock
          loadSigStock()
        ])
        .then(function() {

          // Load wallet events
          addEvents();

          // API extension
          return api.data.raisePromise.load(data)
            .catch(function(err) {
              console.error('[wallet] Error during load API extension point. Try to continue',err);
            });
        })
        .then(function() {
          data.loaded = true;
          return data;
        })
        .catch(function(err) {
          data.loaded = false;
          throw err;
        });
    },

    loadMinData = function(options) {
      options = options || {};
      options.requirements = angular.isDefined(options.requirements) ? options.requirements :
        (!data.requirements || angular.isUndefined(data.requirements.needSelf));
      if (!options.requirements) {
        return $q.when(data);
      }
      return refreshData(options)
        .then(function(data) {
          data.loaded = true;
          return data;
        });
    },

    refreshData = function(options) {
        options = options || {
          requirements: true,
          sources: true,
          tx: {
            enable: true,
            fromTime: data.tx ? data.tx.fromTime : undefined // keep previous time
          },
          sigStock: true,
          api: true
        };

      // Force some load (requirements) if not already loaded
      options.requirements = angular.isDefined(options.requirements) ? options.requirements : angular.isDefined(data.requirements.needSelf);

      // Force sources when TX enable
      if (angular.isUndefined(options.sources) && options.tx && options.tx.enable) {
        options.sources = true;
      }

      var jobs = [];

      // Get requirements
      if (options.requirements) {
        // Reset events
        cleanEventsByContext('requirements');

        jobs.push(
          loadRequirements()

            // Add wallet events
            .then(addEvents)
        );
      }

      if (options.sources && (!options.tx || options.tx.enable)) {
        // Get TX and sources
        jobs.push(loadTxAndSources(options.tx ? options.tx.fromTime: undefined));
      }

      else if (options.sources && (options.tx && !options.tx.enable)) {
        // Get sources (no TX)
        jobs.push(loadSources());
      }

      // Load sigStock
      if (options.sigStock) jobs.push(loadSigStock());

      return (jobs.length ? $q.all(jobs) : $q.when())
        .then(function(){
          // Skip api
          if (angular.isDefined(options.api) && !options.api) return data;

          // API extension (after all other jobs)
          return api.data.raisePromise.load(data)
            .then(function(){
              return data;
            });
        });
    },

    setSelf = function(uid, blockUid){
      // Skip if same self
      if (data.uid == uid && (!blockUid || data.blockUid == blockUid)) return $q.when();

      // Data not loaded
      if (!data.loaded) {
        return !loadPromise ?
          // If no pending load: ok
          $q.when() :
          // If a load is running: force a reload
          loadPromise.then(function() {
            return setSelf(uid, blockUid); // loop
          });
      }

      data.uid = uid;
      data.blockUid = blockUid;

      // Refresh requirements
      return refreshData({requirements: true, sigStock: true})
        .then(function() {
          // Store (to remember the new uid)
          return store({skipData: true});
        });
    },

    isBase = function(amount, base) {
      if (!base) return true; // no base
      if (amount < Math.pow(10, base)) return false; // too small
      var rest = '00000000' + amount;
      var lastDigits = parseInt(rest.substring(rest.length-base));
      return lastDigits === 0; // no rest
    },

    truncBase = function(amount, base) {
      var pow = Math.pow(10, base); // = min value in this base
      if (amount < pow) return 0;
      return Math.trunc(amount / pow ) * pow;
    },

    truncBaseOrMinBase = function(amount, base) {
      var pow = Math.pow(10, base);
      if (amount < pow) return pow; //
      return Math.trunc(amount / pow ) * pow;
    },

    powBase = function(amount, base) {
      return base <= 0 ? amount : amount * Math.pow(10, base);
    },

    getInputs = function(amount, outputBase, filterBase) {
      if (angular.isUndefined(filterBase)) {
        filterBase = outputBase;
      }
      var sourcesAmount = 0;
      var sources = [];
      var minBase = filterBase;
      var maxBase = filterBase;
      _.find(data.sources, function(source) {
        if (!source.consumed && source.base == filterBase){
          sourcesAmount += powBase(source.amount, source.base);
          sources.push(source);
        }
        // Stop if enough sources
        return (sourcesAmount >= amount);
      });

      // IF not enough sources, get add inputs from lower base (recursively)
      if (sourcesAmount < amount && filterBase > 0) {
        filterBase -= 1;
        var missingAmount = amount - sourcesAmount;
        var lowerInputs = getInputs(missingAmount, outputBase, filterBase);

        // Add lower base inputs to result
        if (lowerInputs.amount > 0) {
          minBase = lowerInputs.minBase;
          sourcesAmount += lowerInputs.amount;
          [].push.apply(sources, lowerInputs.sources);
        }
      }

      return {
        minBase: minBase,
        maxBase: maxBase,
        amount: sourcesAmount,
        sources: sources
      };
    },

    /**
    * Send a new transaction
    */
    transfer = function(destPub, amount, comments, useRelative, restPub, block) {
      return $q.all([
          getKeypair(),
          csCurrency.get(),
          block && $q.when(block) || csCurrency.blockchain.current()
        ])
        .then(function(res) {
          var keypair = res[0];
          var currency = res[1];
          block = res[2];
          if (!BMA.regexp.PUBKEY.test(destPub)){
            throw {message:'ERROR.INVALID_PUBKEY'};
          }
          if (!BMA.regexp.COMMENT.test(comments)){
            throw {message:'ERROR.INVALID_COMMENT'};
          }
          if (!isLogin()){
            throw {message:'ERROR.NEED_LOGIN_FIRST'};
          }
          if (!amount) {
            throw {message:'ERROR.AMOUNT_REQUIRED'};
          }
          if (amount <= 0) {
            throw {message:'ERROR.AMOUNT_NEGATIVE'};
          }
          amount = Math.floor(amount); // remove decimals

          var inputs = {
            amount: 0,
            minBase: block.unitbase,
            maxBase: block.unitbase + 1,
            sources : []
          };

          var logs = [];
          logs.push("[wallet] amount=" + amount);

          // Get inputs, starting to use current base sources
          var amountBase = 0;
          while (inputs.amount < amount && amountBase <= block.unitbase) {
            inputs = getInputs(amount, block.unitbase);

            if (inputs.amount < amount) {
              // try to reduce amount (replace last digits to zero)
              amountBase++;
              if (amountBase <= block.unitbase) {
                amount = truncBase(amount, amountBase);
                logs.push("[wallet] inputs not found. Retrying with amount =" + amount + " be compatible with amountBase=" + amountBase);
              }
            }
          }

          if (inputs.amount < amount) {
            if (data.balance < amount) {
              throw {message:'ERROR.NOT_ENOUGH_CREDIT'};
            }
            else if (inputs.amount === 0) {
              throw {message:'ERROR.ALL_SOURCES_USED'};
            }
            else {
              return $translate('COMMON.UD')
                .then(function(UD) {
                  var params;
                  if(useRelative) {
                    params = {
                      amount: ($filter('formatDecimal')(inputs.amount / currency.currentUD)),
                      unit: UD,
                      subUnit: $filter('abbreviate')(currency.name)
                    };
                  }
                  else {
                    params = {
                      amount: ($filter('formatDecimal')(inputs.amount/100)),
                      unit: $filter('abbreviate')(currency.name),
                      subUnit: ''
                    };
                  }
                  return $translate('ERROR.NOT_ENOUGH_SOURCES', params)
                    .then(function(message) {
                      throw {message: message};
                    });
                });
            }
          }
          // Avoid to get outputs on lower base
          if (amountBase < inputs.minBase && !isBase(amount, inputs.minBase)) {
            amount = truncBaseOrMinBase(amount, inputs.minBase);
            console.debug("[wallet] Amount has been truncate to " + amount);
            logs.push("[wallet] Amount has been truncate to " + amount);
          }
          else if (amountBase > 0) {
            console.debug("[wallet] Amount has been truncate to " + amount);
            logs.push("[wallet] Will use amount truncated to " + amount + " (amountBase="+amountBase+")");
          }

          // Send tx
          return createAndSendTx(currency, block, keypair, destPub, amount, inputs, comments, restPub||data.pubkey, logs)
            .then(function(res) {
              data.balance -= res.amount;
              _.forEach(inputs.sources, function(source) {
                source.consumed=true;
              });

              // Add new sources
              if (res && res.sources.length) {
                console.log("[wallet-service] New sources to be add after the TX: ", res.sources);
                addSources(res.sources);
              }

              // Add TX to pendings
              var pendingTx = {
                time: csCurrency.date.now(),
                amount: -amount,
                pubkey: destPub,
                comment: comments,
                isUD: false,
                hash: res.hash,
                locktime: 0,
                block_number: null
              };
              return csWot.extendAll([pendingTx], 'pubkey')
                .then(function() {
                  data.tx.pendings.unshift(pendingTx);

                  // API extension
                  api.data.raise.balanceChanged(data);
                  api.data.raise.newTx(data);

                  // Return TX hash (if chained TXs, return the last tx hash) - required by Cesium-API
                  return {
                    hash: res.hash
                  };
                });
            })
            .catch(function(err) {

              // Source already consumed: whould refresh wallet sources
              if (err && err.ucode === BMA.errorCodes.SOURCE_ALREADY_CONSUMED) {
                console.debug('[wallet] TX rejected by node with error [{0}]. Reloading sources then retry...'.format(err.message||'Source already consumed'));
                return $timeout(loadTxAndSources, 500)
                  .then(function() {
                    return transfer(destPub, amount, comments, useRelative, restPub, block);
                  });
              }

              // Error in generated TX - issue #524
              else if (err && err.ucode === BMA.errorCodes.TX_INPUTS_OUTPUTS_NOT_EQUAL) {
                // Ask user to send log to developers
                var esEnable = csSettings.data.plugins && csSettings.data.plugins.es && csSettings.data.plugins.es.enable;
                if (esEnable) {
                  UIUtils.loading.hide();
                  return UIUtils.alert.confirm('CONFIRM.ISSUE_524_SEND_LOG', 'ERROR.POPUP_TITLE', {
                    cssClass: 'warning',
                    okText: 'COMMON.BTN_OK',
                    cancelText: 'COMMON.BTN_NO'
                  })
                  .then(function(confirm) {
                    if (confirm) {
                      api.error.raise.send({
                        title: 'Issue #524 logs',
                        content: 'App version: ' +csConfig.version+'\n'+
                        'App build: ' +csConfig.build+'\n'+
                        'Logs:\n\n' + logs.join('\n')
                      });
                      return $timeout(function() {
                        throw {message: 'ERROR.ISSUE_524_TX_FAILED'};
                      }, 1500);
                    }
                    throw {message: 'ERROR.SEND_TX_FAILED'};
                  });
                }
              }
              throw err;
            });
        });
    },

    /**
     * Send a WIF wallet
     */
    transferAll = function(destPub, amount, comments, useRelative, restPub) {
      if (!isLogin()) return $q.reject({message:'ERROR.NEED_LOGIN_FIRST'});

      if (!restPub || destPub == restPub) {
        return $q.reject({message: "Could not have same pubkey for 'destPub' and 'restPub'"});
      }

      return csCurrency.blockchain.lastValid()
        .then(function(block) {
          console.debug("[wallet] Using last valid block as TX reference (to avoid network fork): ", block);

          return transfer(destPub, amount, comments, useRelative, restPub, block)
            .then(function() {
              // If more money: transfer all to restPub
              if (data.balance > 0 && restPub) {
                console.debug("[wallet] Wallet has some more money: transfering fund to [{0}]".format(restPub.substring(0,6)));
                return transfer(restPub, data.balance, undefined/*comments*/, false/*useRelative*/, restPub, block);
              }
            });

        });

    },

    /**
     * Create TX doc and send it
     * @param block the current block
     * @param destPub
     * @param amount
     * @param inputs
     * @param comments
     * @return the hash of the sent TX
     */
    createAndSendTx = function(currency, block, keypair, destPub, amount, inputs, comments, restPub, logs) {

      // Make sure a TX in compact mode has no more than 100 lines (fix #118)
      // (If more than 100 lines, send to TX to himself first, then its result as sources for the final TX)
      if (inputs.sources.length > constants.TX_MAX_INPUTS_COUNT) {
        console.debug("[Wallet] TX has to many sources. Will chain TX...");

        // Compute a slice of sources
        var firstSlice = {
          minBase: block.unitbase,
          maxBase: 0,
          amount: 0,
          sources: inputs.sources.slice(0, constants.TX_MAX_INPUTS_COUNT) /* end index is excluded, so array length=TX_MAX_INPUTS_COUNT - issue #524 */
        };
        _.forEach(firstSlice.sources, function(source) {
          if (source.base < firstSlice.minBase) firstSlice.minBase = source.base;
          if (source.base > firstSlice.maxBase) firstSlice.maxBase = source.base;
          firstSlice.amount += powBase(source.amount, source.base);
        });

        // Send inputs first slice
        return createAndSendTx(currency, block, keypair, data.pubkey/*to himself*/,  firstSlice.amount, firstSlice, undefined/*comment not need*/, data.pubkey/*rest to himself*/, logs)
          .then(function(res) {
            _.forEach(firstSlice.sources, function(source) {
              source.consumed=true;
            });
            addSources(res.sources);

            var secondSlice = {
              minBase: block.unitbase,
              maxBase: 0,
              amount: 0,
              sources: inputs.sources.slice(constants.TX_MAX_INPUTS_COUNT).concat(res.sources)
            };
            _.forEach(secondSlice.sources, function(source) {
              if (source.base < secondSlice.minBase) secondSlice.minBase = source.base;
              if (source.base > secondSlice.maxBase) secondSlice.maxBase = source.base;
              secondSlice.amount += source.amount;
            });

            // Send inputs second slice (recursive call)
            return createAndSendTx(currency, block, keypair, destPub, amount, secondSlice, comments, restPub, logs);
          });
      }

      var tx = 'Version: '+ constants.TX_VERSION +'\n' +
        'Type: Transaction\n' +
        'Currency: ' + currency.name + '\n' +
        'Blockstamp: ' + block.number + '-' + block.hash + '\n' +
        'Locktime: 0\n' + // no lock
        'Issuers:\n' +
        data.pubkey + '\n' +
        'Inputs:\n';

      _.forEach(inputs.sources, function(source) {
        // if D : AMOUNT:BASE:D:PUBLIC_KEY:BLOCK_ID
        // if T : AMOUNT:BASE:T:T_HASH:T_INDEX
        tx += [source.amount, source.base, source.type, source.identifier,source.noffset].join(':')+"\n";
      });

      tx += 'Unlocks:\n';
      for (i=0; i<inputs.sources.length; i++) {
        // INPUT_INDEX:UNLOCK_CONDITION
        tx += i + ':SIG(0)\n';
      }

      tx += 'Outputs:\n';
      // AMOUNT:BASE:CONDITIONS
      var rest = amount;
      var outputBase = inputs.maxBase;
      var outputAmount;
      var outputOffset = 0;
      var newSources = [];
      // Outputs to receiver (if not himself)
      if (destPub !== data.pubkey) {
        while(rest > 0) {
          outputAmount = truncBase(rest, outputBase);
          rest -= outputAmount;
          if (outputAmount > 0) {
            outputAmount = outputBase === 0 ? outputAmount : outputAmount / Math.pow(10, outputBase);
            tx += outputAmount + ':' + outputBase + ':SIG(' + destPub + ')\n';
            outputOffset++;
          }
          outputBase--;
        }
        rest = inputs.amount - amount;
        outputBase = inputs.maxBase;
      }
      // Outputs to restPub
      while(rest > 0) {
        outputAmount = truncBase(rest, outputBase);
        rest -= outputAmount;
        if (outputAmount > 0) {
          outputAmount = outputBase === 0 ? outputAmount : outputAmount / Math.pow(10, outputBase);
          tx += outputAmount +':'+outputBase+':SIG('+restPub+')\n';
          // If rest to himself: add new sources
          if (data.pubkey === restPub) {
            newSources.push({
              type: 'T',
              noffset: outputOffset,
              amount: outputAmount,
              base: outputBase
            });
          }
          outputOffset++;
        }
        outputBase--;
      }

      tx += "Comment: "+ (comments||"") + "\n";

      // Append to logs (need to resolve issue #524)
      if (logs) {
        if (destPub == data.pubkey) {
          logs.push('[wallet] Creating new TX, using inputs:\n - minBase: '+inputs.minBase+'\n - maxBase: '+inputs.maxBase);
        }
        else {
          logs.push('[wallet] Creating new TX, using inputs:\n - minBase: '+inputs.minBase+'\n - maxBase: '+inputs.maxBase + '\n - sources (=TX inputs):');
        }
        _.forEach(inputs.sources, function(source) {
          logs.push([source.amount, source.base, source.type, source.identifier,source.noffset].join(':'));
        });
        logs.push("\n[wallet] generated TX document (without signature) :\n------ START ------\n" + tx + "------ END ------\n");
      }

      return CryptoUtils.sign(tx, keypair)
        .then(function(signature) {
          var signedTx = tx + signature + "\n";
          return BMA.tx.process({transaction: signedTx})
            .catch(function(err) {
              if (err && err.ucode === BMA.errorCodes.TX_ALREADY_PROCESSED) {
                // continue
                return;
              }
              throw err;
            })
            .then(function() {
              return CryptoUtils.util.hash(signedTx);
            })
            .then(function(txHash) {
              _.forEach(newSources, function(output) {
                output.identifier= txHash;
                output.consumed = false;
                output.pending = true;
              });
              return {
                amount: (data.pubkey === destPub) ? 0 : ((data.pubkey === restPub) ? amount : inputs.amount),
                tx: signedTx,
                hash: txHash,
                sources: newSources
              };
            });
        });
    },

    getIdentityDocument = function(currency, keypair, uid, blockUid) {
      uid = uid || data.uid;
      blockUid = blockUid || data.blockUid;
      if (!uid || !blockUid) {
        throw {message: 'ERROR.WALLET_HAS_NO_SELF'};
      }
      if (data.requirements && data.requirements.expired) {
        throw {message: 'ERROR.WALLET_IDENTITY_EXPIRED'};
      }

      var identity = 'Version: '+ constants.IDTY_VERSION +'\n' +
        'Type: Identity\n' +
        'Currency: ' + currency.name + '\n' +
        'Issuer: ' + data.pubkey + '\n' +
        'UniqueID: ' + uid + '\n' +
        'Timestamp: ' + blockUid + '\n';
      return CryptoUtils.sign(identity, keypair)
        .then(function(signature) {
          identity += signature + '\n';
          console.debug('Has generate an identity document:\n----\n' + identity + '----');
          return identity;
        });
    },

    /**
    * Send self identity
    */
    self = function(uid, needToLoadRequirements) {
        if (!BMA.regexp.USER_ID.test(uid)){
          return $q.reject({message: 'ERROR.INVALID_USER_ID'});
        }
        var block;
        return $q.all([
          getKeypair(),
          csCurrency.get(),
          csCurrency.blockchain.lastValid()
        ])
        // Create identity document
        .then(function(res) {
          var keypair = res[0];
          var currency = res[1];
          block = res[2];
          return getIdentityDocument(currency, keypair, uid, block.number + '-' + block.hash);
        })

        // Send to node
        .then(function (identity) {
          return BMA.wot.add({identity: identity});
        })

        .then(function () {
          if (!!needToLoadRequirements) {
            // Refresh membership data (if need)
            return loadRequirements()

              // Add wallet events
              .then(addEvents);
          }
          else {
            data.uid = uid;
            data.blockUid = block.number + '-' + block.hash;
          }
        })
        .catch(function (err) {
          if (err && err.ucode === BMA.errorCodes.IDENTITY_SANDBOX_FULL) {
            throw {ucode: BMA.errorCodes.IDENTITY_SANDBOX_FULL, message: 'ERROR.IDENTITY_SANDBOX_FULL'};
          }
          throw err;
        });
    },

   /**
    * Send membership (in or out)
    */
    membership = function(sideIn) {
      return function() {
        var membership;

        return $q.all([
            getKeypair(),
            csCurrency.blockchain.lastValid()
          ])
          .then(function(res) {
            var keypair = res[0];
            var block = res[1];
            // Create membership to sign
            membership = 'Version: '+ constants.MS_VERSION +'\n' +
              'Type: Membership\n' +
              'Currency: ' + block.currency + '\n' +
              'Issuer: ' + data.pubkey + '\n' +
              'Block: ' + block.number + '-' + block.hash + '\n' +
              'Membership: ' + (!!sideIn ? "IN" : "OUT" ) + '\n' +
              'UserID: ' + data.uid + '\n' +
              'CertTS: ' + data.blockUid + '\n';

            return CryptoUtils.sign(membership, keypair);
          })
          .then(function(signature) {
            var signedMembership = membership + signature + '\n';
            // Send signed membership
            return BMA.blockchain.membership({membership: signedMembership});
          })
          .then(function() {
            return $timeout(function() {
              return loadRequirements();
            }, 1000); // waiting for node to process membership doc
          })

          // Add wallet events
          .then(addEvents);
      };
    },

    /**
    * Send identity certification
    */
    certify = function(uid, pubkey, timestamp, signature, isMember, wasMember) {
      return $q.all([
          getKeypair(),
          csCurrency.get(),
          csCurrency.blockchain.current()
        ])
        .then(function(res) {
          var keypair = res[0];
          var currency = res[1];
          var block = res[2];
          // Create the self part to sign
          var cert = 'Version: '+ constants.CERT_VERSION +'\n' +
            'Type: Certification\n' +
            'Currency: ' + currency.name + '\n' +
            'Issuer: ' + data.pubkey + '\n' +
            'IdtyIssuer: ' + pubkey + '\n' +
            'IdtyUniqueID: ' + uid + '\n' +
            'IdtyTimestamp: ' + timestamp + '\n' +
            'IdtySignature: ' + signature + '\n' +
            'CertTimestamp: ' + block.number + '-' + block.hash + '\n';

          return CryptoUtils.sign(cert, keypair)
            .then(function(signature) {
              var signedCert = cert + signature + '\n';
              return BMA.wot.certify({cert: signedCert});
            })
            .then(function() {
              var cert = {
                pubkey: pubkey,
                uid: uid,
                time: block.medianTime,
                isMember: isMember,
                wasMember: wasMember,
                expiresIn: currency.parameters.sigWindow,
                pending: true,
                block: block.number,
                valid: true
              };

              // Notify extension
              api.action.raise.certify(cert);

              return cert;
            });
        });
    },

    addEvent = function(event, insertAtFirst) {
      event = event || {};
      event.type = event.type || 'info';
      event.message = event.message || '';
      event.messageParams = event.messageParams || {};
      event.context = event.context || 'undefined';
      if (event.message.trim().length) {
        if (!insertAtFirst) {
          data.events.push(event);
        }
        else {
          data.events.splice(0, 0, event);
        }
      }
      else {
        console.debug('Event without message. Skipping this event');
      }
    },

    getkeypairSaveId = function(record) {
        var nbCharSalt = Math.round(record.answer.length / 2);
        var salt = record.answer.substr(0, nbCharSalt);
        var pwd = record.answer.substr(nbCharSalt);
        return CryptoUtils.scryptKeypair(salt, pwd)
          .then(function (keypair) {
            record.pubkey = CryptoUtils.util.encode_base58(keypair.signPk);
            record.keypair = keypair;
            return record;
          });
      },

    getCryptedId = function(record){
      return getkeypairSaveId(record)
        .then(CryptoUtils.util.random_nonce)
        .then(function(nonce) {
          record.nonce = CryptoUtils.util.encode_base58(nonce);
          return $q.all([
            CryptoUtils.box.pack(record.salt, nonce, record.keypair.boxPk, record.keypair.boxSk),
            CryptoUtils.box.pack(record.pwd, nonce, record.keypair.boxPk, record.keypair.boxSk)
          ]);
        })
        .then(function (res) {
          record.salt = res[0];
          record.pwd = res[1];
          return record;
        });
    },

    recoverId = function(recover) {
      var nonce = CryptoUtils.util.decode_base58(recover.cypherNonce);
      return getkeypairSaveId(recover)
        .then(function (recover) {
          return CryptoUtils.box.open(recover.cypherSalt, nonce, recover.keypair.boxPk, recover.keypair.boxSk);
        })
        .then(function (salt) {
          recover.salt = salt;
          return CryptoUtils.box.open(recover.cypherPwd, nonce, recover.keypair.boxPk, recover.keypair.boxSk);
        })
        .then(function (pwd) {
          recover.pwd = pwd;
          return recover;
        })
        .catch(function(err){
          console.warn('Incorrect answers - Unable to recover passwords');
        });
    },

    getSaveIDDocument = function(record) {
      var saveId = 'Version: 10 \n' +
        'Type: SaveID\n' +
        'Questions: ' + '\n' + record.questions +
        'Issuer: ' + data.pubkey + '\n' +
        'Crypted-Nonce: '+ record.nonce + '\n'+
        'Crypted-Pubkey: '+ record.pubkey +'\n' +
        'Crypted-Salt: '+ record.salt  + '\n' +
        'Crypted-Pwd: '+ record.pwd + '\n';

      // Sign SaveId document
      return CryptoUtils.sign(saveId, data.keypair)

        .then(function(signature) {
          saveId += signature + '\n';
          console.debug('Has generate an SaveID document:\n----\n' + saveId + '----');
          return saveId;
        });

    },

    downloadSaveId = function(record){
      return getSaveIDDocument(record)
        .then(function(saveId) {
          var saveIdFile = new Blob([saveId], {type: 'text/plain; charset=utf-8'});
          FileSaver.saveAs(saveIdFile, '{0}-recover_ID.txt'.format(data.pubkey.substring(0,8)));
        });

    },



    downloadKeyFile = function(format){
      if (!isAuth()) return $q.reject('user not authenticated');

      return $q.all([
          csCurrency.get(),
          csCrypto.keyfile.generateContent(data.keypair,
            {
              type: format,
              password: function() {
                UIUtils.loading.hide();
                return Modals.showPassword({
                    title: 'ACCOUNT.SECURITY.KEYFILE.PASSWORD_POPUP.TITLE',
                    subTitle: 'ACCOUNT.SECURITY.KEYFILE.PASSWORD_POPUP.HELP'
                  })
                  .then(function(password) {
                    return UIUtils.loading.show(10)
                      .then(function(){
                        return password;
                    });
                  });
              }
          })
        ])
        .then(function(res) {
          var currency = res[0];
          var document = res[1];
          return $translate('ACCOUNT.SECURITY.KEYFILE_FILENAME', {
              currency: currency.name,
              pubkey: data.pubkey,
              format: format,
            })
            .then(function(filename){
              var file = new Blob([document], {type: 'text/plain; charset=utf-8'});
              FileSaver.saveAs(file, filename);
            });
        });

    },

    getRevocationDocument = function() {
      return $q.all([
          getKeypair(),
          csCurrency.get()
        ])

        .then(function(res) {
          var keypair = res[0];
          var currency = res[1];
          // get the Identity document
          return getIdentityDocument(currency, keypair)

            // Create membership document (unsigned)
            .then(function(identity){
              var identityLines = identity.trim().split('\n');
              var idtySignature = identityLines[identityLines.length-1];

              var revocation = 'Version: '+ constants.REVOKE_VERSION +'\n' +
                'Type: Revocation\n' +
                'Currency: ' + currency.name + '\n' +
                'Issuer: ' + data.pubkey + '\n' +
                'IdtyUniqueID: ' + data.uid + '\n' +
                'IdtyTimestamp: ' + data.blockUid + '\n' +
                'IdtySignature: ' + idtySignature + '\n';


              // Sign revocation document
              return CryptoUtils.sign(revocation, keypair)

              // Add revocation to document
                .then(function(signature) {
                  revocation += signature + '\n';
                  console.debug('Has generate an revocation document:\n----\n' + revocation + '----');
                  return revocation;
                });
            });
        });
    },

    /**
     * Send a revocation
     */
    revoke = function() {

      // Clear old events
      cleanEventsByContext('revocation');

      // Get revocation document
      return getRevocationDocument()
        // Send revocation document
        .then(function(revocation) {
          return BMA.wot.revoke({revocation: revocation});
        })

        // Reload requirements
        .then(function() {

          return $timeout(function() {
            return loadRequirements();
          }, 1000); // waiting for node to process membership doc
        })

        // Add wallet events
        .then(addEvents)

        .catch(function(err) {
          if (err && err.ucode == BMA.errorCodes.REVOCATION_ALREADY_REGISTERED) {
            // Already registered by node: just add an event
            addEvent({type:'pending', message: 'INFO.REVOCATION_SENT_WAITING_PROCESS', context: 'requirements'}, true);
          }
          else {
            throw err;
          }
        })
        ;
    },

    revokeWithFile = function(revocation){
      return $q.all([
          BMA.wot.revoke({revocation: revocation})
        ])
        // Reload requirements
        .then(function(res) {
          if (isLogin()) {
            return $timeout(function () {
              return loadRequirements();
            }, 1000) // waiting for node to process membership doc

             // Add wallet events
            .then(addEvents)

            .catch(function (err) {
              if (err && err.ucode == BMA.errorCodes.REVOCATION_ALREADY_REGISTERED) {
                // Already registered by node: just add an event
                addEvent({type: 'pending', message: 'INFO.REVOCATION_SENT_WAITING_PROCESS', context: 'requirements'}, true);
              }
              else {
                throw err;
              }
            });
          }
          else {
            addEvent({type: 'pending', message: 'INFO.REVOCATION_SENT_WAITING_PROCESS', context: 'requirements'}, true);
          }
        });

    },

    downloadRevocation = function(){
      return $q.all([
          csCurrency.get(),
          getRevocationDocument()
        ])
        .then(function(res) {
          var currency = res[0];
          var revocation = res[1];
          var revocationFile = new Blob([revocation], {type: 'text/plain; charset=utf-8'});
          return $translate('ACCOUNT.SECURITY.REVOCATION_FILENAME', {
            uid: data.uid,
            currency: currency.name,
            pubkey: data.pubkey
          })
          .then(function (fileName) {
            FileSaver.saveAs(revocationFile, fileName);
          });
        });
    },

    cleanEventsByContext = function(context){
      data.events = data.events.reduce(function(res, event) {
        if (event.context && event.context == context) return res;
        return res.concat(event);
      },[]);
    },

    setParentWallet = function(parentWallet) {
      listeners = listeners || [];
      var listener;
      _.forEach(['load', 'reset'], function(method) {
        listener = api.data.on[method]($rootScope, function(data, deferred) {
          deferred = deferred || $q.defer();
          parentWallet.api.data.raisePromise[method](data)
            .then(deferred.resolve)
            .catch(deferred.reject);
          return deferred.promise;
        }, this);
        listeners.push(listener);
      });

      // Unauth when parent wallet unauth
      listener = parentWallet.api.data.on.unauth($rootScope, function() {
        if (isAuth()) unauth();
      }, this);
      listeners.push(listener);

      // Delegate start() to the parent wallet
      /*exports.start = function() {
        if (started) return $q.when();
        return parentWallet.start()
          .then(function() {
            started = true;
            startPromise=null;
          });
      };*/
    },

    createNewChildWallet = function(options) {
      var walletId = getChildrenWalletCount()+1;
      var wallet = service.instance(walletId);
      addChildWallet(wallet, options);
      return wallet;
    },

    addChildWallet = function(wallet, options) {
      // Link to parent
      wallet.children.setParent(exports); // = link to self wallet

      data.children = data.children || [];
      data.children.push(wallet);

      // Store (store children locally)
      if (!options || angular.isUndefined(options.store) || options.store) {
        return storeData();
      }
      return $q.when();
    },

    removeAllChildrenWallets = function(options) {
      // unauth all children wallets
      _.forEach(data.children || [], function(wallet){
        wallet.stop();
      });
      data.children.splice(0, data.children.length);

      // Store (store children locally)
      if (!options || angular.isUndefined(options.store) || options.store) {
        return storeData();
      }
      return $q.when();

    },

    removeChildWalletById = function(id, options) {
      data.children = data.children || [];
      var childIndex = _.findIndex(data.children, function(child) {return child.id == id;});
      if (childIndex === -1) {
        console.warn('[wallet] Unable to remove child wallet {'+id+'} (not found)');
        return;
      }
      // Remove the wallet, and return it
      var wallet = data.children.splice(childIndex, 1)[0];

      // Force to stop without calling api
      wallet.stop();

      // Store (store children locally)
      if (!options || angular.isUndefined(options.store) || options.store) {
        return storeData();
      }
    },

    getChildWalletById = function(id) {
      return _.find(data.children|| [], function(child) {return child.id == id;});
    },

    getChildWalletByPubkey = function(pubkey) {
      return _.find(data.children|| [], function(child) {return child.isUserPubkey(pubkey);});
    },

    hasChildrenWithPubkey = function(pubkey) {
      return !!getChildWalletByPubkey(pubkey);
    },

    getChildrenWalletCount =  function() {
      return angular.isDefined(data.childrenCount) ? data.childrenCount : (data.children && data.children.length || 0);
    },

    getAllChildrenWallet = function() {
      return openEncryptedData()
        .then(function() {
          return data.children;
        });
    },

    openEncryptedData = function(options) {
      if (!hasEncryptedData()) return $q.when();
      if (!isAuth()) return auth().then(openEncryptedData); // Force auth if need

      // Open encrypted data
      return CryptoUtils.box.keypair.fromSignKeypair(data.keypair)
        .then(function(keypair) {
          var nonce = CryptoUtils.util.decode_base58(data.encryptedData.nonce);
          return CryptoUtils.box.open(data.encryptedData.content, nonce, keypair.boxPk, keypair.boxSk);
        })
        // Then apply
        .then(function(content) {
          data.encryptedData = null; // reset encrypted data
          var promise = applyRestoredData(JSON.parse(content));

          // Store (store data into session storage)
          if (!options || angular.isUndefined(options.store) || options.store) {
            promise.then(function() {
              return storeData();
            });
          }

          return promise;
        })
        ;
    },

    /**
    * De-serialize from JSON string
    */
    fromJson = function(json, failIfInvalid) {
      failIfInvalid = angular.isUndefined(failIfInvalid) ? true : failIfInvalid;
      return $q(function(resolve, reject) {
        var obj = JSON.parse(json || '{}');
        // FIXME #379
        /*if (obj && obj.pubkey) {
          resolve({
            pubkey: obj.pubkey
          });
        }
        else */
        if (obj && obj.keypair && obj.keypair.signPk && obj.keypair.signSk) {
          var keypair = {};
          var i;

          // sign Pk : Convert to Uint8Array type
          var signPk = new Uint8Array(32);
          for (i = 0; i < 32; i++) signPk[i] = obj.keypair.signPk[i];
          keypair.signPk = signPk;

          var signSk = new Uint8Array(64);
          for (i = 0; i < 64; i++) signSk[i] = obj.keypair.signSk[i];
          keypair.signSk = signSk;

          // box Pk : Convert to Uint8Array type
          if (obj.version && obj.keypair.boxPk) {
            var boxPk = new Uint8Array(32);
            for (i = 0; i < 32; i++) boxPk[i] = obj.keypair.boxPk[i];
            keypair.boxPk = boxPk;
          }

          if (obj.version && obj.keypair.boxSk) {
            var boxSk = new Uint8Array(32);
            for (i = 0; i < 64; i++) boxSk[i] = obj.keypair.boxSk[i];
            keypair.boxSk = boxSk;
          }

          resolve({
            pubkey: obj.pubkey,
            keypair: keypair,
            tx: obj.tx
          });
        }
        else if (failIfInvalid) {
          reject('Not a valid Wallet.data object');
        }
        else {
          resolve();
        }
      });
    },

    checkAuthIdle = function(isAuthRes) {
      isAuthRes = angular.isDefined(isAuthRes) ? isAuthRes : isAuth();
      var enable = isAuthRes && settings.keepAuthIdle > 0 && settings.keepAuthIdle != csSettings.constants.KEEP_AUTH_IDLE_SESSION;
      var changed = (enableAuthIdle != enable);

      // need start/top watching
      if (changed) {
        // start idle
        if (enable) {
          console.debug("[wallet] Start idle (delay: {0}s)".format(settings.keepAuthIdle));
          Idle.setIdle(settings.keepAuthIdle);
          Idle.watch();
        }
        // stop idle, if need
        else if (enableAuthIdle){
          console.debug("[wallet] Stop idle");
          Idle.unwatch();
        }
        enableAuthIdle = enable;
      }

      // if idle time changed: apply it
      else if (enable && Idle.getIdle() !== settings.keepAuthIdle) {
        console.debug("[idle] Updating auth idle (delay: {0}s)".format(settings.keepAuthIdle));
        Idle.setIdle(settings.keepAuthIdle);
      }
    };

    function getWalletSettings(settings) {
      return {
        useLocalStorage: settings.useLocalStorage,
        useLocalStorageEncryption: settings.useLocalStorageEncryption,
        rememberMe: settings.rememberMe,
        keepAuthIdle: settings.keepAuthIdle
      };
    }

    function onSettingsChanged(allSettings) {
      var newSettings = getWalletSettings(allSettings);
      var hasChanged = !angular.equals(settings, newSettings);
      if (hasChanged) {
        var useStorageChanged = !angular.equals(settings.useLocalStorage, newSettings.useLocalStorage) ||
          !angular.equals(settings.useLocalStorageEncryption, newSettings.useLocalStorageEncryption);
        var keepAuthIdleChanged = !angular.equals(settings.keepAuthIdle, newSettings.keepAuthIdle);

        settings = newSettings;

        if (keepAuthIdleChanged) {
          checkAuthIdle();
        }

        if (useStorageChanged) {
          // Reset stored data
          if (!settings.useLocalStorage) {
            resetStore(data.pubkey);
          }
          else {
            // Or stored login data
            store();
            storeData();
          }
        }
      }
    }

    function addListeners() {
      listeners = [
        // Listen if settings changed
        csSettings.api.data.on.changed($rootScope, onSettingsChanged, this),
        // Listen if node changed
        BMA.api.node.on.restart($rootScope, restart, this)
      ];

      $rootScope.$on('IdleStart', unauth);
    }

    function addListener(listener) {
      listeners = listeners || [];
      listeners.push(listener);
    }

    function removeListeners() {
      _.forEach(listeners, function(remove){
        remove();
      });
      listeners = [];
    }

    function ready() {
      if (started) return $q.when();
      return startPromise || start();
    }

    function stop() {
      console.debug('[wallet] Stopping...');
      removeListeners();
      resetData();
    }

    function restart() {
      stop();
      return $timeout(start, 200);
    }

    function start(options) {
      options = options || {};
      // By default, restore if the service is the default object
      options.restore =  angular.isDefined(options.restore) ? options.restore : (id === 'default');

      console.debug('[wallet] Starting...');
      var now = new Date().getTime();

      startPromise = $q.all([
          csSettings.ready()
            .then(function() {
              settings = getWalletSettings(csSettings.data);
            }),
          csCurrency.ready(),
          BMA.ready()
        ]);

      // Restore
      if (options.restore) startPromise = startPromise.then(restore);

      // Emit ready event
      startPromise.then(function() {
          addListeners();

          console.debug('[wallet] Started in ' + (new Date().getTime() - now) + 'ms');

          started = true;
          startPromise = null;
        })
        .then(function(){
          return data;
        });

      return startPromise;
    }

    // Register extension points
    api.registerEvent('data', 'init');
    api.registerEvent('data', 'loginCheck'); // allow to stop the login process
    api.registerEvent('data', 'login'); // executed after login check (cannot stop the login process)
    api.registerEvent('data', 'auth');
    api.registerEvent('data', 'unauth');
    api.registerEvent('data', 'load');
    api.registerEvent('data', 'logout');
    api.registerEvent('data', 'reset');
    api.registerEvent('data', 'store');

    api.registerEvent('error', 'send');

    // Data changed : balance changed, new TX
    api.registerEvent('data', 'balanceChanged');
    api.registerEvent('data', 'newTx');

    api.registerEvent('action', 'certify');


    // init data
    resetData(true);

    // Override default store/restore function,  when not the 'default' wallet
    if (id !== "default") {
      //start = $q.when;
      //started = true;
      store = $q.when;
      restore = $q.when;
      restoreData = $q.when;
      //checkAuthIdle = function(){};
    }

    exports = {
      id: id,
      data: data,
      ready: ready,
      start: start,
      stop: stop,
      // auth
      login: login,
      logout: logout,
      auth: auth,
      unauth: unauth,
      isLogin: isLogin,
      isAuth: isAuth,
      getKeypair: getKeypair,
      hasSelf: hasSelf,
      setSelf: setSelf,
      isMember: function() {
        return data.isMember;
      },
      isDataLoaded : isDataLoaded,
      isDefault: isDefault,
      isNeverUsed: isNeverUsed,
      isNew: isNew,
      isUserPubkey: isUserPubkey,
      getData: getData,
      loadData: loadData,
      refreshData: refreshData,
      // internal
      internal: {
        addListener: addListener,
        removeListeners: removeListeners
      },
      // local storage
      store: store,
      storeData: storeData, // store children wallet, readTime, etc.
      // operations
      transfer: transfer,
      transferAll: transferAll,
      self: self,
      revoke: revoke,
      revokeWithFile: revokeWithFile,
      certify: certify,
      downloadSaveId: downloadSaveId,
      getCryptedId: getCryptedId,
      recoverId: recoverId,
      downloadRevocation: downloadRevocation,
      downloadKeyFile: downloadKeyFile,
      membership: {
        inside: membership(true),
        out: membership(false)
      },
      events: {
        add: addEvent,
        cleanByContext: cleanEventsByContext
      },
      children: {
        create: createNewChildWallet,
        add: addChildWallet,
        remove: removeChildWalletById,
        get: getChildWalletById,
        getByPubkey: getChildWalletByPubkey,
        all: getAllChildrenWallet,
        setParent: setParentWallet,
        count: getChildrenWalletCount,
        hasPubkey: hasChildrenWithPubkey
      },
      api: api
    };
    return exports;
  }

  service = factory('default', BMA);
  service.instance = factory;

  return service;
}]);

angular.module('cesium.help.services', [])

.constant('csHelpConstants', {
  wallet: {
    stepCount: 4
  }
})

.factory('csHelp', ['$rootScope', 'csSettings', 'UIUtils', 'csHelpConstants', '$controller', function($rootScope, csSettings, UIUtils, csHelpConstants, $controller) {
  'ngInject';


  function createHelptipScope(isTour, helpController) {
    if (!isTour && ($rootScope.tour || !csSettings.data.helptip.enable || UIUtils.screen.isSmall())) {
      return; // avoid other helptip to be launched (e.g. csWallet)
    }
    // Create a new scope for the tour controller
    var helptipScope = $rootScope.$new();
    $controller(helpController||'HelpTipCtrl', { '$scope': helptipScope});
    return helptipScope;
  }

  function startWalletHelpTip(index, isTour) {
    index = angular.isDefined(index) ? index : csSettings.data.helptip.wallet;
    isTour = angular.isDefined(isTour) ? isTour : false;

    if (index < 0 || index >= csHelpConstants.wallet.stepCount) return;

    // Create a new scope for the tour controller
    var helptipScope = createHelptipScope(isTour);
    if (!helptipScope) return; // could be undefined, if a global tour already is already started

    helptipScope.tour = isTour;

    return helptipScope.startWalletTour(index, false)
      .then(function(endIndex) {
        helptipScope.$destroy();
        if (!isTour) {
          csSettings.data.helptip.wallet = endIndex;
          csSettings.store();
        }
      });
  }

  return {
    wallet: {
      tour: function() {
        return startWalletHelpTip(0, true);
      },
      helptip: startWalletHelpTip
    }
  };

}]);



angular.module('cesium.plugin.services', [])

.provider('PluginService', function PluginServiceProvider() {
  'ngInject';

  var eagerLoadingServices = [];

  var extensionByStates = {};

  this.registerEagerLoadingService = function(serviceName) {
    eagerLoadingServices.push(serviceName);
    return this;
  };

  this.extendState = function(stateName, extension) {
    if (angular.isDefined(stateName) && angular.isDefined(extension)) {
      if (!extensionByStates[stateName]) {
        extensionByStates[stateName] = [];
      }
      extensionByStates[stateName].push(extension);
    }
    return this;
  };

  this.extendStates = function(stateNames, extension) {
    var that = this;
    stateNames.forEach(function(stateName) {
      that.extendState(stateName, extension);
    });
    return this;
  };

  this.$get = ['$injector', '$state', function($injector, $state) {

    var currentExtensionPointName;

    function start() {
      if (eagerLoadingServices.length>0) {
        _.forEach(eagerLoadingServices, function(name) {
          $injector.get(name);
        });
      }
    }

    function getActiveExtensionPointsByName(extensionPointName) {
      var extensions = _.keys(extensionByStates).reduce(function(res, stateName){
        return $state.includes(stateName) ? res.concat(extensionByStates[stateName]) : res;
      }, []);
      return extensions.reduce(function(res, extension){
        return extension.points && extension.points[extensionPointName] ? res.concat(extension.points[extensionPointName]) : res;
      }, []);
    }

    function setCurrentExtensionPointName(extensionPointName) {
      currentExtensionPointName  = extensionPointName;
    }

    function getCurrentExtensionPointName() {
      return currentExtensionPointName;
    }

    return {
      start: start,
      extensions: {
        points: {
          getActivesByName: getActiveExtensionPointsByName,
          current: {
            get: getCurrentExtensionPointName,
            set: setCurrentExtensionPointName
          }
        }
      }
    };
  }];
})
;

angular.module('cesium.services', [
  'cesium.settings.services',
  'cesium.http.services',
  'cesium.network.services',
  'cesium.bma.services',
  'cesium.crypto.services',
  'cesium.utils.services',
  'cesium.modal.services',
  'cesium.storage.services',
  'cesium.device.services',
  'cesium.currency.services',
  'cesium.wot.services',
  'cesium.tx.services',
  'cesium.wallet.services',
  'cesium.help.services',
  'cesium.plugin.services'
  ])
;



function Peer(json) {

  var that = this;

  Object.keys(json).forEach(function (key) {
    that[key] = json[key];
  });

  that.endpoints = that.endpoints || [];
  that.statusTS = that.statusTS || 0;
}


Peer.prototype.regexp = {
  BMA: /^BASIC_MERKLED_API[ ]?/,
  BMAS: /^BMAS[ ]?/,
  WS2P: /^WS2P[ ]?/,
  BMA_REGEXP: /^BASIC_MERKLED_API([ ]+([a-z_][a-z0-9-_.ÄÄ]*))?([ ]+([0-9.]+))?([ ]+([0-9a-f:]+))?([ ]+([0-9]+))$/,
  BMAS_REGEXP: /^BMAS([ ]+([a-z_][a-z0-9-_.ÄÄ]*))?([ ]+([0-9.]+))?([ ]+([0-9a-f:]+))?([ ]+([0-9]+))$/,
  WS2P_REGEXP: /^WS2P[ ]+([a-z0-9]+)([ ]+([a-z_][a-z0-9-_.ÄÄ]*))?([ ]+([0-9.]+))?([ ]+([0-9a-f:]+))?([ ]+([0-9]+))([ ]+([a-z0-9/.&#!]+))?$/,
  LOCAL_IP_ADDRESS: /^127[.]0[.]0.|192[.]168[.]|10[.]0[.]0[.]|172[.]16[.]/
};
Peer.prototype.regex = Peer.prototype.regexp; // for backward compat

Peer.prototype.keyID = function () {
  var bma = this.bma || this.getBMA();
  if (bma.useBma) {
    return [this.pubkey || "Unknown", bma.dns, bma.ipv4, bma.ipv6, bma.port, bma.useSsl, bma.path].join('-');
  }
  return [this.pubkey || "Unknown", bma.ws2pid, bma.path].join('-');
};

Peer.prototype.copyValues = function(to) {
  var obj = this;
  ["version", "currency", "pub", "endpoints", "hash", "status", "statusTS", "block", "signature"].forEach(function (key) {
    to[key] = obj[key];
  });
};

Peer.prototype.copyValuesFrom = function(from) {
  var obj = this;
  ["version", "currency", "pub", "endpoints", "block", "signature"].forEach(function (key) {
    obj[key] = from[key];
  });
};

Peer.prototype.json = function() {
  var obj = this;
  var json = {};
  ["version", "currency", "endpoints", "status", "block", "signature"].forEach(function (key) {
    json[key] = obj[key];
  });
  json.raw = this.raw && this.getRaw();
  json.pubkey = this.pubkey;
  return json;
};

Peer.prototype.getBMA = function() {
  if (this.bma) return this.bma;
  var bma = null;
  var bmaRegex = this.regex.BMA_REGEXP;
  this.endpoints.forEach(function(ep){
    var matches = !bma && bmaRegex.exec(ep);
    if (matches) {
      bma = {
        "dns": matches[2] || '',
        "ipv4": matches[4] || '',
        "ipv6": matches[6] || '',
        "port": matches[8] || 80
      };
    }
  });
  return bma || {};
};

Peer.prototype.getEndpoints = function(regex) {
  if (!regex) return this.endpoints;
    return this.endpoints.reduce(function(res, ep){
      return ep.match(regex) ?  res.concat(ep) : res;
    }, []);
};

Peer.prototype.hasEndpoint = function(endpoint){
  //console.debug('testing if hasEndpoint:' + endpoint);
  var regExp = this.regexp[endpoint] || new RegExp('^' + endpoint);
  var endpoints = this.getEndpoints(regExp);
  if (!endpoints.length) return false;
  else return true;

};

Peer.prototype.getDns = function() {
  var bma = this.bma || this.getBMA();
  return bma.dns ? bma.dns : null;
};

Peer.prototype.getIPv4 = function() {
  var bma = this.bma || this.getBMA();
  return bma.ipv4 ? bma.ipv4 : null;
};

Peer.prototype.getIPv6 = function() {
  var bma = this.bma || this.getBMA();
  return bma.ipv6 ? bma.ipv6 : null;
};

Peer.prototype.getPort = function() {
  var bma = this.bma || this.getBMA();
  return bma.port ? bma.port : null;
};

Peer.prototype.getHost = function() {
  var bma = this.bma || this.getBMA();
  return ((bma.port == 443 || bma.useSsl) && bma.dns) ? bma.dns :
    (this.hasValid4(bma) ? bma.ipv4 :
        (bma.dns ? bma.dns :
          (bma.ipv6 ? '[' + bma.ipv6 + ']' :'')));
};

Peer.prototype.getURL = function() {
  var bma = this.bma || this.getBMA();
  var host = this.getHost();
  var protocol = (bma.port == 443 || bma.useSsl) ? 'https' : 'http';
  return protocol + '://' + host + (bma.port ? (':' + bma.port) : '');
};

Peer.prototype.getServer = function() {
  var bma = this.bma || this.getBMA();
  var host = this.getHost();
  return host + (host && bma.port ? (':' + bma.port) : '');
};

Peer.prototype.hasValid4 = function(bma) {
  return bma.ipv4 &&
    /* exclude private address - see https://fr.wikipedia.org/wiki/Adresse_IP */
    !bma.ipv4.match(this.regexp.LOCAL_IP_ADDRESS) ?
    true : false;
};

Peer.prototype.isReachable = function () {
  return !!this.getServer();
};

Peer.prototype.isSsl = function() {
  var bma = this.bma || this.getBMA();
  return bma.useSsl;
};

Peer.prototype.isTor = function() {
  var bma = this.bma || this.getBMA();
  return bma.useTor;
};


Peer.prototype.isWs2p = function() {
  var bma = this.bma || this.getBMA();
  return bma.useWs2p;
};

/**
 * Created by blavenie on 01/02/17.
 */
function Block(json, attributes) {
  "use strict";

  var that = this;

  // Copy default fields
  if (!attributes || !attributes.length) {
    ["currency", "issuer", "medianTime", "number", "version", "powMin", "dividend", "membersCount", "hash", "identities", "joiners", "actives", "leavers", "revoked", "excluded", "certifications", "transactions", "unitbase"]
      .forEach(function (key) {
      that[key] = json[key];
    });
  }
  // or just given
  else {
    _.forEach(attributes, function (key) {
      that[key] = json[key];
    });

  }

  that.identitiesCount = that.identities ? that.identities.length : 0;
  that.joinersCount = that.joiners ? that.joiners.length : 0;
  that.activesCount = that.actives ? that.actives.length : 0;
  that.leaversCount = that.leavers ? that.leavers.length : 0;
  that.revokedCount = that.revoked ? that.revoked.length : 0;
  that.excludedCount = that.excluded ? that.excluded.length : 0;
  that.certificationsCount = that.certifications ? that.certifications.length : 0;
  that.transactionsCount = that.transactions ? that.transactions.length : 0;

  that.empty = that.isEmpty();
}

Block.prototype.isEmpty = function(){
  "use strict";
  return !this.transactionsCount &&
    !this.certificationsCount &&
    !this.joinersCount &&
    !this.dividend &&
    !this.activesCount &&
    !this.identitiesCount &&
    !this.leaversCount &&
    !this.excludedCount &&
    !this.revokedCount;
};

Block.prototype.parseData = function() {
  this.identities = this.parseArrayValues(this.identities, ['pubkey', 'signature', 'buid', 'uid']);
  this.joiners = this.parseArrayValues(this.joiners, ['pubkey', 'signature', 'mBuid', 'iBuid', 'uid']);
  this.actives = this.parseArrayValues(this.actives, ['pubkey', 'signature', 'mBuid', 'iBuid', 'uid']);
  this.leavers = this.parseArrayValues(this.leavers, ['pubkey', 'signature', 'mBuid', 'iBuid', 'uid']);
  this.revoked = this.parseArrayValues(this.revoked, ['pubkey', 'signature']);
  this.excluded = this.parseArrayValues(this.excluded, ['pubkey']);

  // certifications
  this.certifications = this.parseArrayValues(this.certifications, ['from', 'to', 'block', 'signature']);
  //this.certifications = _.groupBy(this.certifications, 'to');

  // TX
  this.transactions = this.parseTransactions(this.transactions);

  delete this.raw; // not need
};

Block.prototype.cleanData = function() {
  delete this.identities;
  delete this.joiners;
  delete this.actives;
  delete this.leavers;
  delete this.revoked;
  delete this.excluded;
  delete this.certifications;
  delete this.transactions;

  delete this.raw; // not need
};

Block.prototype.parseArrayValues = function(array, itemObjProperties){
  if (!array || !array.length) return [];
  return array.reduce(function(res, raw) {
    var parts = raw.split(':');
    if (parts.length != itemObjProperties.length) {
      console.debug('[block] Bad format for \'{0}\': [{1}]. Expected {1} parts. Skipping'.format(arrayProperty, raw, itemObjProperties.length));
      return res;
    }
    var obj = {};
    for (var i=0; i<itemObjProperties.length; i++) {
      obj[itemObjProperties[i]] = parts[i];
    }
    return res.concat(obj);
  }, []);
};

function exact(regexpContent) {
  return new RegExp("^" + regexpContent + "$");
}

Block.prototype.regexp = {
  TX_OUTPUT_SIG: exact("SIG\\(([0-9a-zA-Z]{43,44})\\)")
};

Block.prototype.parseTransactions = function(transactions) {
  if (!transactions || !transactions.length) return [];
  return transactions.reduce(function (res, tx) {
    var obj = {
      issuers: tx.issuers,
      time: tx.time
    };

    obj.outputs = tx.outputs.reduce(function(res, output) {
      var parts = output.split(':');
      if (parts.length != 3) {
        console.debug('[block] Bad format a \'transactions\': [{0}]. Expected 3 parts. Skipping'.format(output));
        return res;
      }

      var amount = parts[0];
      var unitbase = parts[1];
      var unlockCondition = parts[2];

      var matches =  Block.prototype.regexp.TX_OUTPUT_SIG.exec(parts[2]);

      // Simple expression SIG(x)
      if (matches) {
        var pubkey = matches[1];
        if (!tx.issuers || tx.issuers.indexOf(pubkey) != -1) return res;
        return res.concat({
          amount: unitbase <= 0 ? amount : amount * Math.pow(10, unitbase),
          unitbase: unitbase,
          pubkey: pubkey
        });
      }

      // Parse complex unlock condition
      else {
        //console.debug('[block] [TX] Detecting unlock condition: {0}.'.format(output));
        return res.concat({
          amount: unitbase <= 0 ? amount : amount * Math.pow(10, unitbase),
          unitbase: unitbase,
          unlockCondition: unlockCondition
        });
      }
    }, []);

    // Special cas for TX to himself
    if (!obj.error && !obj.outputs.length) {
      obj.toHimself = true;
    }

    return res.concat(obj);
  }, []);
};



function Ws2pMessage(message) {

  var that = this;

  var parts = message.split(':');
  if (parts.length < 3 || !parts[0].startsWith('WS2P')) {
    throw Error('Invalid format: ' + message);
  }
  // Head message
  if (parts[1] == 'HEAD') {
    if (parts.length < 4) {
      throw Error('Invalid format: ' + message);
    }
    // Duniter version < 1.6.9
    if (parts.length == 4) {
      that.pubkey = parts[2];
      that.buid = parts[3];
    }
    else {
      var version = parts[2];
      if (version >= 1) {
        var prefix = parts[0];

        // Private/public options
        if (prefix.length > 4) {
          var matches = this.regexp.WS2P_PREFIX.exec(prefix);
          if (!matches) {
            throw Error('Invalid format: ' + message);
          }

          // Private options
          var privateOptions = matches[1];
          if (privateOptions) {
            that.private = {
              useTor: privateOptions.startsWith('T')
            };
            var mode = privateOptions.substring(1);
            if (mode == 'A') {
              that.private.mode = 'all';
            }
            else if (mode == 'M') {
              that.private.mode = 'mixed';
            }
            else if (mode == 'S') {
              that.private.mode = 'strict';
            }
          }

          // Public options
          var publicOptions = matches[2];
          if (publicOptions) {
            that.public = {
              useTor: publicOptions.startsWith('T'),
              mode: 'all'
            };
          }

          // For DEBUG only:
          /*
          console.log('[http] private {0}, public {1}'.format(
           (that.private && (that.private.useTor ? 'TOR ' : '' ) + (that.private.mode || 'false')) || 'false',
            that.public && ((that.public.useTor ? 'TOR ' : '' ) + (that.public.mode || 'false')) || 'false'
          ), prefix);*/
        }

        that.pubkey=parts[3];
        that.buid=parts[4];
        that.ws2pid=parts[5];
        that.sotfware=parts[6];
        that.version=parts[7];
        that.powPrefix=parts[8];
      }
    }
  }

}


Ws2pMessage.prototype.regexp = {
  WS2P_PREFIX: /^WS2P(?:O([CT][SAM]))?(?:I([CT]))?$/,
};




AppController.$inject = ['$scope', '$rootScope', '$state', '$ionicSideMenuDelegate', '$q', '$timeout', '$ionicHistory', '$controller', '$window', 'csPlatform', 'CryptoUtils', 'csCrypto', 'UIUtils', 'BMA', 'csWallet', 'Device', 'Modals', 'csConfig', 'csHttp'];
HomeController.$inject = ['$scope', '$state', '$timeout', '$ionicHistory', 'csPlatform', 'csCurrency'];
PluginExtensionPointController.$inject = ['$scope', 'PluginService'];angular.module('cesium.app.controllers', ['cesium.platform', 'cesium.services'])

  .config(['$stateProvider', '$urlRouterProvider', function($stateProvider, $urlRouterProvider) {
    'ngInject';

    $stateProvider

      .state('app', {
        url: "/app",
        abstract: true,
        templateUrl: "templates/menu.html",
        controller: 'AppCtrl',
        data: {
          large: false
        }
      })

      .state('app.home', {
        url: "/home?error",
        views: {
          'menuContent': {
            templateUrl: "templates/home/home.html",
            controller: 'HomeCtrl'
          }
        }
      })

      .state('app.lock', {
        cache: false,
        url: "/lock",
        views: {
          'menuContent': {
            templateUrl: "templates/common/view_passcode.html",
            controller: 'PassCodeCtrl'
          }
        }
      })
    ;

    // if none of the above states are matched, use this as the fallback
    $urlRouterProvider.otherwise('/app/home');

  }])

  .controller('AppCtrl', AppController)

  .controller('HomeCtrl', HomeController)

  .controller('PluginExtensionPointCtrl', PluginExtensionPointController)



;

/**
 * Useful controller that could be reuse in plugin, using $scope.extensionPoint for condition rendered in templates
 */
function PluginExtensionPointController($scope, PluginService) {
  'ngInject';
  $scope.extensionPoint = PluginService.extensions.points.current.get();
}

/**
 * Abstract controller (inherited by other controllers)
 */
function AppController($scope, $rootScope, $state, $ionicSideMenuDelegate, $q, $timeout,
                       $ionicHistory, $controller, $window, csPlatform, CryptoUtils, csCrypto,
                       UIUtils, BMA, csWallet, Device, Modals, csConfig, csHttp
) {
  'ngInject';

  $scope.walletData  = csWallet.data;
  $scope.search = {};
  $scope.login = csWallet.isLogin();
  $scope.auth = csWallet.isAuth();
  $scope.motion = UIUtils.motion.default;

  $scope.showHome = function() {
    $ionicHistory.nextViewOptions({
      historyRoot: true
    });
    return $state.go('app.home')
      .then(UIUtils.loading.hide);
  };

  ////////////////////////////////////////
  // Show Help tour
  ////////////////////////////////////////

  $scope.createHelptipScope = function(isTour, helpController) {
    if (!isTour && ($rootScope.tour || !$rootScope.settings.helptip.enable || UIUtils.screen.isSmall())) {
      return; // avoid other helptip to be launched (e.g. csWallet)
    }
    // Create a new scope for the tour controller
    var helptipScope = $scope.$new();
    $controller(helpController||'HelpTipCtrl', { '$scope': helptipScope});
    return helptipScope;
  };

  $scope.startHelpTour = function(helpController, skipClearCache) {
    $rootScope.tour = true; // to avoid other helptip to be launched (e.g. csWallet)

    // Clear cache history
    if (!skipClearCache) {
      $ionicHistory.clearHistory();
      return $ionicHistory.clearCache()
        .then(function() {
          $scope.startHelpTour(helpController, true/*continue*/);
        });
    }

    var helptipScope = $scope.createHelptipScope(true/*is tour*/, helpController);
    return helptipScope.startHelpTour()
      .then(function() {
        helptipScope.$destroy();
        delete $rootScope.tour;
      })
      .catch(function(err){
        delete $rootScope.tour;
      });
  };

  ////////////////////////////////////////
  // Login & wallet
  ////////////////////////////////////////

  $scope.isLogin = function() {
    return $scope.login;
  };

  // Load wallet data (after login)
  $scope.loadWalletData = function(options) {

    console.warn("[app-controller] DEPRECATED  - Please use csWallet.load() instead of $scope.loadWalletData()", new Error());

    options = options || {};
    var wallet = options.wallet || csWallet;
    return wallet.loadData(options)

      .then(function(walletData) {
        // cancel login
        if (!walletData) throw 'CANCELLED';
        return walletData;
      });
  };

  // Login and load wallet
  $scope.loadWallet = function(options) {

    console.warn("[app-controller] DEPRECATED  - Please use csWallet.loginOrLoad() instead of $scope.loadWallet()", new Error());

    // Make sure the platform is ready
    if (!csPlatform.isStarted()) {
      return csPlatform.ready().then(function(){
        return $scope.loadWallet(options);
      });
    }

    options = options || {};

    var wallet = options.wallet || csWallet;

    // If need auth
    if (options.auth && !wallet.isAuth()) {
      return wallet.auth(options)
        .then(function (walletData) {
          if (walletData) return walletData;
          // failed to auth
          throw 'CANCELLED';
        });
    }

    // If need login
    else if (!wallet.isLogin()) {
      return wallet.login(options)
        .then(function (walletData) {
          if (walletData) return walletData;
          // failed to login
          throw 'CANCELLED';
        });
    }

    // Already login or auth
    else if (!wallet.isDataLoaded(options)) {
      return $scope.loadWalletData(options);
    }
    else {
      return $q.when(wallet.data);
    }
  };

  // Login and go to a state (or wallet if not)
  $scope.loginAndGo = function(state, options) {
    $scope.closeProfilePopover();
    options = options || {};
    var wallet = options.wallet || csWallet;
    delete options.wallet;

    state = state || 'app.view_wallet';

    if (!wallet.isLogin()) {

      // Make sure to protect login modal, if HTTPS enable - fix #340
      if (csConfig.httpsMode && $window.location && $window.location.protocol !== 'https:') {
        var href = $window.location.href;
        var hashIndex = href.indexOf('#');
        var rootPath = (hashIndex != -1) ? href.substr(0, hashIndex) : href;
        rootPath = 'https' + rootPath.substr(4);
        href = rootPath + $state.href(state);
        if (csConfig.httpsModeDebug) {
          // Debug mode: just log, then continue
          console.debug('[httpsMode] --- Should redirect to: ' + href);
        }
        else {
          $window.location.href = href;
          return;
        }
      }

      return wallet.login(options)
        .then(function(){
          return $state.go(state, options);
        })
        .then(UIUtils.loading.hide);
    }
    else {
      return $state.go(state, options);
    }
  };

  // Logout
  $scope.logout = function(options) {
    options = options || {};
    var wallet = options.wallet || csWallet;
    if (!options.force && $scope.profilePopover) {
      // Make the popover if really closed, to avoid UI refresh on popover buttons
      return $scope.profilePopover.hide()
        .then(function(){
          options.force = true;
          return $scope.logout(options);
        });
    }
    if (options.askConfirm) {
      return UIUtils.alert.confirm('CONFIRM.LOGOUT')
        .then(function(confirm) {
          if (confirm) {
            options.askConfirm=false;
            return $scope.logout(options);
          }
        });
    }

    UIUtils.loading.show();
    return wallet.logout()
      .then(function() {
        // Close left menu if open
        if ($ionicSideMenuDelegate.isOpenLeft()) {
          $ionicSideMenuDelegate.toggleLeft();
        }

        // If default wallet: clear navigation history, then go back to home
        if (wallet.isDefault()) {
          $ionicHistory.clearHistory();

          return $ionicHistory.clearCache()
            .then(function() {
              return $scope.showHome();
            });
        }
        else {

        }
      })
      .catch(UIUtils.onError());
  };

  // Do authentification
  $scope.doAuth = function(options) {
    var wallet = options && options.wallet || csWallet;
    return wallet.auth()
      .then(UIUtils.loading.hide);
  };

  // If connected and same pubkey
  $scope.isUserPubkey = function(pubkey) {
    return csWallet.isUserPubkey(pubkey);
  };

  // add listener on wallet event
  csWallet.api.data.on.login($scope, function(data, deferred) {
    $scope.login = true;
    return deferred ? deferred.resolve() : $q.when();
  });
  csWallet.api.data.on.logout($scope, function() {
    $scope.login = false;
  });
  csWallet.api.data.on.auth($scope, function(data, deferred) {
    $scope.auth = true;
    return deferred ? deferred.resolve() : $q.when();
  });
  csWallet.api.data.on.unauth($scope, function() {
    $scope.auth = false;
  });

  ////////////////////////////////////////
  // Useful modals
  ////////////////////////////////////////

  // Open transfer modal
  $scope.showTransferModal = function(parameters) {
    return Modals.showTransfer(parameters);
  };

  $scope.showAboutModal = function() {
    return Modals.showAbout();
  };

  $scope.showJoinModal = function() {
    $scope.closeProfilePopover();
    return Modals.showJoin();
  };

  $scope.showSettings = function() {
    $scope.closeProfilePopover();
    return $state.go('app.settings');
  };

  $scope.showHelpModal = function(parameters) {
    return Modals.showHelp(parameters);
  };


  ////////////////////////////////////////
  // Useful popovers
  ////////////////////////////////////////

  $scope.showProfilePopover = function(event) {
    return UIUtils.popover.show(event, {
      templateUrl :'templates/common/popover_profile.html',
      scope: $scope,
      autoremove: true,
      afterShow: function(popover) {
        $scope.profilePopover = popover;
        $timeout(function() {
          UIUtils.ink({selector: '#profile-popover .ink, #profile-popover .ink-dark'});
        }, 100);
      }
    });
  };

  $scope.closeProfilePopover = function() {
    if ($scope.profilePopover && $scope.profilePopover.isShown()) {
      $timeout(function(){$scope.profilePopover.hide();});
    }
  };
  // Change peer info
  $scope.showPeerInfoPopover = function(event) {
    return UIUtils.popover.show(event, {
      templateUrl: 'templates/network/popover_peer_info.html',
      autoremove: true,
      scope: $scope.$new(true)
    });
  };

  ////////////////////////////////////////
  // Link managment (fix issue #)
  ////////////////////////////////////////

  $scope.openLink = function($event, uri, options) {
    options = options || {};

    // If unable to open, just copy value
    options.onError = function() {
      return UIUtils.popover.copy($event, uri);
    };

    $event.stopPropagation();
    return csHttp.uri.open(uri, options);
  };

  ////////////////////////////////////////
  // Layout Methods
  ////////////////////////////////////////
  $scope.showFab = function(id, timeout) {
    UIUtils.motion.toggleOn({selector: '#'+id + '.button-fab'}, timeout);
  };

  $scope.hideFab = function(id, timeout) {
    UIUtils.motion.toggleOff({selector: '#'+id + '.button-fab'}, timeout);
  };

  // Could be override by subclass
  $scope.doMotion = function(options) {
    return $scope.motion.show(options);
  };

}


function HomeController($scope, $state, $timeout, $ionicHistory, csPlatform, csCurrency) {
  'ngInject';

  $scope.loading = true;

  $scope.enter = function(e, state) {
    if (state && state.stateParams && state.stateParams.error) { // Error query parameter
      $scope.error = state.stateParams.error;
      $scope.node = csCurrency.data.node;
      $scope.loading = false;
      $ionicHistory.nextViewOptions({
        disableAnimate: true,
        disableBack: true,
        historyRoot: true
      });
      $state.go('app.home', {error: undefined}, {
        reload: false,
        inherit: true,
        notify: false});
    }
    else {
      // Start platform
      csPlatform.ready()
        .then(function() {
          $scope.loading = false;
        })
        .catch(function(err) {
          $scope.node =  csCurrency.data.node;
          $scope.loading = false;
          $scope.error = err;
        });
    }
  };
  $scope.$on('$ionicView.enter', $scope.enter);

  $scope.reload = function() {
    $scope.loading = true;
    delete $scope.error;

    $timeout($scope.enter, 200);
  };

  /**
   * Catch click for quick fix
   * @param event
   */
  $scope.doQuickFix = function(event) {
    if (event == 'settings') {
      $ionicHistory.nextViewOptions({
        historyRoot: true
      });
      $state.go('app.settings');
    }
  };

  // For DEV ONLY
  /*$timeout(function() {
   $scope.loginAndGo();
   }, 500);*/
}


JoinController.$inject = ['$scope', '$timeout', '$controller', 'Modals', 'csWallet'];
JoinChooseAccountTypeModalController.$inject = ['$scope', '$state', 'Modals', 'UIUtils', 'csCurrency'];
JoinModalController.$inject = ['$scope', '$state', '$interval', '$timeout', 'Device', 'UIUtils', 'CryptoUtils', 'csSettings', 'Modals', 'csWallet', 'BMA', 'parameters'];angular.module('cesium.join.controllers', ['cesium.services'])

  .config(['$stateProvider', function($stateProvider) {
    'ngInject';

    $stateProvider
      .state('app.join', {
        url: "/join",
        views: {
          'menuContent': {
            templateUrl: "templates/home/home.html",
            controller: 'JoinCtrl'
          }
        }
      })
    ;
  }])

  .controller('JoinCtrl', JoinController)

  .controller('JoinChooseAccountTypeModalCtrl', JoinChooseAccountTypeModalController)

  .controller('JoinModalCtrl', JoinModalController)
;

function JoinController($scope, $timeout, $controller, Modals, csWallet) {
  'ngInject';

  // Initialize the super class and extend it.
  angular.extend(this, $controller('HomeCtrl', {$scope: $scope}));

  $scope.showJoinModal = function() {
    if ($scope.loading) return $timeout($scope.showJoinModal, 500); // recursive call

    if (!csWallet.isLogin() && !$scope.error) {
      return $timeout(Modals.showJoin, 300);
    }
  };
  $scope.$on('$ionicView.enter', $scope.showJoinModal);

}

function JoinChooseAccountTypeModalController($scope, $state, Modals, UIUtils, csCurrency) {
  'ngInject';

  $scope.formData = {};
  $scope.slides = {
    slider: null,
    options: {
      loop: false,
      effect: 'slide',
      speed: 500
    }
  };
  $scope.loading = true;

  $scope.load = function() {
    if ($scope.loading) {
      return csCurrency.get()
        .then(function (currency) {
          if (!currency) return;
          $scope.currency = currency;
          $scope.formData.currency = currency.name;
          $scope.loading = false;
        })
        .catch(UIUtils.onError('ERROR.GET_CURRENCY_FAILED'));
    }
  };
  $scope.$on('modal.shown', $scope.load);

  $scope.$on("$ionicSlides.sliderInitialized", function(event, data){
    // Disable swipe
    data.slider.lockSwipes();
  });

  $scope.slidePrev = function() {
    $scope.slides.slider.unlockSwipes();
    $scope.slides.slider.slidePrev();
    $scope.slides.slider.lockSwipes();
  };

  $scope.slideNext = function() {
    $scope.slides.slider.unlockSwipes();
    $scope.slides.slider.slideNext();
    $scope.slides.slider.lockSwipes();
  };

  $scope.selectAccountTypeAndClose = function(type) {
    $scope.formData.accountType = type;
    $scope.closeModal($scope.formData);
  };

  /**
   * Catch click for quick fix
   * @param fix
   */
  $scope.doQuickFix = function(event) {
    if (event == 'settings') {
      $scope.closeModal();
      $state.go('app.settings');
    }
  };

  $scope.showHelpModal = function(helpAnchor) {
    Modals.showHelp({anchor: helpAnchor});
  };

  // TODO DEV only
  //$timeout(function() {
   //$scope.selectCurrency('g1');
   //$scope.selectAccountTypeAndClose('member');
   //}, 400);
}


function JoinModalController($scope, $state, $interval, $timeout, Device, UIUtils, CryptoUtils, csSettings, Modals, csWallet, BMA, parameters) {
  'ngInject';

  $scope.formData = {
    pseudo: ''
  };
  $scope.slides = {
    slider: null,
    options: {
      loop: false,
      effect: 'slide',
      speed: 500
    }
  };
  $scope.slideBehavior = {};
  $scope.loading = true;

  $scope.isLicenseRead = Device.isIOS(); // always enable the button, on IOS  fix #554
  $scope.showUsername = false;
  $scope.showPassword = false;
  $scope.formData.computing=false;
  $scope.smallscreen = UIUtils.screen.isSmall();
  $scope.userIdPattern = BMA.constants.regex.USER_ID;

  // Read input parameters
  $scope.currency = parameters.currency;
  $scope.accountType = parameters.accountType || 'member';

  $scope.load = function() {
    if ($scope.loading) {

      if ($scope.accountType == 'member') {
        $scope.licenseFileUrl = csSettings.getLicenseUrl();
        if ($scope.licenseFileUrl) {
          // Use HTML in iframe, when original file is markdown (fix #538)
          if ( $scope.licenseFileUrl.substring($scope.licenseFileUrl.length - 3) != '.txt') {
            $scope.licenseFileUrl = $scope.licenseFileUrl + '.html';
          }
          if (!$scope.isLicenseRead) {
            //$scope.startListenLicenseBottom();

            // Make sure to enable the next button when error occured - Fix issue #592
            $timeout(function() {
              if (!$scope.isLicenseRead) {
                $scope.isLicenseRead = true;
              }
            }, 5000);
          }
        }
      }

      $scope.slideBehavior = $scope.computeSlideBehavior();
      $scope.loading = false;
    }
  };
  $scope.$on('modal.shown', $scope.load);

  $scope.$on("$ionicSlides.sliderInitialized", function(event, data){
    // Disable swipe
    data.slider.lockSwipes();
  });

  $scope.slidePrev = function() {
    $scope.slides.slider.unlockSwipes();
    $scope.slides.slider.slidePrev();
    $scope.slides.slider.lockSwipes();
  };

  $scope.slideNext = function() {
    $scope.slides.slider.unlockSwipes();
    $scope.slides.slider.slideNext();
    $scope.slides.slider.lockSwipes();
  };

  $scope.showAccountPubkey = function() {
    $scope.formData.computing=true;

    CryptoUtils.scryptKeypair($scope.formData.username, $scope.formData.password)
      .then(function(keypair) {
        $scope.formData.pubkey = CryptoUtils.util.encode_base58(keypair.signPk);
        return $scope.checkAccountAvailable();
      })
      .then(function() {
        return $timeout(function(){
          $scope.formData.computing=false;
        }, 400);
      })
      .catch(function(err) {
        $scope.formData.pubkey = undefined;
        $scope.formData.computing=false;
        UIUtils.onError('ERROR.CRYPTO_UNKNOWN_ERROR')(err);
      });
  };

  $scope.formDataChanged = function() {
    $scope.formData.computing=false;
    $scope.formData.pubkey=null;
  };

  $scope.getCurrentFormName = function() {
    var index = $scope.slides.slider.activeIndex;
    if($scope.accountType === 'member') {
      index += ($scope.licenseFileUrl ? 0 : 1); // skip index 0, when no license file
      if (index === 0) return "licenseForm";
      if (index === 1) return "pseudoForm";
      if (index === 2) return "saltForm";
      if (index === 3) return "passwordForm";
      if (index === 4) return "confirmForm";
    }
    else {
      if (index === 0) return "saltForm";
      if (index === 1) return "passwordForm";
      if (index === 2) return "confirmForm";
    }
  };

  $scope.computeSlideBehavior = function() {
    var formName = $scope.getCurrentFormName();

    var behavior;
    if (formName == "licenseForm") {
      behavior = {
        hasPreviousButton: false,
        hasNextButton: false,
        hasAcceptButton: true
      };
    }
    else if (formName == "pseudoForm") {
      behavior = {
        helpAnchor: 'join-pseudo',
        hasPreviousButton: $scope.licenseFileUrl && true,
        hasNextButton: true,
        focus: 'pseudo'
      };
    }
    else if (formName == "saltForm") {
      behavior = {
        helpAnchor: 'join-salt',
        hasPreviousButton: true,
        hasNextButton: true,
        focus: 'salt'
      };
    }
    else if (formName == "passwordForm") {
      behavior = {
        helpAnchor: 'join-password',
        hasPreviousButton: true,
        hasNextButton: true,
        focus: 'password'
      };
    }
    else if (formName == "confirmForm") {
      behavior = {
        hasPreviousButton: true,
        hasNextButton: false,
        hasSendButton: true,
        helpAnchor: 'join-pubkey'
      };
    }
    else {
      behavior = {
        hasPreviousButton: false,
        hasNextButton: true
      };
    }

    // removeIf(device)
    // Focus input text (only if NOT device, to avoid keyboard opening)
    // FIXME: this cause issue #464
    /*if (behavior.focus) {
      $timeout(function(){
        $focus(behavior.focus);
      }, 100);
    }*/
    // endRemoveIf(device)

    return behavior;
  };


  $scope.doNext = function() {
    var formName = $scope.getCurrentFormName();
    if (formName && $scope[formName]){
      $scope[formName].$submitted=true;
      if(!$scope[formName].$valid) {
        return;
      }
      if (formName === "pseudoForm" && $scope.uiAlreadyUsed) {
        return;
      }
      if (formName === "passwordForm") {
        $scope.showAccountPubkey();
      }
    }

    $scope.slideNext();

    $scope.slideBehavior = $scope.computeSlideBehavior();
  };

  $scope.doPrev = function() {
    $scope.slidePrev();
    $scope.slideBehavior = $scope.computeSlideBehavior();
  };

  $scope.doNewAccount = function(confirm) {

    if (!confirm) {

      var messageKey = ($scope.accountType === 'member') ? 'ACCOUNT.NEW.CONFIRMATION_MEMBER_ACCOUNT' :
        'ACCOUNT.NEW.CONFIRMATION_WALLET_ACCOUNT';

      return UIUtils.alert.confirm(messageKey, undefined,
        {
          cssClass: 'warning',
          okText: $scope.accountType == 'member' ? 'COMMON.BTN_SEND' : 'COMMON.BTN_CONTINUE',
          okType: 'button-assertive'
        })
        .then(function(confirm) {
          if (confirm) {
            $scope.doNewAccount(true);
          }
        });
    }

    var onErrorLogout = function(message) {
      return function(err) {
        csWallet.logout()
        .then(function(){
          UIUtils.onError(message)(err);
        });
      };
    };

    UIUtils.loading.show();

    return csWallet.login({
        auth: true,
        isNew: true,
        method: 'SCRYPT_DEFAULT',
        expectedPubkey: $scope.formData.pubkey,
        showMethods: false
      })
      .then(function() {
        if ($scope.accountType === "member") {
          $scope.closeModal();
          csSettings.data.wallet = csSettings.data.wallet || {};
          csSettings.data.wallet.alertIfUnusedWallet = false; // do not alert if empty

          // Send self
          return csWallet.self($scope.formData.pseudo, false/*do NOT load membership here*/)
            .then(function() {
              // Send membership IN
              csWallet.membership.inside()
              .then(function() {

                $scope.closeModal();

                // Redirect to wallet
                $state.go('app.view_wallet')
                  .then(function() {
                    // Wait 12s (for wallet load)
                    // then ask to download revocation file
                    return $timeout(
                      $scope.downloadRevocationRegistration,
                      2000);
                  });
              })
              .catch(function(err) {
                if (err && err.ucode != BMA.errorCodes.MEMBERSHIP_ALREADY_SEND) return;
                onErrorLogout('ERROR.SEND_MEMBERSHIP_IN_FAILED')(err);
              });
            })
            .catch(onErrorLogout('ERROR.SEND_IDENTITY_FAILED'));
        }
        else{
          $scope.closeModal();

          // Redirect to wallet
          $state.go('app.view_wallet');

        }
      })
      .catch(function(err) {
        UIUtils.loading.hide();
        console.error('>>>>>>>' , err);
        UIUtils.alert.error('ERROR.CRYPTO_UNKNOWN_ERROR');
      });
  };

  $scope.downloadRevocationRegistration = function() {
    return UIUtils.alert.confirm('DOWNLOAD.POPUP_REVOKE_MESSAGE', 'DOWNLOAD.POPUP_TITLE', {
        cssClass: 'warning',
        okText: 'COMMON.BTN_DOWNLOAD',
        okType: 'button-assertive',
        cancelText: 'COMMON.BTN_LATER'
      })
    .then(function(confirm) {
      if (!confirm) return;
      return csWallet.downloadRevocation();
    });
  };

  $scope.showHelpModal = function(helpAnchor) {
    Modals.showHelp({anchor: helpAnchor});
  };

  $scope.startListenLicenseBottom = function(){
    var iframeEl = angular.element(document.querySelector('.modal #iframe-license'));
    iframeEl = iframeEl && iframeEl.length ? iframeEl[0] : undefined;
    if (!iframeEl || !iframeEl.contentWindow) {
      console.debug('[join] Waiting license frame to be load...');
      return $timeout($scope.startListenLicenseBottom, 1000);
    }

    $scope.licenseBottomInterval = $interval(function(){
      var yPos = iframeEl.contentWindow.document.body.scrollTop;
      var scrollHeight = iframeEl.contentWindow.document.body.scrollHeight;
      var clientHeight = iframeEl.contentWindow.document.body.clientHeight;
      var isBottom = (scrollHeight - clientHeight === yPos);
      if(isBottom){
        $scope.isLicenseRead = true;
        $scope.stopListenLicenseBottom();
      }
    }, 1000);
  };

  $scope.stopListenLicenseBottom = function() {
    if ($scope.licenseBottomInterval) {
      $interval.cancel($scope.licenseBottomInterval);
      delete $scope.licenseBottomInterval;
    }
  };
  $scope.$on('modal.hidden', $scope.stopListenLicenseBottom);

  $scope.checkUid = function(){
    if (!$scope.formData.pseudo || $scope.formData.pseudo.length < 3) {
      $scope.formData.computing=false;
      delete $scope.uiAlreadyUsed;
      return;
    }

    var uid = $scope.formData.pseudo.toUpperCase();
    $scope.formData.computing=true;

    // search on uid
    BMA.wot.lookup({ search: uid })
      .then(function(res) {
        $scope.uiAlreadyUsed = (res.results || []).some(function(pub){
            return (pub.uids || []).some(function(idty) {
                return (idty.uid.toUpperCase() === uid); // same Uid
              });
          });
        $scope.formData.computing=false;
      })
      .catch(function(err){
        console.error(err);
        $scope.formData.computing=false;
        $scope.uiAlreadyUsed = false;
      });
  };
  $scope.$watch('formData.pseudo', $scope.checkUid, true);

  $scope.checkAccountAvailable = function() {
    delete $scope.accountAvailable;
    // Search for tx source, from pubkey
    return BMA.tx.sources({ pubkey:  $scope.formData.pubkey })
      .then(function(res) {
        $scope.accountAvailable = !res || !res.sources.length;
      })
      .catch(function(err) {
        console.error(err);
        $scope.accountAvailable = false;
      });
  };

  $scope.identifierRecovery = function() {
    // Go back
    $scope.slides.slider.unlockSwipes();
    for (var i = 0; i < 2; i++) {
      $scope.slides.slider.slidePrev();
    }
    $scope.slides.slider.lockSwipes();
    // Recompute behavior
    $scope.slideBehavior = $scope.computeSlideBehavior();
  };

  // TODO: remove auto add account when done
  /*$timeout(function() {
    //$scope.selectCurrency('g1');
    //$scope.selectAccountType('member');
    $scope.formData.username="azertypoi";
    $scope.formData.confirmUsername=$scope.formData.username;
    $scope.formData.password="azertypoi";
    $scope.formData.confirmPassword=$scope.formData.password;
    $scope.formData.pseudo="azertypoi";
    //$scope.doNext();
    //$scope.doNext();
  }, 400);*/
}



LoginController.$inject = ['$scope', '$timeout', '$controller', 'csWallet'];
LoginModalController.$inject = ['$scope', '$timeout', '$q', '$ionicPopover', 'CryptoUtils', 'csCrypto', 'UIUtils', 'BMA', 'Modals', 'csSettings', 'Device', 'parameters'];
AuthController.$inject = ['$scope', '$controller'];
angular.module('cesium.login.controllers', ['cesium.services'])

  .config(['$stateProvider', function($stateProvider) {
    'ngInject';

    $stateProvider
      .state('app.login', {
        url: "/login",
        views: {
          'menuContent': {
            templateUrl: "templates/home/home.html",
            controller: 'LoginCtrl'
          }
        }
      })
    ;
  }])

  .controller('LoginCtrl', LoginController)

  .controller('LoginModalCtrl', LoginModalController)

  .controller('AuthCtrl', AuthController)

;


function LoginController($scope, $timeout, $controller, csWallet) {
  'ngInject';

  // Initialize the super class and extend it.
  angular.extend(this, $controller('HomeCtrl', {$scope: $scope}));

  $scope.showLoginModal = function() {
    if ($scope.loading) return $timeout($scope.showLoginModal, 500); // recursive call

    if (!csWallet.isLogin() && !$scope.error) {
      return $timeout(csWallet.login, 300);
    }
  };
  $scope.$on('$ionicView.enter', $scope.showLoginModal);

}

function LoginModalController($scope, $timeout, $q, $ionicPopover, CryptoUtils, csCrypto,
                              UIUtils, BMA, Modals, csSettings, Device, parameters) {
  'ngInject';

  parameters = parameters || {};

  $scope.computing = false;
  $scope.pubkey = null;
  $scope.formData = {};
  $scope.showPubkey = false;
  $scope.showComputePubkeyButton = false;
  $scope.autoComputePubkey = false;
  $scope.pubkeyPattern = '^(:?{0}|{1})$'.format(BMA.constants.regexp.PUBKEY, BMA.constants.regexp.PUBKEY_WITH_CHECKSUM);

  $scope.isAuth = parameters.auth;
  $scope.okText = parameters.okText;
  $scope.title = parameters.title || ($scope.isAuth ? 'AUTH.TITLE' : 'LOGIN.TITLE');
  $scope.showMethods = angular.isDefined(parameters.showMethods) ? parameters.showMethods : true;
  $scope.showNewAccountLink = angular.isDefined(parameters.showNewAccountLink) ? parameters.showNewAccountLink : true;
  $scope.expectedPubkey = parameters.expectedPubkey;
  $scope.expectedUid = parameters.uid;

  $scope.scryptParamsValues = _.keys(CryptoUtils.constants.SCRYPT_PARAMS)
    .reduce(function(res, key) {
      return res.concat({id: key, label: 'LOGIN.SCRYPT.' + key, params: CryptoUtils.constants.SCRYPT_PARAMS[key]});
    }, [{id: 'USER', label: 'LOGIN.SCRYPT.USER', params: {}}]);

  // modal init
  $scope.init = function() {
    // Should auto-compute pubkey ?
    $scope.autoComputePubkey = ionic.Platform.grade.toLowerCase()==='a' &&
      !UIUtils.screen.isSmall();

    // Init remember me
    $scope.formData.rememberMe = csSettings.data.rememberMe;

    // Init keep auth, from idle time
    $scope.formData.keepAuthIdle = csSettings.data.keepAuthIdle;
    $scope.formData.keepAuth = ($scope.formData.keepAuthIdle == csSettings.constants.KEEP_AUTH_IDLE_SESSION);

    // Init method
    var method = parameters.method || csSettings.data.login && csSettings.data.login.method || 'SCRYPT_DEFAULT';
    var params = csSettings.data.login && csSettings.data.login.params;
    // used default method, when PUBKEY + auth, or SCAN, or if ask for 'default'
    if (($scope.isAuth && method === 'PUBKEY') || (method === 'SCAN') || (method === 'default')) {
      method = 'SCRYPT_DEFAULT';
    }
    $scope.changeMethod(method, params);
  };

  // modal enter
  $scope.enter = function() {
    UIUtils.loading.hide();
    // Ink effect
    UIUtils.ink({selector: '.modal-login .ink'});
  };
  $scope.$on('modal.shown', $scope.enter);

  // modal leave
  $scope.leave = function() {
    $scope.formData = {};
    $scope.computing = false;
    $scope.pubkey = null;
    $scope.methods = [];
  };
  $scope.$on('modal.hide', $scope.leave);

  // Login form submit
  $scope.doLogin = function(skipForm) {
    var method = $scope.formData.method;

    if(!$scope.form.$valid && method !== 'SCAN') return;

    var keepAuthIdle = $scope.formData.keepAuthIdle;
    var promise;

    // Scrypt
    if (method === 'SCRYPT_DEFAULT' || method === 'SCRYPT_ADVANCED') {
      if (!$scope.formData.username || !$scope.formData.password) return;
      var scryptPrams = $scope.formData.scrypt && $scope.formData.scrypt.params;
      UIUtils.loading.show();
      promise = CryptoUtils.scryptKeypair($scope.formData.username, $scope.formData.password, scryptPrams)
        .then(function(keypair) {
          if (!keypair) return UIUtils.loading.hide(10);
          var pubkey = CryptoUtils.util.encode_base58(keypair.signPk);
          // Check pubkey
          if (parameters.expectedPubkey && parameters.expectedPubkey != pubkey) {
            $scope.pubkey = pubkey;
            $scope.showPubkey = true;
            $scope.pubkeyError = true;
            return UIUtils.loading.hide(10);
          }

          $scope.pubkeyError = false;

          return {
            pubkey: pubkey,
            keypair: keypair,
            params: ($scope.formData.scrypt && $scope.formData.scrypt.id != 'SCRYPT_DEFAULT') ? scryptPrams : undefined
          };
        })
        .catch(UIUtils.onError('ERROR.CRYPTO_UNKNOWN_ERROR'));
    }

    // File
    else if (method === 'FILE') {
      if (!$scope.formData.file || !$scope.formData.file.valid || !$scope.formData.file.pubkey) return;

      // If checkbox keep auth checked: set idle time to session
      keepAuthIdle = ($scope.formData.keepAuth && csSettings.constants.KEEP_AUTH_IDLE_SESSION) || keepAuthIdle;

      promise =
        UIUtils.loading.show()
        .then(function() {
          return $scope.readKeyFile($scope.formData.file, {
            withSecret: ($scope.isAuth || $scope.formData.keepAuth)
          });
        })
        .then(function(keypair) {
          if (!keypair) return UIUtils.loading.hide(10);
          var pubkey = CryptoUtils.util.encode_base58(keypair.signPk);

          // Check pubkey
          if (parameters.expectedPubkey && parameters.expectedPubkey != pubkey) {
            $scope.formData.file.valid = false;
            return UIUtils.loading.hide(10);
          }

          $scope.pubkeyError = false;

          return {
            pubkey: pubkey,
            keypair: keypair
          };
        })
        .catch(UIUtils.onError('ERROR.AUTH_FILE_ERROR'));
    }

    // Pubkey
    else if (method === 'PUBKEY') {
      var pubkey = $scope.formData.pubkey && $scope.formData.pubkey.trim();
      if (!pubkey) return;
      var matches = BMA.regexp.PUBKEY.exec(pubkey);
      // valid pubkey: use it
      if (matches) {
        promise = UIUtils.loading.show()
          .then(function() {
            return {
              pubkey: pubkey
            };
          });
      }

      // Check checksum
      else {

        matches = BMA.regexp.PUBKEY_WITH_CHECKSUM.exec(pubkey);
        if (matches) {

          pubkey = matches[1];
          var checksum = matches[2];
          var expectedChecksum = csCrypto.util.pkChecksum(pubkey);
          if (checksum != expectedChecksum) {
            $scope.form.pubkey.$error = {checksum: true};
          }
          else {
            promise = UIUtils.loading.show()
              .then(function() {
                return {
                  pubkey: pubkey
                };
              });
          }
        }
        // Not a pubkey: launch search on
        else {
          return $scope.showWotLookupModal(pubkey);
        }
      }
    }

    // Scan QR code
    else if (method === 'SCAN') {
      var valid = $scope.formData.pubkey && (!$scope.isAuth || !!$scope.formData.keypair);
      if (!valid) return;

      promise = UIUtils.loading.show()
        .then(function() {
          return {
            pubkey: $scope.formData.pubkey,
            keypair: $scope.formData.keypair
          };
        });
    }

    if (!promise) {
      console.warn('[login] unknown method: ', method);
      return;
    }

    return promise.then(function(res) {
      if (!res) return;

      // Update settings (if need)
      var rememberMeChanged = !angular.equals(csSettings.data.rememberMe, $scope.formData.rememberMe);
      var keepAuthIdleChanged = !angular.equals(csSettings.data.keepAuthIdle, keepAuthIdle);
      var methodChanged = !angular.equals(csSettings.data.login && csSettings.data.login.method, method);
      var paramsChanged = !angular.equals(csSettings.data.login && csSettings.data.login.params, res.params);
      if (rememberMeChanged || keepAuthIdleChanged || methodChanged || paramsChanged) {
        csSettings.data.rememberMe = $scope.formData.rememberMe;
        csSettings.data.keepAuthIdle = keepAuthIdle;
        csSettings.data.useLocalStorage = csSettings.data.rememberMe ? true : csSettings.data.useLocalStorage;
        csSettings.data.login = csSettings.data.login || {};
        csSettings.data.login.method = method;
        csSettings.data.login.params = res.params;
        $timeout(csSettings.store, 500);
      }

      if (parameters.success) {
        parameters.success($scope.formData);
      }

      // hide loading
      if (parameters.silent) {
        UIUtils.loading.hide();
      }

      // Return result then close
      return $scope.closeModal(res);
    });
  };

  $scope.onScryptFormChanged = function() {
    if ($scope.computing) return; // avoid multiple call
    $scope.pubkey = null;
    $scope.pubkeyError = false;
    $scope.showPubkey = !!$scope.formData.username && !!$scope.formData.password;
    if ($scope.autoComputePubkey && $scope.showPubkey) {
      $scope.computePubkey();
      $scope.showComputePubkeyButton = false;
    }
    else {
      $scope.showComputePubkeyButton = !$scope.autoComputePubkey && $scope.showPubkey;
    }
  };
  $scope.$watch('formData.username + formData.password', $scope.onScryptFormChanged, true);

  $scope.computePubkey = function() {
    $scope.showComputePubkeyButton = false;
    $scope.computing = true;
    $scope.pubkey = null;
    return $timeout(function() {
      var salt = $scope.formData.username;
      var pwd = $scope.formData.password;
      var scryptPrams = $scope.formData.scrypt && $scope.formData.scrypt.params;
      return CryptoUtils.scryptSignPk(salt, pwd, scryptPrams)
        .then(function (signPk) {

          // If model has changed before the response, then retry
          if (salt !== $scope.formData.username || pwd !== $scope.formData.password) {
            return $scope.computePubkey();
          }

          $scope.pubkey = CryptoUtils.util.encode_base58(signPk);
          if ($scope.expectedPubkey && $scope.expectedPubkey != $scope.pubkey) {
            $scope.pubkeyError = true;
          }

          $scope.computing = false;
        }
      )
      .catch(function (err) {
        UIUtils.onError('ERROR.CRYPTO_UNKNOWN_ERROR')(err);
        $scope.computing = false;
        $scope.onScryptFormChanged();
      });
    }, 100);
  };

  $scope.showJoinModal = function() {
    $scope.closeModal();
    $timeout(function() {
      Modals.showJoin();
    }, 300);
  };

  $scope.showAccountSecurityModal = function() {
    $scope.closeModal();
    $timeout(function() {
      Modals.showAccountSecurity();
    }, 300);
  };

  $scope.showHelpModal = function(parameters) {
    return Modals.showHelp(parameters);
  };

  $scope.doScan = function() {
    if ($scope.computing) return;

    $scope.computing = true;
    $scope.formData.pubkey = null;
    $scope.formData.keypair = null;

    // Run scan cordova plugin, on device
    return Device.barcode.scan()
      .then(function(data) {
        if (!data) return;

        // Skip simple parsing, if auth if need
        if ($scope.isAuth) return $q.when(data);

        // Try to parse as an URI
        return BMA.uri.parse(data)
          .then(function (res) {
            if (!res || !res.pubkey) throw {message: 'ERROR.SCAN_UNKNOWN_FORMAT'};
            // If simple pubkey
            return res;
          })
          .catch(function(err) {
            console.debug('[login] Error while parsing as URI: ' + (err && err.message || err));
            return data;
          });
      })
      .then(function(data) {
        // Parse success: continue
        if (data && data.pubkey) return data;

        // Try to read as WIF format
        return csCrypto.keyfile.parseData(data, {silent: true})
          .then(function(keypair) {
            if (!keypair || !keypair.signPk || !keypair.signSk) throw {message: 'ERROR.SCAN_UNKNOWN_FORMAT'}; // rethrow an error

            var pubkey = CryptoUtils.base58.encode(keypair.signPk);

            // Login using keypair
            return {
              pubkey: pubkey,
              keypair: keypair
            };
          })
          // Unknown format (nor URI, nor WIF/EWIF)
          .catch(UIUtils.onError('ERROR.SCAN_UNKNOWN_FORMAT'));
      })
      .then(function(res) {
        if (!res || !res.pubkey) return; // no data

        $scope.pubkeyError = $scope.expectedPubkey && $scope.expectedPubkey != res.pubkey;
        $scope.formData.pubkey = res.pubkey;
        $scope.formData.keypair = res.keypair;
      })
      .then(function() {
        $scope.computing = false;
        UIUtils.loading.hide(10);
      })
      .catch(function(err) {
        $scope.computing = false;
        UIUtils.onError('ERROR.SCAN_FAILED')(err);
      });
  };

  $scope.changeMethod = function(method, params){
    $scope.hideMethodsPopover();

    if (!method || method == $scope.formData.method) return; // same method

    console.debug("[login] method is: " + method);
    $scope.formData.method = method;

    if ($scope.form) {
      // hide form's fields errors on the form
      delete $scope.form.$submitted;
    }

    // Scrypt (advanced or not)
    if (method == 'SCRYPT_DEFAULT' || method == 'SCRYPT_ADVANCED') {
      $scope.pubkey = null;

      // Search scrypt object
      var scrypt;
      if (params) {
        scrypt = _.find($scope.scryptParamsValues, function(item){
            return item.params && angular.equals(item.params, params);
          });
        if (!scrypt) {
          scrypt = _.findWhere($scope.scryptParamsValues, {id: 'USER'}) || {};
          scrypt.params = params;
        }
      }
      else {
        scrypt = _.findWhere($scope.scryptParamsValues, {id: 'DEFAULT'});
      }
      $scope.changeScrypt(scrypt);

      $scope.autoComputePubkey = $scope.autoComputePubkey && (method == 'SCRYPT_DEFAULT');
    }
    else if (method == 'SCAN') {
      return $scope.doScan();
    }
    else {
      $scope.formData.username = null;
      $scope.formData.password = null;
      $scope.formData.pubkey = null;
      $scope.pubkey = null;
      $scope.computing = false;
    }
  };

  $scope.changeScrypt = function(scrypt) {
    // Protect params against changes
    $scope.formData.scrypt = angular.copy(scrypt||{});
    $scope.onScryptFormChanged();
  };

  $scope.readKeyFile = function(file, options) {
    options = options || {};

    options.password = options.password || $scope.formData.file.password || function() {
      $scope.formData.file.password = undefined;
      return Modals.showPassword({
            title: 'ACCOUNT.SECURITY.KEYFILE.PASSWORD_POPUP.TITLE',
            subTitle: 'ACCOUNT.SECURITY.KEYFILE.PASSWORD_POPUP.HELP',
            error: options.error,
            scope: $scope
          })
          .then(function (password) {
            // Remember password (for validation)
            $scope.formData.file.password = password;
            // Timeout is need to force popup to be hide
            return $timeout(function() {
              return password;
            }, 150);
          });
      };

    return csCrypto.keyfile.read($scope.formData.file, options)
      .catch(function(err) {
        $scope.formData.file.password = undefined;
        if (err === 'CANCELLED') {
          UIUtils.loading.hide(10);
        }
        if (err && err.ucode == csCrypto.errorCodes.BAD_PASSWORD) {
          // Recursive call
          return $scope.readKeyFile($scope.formData.file, {withSecret: options.withSecret, error: 'ACCOUNT.SECURITY.KEYFILE.ERROR.BAD_PASSWORD'});
        }
        throw err;
      });
  };

  $scope.fileChanged = function(event) {
    $scope.validatingFile = true;
    $scope.formData.file = event && event.target && event.target.files && event.target.files.length && event.target.files[0];
    if (!$scope.formData.file) {
      $scope.validatingFile = false;
      return;
    }

    $timeout(function() {
      console.debug("[login] key file changed: ", $scope.formData.file);
      $scope.validatingFile = true;

      return $scope.readKeyFile($scope.formData.file, {withSecret: false, password: $scope.formData.file.password})
        .then(function(keypair) {
          if (!keypair || !keypair.signPk) {
            $scope.formData.file.valid = false;
            $scope.formData.file.pubkey = undefined;
          }
          else {
            $scope.formData.file.pubkey = CryptoUtils.util.encode_base58(keypair.signPk);
            $scope.formData.file.valid = !$scope.expectedPubkey || $scope.expectedPubkey == $scope.formData.file.pubkey;
            $scope.validatingFile = false;
          }

        })
        .catch(function(err) {
          if (err && err == 'CANCELLED') {
            $scope.removeKeyFile();
            return;
          }
          $scope.validatingFile = false;
          $scope.formData.file.valid = false;
          $scope.formData.file.pubkey = undefined;
          UIUtils.onError('ERROR.AUTH_FILE_ERROR')(err);
        });
    });
  };

  /**
   * On file drop
   */
  $scope.onKeyFileDrop = function(file) {
    if (!file || !file.fileData) return;

    $scope.formData.file = {
      name: file.fileData.name,
      size: file.fileData.size,
      content: file.fileContent
    };
    $scope.validatingFile = true;
    $timeout(function() {
      return $scope.readKeyFile($scope.formData.file, {withSecret: false})
        .then(function (keypair) {
          if (!keypair || !keypair.signPk) {
            $scope.formData.file.valid = false;
            $scope.formData.file.pubkey = undefined;
          }
          else {
            $scope.formData.file.pubkey = CryptoUtils.util.encode_base58(keypair.signPk);
            $scope.formData.file.valid = !$scope.expectedPubkey || $scope.expectedPubkey == $scope.formData.file.pubkey;
            $scope.validatingFile = false;
          }

        })
        .catch(function (err) {
          $scope.validatingFile = false;
          $scope.formData.file.valid = false;
          $scope.formData.file.pubkey = undefined;
          UIUtils.onError('ERROR.AUTH_FILE_ERROR')(err);
        });
    });
  };

  $scope.removeKeyFile = function() {
    $scope.formData.file = undefined;
  };

  /* -- modals -- */

  $scope.showWotLookupModal = function(searchText) {
    return Modals.showWotLookup({q: searchText})
      .then(function(res){
        if (res && res.pubkey) {
          $scope.formData.pubkey = res.pubkey;
          return $timeout($scope.doLogin, 300);
        }
      });
  };

  /* -- popover -- */

  $scope.showMethodsPopover = function(event) {
    if (event.defaultPrevented) return;
    if (!$scope.methodsPopover) {

      $ionicPopover.fromTemplateUrl('templates/login/popover_methods.html', {
        scope: $scope
      }).then(function(popover) {
        $scope.methodsPopover = popover;
        //Cleanup the popover when we're done with it!
        $scope.$on('$destroy', function() {
          $scope.methodsPopover.remove();
        });
        $scope.methodsPopover.show(event)
          .then(function() {
            UIUtils.ink({selector: '.popover-login-methods .item'});
          });
      });
    }
    else {
      $scope.methodsPopover.show(event);
    }
  };

  $scope.hideMethodsPopover = function() {
    if ($scope.methodsPopover) {
      $scope.methodsPopover.hide();
    }
  };



  // Default action
  $scope.init();


  // TODO : for DEV only
  /*$timeout(function() {
    $scope.formData = {
      username: 'benoit.lavenier@e-is.pro',
      password: ''
    };
    //$scope.form = {$valid:true};
  }, 900);*/
}


function AuthController($scope, $controller){

  // Initialize the super class and extend it.
  angular.extend(this, $controller('LoginModalCtrl', {$scope: $scope, parameters: {auth: true}}));

  $scope.setForm = function(form) {
    $scope.form = form;
  };

}


HelpController.$inject = ['$scope', '$state', '$timeout', '$anchorScroll', 'csSettings'];
HelpModalController.$inject = ['$scope', '$timeout', '$anchorScroll', 'csSettings', 'parameters'];
HelpTipController.$inject = ['$scope', '$state', '$window', '$ionicSideMenuDelegate', '$timeout', '$q', '$anchorScroll', 'UIUtils', 'csConfig', 'csSettings', 'csCurrency', 'csHelpConstants', 'Device', 'csWallet'];
HelpTourController.$inject = ['$scope'];
angular.module('cesium.help.controllers', ['cesium.services'])

  .config(['$stateProvider', function($stateProvider) {
    'ngInject';

    $stateProvider


      .state('app.help_tour', {
        url: "/tour",
        views: {
          'menuContent': {
            templateUrl: "templates/home/home.html",
            controller: 'HelpTourCtrl'
          }
        }
      })

      .state('app.help', {
        url: "/help?anchor",
        views: {
          'menuContent': {
            templateUrl: "templates/help/view_help.html",
            controller: 'HelpCtrl'
          }
        }
      })

      .state('app.help_anchor', {
        url: "/help/:anchor",
        views: {
          'menuContent': {
            templateUrl: "templates/help/view_help.html",
            controller: 'HelpCtrl'
          }
        }
      })

    ;


  }])

  .controller('HelpCtrl', HelpController)

  .controller('HelpModalCtrl', HelpModalController)

  .controller('HelpTipCtrl', HelpTipController)

  .controller('HelpTourCtrl', HelpTourController)


;


function HelpController($scope, $state, $timeout, $anchorScroll, csSettings) {
  'ngInject';

  $scope.$on('$ionicView.enter', function(e) {
    $scope.locale = csSettings.data.locale.id;
    if ($state.stateParams && $state.stateParams.anchor) {
      $scope.anchor = $state.stateParams.anchor;
      $timeout(function () {
        $anchorScroll($state.stateParams.anchor);
      }, 100);
    }
  });
}

function HelpModalController($scope, $timeout, $anchorScroll, csSettings, parameters) {
  'ngInject';

  $scope.itemsClass = {};
  $scope.locale = csSettings.data.locale.id;

  parameters = parameters || {};
  if (parameters && typeof parameters == "string") {
    parameters = {anchor: parameters};
  }

  if (parameters.anchor) {

    $timeout(function() {
      $anchorScroll(parameters.anchor);
    }, 100);

    // Change CSS classes
    $scope.itemsClass = {};
    $scope.itemsClass[parameters.anchor] = 'selected';
    $scope.listClass = 'selection';
  }

}


/* ----------------------------
*  Help Tip
* ---------------------------- */
function HelpTipController($scope, $state, $window, $ionicSideMenuDelegate, $timeout, $q, $anchorScroll,
                           UIUtils, csConfig, csSettings, csCurrency, csHelpConstants, Device, csWallet) {

  $scope.tour = false; // Is a tour or a helptip ?
  $scope.continue = true;

  $scope.executeStep = function(partName, steps, index) {
    index = angular.isDefined(index) ? index : 0;

    if (index >= steps.length) {
      return $q.when(true); // end
    }

    var step = steps[index];
    if (typeof step !== 'function') {
      throw new Error('[helptip] Invalid step at index {0} of \'{1}\' tour: step must be a function'.format(index, partName));
    }
    var promise = step();
    if (typeof promise === 'boolean') {
      promise = $q.when(promise);
    }
    return promise
      .then(function(next) {
        if (angular.isUndefined(next)) {
          $scope.continue = false;
          return index; // keep same index (no button press: popover just closed)
        }
        if (!next || index === steps.length - 1) {
          return next ? -1 : index+1; // last step OK, so mark has finished
        }
        return $scope.executeStep(partName, steps, index+1);
      })
      .catch(function(err) {
        if (err && err.message == 'transition prevented') {
          console.error('ERROR: in help tour [{0}], in step [{1}] -> use large if exists, to prevent [transition prevented] error'.format(partName, index));
        }
        else {
          console.error('ERROR: in help tour  [{0}], in step [{1}] : {2}'.format(partName, index, err));
        }
        $scope.continue = false;
        return index;
      });
  };

  $scope.showHelpTip = function(id, options) {
    options = options || {};
    options.bindings = options.bindings || {};
    options.bindings.value =options.bindings.value || '';
    options.bindings.hasNext = angular.isDefined(options.bindings.hasNext) ? options.bindings.hasNext : true;
    options.timeout = options.timeout || (Device.enable ? 900 : 500);
    options.autoremove = true; // avoid memory leak
    options.bindings.tour = $scope.tour;
    options.backdropClickToClose = !$scope.tour;
    return UIUtils.popover.helptip(id, options);
  };

  $scope.showHelpModal = function(helpAnchor) {
    Modals.showHelp({anchor: helpAnchor});
  };

  $scope.startHelpTour = function() {
    $scope.tour = true;
    $scope.continue = true;

    // Currency
    return $scope.startCurrencyTour(0, true)
      .then(function(endIndex){
        if (!endIndex || $scope.cancelled) return false;
        csSettings.data.helptip.currency=endIndex;
        csSettings.store();
        return $scope.continue;
      })

      // Network
      .then(function(next){
        if (!next) return false;
        return $scope.startNetworkTour(0, true)
          .then(function(endIndex){
            if (!endIndex || $scope.cancelled) return false;
            csSettings.data.helptip.network=endIndex;
            csSettings.store();
            return $scope.continue;
          });
      })

      // Wot lookup
      .then(function(next){
        if (!next) return false;
        return $scope.startWotLookupTour(0, true)
          .then(function(endIndex){
            if (!endIndex || $scope.cancelled) return false;
            csSettings.data.helptip.wotLookup=endIndex;
            csSettings.store();
            return $scope.continue;
          });
      })

      // Wot identity
      .then(function(next){
        if (!next) return false;
        return $scope.startWotTour(0, true)
          .then(function(endIndex){
            if (!endIndex || $scope.cancelled) return false;
            csSettings.data.helptip.wot=endIndex;
            csSettings.store();
            return $scope.continue;
          });
      })

      // Identity certifications
      .then(function(next){
        if (!next) return false;
        return $scope.startWotCertTour(0, true)
          .then(function(endIndex){
            if (!endIndex) return false;
            csSettings.data.helptip.wotCerts=endIndex;
            csSettings.store();
            return $scope.continue;
          });
      })

      // Wallet (if NOT login)
      .then(function(next){
        if (!next) return false;
        return $scope.startWalletNoLoginTour(0, true);
      })

      // Wallet (if login)
      .then(function(next){
        if (!next) return false;
        if (!csWallet.isLogin()) return true; // not login: continue
        return $scope.startWalletTour(0, true)
          .then(function(endIndex){
            if (!endIndex) return false;
            csSettings.data.helptip.wallet=endIndex;
            csSettings.store();
            return $scope.continue;
          });
      })

      // Wallet certifications
      .then(function(next){
        if (!next) return false;
        if (!csWallet.isLogin()) return true; // not login: continue
        return $scope.startWalletCertTour(0, true)
          .then(function(endIndex){
            if (!endIndex) return false;
            csSettings.data.helptip.walletCerts=endIndex;
            csSettings.store();
            return $scope.continue;
          });
      })

      // My operations (if login)
      .then(function(next){
        if (!next) return false;
        if (!csWallet.isLogin()) return true; // not login: continue
        return $scope.startTxTour(0, true)
          .then(function(endIndex){
            if (!endIndex) return false;
            csSettings.data.helptip.tx=endIndex;
            csSettings.store();
            return $scope.continue;
          });
      })

      // Header tour
      .then(function(next){
        if (!next) return false;
        return $scope.startHeaderTour(0, true);
      })

      // Settings tour
      .then(function(next){
        if (!next) return false;
        return $scope.startSettingsTour(0, true);
      })

      // Finish tour
      .then(function(next){
        if (!next) return false;
        return $scope.finishTour();
      });
  };

  /**
   * Features tour on currency
   * @returns {*}
   */
  $scope.startCurrencyTour = function(startIndex, hasNext) {

    var showWotTabIfNeed  = function() {
      if ($state.is('app.currency.tab_parameters')) {
        $state.go('app.currency.tab_wot');
      }
    };

    var contentParams;

    var steps = [

      function(){
        $ionicSideMenuDelegate.toggleLeft(true);
        return $scope.showHelpTip('helptip-menu-btn-currency', {
          bindings: {
            content: 'HELP.TIP.MENU_BTN_CURRENCY',
            icon: {
              position: 'left'
            }
          }
        });
      },

      function () {
        if ($ionicSideMenuDelegate.isOpen()) {
          $ionicSideMenuDelegate.toggleLeft(false);
        }
        return $state.go(UIUtils.screen.isSmall() ? 'app.currency' : 'app.currency_lg')
          .then(function () {
            return $scope.showHelpTip('helptip-currency-mass-member', {
              bindings: {
                content: 'HELP.TIP.CURRENCY_MASS',
                icon: {
                  position: 'center'
                }
              }
            });
          });
      },

      function () {
        if (!csSettings.data.useRelative) return true; //skip but continue
        return $scope.showHelpTip('helptip-currency-mass-member-unit', {
          bindings: {
            content: 'HELP.TIP.CURRENCY_UNIT_RELATIVE',
            contentParams: contentParams,
            icon: {
              position: UIUtils.screen.isSmall() ? 'right' : 'center'
            }
          }
        });
      },

      // function () {
      //   if (!csSettings.data.useRelative) return true; //skip but continue
      //   $anchorScroll('helptip-currency-change-unit');
      //   return $scope.showHelpTip('helptip-currency-change-unit', {
      //     bindings: {
      //       content: 'HELP.TIP.CURRENCY_CHANGE_UNIT',
      //       contentParams: contentParams,
      //       icon: {
      //         position: UIUtils.screen.isSmall() ? 'right' : undefined
      //       }
      //     }
      //   });
      // },
      //
      // function () {
      //   if (csSettings.data.useRelative) return true; //skip but continue
      //   $anchorScroll('helptip-currency-change-unit');
      //   return $scope.showHelpTip('helptip-currency-change-unit', {
      //     bindings: {
      //       content: 'HELP.TIP.CURRENCY_CHANGE_UNIT_TO_RELATIVE',
      //       contentParams: contentParams,
      //       icon: {
      //         position: UIUtils.screen.isSmall() ? 'right' : undefined
      //       }
      //     }
      //   });
      // },

      function () {
        $anchorScroll('helptip-currency-rules-anchor');
        return $scope.showHelpTip('helptip-currency-rules', {
          bindings: {
            content: 'HELP.TIP.CURRENCY_RULES',
            icon: {
              position: 'center',
              glyph: 'ion-information-circled'
            }
          }
        });
      },

      function () {
        showWotTabIfNeed();
        $anchorScroll('helptip-currency-newcomers-anchor');
        return $scope.showHelpTip('helptip-currency-newcomers', {
          bindings: {
            content: 'HELP.TIP.CURRENCY_WOT',
            icon: {
              position: 'center'
            },
            hasNext: hasNext
          },
          timeout: 1200 // need for Firefox
        });
      }
    ];

    // Get currency parameters, with currentUD
    return csCurrency.get().then(function(currency) {
      contentParams = currency.parameters;
      // Launch steps
      return $scope.executeStep('currency', steps, startIndex);
    });
  };

  /**
   * Features tour on network
   * @returns {*}
   */
  $scope.startNetworkTour = function(startIndex, hasNext) {

    var showNetworkTabIfNeed  = function() {
      if ($state.is('app.currency')) {
        // Select the second tabs
        $timeout(function () {
          var tabs = $window.document.querySelectorAll('ion-tabs .tabs a');
          if (tabs && tabs.length == 3) {
            angular.element(tabs[2]).triggerHandler('click');
          }
        }, 100);
      }
    };

    var contentParams;

    var steps = [

      function(){
        if (UIUtils.screen.isSmall()) return true; // skip but continue
        $ionicSideMenuDelegate.toggleLeft(true);
        return $scope.showHelpTip('helptip-menu-btn-network', {
          bindings: {
            content: 'HELP.TIP.MENU_BTN_NETWORK',
            icon: {
              position: 'left'
            }
          }
        });
      },

      function () {
        if ($ionicSideMenuDelegate.isOpen()) {
          $ionicSideMenuDelegate.toggleLeft(false);
        }
        return $state.go(UIUtils.screen.isSmall() ? 'app.currency.tab_network' : 'app.network')
          .then(function () {
            showNetworkTabIfNeed();
            return $scope.showHelpTip('helptip-network-peers', {
              bindings: {
                content: 'HELP.TIP.NETWORK_BLOCKCHAIN',
                icon: {
                  position: 'center',
                  glyph: 'ion-information-circled'
                }
              },
              timeout: 1200 // need for Firefox
            });
          });
      },

      function() {
        showNetworkTabIfNeed();
        return $scope.showHelpTip('helptip-network-peer-0', {
          bindings: {
            content: 'HELP.TIP.NETWORK_PEERS',
            icon: {
              position: UIUtils.screen.isSmall() ? undefined : 'center'
            }
          },
          timeout: 1000,
          retry: 20
        });
      },


      function() {
        showNetworkTabIfNeed();
        return $scope.showHelpTip('helptip-network-peer-0-block', {
          bindings: {
            content: 'HELP.TIP.NETWORK_PEERS_BLOCK_NUMBER',
            icon: {
              position: UIUtils.screen.isSmall() ? undefined : 'center'
            }
          }
        });
      },

      function() {
        showNetworkTabIfNeed();
        var locale = csSettings.data.locale.id;
        return $scope.showHelpTip('helptip-network-peers', {
          bindings: {
            content: 'HELP.TIP.NETWORK_PEERS_PARTICIPATE',
            contentParams: {
              installDocUrl: (csConfig.helptip && csConfig.helptip.installDocUrl) ?
                (csConfig.helptip.installDocUrl[locale] ? csConfig.helptip.installDocUrl[locale] : csConfig.helptip.installDocUrl) :
                'http://duniter.org'
            },
            icon: {
              position: 'center',
              glyph: 'ion-information-circled'
            },
            hasNext: hasNext
          }
        });
      }
    ];

    // Get currency parameters, with currentUD
    return csCurrency.parameters().then(function(parameters) {
      contentParams = parameters;
      // Launch steps
      return $scope.executeStep('network', steps, startIndex);
    });
  };

  /**
   * Features tour on WOT lookup
   * @returns {*}
   */
  $scope.startWotLookupTour = function(startIndex, hasNext) {

    var steps = [
      function() {
        $ionicSideMenuDelegate.toggleLeft(true);
        return $scope.showHelpTip('helptip-menu-btn-wot', {
          bindings: {
            content: 'HELP.TIP.MENU_BTN_WOT',
            icon: {
              position: 'left'
            }
          },
          onError: 'continue'
        });
      },

      function() {
        if ($ionicSideMenuDelegate.isOpen()) {
          $ionicSideMenuDelegate.toggleLeft(false);
        }
        return $state.go(UIUtils.screen.isSmall() ? 'app.wot_lookup.tab_search' : 'app.wot_lookup_lg')
          .then(function(){
            return $scope.showHelpTip('helptip-wot-search-text', {
              bindings: {
                content: UIUtils.screen.isSmall() ? 'HELP.TIP.WOT_SEARCH_TEXT_XS' : 'HELP.TIP.WOT_SEARCH_TEXT',
                icon: {
                  position: 'center'
                }
              }
            });
          });
      },

      function() {
        return $scope.showHelpTip('helptip-wot-search-result-0', {
          bindings: {
            content: 'HELP.TIP.WOT_SEARCH_RESULT',
            icon: {
              position: 'center'
            }
          },
          timeout: 700,
          retry: 15
        });
      },

      function() {
        var element = $window.document.getElementById('helptip-wot-search-result-0');
        if (!element) return true;
        $timeout(function() {
          angular.element(element).triggerHandler('click');
        });
        return $scope.showHelpTip('helptip-wot-view-certifications', {
          bindings: {
            content: 'HELP.TIP.WOT_VIEW_CERTIFICATIONS',
            hasNext: hasNext
          },
          timeout: 2500
        });
      }
    ];

    // Launch steps
    return $scope.executeStep('wotLookup', steps, startIndex);
  };

  /**
   * Features tour on WOT identity
   * @returns {*}
   */
  $scope.startWotTour = function(startIndex, hasNext) {
    var contentParams;

    var steps = [
      function() {
        return $scope.showHelpTip('helptip-wot-view-certifications', {
          bindings: {
            content: 'HELP.TIP.WOT_VIEW_CERTIFICATIONS_COUNT',
            contentParams: contentParams,
            icon: {
              position: 'center',
              glyph: 'ion-information-circled'
            }
          }
        });
      },

      function() {
        return $scope.showHelpTip('helptip-wot-view-certifications-count', {
          bindings: {
            content: 'HELP.TIP.WOT_VIEW_CERTIFICATIONS_CLICK',
            icon: {
              position: 'center'
            },
            hasNext: hasNext
          }
        });
      }
    ];

    // Get currency parameters, with currentUD
    return csCurrency.get().then(function(currency) {
      contentParams = currency.parameters;
      contentParams.currentUD = currency.currentUD;
      // Launch steps
      return $scope.executeStep('wot', steps, startIndex);
    });
  };

  /**
   * Features tour on wot certifications
   * @returns {*}
   */
  $scope.startWotCertTour = function(startIndex, hasNext) {
    var steps = [

      function() {
        // If on identity: click on certifications
        if ($state.is('app.wot_identity')) {
          var element = $window.document.getElementById('helptip-wot-view-certifications');
          if (!element) return true;
          $timeout(function() {
            angular.element(element).triggerHandler('click');
          });
        }
        return $scope.showHelpTip(UIUtils.screen.isSmall() ? 'fab-certify': 'helptip-certs-certify', {
          bindings: {
            content: 'HELP.TIP.WOT_VIEW_CERTIFY',
            icon: {
              position: UIUtils.screen.isSmall() ? 'bottom-right' : 'center'
            }
          },
          timeout: UIUtils.screen.isSmall() ? 2000 : 1000,
          retry: 10
        });
      },

      function() {
        return $scope.showHelpTip(UIUtils.screen.isSmall() ? 'fab-certify': 'helptip-certs-certify', {
          bindings: {
            content: 'HELP.TIP.CERTIFY_RULES',
            icon: {
              position: 'center',
              glyph: 'ion-alert-circled'
            },
            hasNext: hasNext
          }
        });
      }
    ];

    return $scope.executeStep('certs', steps, startIndex);
  };

  /**
   * Features tour on wallet (if not login)
   * @returns {*}
   */
  $scope.startWalletNoLoginTour = function(startIndex, hasNext) {
    if (csWallet.isLogin()) return $q.when(true); // skip if login

    var steps = [
      function () {
        $ionicSideMenuDelegate.toggleLeft(true);
        return $scope.showHelpTip('helptip-menu-btn-account', {
          bindings: {
            content: 'HELP.TIP.MENU_BTN_ACCOUNT',
            icon: {
              position: 'left'
            },
            hasNext: hasNext
          }
        });
      }
    ];

    return $scope.executeStep('wallet-no-login', steps, startIndex);
  };

  /**
   * Features tour on wallet screens
   * @returns {*}
   */
  $scope.startWalletTour = function(startIndex, hasNext) {
    if (!csWallet.isLogin()) return $q.when(true); // skip if not login

    var hasCertificationsItem = csWallet.data.isMember||(csWallet.data.requirements && csWallet.data.requirements.pendingMembership);
    var contentParams;

    var steps = [
      function () {
        $ionicSideMenuDelegate.toggleLeft(true);
        return $scope.showHelpTip('helptip-menu-btn-account', {
          bindings: {
            content: csWallet.data.isMember ? 'HELP.TIP.MENU_BTN_ACCOUNT_MEMBER' : 'HELP.TIP.MENU_BTN_ACCOUNT',
            icon: {
              position: 'left'
            }
          }
        });
      },

      function () {
        if ($ionicSideMenuDelegate.isOpen()) {
          $ionicSideMenuDelegate.toggleLeft(false);
        }

        // Go to wallet
        return $state.go('app.view_wallet')
          .then(function () {
            return $scope.showHelpTip(UIUtils.screen.isSmall() ? 'helptip-wallet-options-xs' : 'helptip-wallet-options', {
              bindings: {
                content: 'HELP.TIP.WALLET_OPTIONS',
                icon: {
                  position: UIUtils.screen.isSmall() ? 'right' : 'center'
                }
              }
            });
          });
      },

      // Wallet pubkey
      function () {
        $anchorScroll('helptip-wallet-pubkey');
        return $scope.showHelpTip('helptip-wallet-pubkey', {
          bindings: {
            content: 'HELP.TIP.WALLET_PUBKEY',
            icon: {
              position: 'center'
            },
            hasNext: !hasCertificationsItem && hasNext
          },
          timeout: UIUtils.screen.isSmall() ? 2000 : 500,
          retry: 10
        });
      },

      function () {
        if (!hasCertificationsItem) return hasNext;
        $anchorScroll('helptip-wallet-certifications');
        return $scope.showHelpTip('helptip-wallet-certifications', {
          bindings: {
            content: UIUtils.screen.isSmall() ? 'HELP.TIP.WALLET_RECEIVED_CERTIFICATIONS': 'HELP.TIP.WALLET_CERTIFICATIONS',
            icon: {
              position: 'center'
            },
            hasNext: hasNext
          },
          timeout: 500,
          onError: 'continue' // if simple wallet: no certification item, so continue
        });
      }
    ];

    // Check that constants are well configured
    if (steps.length != csHelpConstants.wallet.stepCount) {
      console.error("[help] Invalid value of 'csHelpConstants.wallet.stepCount'. Please update to {0}".format(steps.length));
    }

    // Get currency parameters, with currentUD
    return csCurrency.get()
      .then(function(currency) {
        contentParams = currency.parameters;
        contentParams.currentUD = currency.currentUD;
        // Launch steps
        return $scope.executeStep('wallet', steps, startIndex);
      });
  };

  /**
   * Features tour on wallet certifications
   * @returns {*}
   */
  $scope.startWalletCertTour = function(startIndex, hasNext) {
    if (!csWallet.isLogin()) return $q.when(true);

    var contentParams;
    var skipAll = false;

    var steps = [

      function() {
        // If on wallet : click on certifications
        if ($state.is('app.view_wallet')) {
          var element = $window.document.getElementById('helptip-wallet-certifications');
          if (!element) {
            skipAll = true;
            return true;
          }
          $timeout(function() {
            angular.element(element).triggerHandler('click');
          });
        }
        if (!UIUtils.screen.isSmall()) return true; // skip this helptip if not in tabs mode
        return $scope.showHelpTip('helptip-received-certs', {
          bindings: {
            content: 'HELP.TIP.WALLET_RECEIVED_CERTS'
          }
        });
      },

      function() {
        if (skipAll || !UIUtils.screen.isSmall()) return true;
        return $state.go('app.view_wallet') // go back to wallet (small device only)
          .then(function() {
            return $scope.showHelpTip('helptip-wallet-given-certifications', {
              bindings: {
                content: 'HELP.TIP.WALLET_GIVEN_CERTIFICATIONS',
                icon: {
                  position: 'center'
                }
              },
              timeout: 500
            });
        });
      },

      function() {
        if (skipAll) return true;

        // Click on given cert link (small device only)
        if ($state.is('app.view_wallet')) {
          var element = $window.document.getElementById('helptip-wallet-given-certifications');
          if (!element) {
            skipAll = true;
            return true;
          }
          $timeout(function() {
            angular.element(element).triggerHandler('click');
          }, 500);
        }
        return $scope.showHelpTip(UIUtils.screen.isSmall() ? 'fab-select-certify': 'helptip-certs-select-certify', {
          bindings: {
            content: 'HELP.TIP.WALLET_CERTIFY',
            icon: {
              position: UIUtils.screen.isSmall() ? 'bottom-right' : 'center'
            }
          },
          timeout: UIUtils.screen.isSmall() ? 2000 : 500,
          retry: 10
        });
      },

      function() {
        if ($scope.tour || skipAll) return hasNext; // skip Rules if features tour (already display)
        return $scope.showHelpTip('helptip-certs-stock', {
          bindings: {
            content: 'HELP.TIP.CERTIFY_RULES',
            icon: {
              position: 'center',
              glyph: 'ion-alert-circled'
            },
            hasNext: hasNext
          }
        });
      }

      /* FIXME : how to select the left tab ?
      ,function() {
        return $scope.showHelpTip('helptip-certs-stock', {
          bindings: {
            content: 'HELP.TIP.WALLET_CERT_STOCK',
            contentParams: contentParams,
            icon: {
              position: 'center'
            },
            hasNext: hasNext
          }
        });
      }*/
    ];

    return csCurrency.parameters().then(function(parameters) {
      contentParams = parameters;
      return $scope.executeStep('certs', steps, startIndex);
    });
  };

  /**
   * Features tour on TX screen
   * @returns {*}
   */
  $scope.startTxTour = function(startIndex, hasNext) {
    if (!csWallet.isLogin()) return $q.when(true); // skip if not login

    var contentParams;

    var steps = [
      function () {
        $ionicSideMenuDelegate.toggleLeft(true);
        return $scope.showHelpTip('helptip-menu-btn-tx', {
          bindings: {
            content: csWallet.data.isMember ? 'HELP.TIP.MENU_BTN_TX_MEMBER' : 'HELP.TIP.MENU_BTN_TX',
            icon: {
              position: 'left'
            }
          }
        });
      },

      function () {
        if ($ionicSideMenuDelegate.isOpen()) {
          $ionicSideMenuDelegate.toggleLeft(false);
        }

        // Go to wallet
        return $state.go('app.view_wallet_tx')
          .then(function () {
            return $scope.showHelpTip('helptip-wallet-balance', {
              bindings: {
                content: csSettings.data.useRelative ? 'HELP.TIP.WALLET_BALANCE_RELATIVE' : 'HELP.TIP.WALLET_BALANCE',
                contentParams: contentParams,
                icon: {
                  position: 'center'
                }
              },
              retry: 20 // 10 * 500 = 5s max
            });
          });
      },

      function () {
        return $scope.showHelpTip('helptip-wallet-balance', {
          bindings: {
            content: 'HELP.TIP.WALLET_BALANCE_CHANGE_UNIT',
            contentParams: contentParams,
            icon: {
              position: 'center',
              glyph: 'ion-information-circled'
            }
          }
        });
      }
    ];

    // Get currency parameters, with currentUD
    return csCurrency.get()
      .then(function(currency) {
        contentParams = currency.parameters;
        contentParams.currentUD = currency.currentUD;
        // Launch steps
        return $scope.executeStep('tx', steps, startIndex);
      });
  };

  /**
   * header tour
   * @returns {*}
   */
  $scope.startHeaderTour = function(startIndex, hasNext) {
    if (UIUtils.screen.isSmall()) return $q.when(true);

    function _getProfilBtnElement() {
      var elements = $window.document.querySelectorAll('#helptip-header-bar-btn-profile');
      if (!elements || !elements.length) return null;
      return _.find(elements, function(el) {return el.offsetWidth > 0;});
    }

    var steps = [
      function () {

        if (UIUtils.screen.isSmall()) return true; // skip for small screen
        var element = _getProfilBtnElement();
        if (!element) return true;
        return $scope.showHelpTip(element, {
          bindings: {
            content: 'HELP.TIP.HEADER_BAR_BTN_PROFILE',
            icon: {
              position: 'right'
            }
          }
        });
      },

      function () {
        // small screens
        if (UIUtils.screen.isSmall()) {
          $ionicSideMenuDelegate.toggleLeft(true);
          return $scope.showHelpTip('helptip-menu-btn-settings', {
            bindings: {
              content: 'HELP.TIP.MENU_BTN_SETTINGS',
              icon: {
                position: 'left'
              },
              hasNext: hasNext
            },
            timeout: 1000
          });
        }
        // wide screens
        else {
          var element = _getProfilBtnElement();
          if (!element) return true;
          $timeout(function() {
            angular.element(element).triggerHandler('click');
          });
          return $scope.showHelpTip('helptip-popover-profile-btn-settings', {
            bindings: {
              content: 'HELP.TIP.MENU_BTN_SETTINGS',
              icon: {
                position: 'center'
              },
              hasNext: hasNext
            },
            timeout: 1000
          })
            .then(function(res) {
              // close profile popover
              $scope.closeProfilePopover();
              return res;
            });
        }
      }
    ];

    return $scope.executeStep('header', steps, startIndex);
  };

  /**
   * Settings tour
   * @returns {*}
   */
  $scope.startSettingsTour = function(startIndex, hasNext) {
    var contentParams;
    var steps = [

      function () {
        if (!UIUtils.screen.isSmall()) return true;
        $ionicSideMenuDelegate.toggleLeft(true);
        return $scope.showHelpTip('helptip-menu-btn-settings', {
          bindings: {
            content: 'HELP.TIP.MENU_BTN_SETTINGS',
            icon: {
              position: 'left'
            }
          },
          timeout: 1000
        });
      },

      function () {
        if ($ionicSideMenuDelegate.isOpen()) {
          $ionicSideMenuDelegate.toggleLeft(false);
        }

        // Go to settings
        return $state.go('app.settings')
          .then(function () {
            return $scope.showHelpTip('helptip-settings-btn-unit-relative', {
              bindings: {
                content: 'HELP.TIP.SETTINGS_CHANGE_UNIT',
                contentParams: contentParams,
                icon: {
                  position: 'right',
                  style: 'margin-right: 60px'
                },
                hasNext: hasNext
              },
              timeout: 1000
            });
          });
      }
    ];

    return csCurrency.parameters()
      .then(function(parameters) {
        contentParams = parameters;
        return $scope.executeStep('settings', steps, startIndex);
      });
  };


  /**
   * Finish the features tour (last step)
   * @returns {*}
   */
  $scope.finishTour = function() {
    if ($ionicSideMenuDelegate.isOpen()) {
      $ionicSideMenuDelegate.toggleLeft(false);
    }

    // If login: redirect to wallet
    if (csWallet.isLogin()) {
      return $state.go('app.view_wallet')
        .then(function(){
          return $scope.showHelpTip('helptip-wallet-certifications', {
            bindings: {
              content: 'HELP.TIP.END_LOGIN',
              hasNext: false
            }
          });
        });
    }

    // If not login: redirect to home
    else {
      var contentParams;
      return $q.all([
        $scope.showHome(),

        csCurrency.parameters()
          .then(function(parameters) {
            contentParams = parameters;
          })
        ])
        .then(function(){
          return $scope.showHelpTip('helptip-home-logo', {
           bindings: {
             content: 'HELP.TIP.END_NOT_LOGIN',
             contentParams: contentParams,
             hasNext: false
           }
          });
        });
    }
  };
}

/* ----------------------------
 *  Help tour (auto start from home page)
 * ---------------------------- */
function HelpTourController($scope) {

  $scope.$on('$ionicView.enter', function(e, state) {
    $scope.startHelpTour();
  });

}


WalletController.$inject = ['$scope', '$rootScope', '$q', '$ionicPopup', '$timeout', '$state', '$translate', '$ionicPopover', '$location', 'UIUtils', 'Modals', 'csPopovers', 'BMA', 'csConfig', 'csSettings', 'csWallet', 'csHelp'];
WalletTxController.$inject = ['$scope', '$ionicPopover', '$state', '$timeout', '$location', 'UIUtils', 'Modals', 'csPopovers', 'BMA', 'csSettings', 'csCurrency', 'csWallet', 'csTx'];
WalletTxErrorController.$inject = ['$scope', 'UIUtils', 'csSettings', 'csWallet'];
WalletSecurityModalController.$inject = ['$scope', 'UIUtils', 'csWallet', '$translate', 'parameters'];angular.module('cesium.wallet.controllers', ['cesium.services', 'cesium.currency.controllers'])

  .config(['$stateProvider', function($stateProvider) {
    'ngInject';
    $stateProvider


      .state('app.view_wallet', {
        url: "/account?refresh",
        views: {
          'menuContent': {
            templateUrl: "templates/wallet/view_wallet.html",
            controller: 'WalletCtrl'
          }
        },
        data: {
          login: true,
          silentLocationChange: true
        }
      })

      .state('app.view_wallet_tx', {
        url: "/history/account?refresh",
        views: {
          'menuContent': {
            templateUrl: "templates/wallet/view_wallet_tx.html",
            controller: 'WalletTxCtrl'
          }
        },
        data: {
          login: true,
          silentLocationChange: true
        }
      })

      .state('app.view_wallet_tx_errors', {
        url: "/history/account/errors",
        views: {
          'menuContent': {
            templateUrl: "templates/wallet/view_wallet_tx_error.html",
            controller: 'WalletTxErrorCtrl'
          }
        },
        data: {
          login: true
        }
      })
    ;
  }])

  .controller('WalletCtrl', WalletController)

  .controller('WalletTxCtrl', WalletTxController)

  .controller('WalletTxErrorCtrl', WalletTxErrorController)

  .controller('WalletSecurityModalCtrl', WalletSecurityModalController)
;

function WalletController($scope, $rootScope, $q, $ionicPopup, $timeout, $state, $translate, $ionicPopover, $location,
                          UIUtils, Modals, csPopovers, BMA, csConfig, csSettings, csWallet, csHelp) {
  'ngInject';

  $scope.loading = true;
  $scope.settings = csSettings.data;
  $scope.qrcodeId = 'qrcode-wallet-' + $scope.$id;

  var wallet;

  $scope.enter = function(e, state) {
    $scope.loading = $scope.loading || (state.stateParams && state.stateParams.refresh);
    $scope.enableSelectWallet = csWallet.children.count() > 0;
    if ($scope.loading) { // load once
      wallet = (state.stateParams && state.stateParams.id) ? csWallet.children.get(state.stateParams.id) : csWallet;
      if (!wallet) {
        UIUtils.alert.error('ERROR.UNKNOWN_WALLET_ID');
        return $scope.showHome();
      }

      $scope.isDefaultWallet = wallet.isDefault();
      $scope.walletId = wallet.id;

      $scope.cleanLocationHref(state);

      return $scope.load();
    }
    else {
      // update view (to refresh avatar + plugin data, such as profile, subscriptions...)
      UIUtils.loading.hide();
      $timeout($scope.updateView, 300);
    }
  };
  $scope.$on('$ionicView.enter', $scope.enter);

  $scope.load = function() {
    if (!wallet) return;

    return wallet.login()
      .then(function(walletData) {
        $scope.formData = walletData;
        $scope.loading=false; // very important, to avoid TX to be display before wallet.currentUd is loaded
        $scope.updateView();
        $scope.showQRCode();
        $scope.showHelpTip();
        $scope.addListeners();
        UIUtils.loading.hide(); // loading could have be open (e.g. new account)
      })
      .catch(function(err){
        if (err == 'CANCELLED') {
          $scope.showHome();
        }
      });
  };

  $scope.updateView = function() {
    $scope.motion.show({selector: '#wallet .item'});
    $scope.$broadcast('$$rebind::' + 'rebind'); // force rebind
  };


  $scope.setRegisterForm = function(registerForm) {
    $scope.registerForm = registerForm;
  };

  // Clean controller data when logout
  $scope.onWalletLogout = function() {
    // clean QRcode
    $scope.hideQRCode();
    $scope.removeListeners();
    delete $scope.formData;
    wallet = null;
    $scope.loading = true;
  };

  $scope.addListeners = function() {
    $scope.listeners = [
      // Reset the view on logout
      wallet.api.data.on.logout($scope, $scope.onWalletLogout),

      // Listen new events (can appears from security wizard also)
      $scope.$watchCollection('formData.events', function(newEvents, oldEvents) {
        if (!oldEvents || $scope.loading || angular.equals(newEvents, oldEvents)) return;
        $scope.updateView();
      })
    ];
  };

  $scope.removeListeners = function() {
    _.forEach($scope.listeners, function(remove){
      remove();
    });
    $scope.listeners = [];
  };

  // Ask uid
  $scope.showUidPopup = function() {
    return $q(function(resolve, reject) {
      $translate(['ACCOUNT.NEW.TITLE', 'ACCOUNT.POPUP_REGISTER.TITLE', 'ACCOUNT.POPUP_REGISTER.HELP', 'COMMON.BTN_OK', 'COMMON.BTN_CANCEL'])
        .then(function (translations) {
          $scope.formData.newUid = (!!$scope.formData.uid ? ''+$scope.formData.uid : '');

          // Choose UID popup
          $ionicPopup.show({
            templateUrl: 'templates/wallet/popup_register.html',
            title: translations['ACCOUNT.POPUP_REGISTER.TITLE'],
            subTitle: translations['ACCOUNT.POPUP_REGISTER.HELP'],
            scope: $scope,
            buttons: [
              { text: translations['COMMON.BTN_CANCEL'] },
              {
                text: translations['COMMON.BTN_OK'],
                type: 'button-positive',
                onTap: function(e) {
                  $scope.registerForm.$submitted=true;
                  if(!$scope.registerForm.$valid || !$scope.formData.newUid) {
                    //don't allow the user to close unless he enters a uid
                    e.preventDefault();
                  } else {
                    return $scope.formData.newUid;
                  }
                }
              }
            ]
          })
          .then(function(uid) {
            if (!uid) { // user cancel
              delete $scope.formData.uid;
              UIUtils.loading.hide();
              return;
            }
            resolve(uid);
          });
        });
      });
  };

  // Send self identity
  $scope.self = function() {
    $scope.hideActionsPopover();

    return $scope.showUidPopup()
    .then(function(uid) {
      UIUtils.loading.show();

      return wallet.self(uid)
      .then(function() {
        $scope.updateView();
        UIUtils.loading.hide();
      })
      .catch(function(err){
         UIUtils.onError('ERROR.SEND_IDENTITY_FAILED')(err)
         .then(function() {
           $scope.self(); // loop
         });
      });
    });
  };

  $scope.doMembershipIn = function(retryCount) {
    return wallet.membership.inside()
      .then(function() {
        $scope.updateView();
        UIUtils.loading.hide();
      })
      .catch(function(err) {
        if (err == 'CANCELLED') throw err;
        if (err && err.ucode != BMA.errorCodes.MEMBERSHIP_ALREADY_SEND) return;
        if (!retryCount || retryCount <= 2) {
          return $timeout(function() {
            $scope.doMembershipIn(retryCount ? retryCount+1 : 1);
          }, 1000);
        }
        throw err;
      });
  };


  // Send membership IN
  $scope.membershipIn = function(keepSelf) {
    $scope.hideActionsPopover();

    if (wallet.isMember()) {
      return UIUtils.alert.info("INFO.NOT_NEED_MEMBERSHIP");
    }

    // Select uid (or reuse it)
    return ((keepSelf && !!$scope.formData.blockUid) ?
        $q.when($scope.formData.uid) :
        $scope.showUidPopup())

      // Ask user confirmation
      .then(function(uid) {
        return UIUtils.alert.confirm("CONFIRM.MEMBERSHIP")
          .then(function(confirm) {
            if (!confirm) throw 'CANCELLED';
            return uid;
          });
      })

      // Send self (identity) - if need
      .then(function (uid) {
        UIUtils.loading.show();

        // If uid changed, or self blockUid not retrieve : do self() first
        if (!$scope.formData.blockUid || uid != $scope.formData.uid) {
          $scope.formData.blockUid = null;
          $scope.formData.uid = uid;

          return wallet.self(uid, false/*do NOT load membership here*/);
        }
      })

      // Send membership
      .then($scope.doMembershipIn)
      .catch(function(err) {
        if (err == 'CANCELLED') return;
        if (!wallet.data.uid) {
          UIUtils.onError('ERROR.SEND_IDENTITY_FAILED')(err);
        }
        else {
          UIUtils.onError('ERROR.SEND_MEMBERSHIP_IN_FAILED')(err);
        }
      });
  };

  // Send membership OUT
  $scope.membershipOut = function(confirm, confirmAgain) {
    $scope.hideActionsPopover();

    // Ask user confirmation
    if (!confirm) {
      return UIUtils.alert.confirm('CONFIRM.MEMBERSHIP_OUT', 'CONFIRM.POPUP_WARNING_TITLE', {
        cssClass: 'warning',
        okText: 'COMMON.BTN_YES',
        okType: 'button-assertive'
      })
      .then(function(confirm) {
        if (confirm) $scope.membershipOut(true); // loop with confirmation
      });
    }

    if (!confirmAgain) {
      return UIUtils.alert.confirm("CONFIRM.MEMBERSHIP_OUT_2", 'CONFIRM.POPUP_TITLE', {
        cssClass: 'warning',
        okText: 'COMMON.BTN_YES',
        okType: 'button-assertive'
      })
      .then(function (confirm) {
        if (confirm) $scope.membershipOut(true, true); // loop with all confirmations
      });
    }

    UIUtils.loading.show();
    return wallet.membership.out()
      .then(function() {
        UIUtils.loading.hide();
        UIUtils.toast.show('INFO.MEMBERSHIP_OUT_SENT');
    })
    .catch(UIUtils.onError('ERROR.SEND_MEMBERSHIP_OUT_FAILED'));
  };

  // Updating wallet data
  $scope.doUpdate = function(silent) {
    console.debug('[wallet] Refreshing data...');
    return (silent ?
        wallet.refreshData() :
        UIUtils.loading.show()
          .then(wallet.refreshData)
          .then(UIUtils.loading.hide)
      )
      .then($scope.updateView)
      .catch(UIUtils.onError('ERROR.REFRESH_WALLET_DATA'));
  };

  /**
   * Renew membership
   */
  $scope.renewMembership = function(confirm) {

    if (!$scope.formData.isMember && !$scope.formData.requirements.wasMember) {
      return UIUtils.alert.error("ERROR.ONLY_MEMBER_CAN_EXECUTE_THIS_ACTION");
    }
    if (!confirm && !$scope.formData.requirements.needRenew) {
      return $translate("CONFIRM.NOT_NEED_RENEW_MEMBERSHIP", {membershipExpiresIn: $scope.formData.requirements.membershipExpiresIn})
        .then(function(message) {
          return UIUtils.alert.confirm(message);
        })
        .then(function(confirm) {
          if (confirm) $scope.renewMembership(true); // loop with confirm
        });
    }

    return wallet.auth({minData: true}) // Ask user to auth, before confirmation - fix #508
      .then(function() {
        UIUtils.loading.hide();
        return UIUtils.alert.confirm("CONFIRM.RENEW_MEMBERSHIP");
      })
      .then(function(confirm) {
        if (confirm) {
          UIUtils.loading.show();
          return $scope.doMembershipIn();
        }
      })
      .catch(function(err){
        if (err == 'CANCELLED') return;
        UIUtils.loading.hide();
        UIUtils.alert.error(err);
      });
  };


  /**
   * Fix identity (e.g. when identity expired)
   */
  $scope.fixIdentity = function() {
    if (!$scope.formData.uid) return;

    return $q.all([
      wallet.auth(),
      $translate('CONFIRM.FIX_IDENTITY', {uid: $scope.formData.uid})
    ])
      .then(function(res) {
        return UIUtils.alert.confirm(res[1]);
      })
      .then(function(confirm) {
        if (!confirm) return;
        UIUtils.loading.show();
        // Reset self data
        $scope.formData.blockUid = null;
        // Reset membership data
        $scope.formData.sigDate = null;
        return wallet.self($scope.formData.uid);
      })
      .then($scope.doMembershipIn)
      .catch(function(err){
        if (err == 'CANCELLED') return;
        UIUtils.loading.hide();
        UIUtils.alert.error(err);
      });
  };

  /**
   * Fix membership, when existing MS reference an invalid block
   */
  $scope.fixMembership = function() {
    if (!$scope.formData.uid) return;

    if (wallet.isMember()) {
      return UIUtils.alert.info("INFO.NOT_NEED_MEMBERSHIP");
    }

    $scope.hideActionsPopover();

    return wallet.auth({silent: true})
      .then(function() {
        UIUtils.alert.confirm("CONFIRM.FIX_MEMBERSHIP");
      })
      .then(function(confirm) {
        if (!confirm) return;
        UIUtils.loading.show();
        // Reset self data
        $scope.formData.blockUid = null;
        // Reset membership data
        $scope.formData.sigDate = null;
        return wallet.self($scope.formData.uid, false/*do NOT load membership here*/);
      })
      .then($scope.doMembershipIn)
      .catch(function(err){
        if (err == 'CANCELLED') return;
        UIUtils.loading.hide();
        UIUtils.alert.error(err);
      });
  };

  /**
   * Catch click for quick fix
   * @param fix
   */
  $scope.doQuickFix = function(event) {
    if (event == 'renew') {
      $scope.renewMembership();
    }
    else if (event == 'membership') {
      $scope.membershipIn(true/*keep self*/);
    }
    else if (event == 'fixMembership') {
      $scope.fixMembership();
    }
    else if (event == 'fixIdentity') {
      $scope.fixIdentity();
    }
  };

  /* -- UI actions -- */

  var inheritedLogout = $scope.logout;
  $scope.logout = function(options) {
    if ($scope.isDefaultWallet) {
      return inheritedLogout(options);
    }
  };

  $scope.startWalletTour = function() {
    $scope.hideActionsPopover();
    return csHelp.wallet.tour();
  };

  $scope.showHelpTip = function() {
    return csHelp.wallet.helptip();
  };

  $scope.showQRCode = function(timeout) {
    if (!$scope.qrcode) {
      $scope.qrcode = new QRCode(
        $scope.qrcodeId,
        {
          text: $scope.formData.pubkey,
          width: 200,
          height: 200,
          correctLevel: QRCode.CorrectLevel.L
        });
      UIUtils.motion.toggleOn({selector: '#'+$scope.qrcodeId}, timeout || 1100);
    }
    else {
      $scope.qrcode.clear();
      $scope.qrcode.makeCode($scope.formData.pubkey);
      UIUtils.motion.toggleOn({selector: '#'+$scope.qrcodeId}, timeout || 1100);
    }
  };

  $scope.hideQRCode = function() {
    if ($scope.qrcode) {
      $scope.qrcode.clear();
      UIUtils.motion.toggleOff({selector: '#'+$scope.qrcodeId});
    }
  };

  $scope.showCertifications = function() {
    // Warn: do not use a simple link here (a ng-click is mandatory for help tour)
    if ($scope.isDefaultWallet) {
      $state.go(UIUtils.screen.isSmall() ? 'app.wallet_cert' : 'app.wallet_cert_lg', {
        type: 'received'
      });
    }
    else {
      $state.go(UIUtils.screen.isSmall() ? 'app.wallet_cert_by_id' : 'app.wallet_cert_by_id_lg', {
        id: $scope.walletId,
        type: 'received'
      });
    }
  };

  $scope.showGivenCertifications = function() {
    // Warn: do not use a simple link here (a ng-click is mandatory for help tour)
    if ($scope.isDefaultWallet) {
      $state.go(UIUtils.screen.isSmall() ? 'app.wallet_cert' : 'app.wallet_cert_lg', {
        type: 'given'
      });
    }
    else {
      $state.go(UIUtils.screen.isSmall() ? 'app.wallet_cert_by_id' : 'app.wallet_cert_by_id_lg', {
        id: $scope.walletId,
        type: 'given'
      });
    }
  };

  $scope.showTxHistory = function() {
    $state.go($scope.isDefaultWallet ? 'app.view_wallet_tx' : 'app.view_wallet_tx_by_id', {
      id: $scope.walletId
    });
  };

  /* -- modals -- */

  // Transfer
  $scope.showTransferModal = function() {
    var hasCredit = (!!$scope.formData.balance && $scope.formData.balance > 0);
    if (!hasCredit && !csWallet.children.count()) {
      UIUtils.alert.info('INFO.NOT_ENOUGH_CREDIT');
      return;
    }
    return Modals.showTransfer({wallet: wallet.id})
      .then(function(done){
        if (done) {
          UIUtils.toast.show('INFO.TRANSFER_SENT');
          $scope.$broadcast('$$rebind::' + 'balance'); // force rebind balance
          $scope.motion.show({selector: '.item-pending'});
        }
      });
  };

  $scope.showSecurityModal = function(){
    $scope.hideActionsPopover();
    return Modals.showAccountSecurity({wallet: wallet})
      .then(function(res) {
        if (!res) return;

        if (res === 'self') {
          return $scope.self();
        }
        else if (res === 'membershipIn') {
          return $scope.membershipIn();
        }
      });
  };

  $scope.showSelectIdentitiesModal = function(){
    $scope.hideActionsPopover();

    return Modals.showSelectPubkeyIdentity({
        identities: [$scope.formData.requirements].concat($scope.formData.requirements.alternatives)
      })
      .then(function(idty) {
        if (!idty || !idty.uid) return;

        $scope.loading = true;

        // Set self (= uid + blockUid)
        return wallet.setSelf(idty.uid, idty.blockUid)
          .then(function() {
            $scope.loading=false;
            $scope.updateView();
            UIUtils.loading.hide();
          });
      });
  };


  /* -- popovers -- */

  $scope.showActionsPopover = function(event) {
    if (!$scope.actionsPopover) {
      $ionicPopover.fromTemplateUrl('templates/wallet/popover_actions.html', {
        scope: $scope
      }).then(function(popover) {
        $scope.actionsPopover = popover;
        //Cleanup the popover when we're done with it!
        $scope.$on('$destroy', function() {
          $scope.actionsPopover.remove();
        });
        $scope.actionsPopover.show(event);
      });
    }
    else {
      $scope.actionsPopover.show(event);
    }
  };

  $scope.hideActionsPopover = function() {
    if ($scope.actionsPopover) {
      $scope.actionsPopover.hide();
    }
  };

  $scope.showSharePopover = function(event) {
    $scope.hideActionsPopover();

    var title = $scope.formData.name || $scope.formData.uid || $scope.formData.pubkey;
    // Use shareBasePath (fix #530) or rootPath (fix #390)
    var url = (csConfig.shareBaseUrl || $rootScope.rootPath) + $state.href('app.wot_identity', {pubkey: $scope.formData.pubkey, uid: $scope.formData.name || $scope.formData.uid});

    // Override default position, is small screen - fix #545
    if (UIUtils.screen.isSmall()) {
      event = angular.element(document.querySelector('#wallet-share-anchor')) || event;
    }

    UIUtils.popover.share(event, {
      bindings: {
        url: url,
        titleKey: 'WOT.VIEW.POPOVER_SHARE_TITLE',
        titleValues: {title: title},
        postMessage: title
      }
    });
  };

  $scope.showSelectWalletPopover = function(event) {
    return csPopovers.showSelectWallet(event, {
        scope: $scope
      })
      .then(function(newWallet) {
        if (!newWallet || newWallet.id === wallet.id) return;
        if (newWallet.isDefault()) {
          return $state.go('app.view_wallet');
        }
        return $state.go('app.view_wallet_by_id', {id: newWallet.id});
      });
  };

  // remove '?refresh' from the location URI
  $scope.cleanLocationHref = function(state) {
    if (state && state.stateParams && state.stateParams.refresh) {
      $timeout(function() {
        var stateParams = angular.copy(state.stateParams);
        delete stateParams.refresh;
        delete stateParams.id;
        $location.search(stateParams).replace();
      }, 300);
    }
  };
}


function WalletTxController($scope, $ionicPopover, $state, $timeout, $location,
                            UIUtils, Modals, csPopovers, BMA, csSettings, csCurrency, csWallet, csTx) {
  'ngInject';

  $scope.loading = true;
  $scope.settings = csSettings.data;
  $scope.listeners = [];

  var wallet;

  $scope.enter = function(e, state) {
    $scope.loading = $scope.loading || (state.stateParams && state.stateParams.refresh);
    $scope.enableSelectWallet = csWallet.children.count() > 0;
    if ($scope.loading) {

      wallet = (state.stateParams && state.stateParams.id) ? csWallet.children.get(state.stateParams.id) : csWallet;
      if (!wallet) {
        UIUtils.alert.error('ERROR.UNKNOWN_WALLET_ID');
        return $scope.showHome();
      }

      $scope.cleanLocationHref(state);

      return $scope.load();
    }
    else {
      $scope.addListeners();
      // Make sure to display new pending (e.g. sending using another screen button)
      $timeout($scope.updateView, 300);
    }
  };
  $scope.$on('$ionicView.enter', $scope.enter);

  $scope.leave = function() {
    $scope.removeListeners();
  };
  $scope.$on('$ionicView.leave', $scope.leave);

  $scope.load = function() {
    if (!wallet) return;

    var hasMinData = wallet.isDataLoaded({minData: true});
    var options = {
      requirements: !hasMinData, // load requirements (=minData) once
      minData: !hasMinData,
      sources: true,
      tx: {
        enable: true
      }
    };

    return wallet.login(options)
      .then(function(walletData) {
        $scope.formData = walletData;
        $scope.loading = false; // very important, to avoid TX to be display before wallet.currentUd is loaded
        $scope.updateView();
        $scope.showFab('fab-transfer');
        $scope.showHelpTip();
        $scope.addListeners();
        UIUtils.loading.hide(); // loading could have be open (e.g. during login phase)
      })
      .catch(function(err){
        if (err == 'CANCELLED') {
          $scope.showHome();
        }
      });
  };

  // remove '?refresh' from the location URI
  $scope.cleanLocationHref = function(state) {
    if (state && state.stateParams && state.stateParams.refresh) {
      $timeout(function() {
        var stateParams = angular.copy(state.stateParams);
        delete stateParams.refresh;
        delete stateParams.id;
        $location.search(stateParams).replace();
      }, 300);
    }
  };

  // Update view
  $scope.updateView = function() {
    if (!$scope.formData || $scope.loading) return;
    $scope.$broadcast('$$rebind::' + 'balance'); // force rebind balance
    $scope.$broadcast('$$rebind::' + 'rebind'); // force rebind
    $scope.motion.show({selector: '.view-wallet-tx .item', ink: false});
  };

  $scope.downloadHistoryFile = function(options) {
    options = options || {};
    options.fromTime = options.fromTime || -1; // default: full history
    var pubkey = $scope.formData.pubkey;
    csTx.downloadHistoryFile(pubkey, options);
  };

  // Updating wallet data
  $scope.doUpdate = function(silent) {
    console.debug('[wallet] TX history reloading...');
    var options = {
      sources: true,
      tx:  {
        enable: true
      },
      api: false
    };
    return (silent ?
        // If silent: just refresh
        wallet.refreshData(options) :
        // If not silent: show/hide loading indicator
        UIUtils.loading.show()
          .then(function() {
            return wallet.refreshData(options);
          })
          .then(UIUtils.loading.hide)
      )
      .then($scope.updateView)
      .catch(UIUtils.onError('ERROR.REFRESH_WALLET_DATA'));
  };

  /* -- add listeners -- */

  $scope.addListeners = function() {
    $scope.listeners = [
      // Reload if wallet balanced changed
      wallet.api.data.on.balanceChanged($scope, $scope.updateView),
      // Reload if useRelative changed
      $scope.$watch('settings.useRelative', $scope.updateView, true),
      // Reload if showUDHistory changed
      $scope.$watch('settings.showUDHistory', function(newVal, oldVal) {
        if (!$scope.formData || $scope.loading || (newVal === oldVal)) return;
        $scope.doUpdate();
      }, true)
    ];

    // Listening new block (if auto refresh enable)
    if ($scope.settings.walletHistoryAutoRefresh) {
      $scope.listeners.push(
        csCurrency.api.data.on.newBlock($scope, function(block) {
          if ($scope.loading) return;
          console.debug("[wallet] Received new block. Will reload history.");
          $timeout(function() {
            $scope.doUpdate(true);
          }, 500/*waiting for block propagation*/);
        })
      );
    }
  };

  $scope.removeListeners = function() {
    _.forEach($scope.listeners, function(remove){
      remove();
    });
    $scope.listeners = [];
  };

  /* -- popup / UI -- */

  // Transfer
  $scope.showTransferModal = function() {
    var hasCredit = (!!$scope.formData.balance && $scope.formData.balance > 0);
    if (!hasCredit && !csWallet.children.count()) {
      UIUtils.alert.info('INFO.NOT_ENOUGH_CREDIT');
      return;
    }
    return Modals.showTransfer({wallet: wallet.id})
      .then(function(done){
        if (done) {
          UIUtils.toast.show('INFO.TRANSFER_SENT');
          $scope.$broadcast('$$rebind::' + 'balance'); // force rebind balance
          $scope.motion.show({selector: '.item-pending'});
        }
      });
  };

  $scope.showHelpTip = function(index, isTour) {
    // TODO
  };

  $scope.showTxErrors = function(event) {
    if (wallet.isDefault()) {
      return $scope.goState('app.view_wallet_tx_errors');
    }
    return $scope.goState('app.view_wallet_tx_errors_by_id', {id: wallet.id});
  };

  $scope.showMoreTx = function(fromTime) {

    fromTime = fromTime ||
      ($scope.formData.tx.fromTime - csSettings.data.walletHistoryTimeSecond) ||
      (Math.trunc(new Date().getTime() / 1000) - 2 * csSettings.data.walletHistoryTimeSecond);

    UIUtils.loading.show();
    return wallet.refreshData({tx: {enable: true,fromTime: fromTime}})
      .then(function() {
        $scope.updateView();
        UIUtils.loading.hide();
      })
      .catch(function(err) {
        // If http rest limitation: wait then retry
        if (err.ucode == BMA.errorCodes.HTTP_LIMITATION) {
          $timeout(function() {
            return $scope.showMoreTx(fromTime);
          }, 2000);
        }
        else {
          UIUtils.onError('ERROR.REFRESH_WALLET_DATA')(err);
        }
      });
  };

  $scope.showSelectWalletModal = function() {
    if (!csWallet.children.count()) return;

    return Modals.showSelectWallet({
      showDefault: true,
      showBalance: false
    })
    .then(function(newWallet) {
      if (!newWallet || wallet && newWallet.id === wallet.id) return;
      $scope.removeListeners();
      $scope.loading = true;
      wallet = newWallet;
      console.debug("[transfer] Using wallet {" + wallet.id + "}");
      $scope.formData = {};
      return $scope.load();
    });
  };

  /* -- popover -- */

  var paddingIndent = 10;

  $scope.toUnlockUIArray = function(unlockTreeItem, leftPadding, operator) {
    leftPadding = leftPadding || 0;

    // If operator (AND, OR)
    if (unlockTreeItem.children && (unlockTreeItem.type == 'AND' || unlockTreeItem.type == 'OR')) {
      return unlockTreeItem.children.reduce(function(res, child, index){
        if (child.children && index > 0) {
          // Add space between expression block
          res = res.concat({
            style: {
              'padding-left': leftPadding + 'px',
              'padding-top': '10px',
              'padding-bottom': '10px'
            },
            operator: unlockTreeItem.type
          });

          return res.concat($scope.toUnlockUIArray(child, leftPadding + paddingIndent));
        }
        return res.concat($scope.toUnlockUIArray(child, leftPadding + paddingIndent, index && unlockTreeItem.type));
      }, []);
    }

    return {
      style: {
        'padding-left': leftPadding + 'px'
      },
      operator: operator,
      type: unlockTreeItem.type,
      value: unlockTreeItem.value
    };
  };

  $scope.showLockedOutputsPopover = function(tx, event) {
    if (!tx.lockedOutputs) return;

    // Convert condition into UI array
    $scope.popoverData = $scope.popoverData || {};
    $scope.popoverData.lockedOuputs = tx.lockedOutputs.reduce(function(res, lockedOutput){
      return res.concat({
        amount: lockedOutput.amount,
        unlockFunctions: lockedOutput.unlockFunctions,
        unlockConditions: $scope.toUnlockUIArray(lockedOutput.unlockTree)
      });
    }, []);

    // Open popover
    if (!$scope.lockedOutputsPopover) {
      $ionicPopover.fromTemplateUrl('templates/wallet/tx_locked_outputs_popover.html', {
        scope: $scope
      }).then(function(popover) {
        $scope.lockedOutputsPopover = popover;
        //Cleanup the popover when we're done with it!
        $scope.$on('$destroy', function() {
          $scope.lockedOutputsPopover.remove();
        });
        $scope.lockedOutputsPopover.show(event);
      });
    }
    else {
      $scope.lockedOutputsPopover.show(event);
    }
  };

  $scope.hideLockedOutputsPopover = function() {
    if ($scope.lockedOutputsPopover) {
      $scope.lockedOutputsPopover.hide();
      if ($scope.popoverData) {
        delete $scope.popoverData.unlockConditions;
      }
    }
  };

  $scope.showSelectWalletPopover = function(event) {
    return csPopovers.showSelectWallet(event, {
      scope: $scope
    })
      .then(function(newWallet) {
        if (!newWallet || newWallet.id === wallet.id) return;
        if (newWallet.isDefault()) {
          return $scope.goState('app.view_wallet_tx');
        }
        return $scope.goState('app.view_wallet_tx_by_id', {id: newWallet.id});
      });
  };

  $scope.goState = function(stateName, stateParams) {
    $scope.hideLockedOutputsPopover();
    return $state.go(stateName, stateParams);
  };
}

function WalletTxErrorController($scope, UIUtils, csSettings, csWallet) {
  'ngInject';

  var wallet;
  $scope.settings = csSettings.data;
  $scope.loading = true;
  $scope.formData = {};

  $scope.$on('$ionicView.enter', function(e, state) {

    wallet = (state.stateParams && state.stateParams.id) ? csWallet.children.get(state.stateParams.id) : csWallet;
    if (!wallet) {
      UIUtils.alert.error('ERROR.UNKNOWN_WALLET_ID');
      return $scope.showHome();
    }

    return $scope.load();
  });

  $scope.load = function() {
    if (!wallet) return;

    return wallet.login()
      .then(function(walletData) {
        $scope.formData = walletData;
        $scope.loading = false;
        $scope.doMotion();
        //$scope.showFab('fab-redo-transfer');
        UIUtils.loading.hide();
      });
  };

  // Updating wallet data
  $scope.doUpdate = function(silent) {

    $scope.loading = true;
    return (silent ?
        wallet.refreshData() :
        UIUtils.loading.show()
          .then(csWallet.refreshData)
          .then(UIUtils.loading.hide)
      )
      .then(function() {
        $scope.doMotion();
        $scope.loading = false;
      })
      .catch(function(err) {
        UIUtils.onError('ERROR.REFRESH_WALLET_DATA')(err);
        $scope.loading = false;
      });
  };

  $scope.filterReceivedTx = function(tx){
    return tx.amount && tx.amount > 0;
  };

  $scope.filterSentTx = function(tx){
    return tx.amount && tx.amount < 0;
  };

  $scope.hasReceivedTx = function(){
    return $scope.formData.tx && !!_($scope.formData.tx.errors || []).find($scope.filterReceivedTx);
  };

  $scope.hasSentTx = function(){
    return $scope.formData.tx && !!_($scope.formData.tx.errors || []).find($scope.filterSentTx);
  };

}

function WalletSecurityModalController($scope, UIUtils, csWallet, $translate, parameters){

  var wallet = parameters && parameters.wallet || csWallet;

  $scope.slides = {
    slider: null,
    options: {
      loop: false,
      effect: 'slide',
      speed: 500
    }
  };
  $scope.isLastSlide = false;
  $scope.smallscreen = UIUtils.screen.isSmall();

  $scope.recover = {};
  $scope.isValidFile = false;


  $scope.login = wallet.isLogin();
  $scope.hasSelf = wallet.hasSelf();
  $scope.needSelf = $scope.login && wallet.data.requirements.needSelf;
  $scope.canRevoke = $scope.login && $scope.hasSelf && !wallet.data.requirements.revoked;
  $scope.needMembership = $scope.login && wallet.data.requirements.needMembership;
  $scope.option = $scope.login ? 'saveID' : 'recoverID';

  $scope.formData = {
    addQuestion: '',
    level: '4',
    questions : []
  };
  var questions = [];
  for (var i = 1; i<20; i++) {
    questions.push('ACCOUNT.SECURITY.QUESTION_' + i.toString());
  }
  $translate(questions)
    .then(function(translations){
      _.each(translations, function(translation){
        $scope.formData.questions.push({value: translation , checked: false});
      });
    });


  $scope.slidePrev = function() {
    $scope.slides.slider.unlockSwipes();
    $scope.slides.slider.slidePrev();
    $scope.slides.slider.lockSwipes();
    $scope.isLastSlide = false;

  };

  $scope.slideNext = function() {
    $scope.slides.slider.unlockSwipes();
    $scope.slides.slider.slideNext();
    $scope.slides.slider.lockSwipes();
    $scope.isLastSlide = ($scope.slides.slider.activeIndex === 3 && ($scope.option == "saveID" || $scope.option == "recoverID")) || ($scope.slides.slider.activeIndex === 2 && $scope.option == "revocation");
  };


  $scope.doNext = function(formName) {
    if (!formName) {
      switch ($scope.slides.slider.activeIndex) {
        case 1:
          switch ($scope.option) {
            case "saveID":
              formName = "questionsForm";
              break;
            case "recoverID":
              if ($scope.isValidFile) {
                $scope.slideNext();
                $scope.hasContent = false;
                $scope.fileData = '';

              }
              else {
                UIUtils.alert.error("ERROR.NOT_VALID_SAVE_ID_FILE", "ERROR.LOAD_FILE_FAILED");
              }
              break;
          }
          break;

        case 2:
          switch ($scope.option) {
            case "recoverID":
              formName = "recoverForm";
              break;
            case "saveID":
              formName = "answersForm";
              break;
          }
      }
    }

    if (formName) {
      $scope[formName].$submitted = true;
      if (!$scope[formName].$valid) {
        return;
      }
      switch (formName) {
        case "recoverForm":
          $scope.recoverId();
          break;
        case "answersForm":
          $scope.downloadSaveIDFile();
          break;
        default:
          $scope.slideNext();
      }
    }
  };

  $scope.selectOption = function(option){
    $scope.option = option;
    $scope.slideNext();
  };

  $scope.restore = function(){
    if ($scope.slides.slider.activeIndex === 1 && $scope.option === 'saveID') {
      $scope.formData = {
        addQuestion: '',
        level: '4',
        questions: []
      };
      $translate(questions)
        .then(function (translations) {
          _.each(translations, function (translation) {
            $scope.formData.questions.push({value: translation, checked: false});
          });
        });
    }

    else if ($scope.slides.slider.activeIndex === 2 && $scope.option === 'saveID') {
      _.each($scope.formData.questions, function(question){
        question.answer = undefined;
      });
    }

    else if ($scope.slides.slider.activeIndex === 1 && $scope.option === 'recoverID'){
      $scope.hasContent = false;
      $scope.recover = {};
      $scope.fileData =  '';
      $scope.isValidFile = false;
    }

    else if ($scope.slides.slider.activeIndex === 2 && $scope.option === 'recoverID'){
      _.each($scope.recover.questions, function(element){
        element.answer = undefined;
      });
    }

    else if ($scope.slides.slider.activeIndex === 2 && $scope.option === 'revocation'){
      $scope.isValidFile = false;
      $scope.hasContent = false;
      $scope.revocation = undefined;
    }
  };

  /**
   * Recover Id
   */

  $scope.recoverContent = function(file) {
    $scope.hasContent = angular.isDefined(file) && file !== '';
    $scope.fileData = file.fileData ? file.fileData : '';
    $scope.isValidFile = $scope.fileData !== '' && $scope.fileData.type == 'text/plain';

    if ($scope.isValidFile && $scope.option === 'recoverID') {
      $scope.content = file.fileContent.split('\n');
      var indexOfQuestions = _.indexOf($scope.content, 'Questions: ');
      var LastIndexQuestions = -1;
      _.each($scope.content, function (element, index) {
        if (/^Issuer:/.test(element)) {
          LastIndexQuestions = index;
        }
        else if (/^Crypted-Nonce:/.test(element)) {
          $scope.recover.cypherNonce = element.split(' ')[1];
        }
        else if (/^Crypted-Pubkey:/.test(element)) {
          $scope.recover.cypherPubkey = element.split(' ')[1];
        }
        else if (/^Crypted-Salt:/.test(element)) {
          $scope.recover.cypherSalt = element.split(' ')[1];
        }
        else if (/^Crypted-Pwd:/.test(element)) {
          $scope.recover.cypherPwd = element.split(' ')[1];
        }
      });
      $scope.recover.questions = [];
      for (var i = indexOfQuestions + 1; i < LastIndexQuestions; i++) {
        $scope.recover.questions.push({value: $scope.content[i]});
      }
    }
    else if ($scope.isValidFile && $scope.option === "revocation"){
      $scope.revocation = file.fileContent;
    }
  };

  $scope.recoverId = function(){
    if(!$scope.recoverForm.$valid){
      return;
    }

    $scope.recover.answer = '';
    _.each($scope.recover.questions, function(element){
      $scope.recover.answer += element.answer;
    });

    return wallet.recoverId($scope.recover)
      .then(function (recover){
        if (angular.isDefined(recover)) {
          $scope.recover = recover;
          $scope.slideNext();
        }
        else {
          UIUtils.alert.error('ERROR.RECOVER_ID_FAILED');
        }
      });

  };

  /**
   * Save Id
   */
  $scope.addQuestion = function(){
    if ($scope.formData.addQuestion !== '') {
      $scope.formData.questions.push({value: $scope.formData.addQuestion, checked: true});
      $scope.formData.addQuestion = '';
    }
  };

  $scope.downloadSaveIDFile = function(){
    // Force user re-auth
    var loginData;
    return wallet.auth({
        forceAuth: true,
        expectedPubkey: $scope.pubkey,
        silent: true,
        success: function(values) {
          loginData = values;
        }
      })
      .catch(function(err) {
        if (err && err == 'CANCELLED') return;
        UIUtils.alert.error('ERROR.SALT_OR_PASSWORD_NOT_CONFIRMED', 'ERROR.LOGIN_FAILED');
        return;
      })
      .then(function(res) {
        if (!res) return;
        var file = {
          file: _.filter($scope.formData.questions, function (question) {
            return question.checked;
          })
        };
        var record = {
          salt: loginData.username,
          pwd: loginData.password,
          questions: '',
          answer: ''
        };
        _.each(file.file, function (question) {
          record.questions += question.value + '\n';
          record.answer += question.answer;
        });

        return wallet.getCryptedId(record)
          .then(function(record){
            wallet.downloadSaveId(record);
            $scope.closeModal();
          });
      })
      ;
  };

  $scope.isRequired = function(){
    var questionChecked = _.filter($scope.formData.questions, function(question) {
      return question.checked;
    });
    return questionChecked.length < $scope.formData.level;
  };

  $scope.revokeWithFile = function(){
    if ($scope.isValidFile) {
        $scope.revokeIdentity();
      }
      else {
        UIUtils.alert.error("ERROR.NOT_VALID_REVOCATION_FILE", "ERROR.LOAD_FILE_FAILED");
      }
  };

  /**
   * Download revocation file
   */
  $scope.downloadRevokeFile = function () {
    // Force re-authentication
    return wallet.auth({forceAuth: true})

      // Download file
      .then(function() {
        return wallet.downloadRevocation();
      })

      .then(function() {
        UIUtils.loading.hide();
      })

      .catch(function(err){
        if (err && err == 'CANCELLED') return;
        UIUtils.onError('ERROR.DOWNLOAD_REVOCATION_FAILED')(err);
      })
      ;

  };

  /**
   * Revoke wallet identity
   */
  $scope.revokeWalletIdentity = function () {
    if (!$scope.hasSelf) {
      return UIUtils.alert.error("ERROR.ONLY_SELF_CAN_EXECUTE_THIS_ACTION");
    }

    // Make sure user re-auth
    return wallet.auth({forceAuth: true})
      .then(function(confirm) {
        UIUtils.loading.hide();
        if (!confirm) return;
        return $scope.revokeIdentity();
      })
      .catch(function (err) {
        if (err == 'CANCELLED') return;
        UIUtils.onError('ERROR.REVOCATION_FAILED')(err);
      });
  };

  /**
   * Revoke identity
   */
  $scope.revokeIdentity = function (confirm) {

    // Make sure user re-auth + confirm
    if (!confirm) {
        return UIUtils.alert.confirm("CONFIRM.REVOKE_IDENTITY", 'CONFIRM.POPUP_WARNING_TITLE', {
          cssClass: 'warning',
          okText: 'COMMON.BTN_YES',
          okType: 'button-assertive'
        })
        .then(function (confirm) {
          if (!confirm) return;
          return UIUtils.alert.confirm("CONFIRM.REVOKE_IDENTITY_2", 'CONFIRM.POPUP_TITLE', {
            cssClass: 'warning',
            okText: 'COMMON.BTN_YES',
            okType: 'button-assertive'
          });
        })
        .then(function (confirm) {
          if (confirm) $scope.revokeIdentity(true, true); // loop with confirmation
        });
    }

    return UIUtils.loading.show()
      .then(function () {
        if (!$scope.revocation){
          return wallet.revoke();
        }
        else {
          return wallet.revokeWithFile($scope.revocation);
        }
      })
      .then(function () {
        UIUtils.toast.show("INFO.REVOCATION_SENT");
        $scope.closeModal();
        return UIUtils.loading.hide();
      })
      .catch(UIUtils.onError('ERROR.REVOCATION_FAILED'));
  };


  /**
   * Ask self (= send identity)
   */
  $scope.self = function () {
    return $scope.closeModal('self');
  };

  /**
   * Ask membership in
   */
  $scope.membershipIn = function () {
    return $scope.closeModal('membershipIn');
  };

  /**
   * Generate keyfile
   */
  $scope.downloadKeyFile = function (format) {
    // Force re-authentication
    return wallet.auth({forceAuth: true})

    // Download file
      .then(function() {
        return wallet.downloadKeyFile(format);
      })

      .then(function() {
        UIUtils.loading.hide();
        return $scope.closeModal();
      })

      .catch(function(err){
        if (err && err === 'CANCELLED') {
          UIUtils.loading.hide();
          return;
        }
        UIUtils.onError('ERROR.DOWNLOAD_KEYFILE_FAILED')(err);
      })
      ;
  };
}


WalletListController.$inject = ['$scope', '$controller', '$state', '$timeout', '$q', '$translate', '$ionicPopover', '$ionicPopup', 'UIUtils', 'Modals', 'csCurrency', 'csSettings', 'csWallet'];
WalletSelectModalController.$inject = ['$scope', '$q', '$timeout', 'UIUtils', 'filterTranslations', 'csSettings', 'csCurrency', 'csWallet', 'parameters'];
PopoverWalletSelectModalController.$inject = ['$scope', '$controller', 'UIUtils'];angular.module('cesium.wallets.controllers', ['cesium.services', 'cesium.currency.controllers'])

  .config(['$stateProvider', function($stateProvider) {
    'ngInject';
    $stateProvider

      .state('app.view_wallets', {
        url: "/wallets",
        views: {
          'menuContent': {
            templateUrl: "templates/wallet/list/view_wallets.html",
            controller: 'WalletListCtrl'
          }
        },
        data: {
          login: true
        }
      })

      .state('app.view_wallet_by_id', {
        url: "/wallets/:id?refresh",
        views: {
          'menuContent': {
            templateUrl: "templates/wallet/view_wallet.html",
            controller: 'WalletCtrl'
          }
        },
        data: {
          login: true,
          silentLocationChange: true
        }
      })

      .state('app.view_wallet_tx_by_id', {
        url: "/history/wallets/:id?refresh",
        views: {
          'menuContent': {
            templateUrl: "templates/wallet/view_wallet_tx.html",
            controller: 'WalletTxCtrl'
          }
        },
        data: {
          login: true,
          silentLocationChange: true
        }
      })

      .state('app.view_wallet_tx_errors_by_id', {
        url: "/history/wallets/:id/errors",
        views: {
          'menuContent': {
            templateUrl: "templates/wallet/view_wallet_tx_error.html",
            controller: 'WalletTxErrorCtrl'
          }
        },
        data: {
          login: true
        }
      })
    ;
  }])


  .controller('WalletListCtrl', WalletListController)

  .controller('WalletSelectModalCtrl', WalletSelectModalController)

  .controller('PopoverWalletSelectModalCtrl', PopoverWalletSelectModalController)
;

function WalletListController($scope, $controller, $state, $timeout, $q, $translate, $ionicPopover, $ionicPopup,
                              UIUtils, Modals, csCurrency, csSettings, csWallet){
  'ngInject';

  $scope.settings = csSettings.data;
  $scope.listeners = [];


  // Initialize the super class and extend it.
  angular.extend(this, $controller('WalletSelectModalCtrl', {$scope: $scope, parameters: {}}));

  // Override defaults
  $scope.formData.name = undefined;
  $scope.motion = UIUtils.motion.default;

  $scope.enter = function(e, state) {
    // First enter
    if ($scope.loading) {
      $scope.setParameters({
        showDefault: false,
        showBalance: true
      });

      return $scope.load()
        .then(function() {
          UIUtils.loading.hide();
          if (!$scope.wallets) return; // user cancel
          $scope.addListeners();
          $scope.showFab('fab-add-wallet');
        });
    }
    else {
      //$scope.addListeners();
    }
  };
  $scope.$on('$ionicView.enter', $scope.enter);

  $scope.leave = function() {
    //$scope.removeListeners();
  };
  $scope.$on('$ionicView.leave', $scope.leave);

  $scope.cancel = function() {
    $scope.showHome();
  };

  $scope.select = function(event, wallet) {
    if (event.isDefaultPrevented()) return;

    $state.go('app.view_wallet_by_id', {id: wallet.id});
  };


  $scope.editWallet = function(event, wallet) {

    event.preventDefault();

    return $scope.showEditPopup(wallet)
      .then(function(newName) {
        if (!newName) return;

        // Save changes
        return csWallet.auth({minData: true})
          .then(function() {
            wallet.data.localName = newName;
            csWallet.storeData();
            UIUtils.loading.hide();
            $scope.updateView();
          })
          .catch(function(err) {
            if (err === 'CANCELLED') {
              return UIUtils.loading.hide();
            }
            UIUtils.onError('ERROR.SAVE_WALLET_LIST_FAILED')(err);
          });
      });
  };

  /* -- modals -- */

  $scope.showNewWalletModal = function() {

    var walletId = csWallet.children.count() + 1;
    var wallet = csWallet.instance(walletId);
    return wallet.login({
      showNewAccountLink: false,
      title: 'ACCOUNT.WALLET_LIST.BTN_NEW',
      okText: 'COMMON.BTN_ADD',
      // Load data options :
      minData: true,
      sources: true,
      api: false,
      success: UIUtils.loading.show
    })
    .then(function(walletData) {
      if (!walletData) return;

      // Avoid to add main wallet again
      if (walletData.pubkey === csWallet.data.pubkey) {
        UIUtils.loading.hide();
        UIUtils.alert.error('ERROR.COULD_NOT_ADD_MAIN_WALLET');
        return;
      }

      // Make sure to auth on the main wallet
      return csWallet.auth({minData: true})
        .then(function() {
          return csWallet.api.data.raisePromise.load(wallet.data)
          // continue, when plugins extension failed (just log in console)
            .catch(console.error)
            .then(function() {
              $scope.addListenersOnWallet(wallet);
              csWallet.children.add(wallet);
              UIUtils.loading.hide();
              $scope.updateView();
            });
        })
        .catch(function(err) {
          if (err === 'CANCELLED') {
            return UIUtils.loading.hide();
          }
          UIUtils.onError('ERROR.ADD_SECONDARY_WALLET_FAILED')(err);
        });
    });
  };

  $scope.selectAndRemoveWallet = function() {
    $scope.hideActionsPopover();
    return Modals.showSelectWallet({
        wallets: $scope.wallets,
        showDefault: false
      })
      .then(function(wallet) {
        if (!wallet || !wallet.id) return;

        // Make sure to auth on the main wallet
        return csWallet.auth({minData: true})
          .then(function() {
            csWallet.children.remove(wallet.id);
            UIUtils.loading.hide();
            $scope.updateView();
          })
          .catch(function(err) {
            if (err === 'CANCELLED') {
              return UIUtils.loading.hide();
            }
            UIUtils.onError('ERROR.ADD_SECONDARY_WALLET_FAILED')(err);
          });
      });
  };

  /* -- popups -- */

  $scope.setEditForm = function(editForm) {
    $scope.editForm = editForm;
  };

  $scope.showEditPopup = function(wallet) {
    return $q(function(resolve, reject) {
      $translate(['ACCOUNT.WALLET_LIST.EDIT_POPOVER.TITLE', 'ACCOUNT.WALLET_LIST.EDIT_POPOVER.HELP', 'COMMON.BTN_OK', 'COMMON.BTN_CANCEL'])
        .then(function (translations) {
          $scope.formData.name = wallet.data.localName || wallet.data.name || wallet.data.uid || wallet.data.pubkey.substring(0, 8);

          // Choose UID popup
          $ionicPopup.show({
            templateUrl: 'templates/wallet/list/popup_edit_name.html',
            title: translations['ACCOUNT.WALLET_LIST.EDIT_POPOVER.TITLE'],
            subTitle: translations['ACCOUNT.WALLET_LIST.EDIT_POPOVER.HELP'],
            scope: $scope,
            buttons: [
              { text: translations['COMMON.BTN_CANCEL'] },
              {
                text: translations['COMMON.BTN_OK'],
                type: 'button-positive',
                onTap: function(e) {
                  $scope.editForm.$submitted=true;
                  if(!$scope.editForm.$valid || !$scope.formData.name) {
                    //don't allow the user to close unless he enters a name
                    e.preventDefault();
                  } else {
                    return $scope.formData.name;
                  }
                }
              }
            ]
          })
            .then(function(name) {
              if (!name) { // user cancel
                delete $scope.formData.name;
                UIUtils.loading.hide();
                return;
              }
              resolve(name);
            });
        });
    });
  };

  /* -- popovers -- */

  $scope.showActionsPopover = function(event) {
    if (!$scope.actionsPopover) {
      $ionicPopover.fromTemplateUrl('templates/wallet/list/popover_actions.html', {
        scope: $scope
      }).then(function(popover) {
        $scope.actionsPopover = popover;
        //Cleanup the popover when we're done with it!
        $scope.$on('$destroy', function() {
          $scope.actionsPopover.remove();
        });
        $scope.actionsPopover.show(event);
      });
    }
    else {
      $scope.actionsPopover.show(event);
    }
  };

  $scope.hideActionsPopover = function() {
    if ($scope.actionsPopover) {
      $scope.actionsPopover.hide();
    }
  };

  /* -- listeners -- */

  $scope.addListeners = function() {

    $scope.listeners =[];

    // Auto-update on new block
    if (csSettings.data.walletHistoryAutoRefresh) {
      $scope.listeners.push(
        csCurrency.api.data.on.newBlock($scope, function (block) {
          if ($scope.loading) return;
          console.debug("[wallet-list] Received new block. Will reload list.");
          $timeout(function () {
            $scope.doUpdate(true);
          }, 300/*waiting for node cache propagation*/);
        }));
    }

    // Listen auth events on each wallet
    _.forEach($scope.wallets||[], $scope.addListenersOnWallet);
  };

  $scope.addListenersOnWallet = function(wallet) {
    if (!wallet) return;
    $scope.listeners.push(wallet.api.data.on.unauth($scope, $scope.updateView));
    $scope.listeners.push(wallet.api.data.on.auth($scope, function (data, deferred) {
      $timeout($scope.updateView);
      return deferred ? deferred.resolve() : $q.when();
    }));
  };

  $scope.removeListeners = function() {
    _.forEach($scope.listeners, function(remove){
      remove();
    });
    $scope.listeners = [];
  };

  var inheritedUpdateView = $scope.updateView;
  $scope.updateView = function() {
    inheritedUpdateView();
    $scope.$broadcast('$$rebind::' + 'rebind'); // force rebind
  };

  // Detect changes in settings useRelative
  $scope.$watch('settings.useRelative', function(newVal, oldVal) {
    if (!$scope.formData || $scope.loading || (newVal === oldVal)) return;
    $scope.formData.useRelative = $scope.settings.useRelative;
    $scope.updateView();
  }, true);
}

function WalletSelectModalController($scope, $q, $timeout, UIUtils, filterTranslations, csSettings, csCurrency, csWallet, parameters){
  'ngInject';

  var loadWalletWaitTime = 500;
  $scope.loading = true;
  $scope.formData = {
    useRelative: csSettings.data.useRelative,
    showDefault: true,
    showBalance: false
  };
  $scope.motion = null; // no animation

  $scope.setParameters = function(parameters) {
    parameters = parameters || {};

    $scope.formData.useRelative = angular.isDefined(parameters.useRelative) ? parameters.useRelative : $scope.formData.useRelative;

    $scope.formData.showDefault = angular.isDefined(parameters.showDefault) ? parameters.showDefault : $scope.formData.showDefault;

    $scope.formData.showBalance = angular.isDefined(parameters.showBalance) ? parameters.showBalance : $scope.formData.showBalance;
  };

  $scope.load = function() {
    $scope.loading = true;

    // Load currency, and filter translations (need by 'formatAmount' filter)
    var jobs = [
      csCurrency.name()
        .then(function(name) {
          $scope.currency = name;
          return filterTranslations.ready();
        })
    ];

    // Get children wallets
    if (!$scope.wallets) {
      jobs.push(
        csWallet.children.all()
        .then(function(children) {
          $scope.wallets = $scope.formData.showDefault ? [csWallet].concat(children) : children;
        })
      );
    }

    // Prepare load options
    var options = {
      silent: true,
      minData: true,
      sources: $scope.formData.showBalance,
      tx: {
        enable: false
      },
      api: true
    };
    return $q.all(jobs)
      // Load wallet data (apply a timeout between each wallet)
      .then(function() {
        var counter = 0;
        return $q.all(
          $scope.wallets.reduce(function(res, wallet){
            return wallet.isDataLoaded(options) ?
              res : res.concat(
              $timeout(function(){
                return wallet.loadData(options);
              }, loadWalletWaitTime * counter++));
          }, [])
        );
      })
      .then(function() {
        $scope.loading = false;
        UIUtils.loading.hide();
        $scope.updateView();
      })
      .catch(function(err) {
        if (err && err === 'CANCELLED') {
          $scope.loading = true;
          $scope.cancel();
          throw err;
        }
        $scope.loading = false;
        UIUtils.onError('ERROR.LOAD_WALLET_LIST_FAILED')(err);
      });
  };
  $scope.$on('modal.shown', $scope.load);

  $scope.cancel = function() {
    $scope.closeModal();
  };

  $scope.select = function($event, wallet) {
    $scope.closeModal(wallet);
  };

  $scope.updateView = function() {
    if (!$scope.wallets.length) return;

    if ($scope.motion) {
      $scope.motion.show({selector: '.list .item.item-wallet', ink: true});
    }
    else {
      UIUtils.ink({selector: '.list .item.item-wallet'});
    }
  };

  $scope.doUpdate = function(silent) {
    if ($scope.loading || !$scope.wallets || !$scope.wallets.length) return $q.when();

    $scope.loading = !silent;

    var options = {
      silent: true,
      sources: $scope.formData.showBalance,
      tx: {
        enable: false
      },
      api: true
    };
    return $q.all($scope.wallets.reduce(function(res, wallet, counter) {
        return res.concat(
          $timeout(function(){
            return wallet.refreshData(angular.merge({
              requirements: wallet.requirements && (wallet.requirements.isMember || wallet.requirements.wasMember || wallet.requirements.pendingMembership)
            }, options));
          }, counter * loadWalletWaitTime));
      }, []))
      .then(function() {
        $scope.loading = false;
        if (silent) {
          $scope.$broadcast('$$rebind::' + 'rebind'); // force rebind
        }
        $scope.updateView();
      })
      .catch(function(err) {
        $scope.loading = false;
        UIUtils.onError('ERROR.UPDATE_WALLET_LIST_FAILED')(err);
      });
  };

  // Default actions
  $scope.setParameters(parameters);

}

function PopoverWalletSelectModalController($scope, $controller, UIUtils) {
  'ngInject';

  // Initialize the super class and extend it.
  angular.extend(this, $controller('WalletSelectModalCtrl', {$scope: $scope, parameters: {
    showDefault: true,
    showBalance: false
  }}));

  // Disable list motion
  $scope.motion = null;

  $scope.$on('popover.shown', function() {
    if ($scope.loading) {
      $scope.load();
    }
  });

  $scope.updateView = function() {
    if (!$scope.wallets.length) return;

    UIUtils.ink({selector: '.popover-wallets .list .item'});
  };

  $scope.select = function($event, wallet) {
    if ($event.preventDefault() || !wallet) return; // no selection
    $scope.closePopover(wallet);
  };
}


WotLookupController.$inject = ['$scope', '$state', '$q', '$timeout', '$focus', '$location', '$ionicPopover', '$ionicHistory', 'UIUtils', 'csConfig', 'csCurrency', 'csSettings', 'Device', 'BMA', 'csWallet', 'csWot'];
WotLookupModalController.$inject = ['$scope', '$controller', '$focus', 'parameters'];
WotIdentityAbstractController.$inject = ['$scope', '$rootScope', '$state', '$translate', '$ionicHistory', 'UIUtils', 'Modals', 'csConfig', 'csCurrency', 'csWot', 'csWallet'];
WotIdentityViewController.$inject = ['$scope', '$rootScope', '$controller', '$timeout', 'UIUtils', 'csWallet'];
WotIdentityTxViewController.$inject = ['$scope', '$timeout', '$q', 'BMA', 'csSettings', 'csWot', 'csTx', 'UIUtils'];
WotCertificationsViewController.$inject = ['$scope', '$rootScope', '$controller', 'csSettings', 'csWallet', 'UIUtils'];
WotSelectPubkeyIdentityModalController.$inject = ['$scope', '$q', 'csWot', 'parameters'];angular.module('cesium.wot.controllers', ['cesium.services'])

  .config(['$stateProvider', function($stateProvider) {
    'ngInject';
    $stateProvider

      .state('app.wot_lookup', {
        url: "/wot",
        abstract: true,
        enableBack: false, // Workaround need for navigation outside tabs (enableBack is forced to 'true' in ViewXXXCtrl)
        views: {
          'menuContent': {
            templateUrl: "templates/wot/lookup.html"
          }
        }
      })

      .state('app.wot_lookup.tab_search', {
        url: "/search?q&type&hash",
        views: {
          'tab': {
            templateUrl: "templates/wot/tabs/tab_lookup.html",
            controller: 'WotLookupCtrl'
          }
        },
        data: {
          silentLocationChange: true,
          large: 'app.wot_lookup_lg'
        }
      })

      .state('app.wot_lookup_lg', {
        url: "/wot/lg?q&type&hash",
        views: {
          'menuContent': {
            templateUrl: "templates/wot/lookup_lg.html",
            controller: 'WotLookupCtrl'
          }
        },
        data: {
          silentLocationChange: true
        }
      })

      .state('app.wot_identity', {
        url: "/wot/:pubkey/:uid?action",
        views: {
          'menuContent': {
            templateUrl: "templates/wot/view_identity.html",
            controller: 'WotIdentityViewCtrl'
          }
        }
      })

      .state('app.wot_identity_uid', {
        url: "/lookup/:uid?action",
        views: {
          'menuContent': {
            templateUrl: "templates/wot/view_identity.html",
            controller: 'WotIdentityViewCtrl'
          }
        }
      })

      .state('app.wot_identity_tx_uid', {
        url: "/wot/tx/:pubkey/:uid?action",
        views: {
          'menuContent': {
            templateUrl: "templates/wot/view_identity_tx.html",
            controller: 'WotIdentityTxViewCtrl'
          }
        }
      })

      .state('app.wot_cert', {
        url: "/wot/:pubkey/:uid/:type",
        views: {
          'menuContent': {
            templateUrl: "templates/wot/view_certifications.html",
            controller: 'WotCertificationsViewCtrl'
          }
        },
        data: {
          large: 'app.wot_cert_lg'
        }
      })

      .state('app.wot_cert_lg', {
        url: "/wot/cert/lg/:pubkey/:uid",
        views: {
          'menuContent': {
            templateUrl: "templates/wot/view_certifications.html",
            controller: 'WotCertificationsViewCtrl'
          }
        }
      })

      // wallet cert
      .state('app.wallet_cert', {
        url: "/account/cert/:type",
        views: {
          'menuContent': {
            templateUrl: "templates/wot/view_certifications.html",
            controller: 'WotCertificationsViewCtrl'
          }
        },
        data: {
          large: 'app.wallet_cert_lg'
        }
      })

      .state('app.wallet_cert_lg', {
        url: "/account/cert/lg",
        views: {
          'menuContent': {
            templateUrl: "templates/wot/view_certifications.html",
            controller: 'WotCertificationsViewCtrl'
          }
        }
      })

      // wallet cert
      .state('app.wallet_cert_by_id', {
        url: "/wallets/:id/cert/:type",
        views: {
          'menuContent': {
            templateUrl: "templates/wot/view_certifications.html",
            controller: 'WotCertificationsViewCtrl'
          }
        },
        data: {
          large: 'app.wallet_cert_lg_by_id'
        }
      })

      .state('app.wallet_cert_by_id_lg', {
        url: "/wallets/:id/cert/lg",
        views: {
          'menuContent': {
            templateUrl: "templates/wot/view_certifications.html",
            controller: 'WotCertificationsViewCtrl'
          }
        }
      })
      ;
  }])

  .controller('WotLookupCtrl', WotLookupController)

  .controller('WotLookupModalCtrl', WotLookupModalController)

  .controller('WotIdentityAbstractCtrl', WotIdentityAbstractController)

  .controller('WotIdentityViewCtrl', WotIdentityViewController)

  .controller('WotIdentityTxViewCtrl', WotIdentityTxViewController)

  .controller('WotCertificationsViewCtrl', WotCertificationsViewController)

  .controller('WotSelectPubkeyIdentityModalCtrl', WotSelectPubkeyIdentityModalController)

;

function WotLookupController($scope, $state, $q, $timeout, $focus, $location, $ionicPopover, $ionicHistory,
                             UIUtils, csConfig, csCurrency, csSettings, Device, BMA, csWallet, csWot) {
  'ngInject';

  var defaultSearchLimit = 10;

  $scope.search = {
    text: '',
    loading: true,
    type: null,
    results: []
  };
  $scope.entered = false;
  $scope.wotSearchTextId = 'wotSearchText';
  $scope.enableFilter = true;
  $scope.allowMultiple = false;
  $scope.selection = [];
  $scope.showResultLabel = true;
  $scope.parameters = {}; // override in the modal controller

  $scope.enter = function(e, state) {
    if (!$scope.entered) {
      var params = angular.merge({}, $scope.parameters, state && state.stateParams);
      if (params && params.q) { // Query parameter
        $scope.search.text = params.q;
        $timeout(function() {
          $scope.doSearch();
        }, 100);
      }
      else if (params && params.hash) { // hash tag parameter
        $scope.search.text = '#' + params.hash;
        $timeout(function() {
          $scope.doSearch();
        }, 100);
      }
      else {
        $timeout(function() {
          // Init phase
          if (csCurrency.data.initPhase && !params.type) {
            $scope.doGetPending(0, undefined, true/*skipLocationUpdate*/);
          }
          // get new comers
          else if (params.type == 'newcomers' || (!csConfig.initPhase && !params.type)) {
            $scope.doGetNewcomers(0, undefined, true/*skipLocationUpdate*/);
          }
          else if (params.type == 'pending') {
            $scope.doGetPending(0, undefined, true/*skipLocationUpdate*/);
          }

        }, 100);
      }
      // removeIf(device)
      // Focus on search text (only if NOT device, to avoid keyboard opening)
      $focus($scope.wotSearchTextId);
      // endRemoveIf(device)

      $scope.entered = true;

      $timeout(UIUtils.ink, 100);

      $scope.showHelpTip();
    }
    else {

      $scope.updateLocationHref();
      if ($scope.search.results && $scope.search.results.length) {
        $scope.motion.show({selector: '.lookupForm .list .item', ink: true});
      }
    }
  };
  $scope.$on('$ionicView.enter', $scope.enter);

  $scope.resetWotSearch = function() {
    $scope.search = {
      text: null,
      loading: false,
      type: 'newcomers',
      results: []
    };
  };

  $scope.updateLocationHref = function() {
    // removeIf(device)
    var stateParams = {
      q: undefined,
      hash: undefined,
      type: undefined
    };

    if ($scope.search.type == 'text') {
      var text = $scope.search.text.trim();
      if (text.match(/^#[\wá¸¡ÄÇ¦ÄÃ Ã¡Ã¢Ã£Ã¤Ã¥Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã°Ã²Ã³Ã´ÃµÃ¶Ã¹ÃºÃ»Ã¼Ã½Ã¿]+$/)) {
        stateParams.hash = text.substr(1);
      }
      else {
        stateParams.q = text;
      }
    }
    else if ($scope.search.type != 'last') {
      stateParams.type = $scope.search.type;
    }

    // Update location href
    $location.search(stateParams).replace();
    // endRemoveIf(device)
  };

  $scope.doSearchText = function() {

    $scope.doSearch();
    $scope.updateLocationHref();

    };

  $scope.doSearch = function() {
    $scope.search.loading = true;
    var text = $scope.search.text.trim();
    if ((UIUtils.screen.isSmall() && text.length < 3) || !text.length) {
      $scope.search.results = undefined;
      $scope.search.loading = false;
      $scope.search.type = 'none';
      $scope.search.total = undefined;
      return $q.when();
    }

    $scope.search.type = 'text';
    return csWot.search(text)
      .then(function(idties){
        if ($scope.search.type != 'text') return; // could have change
        if ($scope.search.text.trim() !== text) return; // search text has changed before received response

        if ((!idties || !idties.length) && (BMA.regexp.PUBKEY.test(text) || BMA.regexp.PUBKEY_WITH_CHECKSUM.test(text))) {
          return BMA.uri.parse(text)
            .then(function(data) {
              $scope.doDisplayResult([data]);
            });
        }
        else {
          $scope.doDisplayResult(idties);

          // count, skipping divider
          var countBy = _.countBy(idties, function(hit) {
            return hit.divider && 'divider' || 'results';
          });
          $scope.search.total = countBy && countBy.results || 0;
        }
      })
      .catch(UIUtils.onError('ERROR.WOT_LOOKUP_FAILED'));
  };

  $scope.doGetNewcomers = function(offset, size, skipLocationUpdate) {
    offset = offset || 0;
    size = size || defaultSearchLimit;
    if (size < defaultSearchLimit) size = defaultSearchLimit;

    $scope.hideActionsPopover();
    $scope.search.loading = (offset === 0);
    $scope.search.type = 'newcomers';

    // Update location href
    if (!offset && !skipLocationUpdate) {
      $scope.updateLocationHref();
    }

    return  csWot.newcomers(offset, size)
      .then(function(res){
        if ($scope.search.type != 'newcomers') return false; // could have change
        $scope.doDisplayResult(res && res.hits, offset, size, res && res.total);
        return true;
      })
      .catch(function(err) {
        $scope.search.loading = false;
        $scope.search.results = (offset > 0) ? $scope.search.results : [];
        $scope.search.hasMore = false;
        $scope.search.total = undefined;
        UIUtils.onError('ERROR.LOAD_NEWCOMERS_FAILED')(err);
      });
  };

  $scope.doGetPending = function(offset, size, skipLocationUpdate) {
    offset = offset || 0;
    size = size || defaultSearchLimit;
    if (size < defaultSearchLimit) size = defaultSearchLimit;

    $scope.hideActionsPopover();
    $scope.search.loading = (offset === 0);
    $scope.search.type = 'pending';

    var searchFunction =  csCurrency.data.initPhase ?
      csWot.all :
      csWot.pending;

    // Update location href
    if (!offset && !skipLocationUpdate) {
      $scope.updateLocationHref();
    }

    return searchFunction(offset, size)
      .then(function(res){
        if ($scope.search.type != 'pending') return false; // could have change
        $scope.doDisplayResult(res && res.hits, offset, size, res && res.total);
        // Always disable "more" on initphase
        $scope.search.hasMore = !csCurrency.data.initPhase && $scope.search.hasMore;
        return true;
      })
      .catch(function(err) {
        $scope.search.loading = false;
        $scope.search.results = (offset > 0) ? $scope.search.results : [];
        $scope.search.total = undefined;
        $scope.search.hasMore = false;
        UIUtils.onError('ERROR.LOAD_PENDING_FAILED')(err);
      });
  };

  $scope.showMore = function() {
    var offset = $scope.search.results ? $scope.search.results.length : 0;

    $scope.search.loadingMore = true;
    var searchFunction = ($scope.search.type == 'newcomers') ?
      $scope.doGetNewcomers :
      $scope.doGetPending;

    return searchFunction(offset)
      .then(function(ok) {
        if (ok) {
          $scope.search.loadingMore = false;
          $scope.$broadcast('scroll.infiniteScrollComplete');
        }
      })
      .catch(function(err) {
        console.error(err);
        $scope.search.loadingMore = false;
        $scope.search.hasMore = false;
        $scope.$broadcast('scroll.infiniteScrollComplete');
      });
  };

  $scope.select = function(item) {
    var state = item.state;

    //  Identity
    if (!state && item.pubkey) {
      // identity = self -> open the user wallet
      state = csWallet.isUserPubkey(item.pubkey) ? 'app.view_wallet' : 'app.wot_identity';
    }

    if (state) {
      // Need to have a back button outside tabs
      $ionicHistory.nextViewOptions({
        historyRoot: false,
        disableAnimate: false,
        expire: 300
      });

      $state.go(state, item.stateParams||item);
    }
  };

  $scope.next = function() {
    // This method should be override by sub controller (e.g. modal controller)
    console.warn('Selected identities (should be override):', $scope.selection);
  };

  $scope.toggleCheck = function(index, e) {
    var identity = $scope.search.results[index];
    if (identity.checked) {
      $scope.addToSelection(identity);
    }
    else {
      $scope.removeSelection(identity, e);
    }
  };

  $scope.toggleSelect = function(identity){
    identity.selected = !identity.selected;
  };

  $scope.addToSelection = function(identity) {

    var copyIdty = angular.copy(identity);
    if (copyIdty.name) {
      copyIdty.name = copyIdty.name.replace('<em>', '').replace('</em>', ''); // remove highlight
    }

    $scope.selection.push(copyIdty);
  };

  $scope.removeSelection = function(identity, e) {

    // Remove from selection array
    var identityInSelection = _.findWhere($scope.selection, {id: identity.id});
    if (identityInSelection) {
      $scope.selection.splice($scope.selection.indexOf(identityInSelection), 1);
    }

    // Uncheck in result array, if exists
    if (!$scope.search.loading) {
      var existIdtyInResult = _.findWhere($scope.search.results, {id: identity.id});
      if (existIdtyInResult && existIdtyInResult.checked) {
        existIdtyInResult.checked = false;
      }
    }
    //e.preventDefault();
  };

  $scope.scanQrCode = function(){
    if (!Device.barcode.enable) {
      return;
    }
    Device.barcode.scan()
    .then(function(result) {
      if (!result) {
        return;
      }
      BMA.uri.parse(result)
      .then(function(obj){
        if (obj.pubkey) {
          $scope.search.text = obj.pubkey;
        }
        else if (result.uid) {
          $scope.search.text = obj.uid;
        }
        else {
          $scope.search.text = result;
        }
        $scope.doSearch();
      });
    })
    .catch(UIUtils.onError('ERROR.SCAN_FAILED'));
  };

  // Show help tip (show only not already shown)
  $scope.showHelpTip = function(index) {
    if (!$scope.isLogin()) return;
    index = angular.isDefined(index) ? index : csSettings.data.helptip.wotLookup;
    if (index < 0) return;
    if (index === 0) index = 1; // skip first step

    // Create a new scope for the tour controller
    var helptipScope = $scope.createHelptipScope();
    if (!helptipScope) return; // could be undefined, if a global tour already is already started

    return helptipScope.startWotLookupTour(index, false)
      .then(function(endIndex) {
        helptipScope.$destroy();
        csSettings.data.helptip.wotLookup = endIndex;
        csSettings.store();
      });
  };

  $scope.doDisplayResult = function(res, offset, size, total) {
    res = res || [];

    // pre-check result if already in selection
    if ($scope.allowMultiple && res.length && $scope.selection.length) {
      _.forEach($scope.selection, function(identity) {
        var identityInRes = _.findWhere(res, {id: identity.id});
        if (identityInRes) {
          identityInRes.checked = true;
        }
      });
    }

    if (!offset) {
      $scope.search.results = res || [];
    }
    else {
        $scope.search.results = $scope.search.results.concat(res);
    }
    $scope.search.total = angular.isDefined(total) ? total : undefined;
    $scope.search.loading = false;
    $scope.search.hasMore = $scope.search.results.length >= offset + size;

    $scope.smallscreen = UIUtils.screen.isSmall();

    if (!$scope.search.results.length) return;

    // Motion
    if (res.length > 0 && $scope.motion) {
      $scope.motion.show({selector: '.lookupForm .list .item', ink: true});
    }
  };

  /* -- show/hide popup -- */

  $scope.showActionsPopover = function(event) {
    if (!$scope.actionsPopover) {
      $ionicPopover.fromTemplateUrl('templates/wot/lookup_popover_actions.html', {
        scope: $scope
      }).then(function(popover) {
        $scope.actionsPopover = popover;
        //Cleanup the popover when we're done with it!
        $scope.$on('$destroy', function() {
          $scope.actionsPopover.remove();
        });
        $scope.actionsPopover.show(event);
      });
    }
    else {
      $scope.actionsPopover.show(event);
    }
  };

  $scope.hideActionsPopover = function() {
    if ($scope.actionsPopover) {
      $scope.actionsPopover.hide();
    }
  };

}

function WotLookupModalController($scope, $controller, $focus, parameters){
  'ngInject';

  // Initialize the super class and extend it.
  angular.extend(this, $controller('WotLookupCtrl', {$scope: $scope}));

  parameters = parameters || {};
  $scope.search.loading = false;
  $scope.enableFilter = angular.isDefined(parameters.enableFilter) ? parameters.enableFilter : false;
  $scope.allowMultiple = angular.isDefined(parameters.allowMultiple) ? parameters.allowMultiple : false;
  $scope.parameters = parameters;
  $scope.showResultLabel = false;

  $scope.wotSearchTextId = 'wotSearchTextModal';

  if ($scope.allowMultiple && parameters.selection) {
    $scope.selection = parameters.selection;
  }

  var superEnter = $scope.enter;
  $scope.enter = function(e) {
    if ($scope.parameters && $scope.parameters.q) {
      $scope.search.text=$scope.parameters.q;
      if ($scope.parameters.q.trim().length > 2) {
        superEnter(e); // call enter, that launch the search
      }
    }
  };
  $scope.$on('modal.shown', $scope.enter);

  $scope.cancel = function(){
    $scope.closeModal();
  };

  $scope.select = function(identity){
    $scope.closeModal({
      pubkey: identity.pubkey,
      uid: identity.uid
    });
  };

  $scope.next = function() {
    $scope.closeModal($scope.selection);
  };

  $scope.updateLocationHref = function() {
    // Do NOT change location href
  };

  $scope.showHelpTip = function() {
    // silent
  };

  // removeIf(device)
  // Focus on search text (only if NOT device, to avoid keyboard opening)
  $focus($scope.wotSearchTextId);
  // endRemoveIf(device)
}

/**
 * Abtract controller that load identity, that expose some useful methods in $scope, like 'certify()'
 * @param $scope
 * @param $state
 * @param $timeout
 * @param UIUtils
 * @param Modals
 * @param csConfig
 * @param csWot
 * @param csWallet
 * @constructor
 */
function WotIdentityAbstractController($scope, $rootScope, $state, $translate, $ionicHistory,
                                       UIUtils, Modals, csConfig, csCurrency, csWot, csWallet) {
  'ngInject';

  $scope.formData = {
    hasSelf: true
  };
  $scope.disableCertifyButton = true;
  $scope.loading = true;

  $scope.$on('$ionicView.beforeEnter', function (event, viewData) {
    // Enable back button (workaround need for navigation outside tabs - https://stackoverflow.com/a/35064602)
    viewData.enableBack = UIUtils.screen.isSmall() ? true : viewData.enableBack;
  });

  $scope.load = function(pubkey, withCache, uid) {
    return csWot.load(pubkey, withCache, uid)
      .then(function(identity){
        if (!identity) return UIUtils.onError('ERROR.IDENTITY_NOT_FOUND')().then($scope.showHome);
        $scope.formData = identity;
        $scope.revoked = identity.requirements && (identity.requirements.revoked || identity.requirements.pendingRevocation);
        $scope.canCertify = identity.hasSelf && (!csWallet.isLogin() || (!csWallet.isUserPubkey(pubkey))) && !$scope.revoked;
        $scope.canSelectAndCertify = identity.hasSelf && csWallet.isUserPubkey(pubkey);
        $scope.alreadyCertified = !$scope.canCertify || !csWallet.isLogin() ? false :
          (!!_.findWhere(identity.received_cert, { pubkey: csWallet.data.pubkey, valid: true }) ||
          !!_.findWhere(identity.received_cert_pending, { pubkey: csWallet.data.pubkey, valid: true }));
        $scope.disableCertifyButton = $scope.alreadyCertified || $scope.revoked;
        $scope.loading = false;
      })
      .catch(function(err) {
        $scope.loading = false;
        UIUtils.onError('ERROR.LOAD_IDENTITY_FAILED')(err);
      });
  };


  $scope.doUpdate = function(silent) {
    if (!silent) {
      $scope.loading = true;
      UIUtils.loading.show();
    }
    return $scope.load($scope.formData.pubkey, false/*no cache*/, $scope.formData.uid)
      .then(UIUtils.loading.hide);
  };

  // Certify the current identity
  $scope.certify = function() {

    // Need user auth - fix #513
    return csWallet.auth({minData: true})
      .then(function(walletData) {
        UIUtils.loading.hide();

        if (!csCurrency.data.initPhase && !walletData.isMember) {
          UIUtils.alert.error(walletData.requirements.needSelf ?
            'ERROR.NEED_MEMBER_ACCOUNT_TO_CERTIFY' : 'ERROR.NEED_MEMBER_ACCOUNT_TO_CERTIFY_HAS_SELF');
          return;
        }

        if (!csCurrency.data.initPhase && !$scope.formData.hasSelf) {
          UIUtils.alert.error('ERROR.IDENTITY_TO_CERTIFY_HAS_NO_SELF');
          return;
        }

        // Check identity not expired
        if ($scope.formData.requirements.expired) {
          UIUtils.alert.error('ERROR.IDENTITY_EXPIRED');
          return;
        }

        // Check not already certified
        var previousCert = _.findWhere($scope.formData.received_cert, { pubkey: walletData.pubkey, valid: true});
        if (previousCert) {
          $translate('ERROR.IDENTITY_ALREADY_CERTIFY', previousCert)
            .then(function(message) {
              UIUtils.alert.error(message, 'ERROR.UNABLE_TO_CERTIFY_TITLE');
            });
          return;
        }

        // Check not pending certification
        previousCert = _.findWhere($scope.formData.received_cert_pending, { pubkey: walletData.pubkey, valid: true});
        if (previousCert) {
          $translate('ERROR.IDENTITY_ALREADY_CERTIFY_PENDING', previousCert)
            .then(function(message) {
              UIUtils.alert.error(message, 'ERROR.UNABLE_TO_CERTIFY_TITLE');
            });
          return;
        }

        UIUtils.alert.confirm('CONFIRM.CERTIFY_RULES', 'CONFIRM.POPUP_SECURITY_WARNING_TITLE', {
          cssClass: 'warning',
          okText: 'WOT.BTN_YES_CERTIFY',
          okType: 'button-assertive'
        })
          .then(function(confirm){
            if (!confirm) {
              return;
            }
            UIUtils.loading.show();
            csWallet.certify($scope.formData.uid,
              $scope.formData.pubkey,
              $scope.formData.timestamp,
              $scope.formData.sig,
              $scope.formData.isMember,
              $scope.formData.wasMember)
              .then(function(cert) {
                UIUtils.loading.hide();
                if (cert) {
                  $scope.prepareNewCert(cert);
                  $scope.alreadyCertified = true;
                  UIUtils.alert.info('INFO.CERTIFICATION_DONE');
                  $scope.formData.received_cert_pending.unshift(cert);
                  $scope.formData.requirements.pendingCertificationCount++;
                  $scope.doMotion();
                }
              })
              .catch(UIUtils.onError('ERROR.SEND_CERTIFICATION_FAILED'));
          });
      })
      .catch(function(err) {
        if (err == 'CANCELLED') return;
        UIUtils.onError('ERROR.LOGIN_FAILED')(err);
      });
  };

  // Select an identity and certify
  $scope.selectAndCertify = function() {

    // Need user auth - fix #513
    return csWallet.auth({minData: true})

      .then(function(walletData) {
        if (!csCurrency.data.initPhase && !walletData.isMember) {
          UIUtils.alert.error(walletData.requirements.needSelf || walletData.requirements.needMembership ?
            'ERROR.NEED_MEMBER_ACCOUNT_TO_CERTIFY' : 'ERROR.NEED_MEMBER_ACCOUNT_TO_CERTIFY_HAS_SELF');
          return;
        }
        UIUtils.loading.hide();
        // Open Wot lookup modal
        return Modals.showWotLookup();
      })
      .then(function(idty) {
        if (!idty || !idty.pubkey) {
          return; // cancelled
        }
        if (!idty.uid) { // not a member
          UIUtils.alert.error('ERROR.IDENTITY_TO_CERTIFY_HAS_NO_SELF');
          return;
        }

        UIUtils.loading.show();

        // load selected identity
        return csWot.load(idty.pubkey, false /*no cache*/);
      })

      .then(function(identity) {
        if (!identity) return; // cancelled
        UIUtils.loading.hide();
        if (!identity || !identity.hasSelf) {
          UIUtils.alert.error('ERROR.IDENTITY_TO_CERTIFY_HAS_NO_SELF');
          return;
        }

        // Check identity not expired
        if (identity.requirements.expired) {
          UIUtils.alert.error('ERROR.IDENTITY_EXPIRED');
          return;
        }

        // Check not already certified
        var previousCert = _.findWhere(identity.received_cert, { pubkey: csWallet.data.pubkey, valid: true});
        if (previousCert) {
          $translate('ERROR.IDENTITY_ALREADY_CERTIFY', previousCert)
            .then(function(message) {
              UIUtils.alert.error(message, 'ERROR.UNABLE_TO_CERTIFY_TITLE');
            });
          return;
        }

        // Check not pending certification
        previousCert = _.findWhere(identity.received_cert_pending, { pubkey: csWallet.data.pubkey, valid: true});
        if (previousCert) {
          $translate('ERROR.IDENTITY_ALREADY_CERTIFY_PENDING', previousCert)
            .then(function(message) {
              UIUtils.alert.error(message, 'ERROR.UNABLE_TO_CERTIFY_TITLE');
            });
          return;
        }

        // Ask confirmation
        $translate('CONFIRM.CERTIFY_RULES_TITLE_UID', {uid: identity.uid})
          .then(function(confirmTitle) {
            return UIUtils.alert.confirm('CONFIRM.CERTIFY_RULES', confirmTitle);
          })
          .then(function(confirm){
            if (!confirm) {
              return;
            }
            UIUtils.loading.show();

            // Send certification
            csWallet.certify(identity.uid,
              identity.pubkey,
              identity.timestamp,
              identity.sig,
              identity.isMember,
              identity.wasMember)
              .then(function(cert) {
                UIUtils.loading.hide();
                if (!cert) return;
                return csWot.extendAll([cert], 'pubkey')
                  .then(function(){
                    UIUtils.toast.show('INFO.CERTIFICATION_DONE');
                    $scope.formData.given_cert_pending.unshift(cert);
                    $scope.doMotion();
                  });
              })
              .catch(UIUtils.onError('ERROR.SEND_CERTIFICATION_FAILED'));
          });
      })
      .catch(function(err) {
        if (err == 'CANCELLED') return;
        UIUtils.onError('ERROR.LOAD_IDENTITY_FAILED')(err);
      });

  };

  // Add wallet's data to a new cert
  $scope.prepareNewCert = function(cert) {
    cert.uid = csWallet.data.uid;
    cert.pubkey = csWallet.data.pubkey;
    cert.isMember = csWallet.data.isMember;
    cert.avatar = csWallet.data.avatar;
    cert.name = csWallet.data.name;
  };

  $scope.removeActionParamInLocationHref = function(state) {
    if (!state || !state.stateParams || !state.stateParams.action) return;

    var stateParams = angular.copy(state.stateParams);

    // Reset action param
    stateParams.action = null;

    // Update location href
    $ionicHistory.nextViewOptions({
      disableAnimate: true,
      disableBack: false,
      historyRoot: false
    });
    $state.go(state.stateName, stateParams,
      {
        reload: false,
        inherit: true,
        notify: false
      });
  };

  $scope.doAction = function(action, options) {
    if (action == 'certify') {
      return $scope.certify();
    }
    if (action == 'transfer') {
      $scope.showTransferModal(options);
    }
  };

  /* -- open screens -- */

  $scope.showCertifications = function() {
    // Warn: do not use a simple link here (a ng-click is mandatory for help tour)
    if (UIUtils.screen.isSmall() ) {
      $state.go('app.wot_cert', {
        pubkey: $scope.formData.pubkey,
        uid: $scope.formData.uid,
        type: 'received'
      });
    }
    else {
      $state.go('app.wot_cert_lg', {
        pubkey: $scope.formData.pubkey,
        uid: $scope.formData.uid
      });
    }
  };

  $scope.showGivenCertifications = function() {
    // Warn: do not use a simple link here (a ng-click is mandatory for help tour)
    if (UIUtils.screen.isSmall() ) {
      $state.go('app.wot_cert', {
        pubkey: $scope.formData.pubkey,
        uid: $scope.formData.uid,
        type: 'given'
      });
    }
    else {
      $state.go('app.wot_cert_lg', {
        pubkey: $scope.formData.pubkey,
        uid: $scope.formData.uid
      });
    }
  };

  $scope.showSharePopover = function(event) {
    var title = $scope.formData.name || $scope.formData.uid || $scope.formData.pubkey;
    // Use shareBasePath (fix #530) or rootPath (fix #390)
    var url = (csConfig.shareBaseUrl || $rootScope.rootPath) + $state.href('app.wot_identity', {pubkey: $scope.formData.pubkey, uid: $scope.formData.uid});
    // Override default position, is small screen - fix #545
    if (UIUtils.screen.isSmall()) {
      event = angular.element(document.querySelector('#wot-share-anchor-'+$scope.formData.pubkey)) || event;
    }
    UIUtils.popover.share(event, {
      bindings: {
        url: url,
        titleKey: 'WOT.VIEW.POPOVER_SHARE_TITLE',
        titleValues: {title: title},
        postMessage: title
      }
    });
  };
}

/**
 * Identity view controller - should extend WotIdentityAbstractCtrl
 */
function WotIdentityViewController($scope, $rootScope, $controller, $timeout, UIUtils, csWallet) {
  'ngInject';
  // Initialize the super class and extend it.
  angular.extend(this, $controller('WotIdentityAbstractCtrl', {$scope: $scope}));

  $scope.motion = UIUtils.motion.fadeSlideInRight;

  $scope.$on('$ionicView.enter', function(e, state) {

    var onLoadSuccess = function() {
      $scope.doMotion();
      if (state.stateParams && state.stateParams.action) {
        $timeout(function() {
          $scope.doAction(state.stateParams.action.trim());
        }, 100);

        $scope.removeActionParamInLocationHref(state);
      }
    };

    if (state.stateParams &&
      state.stateParams.pubkey &&
      state.stateParams.pubkey.trim().length > 0) {
      if ($scope.loading) { // load once
        return $scope.load(state.stateParams.pubkey.trim(), true /*withCache*/, state.stateParams.uid)
          .then(onLoadSuccess);
      }
    }

    else if (state.stateParams &&
      state.stateParams.uid &&
      state.stateParams.uid.trim().length > 0) {
      if ($scope.loading) { // load once
        return $scope.load(null, true /*withCache*/, state.stateParams.uid)
          .then(onLoadSuccess);
      }
    }

    // Load from wallet pubkey
    else if (csWallet.isLogin()){

      if ($scope.loading) {
        return $scope.load(csWallet.data.pubkey, true /*withCache*/, csWallet.data.uid)
          .then(onLoadSuccess);
      }
    }

    // Redirect to home
    else {
      $scope.showHome();
    }

  });

  $scope.doMotion = function() {
    $scope.motion.show({selector: '.view-identity .list .item'});

    // Transfer button
    $scope.showFab('fab-transfer');

    // Certify button
    if (($scope.canCertify && !$scope.alreadyCertified) || $rootScope.tour) {
      $scope.showFab('fab-certify-' + $scope.formData.uid);
    }
  };
}

/**
 * Identity tx view controller
 */
function WotIdentityTxViewController($scope, $timeout, $q, BMA, csSettings, csWot, csTx, UIUtils) {
  'ngInject';

  $scope.formData= {};
  $scope.loading = true;
  $scope.motion = UIUtils.motion.fadeSlideInRight;

  $scope.$on('$ionicView.enter', function(e, state) {
    if ($scope.loading) {
      $scope.pubkey = state.stateParams.pubkey;
      $scope.uid = state.stateParams.uid;
      $scope.load();
    }
    else {
      // update view
      $scope.updateView();
    }
  });

  // Load data
  $scope.load = function(fromTime) {
    return $q.all([
        csWot.extend({pubkey: $scope.pubkey}),
        csTx.load($scope.pubkey, fromTime)
      ])
      .then(function(res) {
        $scope.formData = angular.merge(res[0], res[1]);
        $scope.loading = false;
        $scope.updateView();
      });
  };

  // Updating data
  $scope.doUpdate = function(silent) {
    console.debug('[wot] TX history reloading...');
    $scope.formData = {};
    return (silent ?
        $scope.load() :
        UIUtils.loading.show()
          .then($scope.load)
          .then(UIUtils.loading.hide)
      )
      .then($scope.updateView)
      .catch(UIUtils.onError('ERROR.IDENTITY_TX_FAILED'));
  };

  // Update view
  $scope.updateView = function() {
    $scope.$broadcast('$$rebind::' + 'balance'); // force rebind balance
    $scope.$broadcast('$$rebind::' + 'rebind'); // force rebind
    $scope.motion.show();
  };

  $scope.downloadHistoryFile = function(options) {
    options = options || {};
    options.fromTime = options.fromTime || -1; // default: full history
    csTx.downloadHistoryFile($scope.pubkey, options);
  };

  $scope.showMoreTx = function(fromTime) {

    fromTime = fromTime ||
      ($scope.formData.tx.fromTime - csSettings.data.walletHistoryTimeSecond) ||
      (Math.trunc(new Date().getTime() / 1000) - 2 * csSettings.data.walletHistoryTimeSecond);

    UIUtils.loading.show();
    return csTx.load($scope.pubkey, fromTime)
      .then(function(res) {
        angular.merge($scope.formData, res);
        $scope.updateView();
        UIUtils.loading.hide();
      })
      .catch(function(err) {
        // If http rest limitation: wait then retry
        if (err.ucode == BMA.errorCodes.HTTP_LIMITATION) {
          $timeout(function() {
            return $scope.showMoreTx(fromTime);
          }, 2000);
        }
        else {
          UIUtils.onError('ERROR.IDENTITY_TX_FAILED')(err);
        }
      });
  };

}


/**
 * Certifications controller - extend WotIdentityAbstractCtrl
 */
function WotCertificationsViewController($scope, $rootScope, $controller, csSettings, csWallet, UIUtils) {
  'ngInject';

  var wallet;

  // Initialize the super class and extend it.
  angular.extend(this, $controller('WotIdentityAbstractCtrl', {$scope: $scope}));

  // Values overwritten in tab controller (for small screen)
  $scope.motions = {
    receivedCertifications: angular.copy(UIUtils.motion.fadeSlideIn),
    givenCertifications: angular.copy(UIUtils.motion.fadeSlideInRight),
    avatar: angular.copy(UIUtils.motion.fadeIn),
  };
  $scope.motions.receivedCertifications.enable = true;
  $scope.motions.givenCertifications.enable = true;
  $scope.motions.avatar.enable = true;

  $scope.$on('$ionicView.enter', function(e, state) {
    if (state.stateParams && state.stateParams.type) {
      $scope.motions.receivedCertifications.enable = (state.stateParams.type != 'given');
      $scope.motions.givenCertifications.enable = (state.stateParams.type == 'given');
      $scope.motions.avatar.enable = false;
    }

    // First load
    if ($scope.loading) {
      if (state.stateParams &&
        state.stateParams.pubkey &&
        state.stateParams.pubkey.trim().length > 0) {

        return $scope.load(state.stateParams.pubkey.trim(), true /*withCache*/, state.stateParams.uid)
          .then(function () {
            $scope.doMotion();
            $scope.showHelpTip();
          });
      }

      else {
        wallet = (state.stateParams && state.stateParams.id) ? csWallet.children.get(state.stateParams.id) : csWallet;
        if (!wallet) {
          UIUtils.alert.error('ERROR.UNKNOWN_WALLET_ID');
          return $scope.showHome();
        }
        if (!wallet.isLogin()) {
          return $scope.showHome();
        }
        return $scope.load(wallet.data.pubkey, true /*withCache*/, csWallet.data.uid)
          .then(function () {
            $scope.doMotion();
            $scope.showHelpTip();
          });
      }
    }

    else {
      $scope.doMotion();
    }
  });

  $scope.$on('$ionicView.leave', function() {
    $scope.loading = true;
  });

  // Updating data
  $scope.doUpdate = function() {
    return $scope.load($scope.formData.pubkey, false /*no cache*/, $scope.formData.uid)
      .then(function() {
        $scope.doMotion();
        $scope.showHelpTip();
      });
  };

  $scope.doMotion = function(skipItems) {
    // Motions received certifications part
    $scope.doMotionReceivedCertifications(0, skipItems);

    // Motion on avatar part
    if ($scope.motions.avatar.enable) {
      $scope.motions.avatar.show({selector: '.col-avatar .' + $scope.motions.avatar.ionListClass});
    }

    // Motion on given certification part
    $scope.doMotionGivenCertifications($scope.motions.receivedCertifications.enable ? 100 : 10, skipItems);
  };

  // Effects on received certifcations
  $scope.doMotionReceivedCertifications = function(timeout, skipItems) {
    if ($scope.motions.receivedCertifications.enable) {
      if (!skipItems) {
        $scope.motions.receivedCertifications.show({selector: '.list.certifications .item', timeout: timeout});
      }

      // Fab button
      if (($scope.canCertify && !$scope.alreadyCertified) || $rootScope.tour) {
        $scope.showFab('fab-certify', timeout);
      }
    }
    // If not enable, make sure to hide fab button
    else {
      // Hide fab button
      if ($scope.canCertify || $rootScope.tour) {
        $scope.hideFab('fab-certify', 0);
      }
    }
  };

  // Effects on given certifcations
  $scope.doMotionGivenCertifications = function(timeout, skipItems) {

    if ($scope.motions.givenCertifications.enable) {
      if (!skipItems) {
        $scope.motions.givenCertifications.show({selector: '.list.given-certifications .item', timeout: timeout});
      }
      // Fab button
      if ($scope.canSelectAndCertify || $rootScope.tour) {
        $scope.showFab('fab-select-certify');
      }
    }

    // If not enable, make sure to hide fab button
    else {
      // Hide fab button
      if ($scope.canSelectAndCertify || $rootScope.tour) {
        $scope.hideFab('fab-select-certify', 0);
      }
    }
  };

  // Show help tip
  $scope.showHelpTip = function() {
    if (!$scope.isLogin()) return;
    if (!csSettings.data.helptip.enable) return;

    // Create a new scope for the tour controller
    var helptipScope = $scope.createHelptipScope();
    if (!helptipScope) return; // could be undefined, if a global tour already is already started

    var isWallet = csWallet.isUserPubkey($scope.formData.pubkey);
    var index = isWallet ? csSettings.data.helptip.walletCerts : csSettings.data.helptip.wotCerts;
    if (index < 0) return;

    var startFunc = isWallet ?
      helptipScope.startWalletCertTour(index, false) :
      helptipScope.startWotCertTour(index, false);

    return startFunc.then(function(endIndex) {
      helptipScope.$destroy();
      if (isWallet) {
        csSettings.data.helptip.walletCerts = endIndex;
      }
      else {
        csSettings.data.helptip.wotCerts = endIndex;
      }
      csSettings.store();
    });
  };
}


/**
 * Select identities from a pubkey (yusfull when many self on the same pubkey)
 * @param $scope
 * @param $q
 * @param csWot
 * @param parameters
 * @constructor
 */
function WotSelectPubkeyIdentityModalController($scope, $q, csWot, parameters) {

  $scope.loading = true;

  $scope.load = function() {
    // If list of identities given by parameters: use it
    if (parameters && parameters.identities) {
      $scope.identities = parameters.identities;
      $scope.pubkey = $scope.identities[0].pubkey;
      $scope.loading = false;
      return $q.when();
    }

    // Or load from pubkey
    $scope.pubkey = parameters && parameters.pubkey;
    if (!pubkey) {
      return $q.reject('Missing parameters: [pubkey] or [identities]');
    }

    return csWot.loadRequirements({pubkey: pubkey, uid: uid})
      .then(function(data) {
        if (data && data.requirements) {
          $scope.identities = data.requirements;
          if (data.requirements.alternatives) {
            $scope.identities = [data.requirements].concat(data.requirements.alternatives);
          }
          else {
            $scope.identities = [data.requirements];
          }
        }
        $scope.loading = false;
      });
  };
  $scope.$on('modal.shown', $scope.load);
}


NetworkLookupController.$inject = ['$scope', '$state', '$location', '$ionicPopover', '$window', '$translate', 'BMA', 'UIUtils', 'csConfig', 'csSettings', 'csCurrency', 'csNetwork', 'csWot'];
PeerViewController.$inject = ['$scope', '$q', '$window', '$state', 'UIUtils', 'csWot', 'BMA'];
NetworkLookupModalController.$inject = ['$scope', '$controller', 'parameters'];
NetworkLookupPopoverController.$inject = ['$scope', '$controller'];
PeerInfoPopoverController.$inject = ['$scope', '$q', 'csSettings', 'csCurrency', 'csHttp', 'BMA'];
angular.module('cesium.network.controllers', ['cesium.services'])

.config(['$stateProvider', function($stateProvider) {
  'ngInject';

  $stateProvider

    .state('app.network', {
      url: "/network?type&expert",
      cache: true,
      views: {
        'menuContent': {
          templateUrl: "templates/network/view_network.html",
          controller: 'NetworkLookupCtrl'
        }
      },
      data: {
        silentLocationChange: true
      }
    })

    .state('app.view_peer', {
      url: "/network/peer/:server?ssl&tor",
      cache: false,
      views: {
        'menuContent': {
          templateUrl: "templates/network/view_peer.html",
          controller: 'PeerViewCtrl'
        }
      },
      data: {
        preferHttp: true // avoid HTTPS if config has httpsMode=clever
      }
    });
}])

.controller('NetworkLookupCtrl', NetworkLookupController)

.controller('PeerViewCtrl', PeerViewController)

.controller('NetworkLookupModalCtrl', NetworkLookupModalController)

.controller('NetworkLookupPopoverCtrl', NetworkLookupPopoverController)

.controller('PeerInfoPopoverCtrl', PeerInfoPopoverController)

;

function NetworkLookupController($scope,  $state, $location, $ionicPopover, $window, $translate,
                                 BMA, UIUtils, csConfig, csSettings, csCurrency, csNetwork, csWot) {
  'ngInject';

  $scope.networkStarted = false;
  $scope.ionItemClass = '';
  $scope.expertMode = csSettings.data.expertMode && !UIUtils.screen.isSmall();
  $scope.isHttps = ($window.location.protocol === 'https:');
  $scope.search = {
    text: '',
    loading: true,
    type: undefined,
    results: [],
    endpointFilter: null,
    sort : undefined,
    asc: true
  };
  $scope.listeners = [];
  $scope.helptipPrefix = 'helptip-network';
  $scope.eanbleLocationHref = true; // can be overrided by sub-controler (e.g. popup)

  $scope.removeListeners = function() {
    if ($scope.listeners.length) {
      console.debug("[network] Closing listeners");
      _.forEach($scope.listeners, function(remove){
        remove();
      });
      $scope.listeners = [];
    }
  };

  /**
   * Enter in view
   */
  $scope.enter = function(e, state) {
    if ($scope.networkStarted) return;
    $scope.networkStarted = true;
    $scope.search.loading = true;
    csCurrency.get()
      .then(function (currency) {
        if (currency) {
          $scope.node = !BMA.node.same(currency.node.host, currency.node.port) ?
            BMA.instance(currency.node.host, currency.node.port) : BMA;
          if (state && state.stateParams) {
            if (state.stateParams.type && ['mirror', 'member', 'offline'].indexOf(state.stateParams.type) != -1) {
              $scope.search.type = state.stateParams.type;
            }
            if (state.stateParams.expert) {
              $scope.expertMode = (state.stateParams.expert == 'true');
            }
          }
          $scope.load();
        }
      })
      .catch(function(err) {
        UIUtils.onError('ERROR.GET_CURRENCY_FAILED')(err);
        $scope.networkStarted = false;
      });
  };
  $scope.$on('$ionicParentView.enter', $scope.enter);

  /**
   * Leave the view
   */
  $scope.leave = function() {
    if (!$scope.networkStarted) return;
    $scope.removeListeners();
    csNetwork.close();
    $scope.networkStarted = false;
    $scope.search.loading = true;
  };
  $scope.$on('$ionicView.beforeLeave', $scope.leave);
  $scope.$on('$ionicParentView.beforeLeave', $scope.leave);
  $scope.$on('$destroy', $scope.leave);


  $scope.computeOptions = function() {
    var options = {
      filter: {
        member: (!$scope.search.type || $scope.search.type === 'member'),
        mirror: (!$scope.search.type || $scope.search.type === 'mirror'),
        endpointFilter : (angular.isDefined($scope.search.endpointFilter) ? $scope.search.endpointFilter : null),
        online: !($scope.search.type && $scope.search.type === 'offline')
      },
      sort: {
        type : $scope.search.sort,
        asc : $scope.search.asc
      },
      expertMode: $scope.expertMode,
      // larger timeout when on expert mode
      timeout: csConfig.timeout && ($scope.expertMode ? (csConfig.timeout / 10) : (csConfig.timeout / 100))
    };
    return options;
  };

  $scope.load = function() {

    if ($scope.search.loading){
      csNetwork.start($scope.node, $scope.computeOptions());

      // Catch event on new peers
      $scope.refreshing = false;
      $scope.listeners.push(
        csNetwork.api.data.on.changed($scope, function(data){
        if (!$scope.refreshing) {
          $scope.refreshing = true;
          csWot.extendAll(data.peers)
            .then(function() {
              // Avoid to refresh if view has been leaving
              if ($scope.networkStarted) {
                $scope.updateView(data);
              }
              $scope.refreshing = false;
            });
        }
      }));
    }

    // Show help tip
    $scope.showHelpTip();
  };

  $scope.updateView = function(data) {
    console.debug("[peers] Updating UI");
    $scope.$broadcast('$$rebind::' + 'rebind'); // force data binding
    $scope.search.results = data.peers;
    $scope.search.memberPeersCount = data.memberPeersCount;
    // Always tru if network not started (e.g. after leave+renter the view)
    $scope.search.loading = !$scope.networkStarted || csNetwork.isBusy();
    if ($scope.motion && $scope.search.results && $scope.search.results.length > 0) {
      $scope.motion.show({selector: '.item-peer'});
    }
    if (!$scope.loading) {
      $scope.$broadcast('$$rebind::' + 'rebind'); // force data binding
    }
  };

  $scope.refresh = function() {
    // Network
    $scope.search.loading = true;
    csNetwork.loadPeers();
  };

  $scope.sort = function() {
    $scope.search.loading = true;
    $scope.refreshing = true;
    csNetwork.sort($scope.computeOptions());
    $scope.updateView(csNetwork.data);
  };

  $scope.toggleSearchType = function(type){
    $scope.hideActionsPopover();
    if ($scope.search.type === type || type === 'none') {
      $scope.search.type = undefined;
    }
    else {
      $scope.search.type = type;
    }
    csNetwork.close();
    $scope.search.loading = true;
    $scope.load();

    // Update location href
    if ($scope.eanbleLocationHref) {
      $location.search({type: $scope.search.type}).replace();
    }
  };

  $scope.toggleSearchEndpoint = function(endpoint){
    $scope.hideActionsPopover();
    if ($scope.search.endpointFilter === endpoint || endpoint === null) {
      $scope.search.endpointFilter = null;
    }
    else {
      $scope.search.endpointFilter = endpoint;
    }
    $scope.sort();
  };

  $scope.toggleSort = function(sort){
    if ($scope.search.sort === sort && !$scope.search.asc) {
      $scope.search.asc = undefined;
      $scope.search.sort = undefined;
    }
    else {
      $scope.search.asc = ($scope.search.sort === sort) ? !$scope.search.asc : true;
      $scope.search.sort = sort;
    }
    $scope.sort();
  };

  $scope.selectPeer = function(peer) {
    // Skipp offline or WS2P node
    if (!peer.online || peer.isWs2p()) return;

    var stateParams = {server: peer.getServer()};
    if (peer.isSsl()) {
      stateParams.ssl = true;
    }
    if (peer.isTor()) {
      stateParams.tor = true;
    }
    $state.go('app.view_peer', stateParams);
  };

  $scope.$on('csView.action.refresh', function(event, context) {
    if (context == 'peers') {
      $scope.refresh();
    }
  });

  $scope.$on('csView.action.showActionsPopover', function(event, clickEvent) {
    $scope.showActionsPopover(clickEvent);
  });

  /* -- popover -- */

  $scope.showActionsPopover = function(event) {
    if (!$scope.actionsPopover) {
      $ionicPopover.fromTemplateUrl('templates/network/lookup_popover_actions.html', {
        scope: $scope
      }).then(function(popover) {
        $scope.actionsPopover = popover;
        //Cleanup the popover when we're done with it!
        $scope.$on('$destroy', function() {
          $scope.actionsPopover.remove();
        });
        $scope.actionsPopover.show(event);
      });
    }
    else {
      $scope.actionsPopover.show(event);
    }
  };

  $scope.hideActionsPopover = function() {
    if ($scope.actionsPopover) {
      $scope.actionsPopover.hide();
    }
  };

  $scope.showEndpointsPopover = function($event, peer, endpointFilter) {
    var endpoints = peer.getEndpoints(endpointFilter);
    endpoints = (endpoints||[]).reduce(function(res, ep) {
        var bma = BMA.node.parseEndPoint(ep);
        return res.concat({
          label: 'NETWORK.VIEW.NODE_ADDRESS',
          value: peer.getServer() + (bma.path||'')
        });
      }, []);
    if (!endpoints.length) return;

    UIUtils.popover.show($event, {
      templateUrl: 'templates/network/popover_endpoints.html',
      bindings: {
        titleKey: 'NETWORK.VIEW.ENDPOINTS.' + endpointFilter,
        items: endpoints
      }
    });
    $event.stopPropagation();
  };

  $scope.showWs2pPopover = function($event, peer) {
    $event.stopPropagation();

    return $translate('NETWORK.VIEW.PRIVATE_ACCESS')
      .then(function(privateAccessMessage) {
        UIUtils.popover.show($event, {
          templateUrl: 'templates/network/popover_endpoints.html',
          bindings: {
            titleKey: 'NETWORK.VIEW.ENDPOINTS.WS2P',
            valueKey: 'NETWORK.VIEW.NODE_ADDRESS',
            items: [
              {
                label: 'NETWORK.VIEW.NODE_ADDRESS',
                value: !peer.bma.private ? (peer.getServer() + (peer.bma.path||'')) : privateAccessMessage
              },
              {
                label: 'NETWORK.VIEW.WS2PID',
                value: peer.bma.ws2pid
              },
              {
                label: 'NETWORK.VIEW.POW_PREFIX',
                value: peer.powPrefix
              }]
            }
          });
      });
  };



  /* -- help tip -- */

  // Show help tip
  $scope.showHelpTip = function(index, isTour) {
    index = angular.isDefined(index) ? index : csSettings.data.helptip.network;
    isTour = angular.isDefined(isTour) ? isTour : false;
    if (index < 0) return;

    // Create a new scope for the tour controller
    var helptipScope = $scope.createHelptipScope();
    if (!helptipScope) return; // could be undefined, if a global tour already is already started
    helptipScope.tour = isTour;

    return helptipScope.startNetworkTour(index, false)
      .then(function(endIndex) {
        helptipScope.$destroy();
        if (!isTour) {
          csSettings.data.helptip.network = endIndex;
          csSettings.store();
        }
      });
  };
}


function NetworkLookupModalController($scope, $controller, parameters) {
  'ngInject';

  // Initialize the super class and extend it.
  angular.extend(this, $controller('NetworkLookupCtrl', {$scope: $scope}));

  // Read parameters
  parameters = parameters || {};
  $scope.enableFilter = angular.isDefined(parameters.enableFilter) ? parameters.enableFilter : true;
  $scope.search.type = angular.isDefined(parameters.type) ? parameters.type : $scope.search.type;
  $scope.search.endpointFilter = angular.isDefined(parameters.endpointFilter) ? parameters.endpointFilter : $scope.search.endpointFilter;
  $scope.expertMode = angular.isDefined(parameters.expertMode) ? parameters.expertMode : $scope.expertMode;
  $scope.ionItemClass = parameters.ionItemClass || 'item-border-large';
  $scope.eanbleLocationHref = false;
  $scope.helptipPrefix = '';

  $scope.selectPeer = function(peer) {
    $scope.closeModal(peer);
  };

  $scope.$on('modal.hidden', function(){
    $scope.leave();
  });

  // Disable this unsed method - called by load()
  $scope.showHelpTip = function() {};

  // Enter the modal
  $scope.enter();
}


function NetworkLookupPopoverController($scope, $controller) {
  'ngInject';

  // Initialize the super class and extend it.
  angular.extend(this, $controller('NetworkLookupCtrl', {$scope: $scope}));

  // Read parameters
  var parameters = parameters || {};
  $scope.enableFilter = angular.isDefined(parameters.enableFilter) ? parameters.enableFilter : true;
  $scope.search.type = angular.isDefined(parameters.type) ? parameters.type : $scope.search.type;
  $scope.search.endpointFilter = angular.isDefined(parameters.endpointFilter) ? parameters.endpointFilter : $scope.search.endpointFilter;
  $scope.expertMode = angular.isDefined(parameters.expertMode) ? parameters.expertMode : $scope.expertMode;
  $scope.ionItemClass = parameters.ionItemClass || 'item-border-large';
  $scope.helptipPrefix = '';

  $scope.selectPeer = function(peer) {
    $scope.closePopover(peer);
  };

  $scope.$on('popover.hidden', function(){
    $scope.leave();
  });

  // Disable this unsed method - called by load()
  $scope.showHelpTip = function() {};

  // Enter the popover
  $scope.enter();
}

function PeerInfoPopoverController($scope, $q, csSettings, csCurrency, csHttp, BMA) {
  'ngInject';

  $scope.loading = true;
  $scope.formData = {};

  $scope.load = function() {

    $scope.loading = true;
    $scope.formData = {};

    return $q.all([
      // get current block
      csCurrency.blockchain.current()
        .then(function(block) {
          $scope.formData.number = block.number;
          $scope.formData.medianTime = block.medianTime;
          $scope.formData.powMin = block.powMin;
          $scope.formData.useSsl = BMA.useSsl;
        })
        .catch(function() {
          delete $scope.formData.number;
          delete $scope.formData.medianTime;
          delete $scope.formData.powMin;
          delete $scope.formData.useSsl;
          // continue
        }),

      // Get node current version
      BMA.node.summary()
        .then(function(res){
          $scope.formData.version = res && res.duniter && res.duniter.version;
          $scope.formData.software = res && res.duniter && res.duniter.software;
        })
        .catch(function() {
          delete $scope.formData.version;
          delete $scope.formData.software;
          // continue
        }),

      // Get duniter latest version
      BMA.version.latest()
        .then(function(latestRelease){
          $scope.formData.latestRelease = latestRelease;
        })
        .catch(function() {
          delete $scope.formData.latestRelease;
          // continue
        })
      ])
      .then(function() {
        // Compare, to check if newer
        if ($scope.formData.latestRelease && $scope.formData.software == 'duniter') {
          var compare = csHttp.version.compare($scope.formData.version, $scope.formData.latestRelease.version);
          $scope.formData.isPreRelease = compare > 0;
          $scope.formData.hasNewRelease = compare < 0;
        }
        else {
          $scope.formData.isPreRelease = false;
          $scope.formData.hasNewRelease = false;
        }
        $scope.loading = false;
        $scope.$broadcast('$$rebind::' + 'rebind'); // force data binding
      });
  };

  // Update UI on new block
  csCurrency.api.data.on.newBlock($scope, function(block) {
    if ($scope.loading) return;
    console.debug("[peer info] Received new block. Reload content");
    $scope.load();
  });

  // Update UI on settings changed
  csSettings.api.data.on.changed($scope, function(data) {
    if ($scope.loading) return;
    console.debug("[peer info] Peer settings changed. Reload content");
    $scope.load();
  });

  // Load data when enter
  $scope.load();
}

function PeerViewController($scope, $q, $window, $state, UIUtils, csWot, BMA) {
  'ngInject';

  $scope.node = {};
  $scope.loading = true;
  $scope.isHttps = ($window.location.protocol === 'https:');
  $scope.isReachable = true;

  $scope.$on('$ionicView.beforeEnter', function (event, viewData) {
    // Enable back button (workaround need for navigation outside tabs - https://stackoverflow.com/a/35064602)
    viewData.enableBack = UIUtils.screen.isSmall() ? true : viewData.enableBack;
  });

  $scope.$on('$ionicView.enter', function(e, state) {
    var isDefaultNode = !state.stateParams || !state.stateParams.server;
    var server = state.stateParams && state.stateParams.server || BMA.server;
    var useSsl = state.stateParams && state.stateParams.ssl == "true" || (isDefaultNode ? BMA.useSsl : false);
    var useTor = state.stateParams.tor == "true" || (isDefaultNode ? BMA.useTor : false);

    return $scope.load(server, useSsl, useTor)
      .then(function() {
        return $scope.$broadcast('$csExtension.enter', e, state);
      })
      .then(function(){
        $scope.loading = false;
      });
  });

  $scope.load = function(server, useSsl, useTor) {
    var node = {
      server: server,
      host: server,
      useSsl: useSsl,
      useTor: useTor
    };
    var serverParts = server.split(':');
    if (serverParts.length == 2) {
      node.host = serverParts[0];
      node.port = serverParts[1];
    }

    angular.merge($scope.node,
      useTor ?
        // For TOR, use a web2tor to access the endpoint
        BMA.lightInstance(node.host + ".to", 443, true/*ssl*/, 60000 /*long timeout*/) :
        BMA.lightInstance(node.host, node.port, node.useSsl),
      node);

    $scope.isReachable = !$scope.isHttps || useSsl;
    if (!$scope.isReachable) {
      // Get node from the default BMA node
      return BMA.network.peers()
        .then(function(res) {
          // find the current peer
          var peers = (res && res.peers || []).reduce(function(res, json) {
            var peer = new Peer(json);
            return (peer.getEndpoints('BASIC_MERKLED_API') || []).reduce(function(res, ep) {
              var bma = BMA.node.parseEndPoint(ep);
              if((bma.dns == node.host || bma.ipv4 == node.host || bma.ipv6 == node.host) && (
                bma.port == node.port)) {
                peer.bma = bma;
                return res.concat(peer);
              }
              return res;
            }, res);
          }, []);
          var peer = peers.length && peers[0];

          // Current node found
          if (peer) {
            $scope.node.pubkey = peer.pubkey;
            $scope.node.currency = peer.currency;
            return csWot.extend($scope.node);
          }
          else {
            console.warn('Could not get peer from /network/peers');
          }
        });
    }

    return $q.all([

      // Get node peer info
      $scope.node.network.peering.self()
        .then(function(json) {
          $scope.node.pubkey = json.pubkey;
          $scope.node.currency = json.currency;
        }),

      // Get known peers
      $scope.node.network.peers()
        .then(function(json) {
          var peers = json.peers.map(function (p) {
            var peer = new Peer(p);
            peer.online = p.status == 'UP';
            peer.blockNumber = peer.block.replace(/-.+$/, '');
            peer.dns = peer.getDns();
            peer.id = peer.keyID();
            peer.server = peer.getServer();
            return peer;
          });

          // Extend (add uid+name+avatar)
          return csWot.extendAll([$scope.node].concat(peers))
            .then(function() {
              // Final sort
              $scope.peers = _.sortBy(peers, function(p) {
                var score = 1;
                score += 10000 * (p.online ? 1 : 0);
                score += 1000  * (p.hasMainConsensusBlock ? 1 : 0);
                score += 100   * (p.uid ? 1 : 0);
                return -score;
              });
              $scope.motion.show({selector: '.item-peer'});
            });
        }),

        // Get current block
        $scope.node.blockchain.current()
          .then(function(json) {
            $scope.current = json;
          })
      ])
      .catch(UIUtils.onError(useTor ? "PEER.VIEW.ERROR.LOADING_TOR_NODE_ERROR" : "PEER.VIEW.ERROR.LOADING_NODE_ERROR"));
  };

  $scope.selectPeer = function(peer) {
    // Skipp offline or WS2P node
    if (!peer.online || peer.isWs2p()) return;

    var stateParams = {server: peer.getServer()};
    if (peer.isSsl()) {
      stateParams.ssl = true;
    }
    if (peer.isTor()) {
      stateParams.tor = true;
    }
    $state.go('app.view_peer', stateParams);
  };

  /* -- manage link to raw document -- */

  $scope.openRawPeering = function(event) {
    return $scope.openLink(event, $scope.node.url + '/network/peering');
  };

  $scope.openRawCurrentBlock = function(event) {
    return $scope.openLink(event, $scope.node.url + '/blockchain/current');
  };
}


CurrencyViewController.$inject = ['$scope', '$q', '$timeout', '$ionicPopover', 'Modals', 'BMA', 'UIUtils', 'csSettings', 'csCurrency', 'csNetwork', 'ModalUtils'];
CurrencyLicenseModalController.$inject = ['$scope', '$http', 'UIUtils', 'csSettings', 'FileSaver'];
angular.module('cesium.currency.controllers', ['ngFileSaver', 'cesium.services'])

.config(['$stateProvider', function($stateProvider) {
  'ngInject';

  $stateProvider

    .state('app.currency', {
      url: "/currency",
      views: {
        'menuContent': {
          templateUrl: "templates/currency/view_currency.html",
          controller: 'CurrencyViewCtrl'
        }
      },
      data: {
        large: 'app.currency_lg'
      }
    })

    .state('app.currency.tab_parameters', {
      url: "/parameters",
      views: {
        'tab-parameters': {
          templateUrl: "templates/currency/tabs/tab_parameters.html"
        }
      }
    })

    .state('app.currency.tab_wot', {
      url: "/community",
      views: {
        'tab-wot': {
          templateUrl: "templates/currency/tabs/tab_wot.html"
        }
      }
    })

    .state('app.currency.tab_network', {
      url: "/network",
      views: {
        'tab-network': {
          templateUrl: "templates/currency/tabs/tab_network.html",
          controller: 'NetworkLookupCtrl'
        }
      }
    })

    .state('app.currency.tab_blocks', {
      url: "/blocks",
      views: {
        'tab-blocks': {
          templateUrl: "templates/currency/tabs/tab_blocks.html",
          controller: 'BlockLookupCtrl'
        }
      }
    })

    .state('app.currency_lg', {
      url: "/currency/lg",
      cache: false,
      views: {
        'menuContent': {
          templateUrl: "templates/currency/view_currency_lg.html",
          controller: 'CurrencyViewCtrl'
        }
      }
    })
  ;

}])

  .controller('CurrencyViewCtrl', CurrencyViewController)

  .controller('CurrencyLicenseModalCtrl', CurrencyLicenseModalController)
;

function CurrencyViewController($scope, $q, $timeout, $ionicPopover, Modals, BMA, UIUtils, csSettings, csCurrency, csNetwork, ModalUtils) {

  $scope.formData = {
    useRelative: false, // Override in enter()
    currency: '',
    M: 0,
    MoverN: 0,
    UD: 0,
    cactual: 0,
    c: 0,
    dt: 0,
    sigQty: 0,
    sigStock: 0,
    msWindow: 0,
    msValidity: 0,
    sigWindow: 0,
    sigValidity: 0,
    sigPeriod: 0,
    medianTime : 0,
    difficulty : 0,
    Nprev: 0,
    stepMax: 0,
    sentries: 0,
    xpercent: 0,
    durationFromLastUD: 0,
    blockUid: null,
    dtReeval: 0,
    udReevalTime0: 0,
    allRules: angular.isDefined(csSettings.data.currency && csSettings.data.currency.allRules) ?
      csSettings.data.currency.allRules :
      csSettings.data.expertMode,
    allWotRules: angular.isDefined(csSettings.data.currency && csSettings.data.currency.allWotRules) ?
      csSettings.data.currency.allWotRules :
      csSettings.data.expertMode,
    licenseUrl: csSettings.getLicenseUrl()
  };
  $scope.loading = true;
  $scope.screen = UIUtils.screen;

  $scope.enter = function(e, state) {
    if ($scope.loading) { // run only once (first enter)
      $scope.formData.useRelative = csSettings.data.useRelative;
      csCurrency.get()
        .then($scope.load)
        .then(function() {
          // Show help tip, if login
          if ($scope.isLogin()) {
            $scope.showHelpTip();
          }
        })
        .catch(UIUtils.onError('ERROR.GET_CURRENCY_FAILED'));

      csNetwork.api.data.on.mainBlockChanged($scope, function(mainBlock) {
        if ($scope.loading) return;
        if ($scope.formData.blockUid !== mainBlock.buid) {
          console.debug("[currency] Updating parameters UI (new main block detected)");
          $timeout($scope.load, 1000 /*waiting propagation to requested node*/);
        }
      });
    }
    // Notify extensions
    $scope.$broadcast('$csExtension.enter', state);
  };
  $scope.$on('$ionicView.enter', $scope.enter);

  $scope.load = function() {
    // Load data from node
    var data = {}, M, lastUDTime, now = new Date().getTime();
    return $q.all([

      // Get the currency parameters
      BMA.blockchain.parameters()
        .then(function(json){
          data.currency = json.currency;
          data.c = json.c;
          data.dt = json.dt;
          data.sigQty = json.sigQty;
          data.sigStock = json.sigStock;
          data.msWindow = json.msWindow;
          data.msValidity = json.msValidity;
          data.sigWindow = json.sigWindow;
          data.sigValidity = json.sigValidity;
          data.sigPeriod = json.sigPeriod;
          data.stepMax = json.stepMax;
          data.xpercent = json.xpercent;
          data.avgGenTime = json.avgGenTime;
          data.dtReeval = json.dtReeval;
          data.udTime0 = json.udTime0;
          data.udReevalTime0 = json.udReevalTime0;

          // Compat with Duniter < 1.0
          if (!data.dtReeval) {
            data.dtReeval = data.dt;
          }
        }),

      // Get the current block informations
      BMA.blockchain.current()
        .then(function(block){
          M = block.monetaryMass;
          data.N = block.membersCount;
          data.medianTime  = block.medianTime;
          data.difficulty  = block.powMin;
          data.blockUid = [block.number, block.hash].join('-');
        })
        .catch(function(err){
          // Special case for currency init (root block not exists): use fixed values
          if (err && err.ucode == BMA.errorCodes.NO_CURRENT_BLOCK) {
            M = 0;
            data.N = 0;
            data.medianTime = Math.trunc(new Date().getTime() / 1000);
            data.difficulty  = 0;
            data.blockUid = null;
            return;
          }
          throw err;
        }),

      // Get the UD informations
      BMA.blockchain.stats.ud()
        .then(function(res){
          if (res.result.blocks.length) {
            var lastBlockWithUD = res.result.blocks[res.result.blocks.length - 1];
            return BMA.blockchain.block({ block: lastBlockWithUD })
              .then(function(block){
                data.currentUD = (block.unitbase > 0) ? block.dividend * Math.pow(10, block.unitbase) : block.dividend;
                lastUDTime = block.medianTime;
                data.Nprev = block.membersCount;
              });
          }
          // block #0
          else {
            lastUDTime=0;
            data.Nprev=0;
            return BMA.blockchain.parameters()
              .then(function(json){
                data.currentUD = json.ud0;
              });
          }
        })
    ])

    // Process loaded data
    .then(function(){
      var Mprev = M - data.currentUD * data.Nprev; // remove fresh money
      var MoverNprev = data.Nprev ? (Mprev / data.Nprev) : 0;
      data.cactual = MoverNprev ? 100 * data.currentUD / MoverNprev : 0;
      data.M = M;
      data.MoverN = data.Nprev ? ((Mprev ? Mprev : M/*need at currency start only*/) / data.Nprev) : 0;
      data.UD = data.currentUD;
      data.durationFromLastUD = lastUDTime ? data.medianTime - lastUDTime : 0;
      data.sentries = Math.ceil(Math.pow(data.N, 1/ data.stepMax));

      // Apply to formData
      angular.extend($scope.formData, data);

      console.debug("[currency] Parameters loaded in " + (new Date().getTime() - now) + 'ms' );
      $scope.loading = false;
      $scope.$broadcast('$$rebind::' + 'rebind'); // force bind of currency name

      // Set Ink
      UIUtils.ink();

      return UIUtils.loading.hide();
    })
    .catch(function(err) {
      $scope.loading = false;
      UIUtils.onError('ERROR.LOAD_PEER_DATA_FAILED')(err);
    });
  };

  $scope.refresh = function() {
    if ($scope.loading) return;

    $scope.loading= true;
    UIUtils.loading.show();

    // Load data
    return $scope.load()
      .then(function() {
        // Notify extensions
        $scope.$broadcast('csView.action.refresh', 'currency');
      });
  };

  $scope.refreshPeers = function() {
    $scope.$broadcast('csView.action.refresh', 'peers');
    return $q.when(); // need by 'ion-refresher'
  };

  $scope.showExtendActionsPopover = function(event) {
    $scope.$broadcast('csView.action.showActionsPopover', event);
  };

  $scope.onAllRulesChange = function() {
    csSettings.data.currency = csSettings.data.currency || {};
    if (csSettings.data.currency.allRules !== $scope.formData.allRules) {
      csSettings.data.currency.allRules = $scope.formData.allRules;
      csSettings.store();
    }
  };
  $scope.$watch('formData.allRules', $scope.onAllRulesChange);

  $scope.onAllWotRulesChange = function() {
    csSettings.data.currency = csSettings.data.currency || {};
    if (csSettings.data.currency.allWotRules !== $scope.formData.allWotRules) {
      csSettings.data.currency.allWotRules = $scope.formData.allWotRules;
      csSettings.store();
    }
  };
  $scope.$watch('formData.allWotRules', $scope.onAllWotRulesChange);

  /* -- help tip -- */


  $scope.startCurrencyTour = function() {
    $scope.hideActionsPopover();
    return $scope.showHelpTip(0, true);
  };

  $scope.showHelpTip = function(index, isTour) {
    index = angular.isDefined(index) ? index : csSettings.data.helptip.currency;
    isTour = angular.isDefined(isTour) ? isTour : false;
    if (index < 0) return;

    // Create a new scope for the tour controller
    var helptipScope = $scope.createHelptipScope(isTour);
    if (!helptipScope) return; // could be undefined, if a global tour already is already started
    helptipScope.tour = isTour;

    return helptipScope.startCurrencyTour(index, false)
      .then(function(endIndex) {
        helptipScope.$destroy();
        csSettings.data.helptip.currency = endIndex;
        csSettings.store();
      });
  };

  /* -- modals -- */

  $scope.showLicenseModal = function() {
    return ModalUtils.show('templates/currency/modal_license.html','CurrencyLicenseModalCtrl');
  };

  $scope.showHelpModal = function(helpAnchor) {
    Modals.showHelp({anchor: helpAnchor});
  };

  /* -- popover -- */

  $scope.showActionsPopover = function(event) {
    if (!$scope.actionsPopover) {
      $ionicPopover.fromTemplateUrl('templates/currency/popover_actions.html', {
        scope: $scope
      }).then(function(popover) {
        $scope.actionsPopover = popover;
        //Cleanup the popover when we're done with it!
        $scope.$on('$destroy', function() {
          $scope.actionsPopover.remove();
        });
        $scope.actionsPopover.show(event);
      });
    }
    else {
      $scope.actionsPopover.show(event);
    }
  };

  $scope.hideActionsPopover = function() {
    if ($scope.actionsPopover) {
      $scope.actionsPopover.hide();
    }
  };
}


function CurrencyLicenseModalController($scope, $http, UIUtils, csSettings, FileSaver) {
  'ngInject';

  $scope.loading = true;

  $scope.load = function() {
    if ($scope.loading) {
      $scope.licenseUrl = csSettings.getLicenseUrl();
      // Use HTML in iframe, when original file is markdown (fix #538)
      if ($scope.licenseUrl && $scope.licenseUrl.substring($scope.licenseUrl.length - 3) != '.txt') {
        $scope.licenseUrlHtml = $scope.licenseUrl + '.html';
        $scope.licenseUrl = $scope.licenseUrl +'.txt';
      }
      $scope.loading = false;
    }
  };
  $scope.$on('modal.shown', $scope.load);

  $scope.downloadFile = function() {
    if (!$scope.licenseUrl) return;
    return $http.get($scope.licenseUrl)
      .success(function(data){
        var file = new Blob([data], {type: 'text/plain; charset=utf-8'});
        FileSaver.saveAs(file, 'license.txt');
      }).error(function(){
        UIUtils.onError('ERROR.GET_LICENSE_FILE_FAILED')();
      });

  };
}


TransferController.$inject = ['$scope', '$controller', 'UIUtils'];
TransferModalController.$inject = ['$scope', '$q', '$translate', '$timeout', '$filter', '$focus', 'Device', 'BMA', 'csWallet', 'UIUtils', 'Modals', 'csCurrency', 'csSettings', 'parameters'];angular.module('cesium.transfer.controllers', ['cesium.services', 'cesium.currency.controllers'])

  .config(['$stateProvider', function($stateProvider) {
    'ngInject';
    $stateProvider

      .state('app.new_transfer', {
        cache: false,
        url: "/transfer?amount&udAmount&comment&restPub&all&wallet",
        views: {
          'menuContent': {
            templateUrl: "templates/wallet/new_transfer.html",
            controller: 'TransferCtrl'
          }
        }
      })

      .state('app.new_transfer_pubkey_uid', {
        cache: false,
        url: "/transfer/:pubkey/:uid?amount&udAmount&comment&restPub&all&wallet",
        views: {
          'menuContent': {
            templateUrl: "templates/wallet/new_transfer.html",
            controller: 'TransferCtrl'
          }
        }
      })

      .state('app.new_transfer_pubkey', {
        cache: false,
        url: "/transfer/:pubkey?amount&udAmount&comment&restPub&all&wallet",
        views: {
          'menuContent': {
            templateUrl: "templates/wallet/new_transfer.html",
            controller: 'TransferCtrl'
          }
        }
      })
    ;
  }])

  .controller('TransferCtrl', TransferController)

  .controller('TransferModalCtrl', TransferModalController)
;

function TransferController($scope, $controller, UIUtils) {
  'ngInject';

  // Initialize the super class and extend it.
  angular.extend(this, $controller('TransferModalCtrl', {$scope: $scope, parameters: {}}));

  $scope.enter = function(e, state) {

    // Apply state  parameters
    if (state && state.stateParams) {
      $scope.setParameters(state.stateParams);
    }

    // Load wallet
    return $scope.load()
      .then(UIUtils.loading.hide);
  };
  $scope.$on('$ionicView.enter', $scope.enter);

  $scope.setForm = function(form) {
    $scope.form = form;
  };

  // override modal close
  $scope.closeModal = function() {
    return $scope.showHome();
  };
}

function TransferModalController($scope, $q, $translate, $timeout, $filter, $focus, Device, BMA, csWallet, UIUtils, Modals,
                                 csCurrency, csSettings, parameters) {
  'ngInject';

  var
    wallet,
    minQuantitativeAmount = 0.01;

  $scope.convertedBalance = 0;
  $scope.formData = {
    destPub: null,
    amount: null,
    comment: null,
    useRelative: csSettings.data.useRelative,
    useComment: false,
    all: false,
    restPub: null,
    restAmount: null,
    walletId: null
  };
  $scope.udAmount = null;
  $scope.minAmount = minQuantitativeAmount;
  $scope.commentPattern = BMA.regexp.COMMENT;
  $scope.currency = csCurrency.data.name;
  $scope.loading = true;
  $scope.commentInputId = 'transferComment-' + $scope.$id;
  $scope.enableSelectWallet = true;

  // Define keyboard settings, to bind with model (If small screen AND mobile devices)
  $scope.smallscreen = angular.isDefined($scope.smallscreen) ? $scope.smallscreen : UIUtils.screen.isSmall();
  if ($scope.smallscreen || Device.enable) {
    $scope.digitKeyboardSettings = $scope.digitKeyboardSettings || Device.keyboard.digit.settings.bindModel(
        $scope,
        'formData.amount',
        {
          decimal: true,
          decimalSeparator: '.',
          resizeContent: true
        });
    $scope.digitKeyboardVisible = false;
  }

  $scope.setParameters = function(parameters) {
    if (!parameters) return;
    if (parameters.pubkey) {
      $scope.formData.destPub = parameters.pubkey;
    }
    if (parameters.uid) {
      $scope.destUid = parameters.uid;
      $scope.destPub = '';
    }
    else {
      $scope.destUid = '';
      $scope.destPub = parameters.pubkey;
    }
    if (parameters.amount) {
      $scope.formData.amount = parameters.amount;
      $scope.formData.useRelative=false;
    }
    else if (parameters.udAmount) {
      $scope.formData.amount = parameters.udAmount;
      $scope.formData.useRelative=true;
    }
    if (parameters.comment) {
      $scope.formData.useComment=true;
      $scope.formData.comment = parameters.comment;
    }
    if (parameters.restPub || parameters.all) {
      $scope.restUid = '';
      $scope.restPub = parameters.restPub;
      $scope.formData.restPub = parameters.restPub;
      $scope.formData.all = true;
    }
    else {
      $scope.formData.all = false;
    }
    if (!parameters.wallet || parameters.wallet === "default") {
      $scope.formData.walletId = csWallet.id;
    }
    else {
      $scope.formData.walletId = parameters.wallet;
    }
  };
  // Read default parameters
  $scope.setParameters(parameters);

  $scope.load = function() {
    $scope.enableSelectWallet = csWallet.children.count() > 0;

    wallet = $scope.enableSelectWallet && ($scope.formData.walletId ? csWallet.children.get($scope.formData.walletId) : csWallet) || csWallet;
    if (!wallet.isDefault()) {
      console.debug("[transfer] Using wallet {" + wallet.id + "}");
    }
    // Make to sure to load full wallet data (balance)
    return wallet.login({sources: true, silent: true})
      .then(function(data) {
        $scope.walletData = data;
        $scope.formData.walletId = wallet.id;
        $scope.onUseRelativeChanged();
        $scope.onAmountChanged();

        $scope.$watch('walletData.balance', $scope.onAmountChanged, true);
        $scope.$watch('formData.amount', $scope.onAmountChanged, true);

        $scope.$watch('formData.useRelative', $scope.onUseRelativeChanged, true);
        $scope.$watch('walletData.balance', $scope.onUseRelativeChanged, true);

        UIUtils.ink({selector: '.modal-transfer .ink'});

        if (!$scope.destPub || $scope.destUid) {
          $scope.loading = false;
        }
        else {
          // Fill the uid from the pubkey
          return csWot.extend({pubkey: $scope.destPub})
            .then(function(res) {
              $scope.destUid = res && (res.name || res.uid);
              if ($scope.destUid) {
                $scope.destPub = '';
              }
              $scope.loading = false;
            });
        }
      })
      .catch(function(err){
        if (err == 'CANCELLED') return $scope.cancel(); // close the modal
        UIUtils.onError('ERROR.LOGIN_FAILED')(err);
      });
  };
  $scope.$on('modal.shown', $scope.load);

  $scope.cancel = function() {
    $scope.closeModal();
  };

  // When changing use relative UD
  $scope.onUseRelativeChanged = function() {
    $scope.currency = csCurrency.data.name;
    if ($scope.formData.useRelative) {
      $scope.convertedBalance = $scope.walletData.balance / csCurrency.data.currentUD;
      $scope.minAmount = minQuantitativeAmount / (csCurrency.data.currentUD / 100);
    } else {
      $scope.convertedBalance = $scope.walletData.balance / 100;
      $scope.minAmount = minQuantitativeAmount;
    }
    if ($scope.form && !$scope.loading) {
      $scope.form.$setPristine(true);
    }
  };

  $scope.onAmountChanged = function() {

    var amount = $scope.formData.amount;
    if (amount && typeof amount === "string") {
      amount = parseFloat(amount.replace(new RegExp('[.,]'), '.'));
    }

    var valid = true;

    // Avoid amount less than the minimal - fix #373
    if (amount && amount < $scope.minAmount) {
      valid = false;
      $scope.form.amount.$error = $scope.form.amount.$error || {};
      $scope.form.amount.$error.min = true;
    }
    else if ($scope.form.amount.$error && $scope.form.amount.$error.min){
      delete $scope.form.amount.$error.min;
    }

    // Avoid amount greater than the balance
    if (amount && amount > $scope.convertedBalance){
      $scope.form.$valid = false;
      $scope.form.amount.$invalid = true;
      $scope.form.amount.$error = $scope.form.amount.$error || {};
      $scope.form.amount.$error = {max: true};
    }
    else if ($scope.form.amount.$error && $scope.form.amount.$error.max){
      delete $scope.form.amount.$error.max;
    }

    $scope.form.$valid = valid;
    $scope.form.amount.$invalid = !valid;

    if (!valid || !$scope.formData.all || !amount) {
      $scope.formData.restAmount = undefined;
    }
    else {
      if ($scope.formData.useRelative) {
        $scope.formData.restAmount = $scope.walletData.balance - amount * csCurrency.data.currentUD;
        if ($scope.formData.restAmount < minQuantitativeAmount) {
          $scope.formData.restAmount = 0;
        }
      } else {
        $scope.formData.restAmount  = $scope.walletData.balance - amount * 100;
      }
    }
  };

  $scope.doTransfer = function() {
    $scope.form.$submitted=true;

    if(!$scope.form.$valid || !$scope.formData.destPub || !$scope.formData.amount) {
      return;
    }
    var amount = $scope.formData.amount;
    if (typeof amount === "string") {
      amount = parseFloat(amount.replace(new RegExp('[.,]'), '.'));
    }

    // Avoid multiple call
    if ($scope.sending) return;
    $scope.sending = true;

    var currentUD;
    return $q.all([
        // Make sure user is auth
        wallet.auth({silent: true}),

        // Get current UD
        csCurrency.currentUD()
          .then(function(res) {
            currentUD = res;
          }),

        // Hide digit keyboard
        $scope.hideDigitKeyboard(300)
       ])
      .then($scope.askTransferConfirm)
      .then(function(confirm){
        if (!confirm) {
          $scope.sending = false;
          return;
        }

        return UIUtils.loading.show()
          .then(function(){
            // convert amount
            if ($scope.formData.useRelative) {
              amount = currentUD * amount;
            }
            else {
              amount = amount.toFixed(2) * 100; // remove 2 decimals on quantitative mode
            }

            // convert comment: trim, then null if empty
            var comment = $scope.formData.comment && $scope.formData.comment.trim();
            if (comment && !comment.length) {
              comment = null;
            }
            var hasRest = $scope.formData.all  && $scope.formData.restAmount > 0;
            if (hasRest) {
              return wallet.transferAll($scope.formData.destPub, amount, comment, $scope.formData.useRelative, $scope.formData.restPub);
            }
            else {
              return wallet.transfer($scope.formData.destPub, amount, comment, $scope.formData.useRelative);
            }
          })
          .then(function() {
            $scope.sending = false;
            UIUtils.loading.hide();
            return $scope.closeModal(true);
          })
          .then(function(res) {
            $timeout(function() {
              UIUtils.toast.show('INFO.TRANSFER_SENT');
            }, 500);
            return res;
          });
    })
    .catch(function(err) {
      $scope.sending = false;
      // Wallet auth cancelled by user
      if (err === 'CANCELLED') return;
      UIUtils.onError('ERROR.SEND_TX_FAILED')(err);
    });
  };

  $scope.askTransferConfirm = function() {
    return $translate(['COMMON.UD', 'COMMON.EMPTY_PARENTHESIS'])
      .then(function(translations) {
        var hasRest = $scope.formData.all  && $scope.formData.restAmount > 0;
        return $translate(hasRest ? 'CONFIRM.TRANSFER_ALL' : 'CONFIRM.TRANSFER', {
          from: $scope.walletData.isMember ? $scope.walletData.uid : $filter('formatPubkey')($scope.walletData.pubkey),
          to: $scope.destUid || $scope.destPub,
          amount: $scope.formData.amount,
          unit: $scope.formData.useRelative ? translations['COMMON.UD'] : $filter('abbreviate')($scope.currency),
          comment: (!$scope.formData.comment || $scope.formData.comment.trim().length === 0) ? translations['COMMON.EMPTY_PARENTHESIS'] : $scope.formData.comment,
          restAmount: hasRest && $filter('formatAmount')($scope.formData.restAmount, {useRelative: $scope.formData.useRelative}),
          restTo: hasRest && ($scope.restUid || $scope.restPub)
        });
      })
      .then(UIUtils.alert.confirm);
  };

  $scope.addComment = function() {
    $scope.formData.useComment = true;
    // Focus on comment field
    if ($scope.commentInputId) {
      $timeout(function() {
        $focus($scope.commentInputId);
      }, 200);
    }
  };

  /* -- modals -- */
  $scope.showWotLookupModal = function(formDataField) {

    formDataField = formDataField || 'destPub';

    // Hide numerical keyboard
    $scope.hideDigitKeyboard(0);

    return Modals.showWotLookup()
      .then(function(result){
        if (result) {
          if (formDataField == 'destPub') {
            $scope.destUid = result.uid;
            $scope.destPub = result.uid ? '' : result.pubkey;
            $scope.formData.destPub = result.pubkey;
          }
          else if (formDataField == 'restPub') {
            $scope.restUid = result.uid;
            $scope.restPub = result.uid ? '' : result.pubkey;
            $scope.formData.restPub = result.pubkey;
          }
        }
      });
  };

  $scope.showSelectWalletModal = function() {
    if (!$scope.enableSelectWallet) return;

    return Modals.showSelectWallet({
      useRelative: $scope.formData.useRelative,
      showDefault: true,
      showBalance: true
    })
      .then(function(newWallet) {
        if (!newWallet || (wallet && wallet.id === newWallet.id)) return;
        wallet = newWallet;
        $scope.walletData = wallet.data;
        console.debug("[transfer] Using wallet {" + wallet.id + "}");
        $scope.onAmountChanged();
      });
  };

  /* -- popover -- */

  $scope.showUnitPopover = function($event) {
    UIUtils.popover.show($event, {
      templateUrl: 'templates/wallet/popover_unit.html',
      scope: $scope
    })
    .then(function(useRelative) {
      $scope.formData.useRelative = useRelative;
    });
  };

  /* -- keyboard -- */
  $scope.showDigitKeyboard = function() {
    // No keyboard settings, or already visible: skip
    if (!$scope.digitKeyboardSettings || $scope.digitKeyboardVisible) return;

    // Device enable: hide OS keyboard
    if (Device.enable) {

      // Hide device keyboard
      Device.keyboard.close();

      // Open the digit keyboard (with a delay)
      return $timeout(function() {
        $scope.digitKeyboardVisible = true;
      }, 200);
    }

    // Open the digit keyboard
    $scope.digitKeyboardVisible = true;
    return $q.when();
  };

  $scope.hideDigitKeyboard = function(timeout) {
    if (!$scope.digitKeyboardVisible) return $q.when();
    $scope.digitKeyboardVisible = false;
    return $timeout(function() {}, timeout||200);
  };
}



SettingsController.$inject = ['$scope', '$q', '$ionicHistory', '$ionicPopup', '$timeout', '$translate', '$ionicPopover', 'UIUtils', 'Modals', 'BMA', 'csHttp', 'csCurrency', 'csSettings', 'csPlatform'];
angular.module('cesium.settings.controllers', ['cesium.services', 'cesium.currency.controllers'])
  .config(['$stateProvider', function($stateProvider) {
    'ngInject';

    $stateProvider

      .state('app.settings', {
        url: "/settings",
        views: {
          'menuContent': {
            templateUrl: "templates/settings/settings.html",
            controller: 'SettingsCtrl'
          }
        }
      })
    ;
  }])

  .controller('SettingsCtrl', SettingsController)
;

function SettingsController($scope, $q, $ionicHistory, $ionicPopup, $timeout, $translate, $ionicPopover,
                            UIUtils, Modals, BMA, csHttp, csCurrency, csSettings, csPlatform) {
  'ngInject';

  $scope.formData = angular.copy(csSettings.data);
  $scope.popupData = {}; // need for the node popup
  $scope.loading = true;
  $scope.nodePopup = {};
  $scope.bma = BMA;


  $scope.keepAuthIdleLabels = {
    /*0: {
      labelKey: 'SETTINGS.KEEP_AUTH_OPTION.NEVER'
    },*/
    10: {
      labelKey: 'SETTINGS.KEEP_AUTH_OPTION.SECONDS',
      labelParams: {value: 10}
    },
    30: {
      labelKey: 'SETTINGS.KEEP_AUTH_OPTION.SECONDS',
      labelParams: {value: 30}
    },
    60: {
      labelKey: 'SETTINGS.KEEP_AUTH_OPTION.MINUTE',
      labelParams: {value: 1}
    },
    600: {
      labelKey: 'SETTINGS.KEEP_AUTH_OPTION.MINUTES',
      labelParams: {value: 10}
    },
    3600: {
      labelKey: 'SETTINGS.KEEP_AUTH_OPTION.HOUR',
      labelParams: {value: 1}
    },
    9999: {
      labelKey: 'SETTINGS.KEEP_AUTH_OPTION.ALWAYS'
    }
  };
  $scope.keepAuthIdles = _.keys($scope.keepAuthIdleLabels);

  $scope.blockValidityWindowLabels = {
    0: {
      labelKey: 'SETTINGS.BLOCK_VALIDITY_OPTION.NONE'
    },
    6: {
      labelKey: 'SETTINGS.BLOCK_VALIDITY_OPTION.N',
      labelParams: {count: 6, time: undefined /*defined in enter*/}
    },
    12: {
      labelKey: 'SETTINGS.BLOCK_VALIDITY_OPTION.N',
      labelParams: {count: 12, time: undefined /*defined in enter*/}
    },
    24: {
      labelKey: 'SETTINGS.BLOCK_VALIDITY_OPTION.N',
      labelParams: {count: 24, time: undefined /*defined in enter*/}
    }
  };
  $scope.blockValidityWindows = _.keys($scope.blockValidityWindowLabels);

  $scope.$on('$ionicView.enter', function() {
    $q.all([
      csSettings.ready(),
      csCurrency.parameters()
        .then(function(parameters) {
          _.each($scope.blockValidityWindows, function(blockCount) {
            if (blockCount > 0) {
              $scope.blockValidityWindowLabels[blockCount].labelParams.time=parameters.avgGenTime * blockCount;
            }
          });
        })
    ])
      .then($scope.load)
    ;
  });

  $scope.setPopupForm = function(popupForm) {
    $scope.popupForm = popupForm;
  };

  $scope.load = function() {
    $scope.loading = true; // to avoid the call of csWallet.store()

    // Fill locales
    $scope.locales = angular.copy(csSettings.locales);

    // Apply settings
    angular.merge($scope.formData, csSettings.data);

    // Make sure to use full locale object (id+name)
    $scope.formData.locale = (csSettings.data.locale && csSettings.data.locale.id && _.findWhere($scope.locales, {id: csSettings.data.locale.id})) ||
      _.findWhere($scope.locales, {id: csSettings.defaultSettings.locale.id});

    $scope.loading = false;

    $timeout(function() {
      // Set Ink
      UIUtils.ink({selector: '.item'});
      $scope.showHelpTip();
    }, 100);
  };

  $scope.reset = function() {
    if ($scope.actionsPopover) {
      $scope.actionsPopover.hide();
    }
    $scope.pendingSaving = true;
    csSettings.reset()
      .then(csPlatform.restart)
      .then(function() {
        // reload
        $scope.load();
        $scope.pendingSaving = false;
      });
  };

  $scope.changeLanguage = function(langKey) {
    $translate.use(langKey);
  };

  // Change node
  $scope.changeNode= function(node) {
    node = node || {
        host: $scope.formData.node.host,
        port: $scope.formData.node.port && $scope.formData.node.port != 80 && $scope.formData.node.port != 443 ? $scope.formData.node.port : undefined,
        useSsl: angular.isDefined($scope.formData.node.useSsl) ?
          $scope.formData.node.useSsl :
          ($scope.formData.node.port == 443)
      };
    $scope.showNodePopup(node)
    .then(function(newNode) {
      if (newNode.host === $scope.formData.node.host &&
        newNode.port === $scope.formData.node.port &&
        newNode.useSsl === $scope.formData.node.useSsl) {
        return; // same node = nothing to do
      }
      UIUtils.loading.show();

      var nodeBMA = BMA.instance(newNode.host, newNode.port, newNode.useSsl, true /*cache*/);
      nodeBMA.isAlive()
        .then(function(alive) {
          if (!alive) {
            UIUtils.loading.hide();
            return UIUtils.alert.error('ERROR.INVALID_NODE_SUMMARY')
              .then(function(){
                $scope.changeNode(newNode); // loop
              });
          }
          UIUtils.loading.hide();
          $scope.formData.node = newNode;
          delete $scope.formData.temporary;
          BMA.copy(nodeBMA);
          $scope.bma = BMA;

          // Start platform is not already started
          csPlatform.restart();

          // Reset history cache
          return $ionicHistory.clearCache();
        });
    });
  };

  $scope.showNodeList = function() {
    $ionicPopup._popupStack[0].responseDeferred.promise.close();
    return Modals.showNetworkLookup({enableFilter: true, type: 'member'})
      .then(function (peer) {
        if (peer) {
          var bma = peer.getBMA();
          return {
            host: (bma.dns ? bma.dns :
                   (peer.hasValid4(bma) ? bma.ipv4 : bma.ipv6)),
            port: bma.port || 80,
            useSsl: bma.useSsl
          };
        }
      })
      .then(function(newNode) {
        $scope.changeNode(newNode);
      });
  };

  // Show node popup
  $scope.showNodePopup = function(node) {
    return $q(function(resolve, reject) {
      $scope.popupData.newNode = node.port ? [node.host, node.port].join(':') : node.host;
      $scope.popupData.useSsl = node.useSsl;
      if (!!$scope.popupForm) {
        $scope.popupForm.$setPristine();
      }
      $translate(['SETTINGS.POPUP_PEER.TITLE', 'COMMON.BTN_OK', 'COMMON.BTN_CANCEL'])
        .then(function (translations) {
          // Choose UID popup
          $ionicPopup.show({
            templateUrl: 'templates/settings/popup_node.html',
            title: translations['SETTINGS.POPUP_PEER.TITLE'],
            scope: $scope,
            buttons: [
              { text: translations['COMMON.BTN_CANCEL'] },
              {
                text: translations['COMMON.BTN_OK'],
                type: 'button-positive',
                onTap: function(e) {
                  $scope.popupForm.$submitted=true;
                  if(!$scope.popupForm.$valid || !$scope.popupForm.newNode) {
                    //don't allow the user to close unless he enters a node
                    e.preventDefault();
                  } else {
                    return {
                      server: $scope.popupData.newNode,
                      useSsl: $scope.popupData.useSsl
                    };
                  }
                }
              }
            ]
          })
          .then(function(res) {
            if (!res) { // user cancel
              UIUtils.loading.hide();
              return;
            }
            var parts = res.server.split(':');
            parts[1] = parts[1] ? parts[1] : 80;
            resolve({
              host: parts[0],
              port: parts[1],
              useSsl: res.useSsl
            });
          });
        });
      });
    };

  $scope.save = function() {
    if ($scope.loading || $scope.pendingSaving) return $q.when();
    if ($scope.saving) {
      $scope.pendingSaving = true;
      // Retry later
      return $timeout(function() {
        $scope.pendingSaving = false;
        return $scope.save();
      }, 500);
    }
    $scope.saving = true;

    // Async - to avoid UI lock
    $timeout(function() {
      // Make sure to format helptip
      $scope.cleanupHelpTip();
      angular.merge(csSettings.data, $scope.formData);
      // Manually removed some attributes
      if (!$scope.formData.temporary) {
        delete csSettings.data.node.temporary;
      }
      csSettings.store();
      $scope.saving = false;
    }, 100);
  };

  $scope.onDataChanged = function(oldValue, newValue, scope) {
    if ($scope.loading || $scope.pendingSaving) return $q.when();
    if ($scope.saving) {
      $scope.pendingSaving = true;
      // Retry later
      return $timeout(function() {
        $scope.pendingSaving = false;
        return $scope.onDataChanged(oldValue, newValue, scope);
      }, 500);
    }

    var updated = !angular.equals(oldValue, newValue);
    if (updated) {
      //console.debug('Detected settings update: will save it');
      $scope.save();
    }
  };
  $scope.$watch('formData', $scope.onDataChanged, true);

  $scope.getServer = function() {
    if (!$scope.formData.node || !$scope.formData.node.host) return '';
    return csHttp.getServer($scope.formData.node.host, $scope.formData.node.port);
  };

  $scope.cleanupHelpTip = function() {
    var helptipChanged = $scope.formData.helptip.enable !== csSettings.data.helptip.enable;
    if (helptipChanged) {
      var enable = $scope.formData.helptip.enable;
      // Apply default values
      $scope.formData.helptip = angular.merge({}, csSettings.defaultSettings.helptip);
      // Then restore the enable flag
      $scope.formData.helptip.enable = enable;
    }
  };

  /* -- modals & popover -- */

  $scope.showActionsPopover = function(event) {
    if (!$scope.actionsPopover) {
      $ionicPopover.fromTemplateUrl('templates/settings/popover_actions.html', {
        scope: $scope
      }).then(function(popover) {
        $scope.actionsPopover = popover;
        //Cleanup the popover when we're done with it!
        $scope.$on('$destroy', function() {
          $scope.actionsPopover.remove();
        });
        $scope.actionsPopover.show(event);
      });
    }
    else {
      $scope.actionsPopover.show(event);
    }
  };

  $scope.hideActionsPopover = function() {
    if ($scope.actionsPopover) {
      $scope.actionsPopover.hide();
    }
  };

  $scope.startSettingsTour = function() {
    $scope.hideActionsPopover();

    return $scope.showHelpTip(0, true);
  };

  // Show help tip (show only not already shown)
  $scope.showHelpTip = function(index, tour) {
    if (!$scope.isLogin() && !tour) return;
    index = angular.isDefined(index) ? index : csSettings.data.helptip.settings;
    if (index < 0) return;
    if (index === 0) index = 1; // skip first step

    // Create a new scope for the tour controller
    var helptipScope = $scope.createHelptipScope(tour);
    if (!helptipScope) return; // could be undefined, if a global tour already is already started

    return helptipScope.startSettingsTour(index, false)
      .then(function(endIndex) {
        helptipScope.$destroy();
        csSettings.data.helptip.settings = endIndex;
        csSettings.store();
      });
  };
}


BlockLookupController.$inject = ['$scope', '$timeout', '$focus', '$filter', '$state', '$anchorScroll', 'UIUtils', 'BMA', 'csCurrency', 'csWot', 'csSettings'];
BlockViewController.$inject = ['$scope', '$ionicPopover', '$state', 'UIUtils', 'BMA', 'csCurrency', 'csWot'];
angular.module('cesium.blockchain.controllers', ['cesium.services'])

  .config(['$stateProvider', function($stateProvider) {
    'ngInject';

    $stateProvider

      .state('app.blockchain', {
        url: "/blockchain",
        views: {
          'menuContent': {
            templateUrl: "templates/blockchain/lookup.html",
            controller: 'BlockLookupCtrl'
          }
        },
        data: {
          large: 'app.blockchain_lg'
        }
      })

      .state('app.blockchain_lg', {
        url: "/blockchain/lg",
        views: {
          'menuContent': {
            templateUrl: "templates/blockchain/lookup_lg.html",
            controller: 'BlockLookupCtrl'
          }
        }
      })

      .state('app.server_blockchain', {
        url: "/network/peer/:server/blockchain?ssl&tor",
        views: {
          'menuContent': {
            templateUrl: "templates/blockchain/lookup.html",
            controller: 'BlockLookupCtrl'
          }
        },
        data: {
          large: 'app.server_blockchain_lg'
        }
      })

      .state('app.server_blockchain_lg', {
        url: "/network/peer/:server/blockchain/lg?ssl&tor",
        views: {
          'menuContent': {
            templateUrl: "templates/blockchain/lookup_lg.html",
            controller: 'BlockLookupCtrl'
          }
        }
      })

      .state('app.view_block', {
        url: "/block/:number",
        views: {
          'menuContent': {
            templateUrl: "templates/blockchain/view_block.html",
            controller: 'BlockViewCtrl'
          }
        }
      })

      .state('app.view_block_hash', {
        url: "/block/:number/:hash",
        views: {
          'menuContent': {
            templateUrl: "templates/blockchain/view_block.html",
            controller: 'BlockViewCtrl'
          }
        }
      })

      .state('app.view_server_block_hash', {
        url: "/network/peer/:server/block/:number/:hash?ssl&tor",
        views: {
          'menuContent': {
            templateUrl: "templates/blockchain/view_block.html",
            controller: 'BlockViewCtrl'
          }
        }
      });
  }])

  .controller('BlockLookupCtrl', BlockLookupController)

  .controller('BlockViewCtrl', BlockViewController)

;

function BlockLookupController($scope, $timeout, $focus, $filter, $state, $anchorScroll, UIUtils, BMA, csCurrency, csWot, csSettings) {
  'ngInject';

  $scope.search = {
    result: [],
    total: 0,
    loading: true,
    loadingMore: false,
    hasMore: false,
    type: 'last'
  };
  $scope.node = {};
  $scope.currency = false;
  $scope.entered = false;
  $scope.searchTextId = null;
  $scope.ionItemClass = 'item-border-large';
  $scope.defaultSizeLimit = UIUtils.screen.isSmall() ? 50 : 100;
  $scope.helptipPrefix = 'helptip-network';
  $scope.listeners = [];

  /**
   * Enter into the view
   * @param e
   * @param state
   */
  $scope.enter = function(e, state) {
    if (!$scope.entered) {
      if (state && state.stateParams && state.stateParams.q) { // Query parameter
        $scope.search.text = state.stateParams.q;
        if ($scope.search.text && $scope.search.text.trim().length) {
          $scope.search.type='text';
        }
      }

      // Load from server if need
      if (state && state.stateParams && state.stateParams.server) {
        var useSsl = state.stateParams.ssl == "true";
        var useTor = state.stateParams.tor == "true";

        var node = {
          server: state.stateParams.server,
          host: state.stateParams.server,
          useSsl: useSsl,
          useTor: useTor
        };
        var serverParts = state.stateParams.server.split(':');
        if (serverParts.length == 2) {
          node.host = serverParts[0];
          node.port = serverParts[1];
        }

        if (BMA.node.same(node.host, node.port)) {
          $scope.node = BMA;
        }
        else {
          $scope.node = useTor ?
              // For TOR, use a web2tor to access the endpoint
              BMA.instance(node.host + ".to", 443, true/*ssl*/, 600000 /*long timeout*/) :
              BMA.instance(node.host, node.port, node.useSsl);
          return $scope.node.blockchain.parameters()
            .then(function(json) {
              $scope.currency = json.currency;
              $scope.enter(); // back to enter()
            });
        }
      }

      // Load currency if need
      if (!$scope.currency) {
        return csCurrency.get()
          .then(function(currency) {
            $scope.currency = currency ? currency.name : null;
            $scope.node = currency.node ? currency.node : BMA;

            if (!$scope.currency) {
              UIUtils.alert.error('ERROR.GET_CURRENCY_FAILED');
              return;
            }
            $scope.enter(); // back to enter(), with no stateParams
          })
          .catch(UIUtils.onError('ERROR.GET_CURRENCY_FAILED'));
      }

      $scope.compactMode = angular.isDefined($scope.compactMode) ? $scope.compactMode : true;
      $scope.expertMode = angular.isDefined($scope.expertMode) ? $scope.expertMode : !UIUtils.screen.isSmall() && csSettings.data.expertMode;

      $scope.doSearch();

      // removeIf(device)
      // Focus on search text (only if NOT device, to avoid keyboard opening)
      if ($scope.searchTextId) {
        $timeout(function(){
          $focus($scope.searchTextId);
        }, 100);
      }
      // endRemoveIf(device)

      $scope.addListeners();

      $scope.entered = true;

      $scope.showHelpTip();
    }
    else {
      $scope.addListeners();
    }
  };
  //$scope.$on('$ionicView.enter', $scope.enter);
  $scope.$on('$ionicParentView.enter', $scope.enter);


  /**
   * Leave the view
   * @param e
   * @param state
   */
  $scope.leave = function() {
    $scope.removeListeners();
  };
  //$scope.$on('$ionicView.leave', $scope.leave);
  $scope.$on('$ionicParentView.leave', $scope.leave);
  $scope.$on('$destroy', $scope.leave);

  $scope.doSearchLast = function() {
    $scope.search.type = 'last';
    return $scope.doSearch();
  };

  $scope.doSearch = function(from) {
    from = angular.isDefined(from) ? from : 0;

    $scope.search.loading = (from === 0);
    $scope.search.hasMore = false;

    var promise;

    // get blocks
    if (from === 0) {
      promise = $scope.node.blockchain.current()
        .then(function(current) {
          var size = current.number < $scope.defaultSizeLimit ? current.number : $scope.defaultSizeLimit;
          return $scope.node.blockchain.blocksSlice({count: size, from: current.number-size})
            .then(function(blocks) {
              blocks.splice(0,0,current);
              return blocks;
            });
        })
        .catch(function(err) {
          // Special case when block #0 not written yet
          if (err && err.ucode == BMA.errorCodes.NO_CURRENT_BLOCK) {
            return [];
          }
          throw err;
        });
    }
    else {
      var oldestNumber = $scope.search.results[$scope.search.results.length-1].number;
      var size = oldestNumber < $scope.defaultSizeLimit ? oldestNumber : $scope.defaultSizeLimit;
      promise = $scope.node.blockchain.blocksSlice({count: size, from: oldestNumber-size});
    }

    // process blocks
    return promise
      .then(function(blocks) {
        // If no result
        if (!blocks || !blocks.length) {
          $scope.doDisplayResult([], from, 0);
          $scope.search.loading = false;
          return;
        }

        // Transform to entities
        blocks = blocks.reduce(function(res, json){
          var block = new Block(json);
          block.cleanData(); // release arrays content
          return res.concat(block);
        }, []);

        // Order by number (desc)
        blocks = _.sortBy(blocks, function(b) {
          return -1 * b.number;
        });

        // Prepare then display results
        var total = ((from===0) ? blocks[0].number: $scope.search.results[0].number) + 1;
        return $scope.doPrepareResult(blocks, from)
          .then(function() {
            $scope.doDisplayResult(blocks, from, total);
            $scope.search.loading = false;
          });
      })

      .catch(function(err) {
        UIUtils.onError('BLOCKCHAIN.ERROR.SEARCH_BLOCKS_FAILED')(err);
        $scope.search.loading = false;
      });
  };

  var formatDateShort = $filter('formatDateShort');

  $scope.doPrepareResult = function(blocks, offset) {
    offset = angular.isDefined(offset) ? offset : 0;

    if ($scope.search.type=='last') {

      var previousEmptyBlockDay;
      if (offset > 0 && $scope.search.results.length) {
        var lastBlock = $scope.search.results[$scope.search.results.length-1];
        previousEmptyBlockDay = lastBlock.empty ? lastBlock.day : undefined;
      }

      _.forEach(blocks, function(block, index){
        // If empty
        if (block.empty) {
          // compute the day
          var blockDay = formatDateShort(block.medianTime);
          var notFirstEmpty = (index !== 0) || (offset !== 0);
          var previousNotEmptyOrSameDay = !previousEmptyBlockDay || (previousEmptyBlockDay == blockDay);
          block.compacted = notFirstEmpty && previousNotEmptyOrSameDay;
          previousEmptyBlockDay = blockDay;
        }
        else {
          previousEmptyBlockDay = undefined;
        }
      });
    }

    return csWot.extendAll(blocks, 'issuer');
  };

  $scope.doDisplayResult = function(res, offset, total) {
    if (!offset) {
      $scope.search.results = res || [];
    }
    else {
      $scope.search.results = $scope.search.results.concat(res);
    }
    $scope.search.hasMore = total && $scope.search.results.length < total;
    $scope.search.total = total || $scope.search.total;

    $scope.smallscreen = UIUtils.screen.isSmall();

    // Set Motion
    if (res && res.length) {
      $scope.motion.show({selector: '.list-blocks .item-block'});
    }

    $scope.$broadcast('$$rebind::rebind'); // notify binder
  };

  $scope.showMore = function() {
    var from = $scope.search.results ? $scope.search.results.length : 0;

    $scope.search.loadingMore = true;

    return $scope.doSearch(from)
      .then(function() {
        $scope.search.loadingMore = false;
        $scope.$broadcast('scroll.infiniteScrollComplete');
      })
      .catch(function(err) {
        console.error(err);
        $scope.search.loadingMore = false;
        $scope.search.hasMore = false;
        $scope.$broadcast('scroll.infiniteScrollComplete');
      });
  };

  $scope.removeListeners = function() {
    if ($scope.listeners.length) {
      console.debug("[block] Closing listeners");
      _.forEach($scope.listeners, function(remove){
        remove();
      });
      $scope.listeners = [];
    }
  };

  $scope.addListeners = function() {
    if ($scope.listeners.length) return; // already started

    console.debug("[block] Starting listeners");
    if ($scope.node === BMA) {
      $scope.listeners = [
        csCurrency.api.data.on.newBlock($scope, $scope.onBlock)
      ];
    }
    else {
      $scope.listeners = [
        $scope.node.websocket.block().onListener(function(json) {
          // Skip if WS closed (after leave view - should never happen) or invalid json
          if (!json) return;
          var block = new Block(json);
          block.cleanData(); // Remove unused content (arrays...)
          $scope.onBlock(block);
        })
      ];
    }
  };

  $scope.onBlock = function(block) {
    // Skip if still loading or if filter/sort is not the default (not last blocks)
    if ($scope.search.loading || $scope.search.type != 'last' ||
      ($scope.search.sort && $scope.search.sort != 'desc')) return; // skip

    // Make sure results is init
    $scope.search.results = $scope.search.results || [];

    if (!$scope.search.results.length) {
      console.debug('[ES] [blockchain] new block #{0} received (by websocket)'.format(block.number));
      // add it to result
      $scope.search.total++;
      $scope.search.results.push(block);

      // Prepare the new block, then show it
      $scope.doPrepareResult([block])
        .then(function() {
          return $scope.showBlock(block);
        });
    }
    else {
      // Find existing block, by number
      var existingBlock = _.findWhere($scope.search.results, {number: block.number});

      // replace existing block (fork could have replaced previous block)
      if (existingBlock) {
        if (existingBlock.hash != block.hash) {
          console.debug('[ES] [blockchain] block #{0} updated (by websocket)'.format(block.number));
          // Replace existing content
          angular.copy(block, existingBlock);
          // Prepare the new block, then show it
          $scope.doPrepareResult([block, $scope.search.results[1]])
            .then(function() {
              return $scope.showBlock(existingBlock);
            });
        }
      }
      else {
        console.debug('[ES] [blockchain] new block #{0} received (by websocket)'.format(block.number));
        // Insert at index 0
        $scope.search.total++;
        $scope.search.results.splice(0, 0, block);

        // Prepare the new block, then show it
        $scope.doPrepareResult([block, $scope.search.results[1]])
          .then(function() {
            return $scope.showBlock(block);
          });
      }
    }
  };

  $scope.showBlock = function(block){
    // Force rebind
    $scope.$broadcast('$$rebind::rebind');
    $scope.motion.show({selector: '#block-'+block.number});
  };

  $scope.selectBlock = function(block) {
    if (block.compacted && $scope.compactMode) {
      $scope.toggleCompactMode();
      $timeout(function(){
        $anchorScroll('block-' + block.number);
      }, 900);
    }
    else if (BMA.node.same($scope.node.host, $scope.node.port)) {
      $state.go('app.view_block_hash', {number: block.number, hash: block.hash});
    }
    else {
      $state.go('app.view_server_block_hash', {server: $scope.node.server, ssl: $scope.node.useSsl, number: block.number, hash: block.hash});
    }
  };

  $scope.toggleCompactMode = function() {
    $scope.compactMode = !$scope.compactMode;
    $scope.doDisplayResult($scope.search.results, 0, $scope.search.total/*keep previous total*/);

    // Workaround to re-initialized the <ion-infinite-loop>
    if (!$scope.search.hasMore && $scope.search.results.length && $scope.search.type == 'last') {
      var lastBlock = $scope.search.results[$scope.search.results.length-1];
      if (lastBlock && lastBlock.number > 0) {
        $timeout(function() {
          $scope.search.hasMore = true;
        }, 500);
      }
    }
  };

  $scope.toggleSort = function(sort){
    if ($scope.search.sort === sort && !$scope.search.asc) {
      $scope.search.asc = undefined;
      $scope.search.sort = undefined;
    }
    else {
      $scope.search.asc = ($scope.search.sort === sort) ? !$scope.search.asc : true;
      $scope.search.sort = sort;
    }
    $scope.doSearch();
  };

  $scope.showHelpTip = function() {
    // TODO
  };
}


function BlockViewController($scope, $ionicPopover, $state, UIUtils, BMA, csCurrency, csWot) {
  'ngInject';

  $scope.loading = true;
  $scope.formData = {};
  $scope.compactMode = true; // TODO change to true

  $scope.$on('$ionicView.beforeEnter', function (event, viewData) {
    // Enable back button (workaround need for navigation outside tabs - https://stackoverflow.com/a/35064602)
    viewData.enableBack = UIUtils.screen.isSmall() ? true : viewData.enableBack;
  });

  /**
   * Enter on view
   */
  $scope.enter = function(e, state) {
    if (!$scope.loading) return; // call once

    if (state) {
      $scope.number = state.stateParams && angular.isDefined(state.stateParams.number) ? state.stateParams.number : 'current';
      $scope.hash = state.stateParams && state.stateParams.hash ? state.stateParams.hash : undefined;

      // Load from server if need
      if (state.stateParams && state.stateParams.server) {
        var useSsl = state.stateParams.ssl == "true";
        var useTor = state.stateParams.tor == "true";

        var node = {
          server: state.stateParams.server,
          host: state.stateParams.server,
          useSsl: useSsl,
          useTor: useTor
        };
        var serverParts = state.stateParams.server.split(':');
        if (serverParts.length == 2) {
          node.host = serverParts[0];
          node.port = serverParts[1];
        }

        if (BMA.node.same(node.host, node.port)) {
          $scope.node = BMA;
        }
        else {
          $scope.node = useTor ?
            // For TOR, use a web2tor to access the endpoint
            BMA.instance(node.host + ".to", 443, true/*ssl*/, 600000 /*long timeout*/) :
            BMA.instance(node.host, node.port, node.useSsl);
          return $scope.node.blockchain.parameters()
            .then(function (json) {
              $scope.currency = json.currency;
              $scope.enter(); // back to enter(), with no stateParams
            });
        }
      }
    }

    if (!$scope.currency || !$scope.node) {
      csCurrency.get()
        .then(function (currency) {
          if (currency) {
            $scope.currency = currency.name;
            $scope.node = currency.node;
            $scope.load();
          }
        })
        .catch(UIUtils.onError('ERROR.GET_CURRENCY_FAILED'));
    }
    else {
      $scope.load();
    }
  };
  $scope.$on('$ionicView.enter', $scope.enter);

  /**
   * Leave the view
   */
  $scope.leave = function() {
    //console.debug("Leaving view peer...");
  };
  $scope.$on('$ionicParentView.beforeLeave', $scope.leave);

  $scope.load = function() {
    if (!$scope.number) return;

    var promise = $scope.number == 'current' ?
      $scope.node.blockchain.current() :
      $scope.node.blockchain.block({block: $scope.number});

    return  promise
      .then(function(json) {
        var block = new Block(json);
        block.parseData();
        if (!block || !angular.isDefined(block.number) || !block.hash) {
          $scope.loading = false;
          UIUtils.alert.error('ERROR.GET_BLOCK_FAILED');
          return;
        }
        if ($scope.hash && block.hash != $scope.hash) {
          $scope.loading = false;
          UIUtils.alert.error('ERROR.INVALID_BLOCK_HASH');
          return;
        }

        var users = [];
        if (block.joiners.length) {
          users = users.concat(block.joiners);
        }
        if (block.certifications.length) {
          users = block.certifications.reduce(function(res, cert) {
            cert.to = {
              pubkey: cert.to
            };
            cert.from = {
              pubkey: cert.from
            };
            return res.concat(cert.to , cert.from);
          }, users);
          block.certifications = _.groupBy(block.certifications, function(cert) {
            return cert.to.pubkey;
          });
        }
        if (block.transactions.length) {
          users = block.transactions.reduce(function(res, tx) {
            tx.issuers = tx.issuers.reduce(function(res, issuer) {
              return res.concat({pubkey: issuer});
            }, []);

            // Parse unlockConditions
            _.forEach(tx.outputs||[], function(output) {
              if (output.unlockCondition) {
                angular.merge(output, BMA.tx.parseUnlockCondition(output.unlockCondition));
              }
            });

            return res.concat(tx.issuers.concat(tx.outputs||[]));
          }, users);
        }

        var issuer = {pubkey: block.issuer};
        users.push(issuer);
        return csWot.extendAll(users)
          .then(function() {
            $scope.updateView({block: block, issuer: issuer});
          });
      })
      .catch(function(err) {
        $scope.loading = false;
        UIUtils.onError('ERROR.GET_BLOCK_FAILED')(err);
      });
  };

  $scope.updateView = function(data) {
    $scope.formData = data.block;
    //angular.copy(data.block, $scope.formData);
    $scope.issuer = data.issuer;
    $scope.loading = false;
  };

  $scope.toggleCompactMode = function() {
    $scope.compactMode = !$scope.compactMode;
  };

  /* -- popover -- */

  var paddingIndent = 10;

  $scope.toUnlockUIArray = function(unlockTreeItem, leftPadding, operator) {
    leftPadding = leftPadding || paddingIndent;

    // If operator (AND, OR)
    if (unlockTreeItem.children && (unlockTreeItem.type == 'AND' || unlockTreeItem.type == 'OR')) {
      return unlockTreeItem.children.reduce(function(res, child, index){
        if (child.children && index > 0) {
          // Add space between expression block
          res = res.concat({
            style: {
              'padding-left': leftPadding + 'px',
              'padding-top': '10px',
              'padding-bottom': '10px'
            },
            operator: unlockTreeItem.type
          });

          return res.concat($scope.toUnlockUIArray(child, leftPadding + paddingIndent));
        }
        return res.concat($scope.toUnlockUIArray(child, leftPadding + paddingIndent, index && unlockTreeItem.type));
      }, []);
    }

    return {
      style: {
        'padding-left': leftPadding + 'px'
      },
      operator: operator,
      type: unlockTreeItem.type,
      value: unlockTreeItem.value
    };
  };

  $scope.showUnlockConditionPopover = function(output, event) {
    if (!output.unlockTree) return;

    // Convert condition into UI array
    $scope.popoverData = $scope.popoverData || {};
    $scope.popoverData.unlockConditions = $scope.toUnlockUIArray(output.unlockTree);

    // Open popover
    if (!$scope.unlockConditionPopover) {
      $ionicPopover.fromTemplateUrl('templates/blockchain/unlock_condition_popover.html', {
        scope: $scope
      }).then(function(popover) {
        $scope.unlockConditionPopover = popover;
        //Cleanup the popover when we're done with it!
        $scope.$on('$destroy', function() {
          $scope.unlockConditionPopover.remove();
        });
        $scope.unlockConditionPopover.show(event);
      });
    }
    else {
      $scope.unlockConditionPopover.show(event);
    }
  };

  $scope.hideUnlockConditionsPopover = function() {
    if ($scope.unlockConditionPopover) {
      $scope.unlockConditionPopover.hide();
      if ($scope.popoverData) {
        delete $scope.popoverData.unlockConditions;
      }
    }
  };

  $scope.goState = function(stateName, stateParams) {
    $scope.hideUnlockConditionsPopover();
    $state.go(stateName, stateParams);
  };

  /* -- manage link to raw document -- */

  $scope.openRawBlock = function(event) {
    return $scope.openLink(event, $scope.node.url + '/blockchain/block/' + $scope.formData.number);
  };

  /* -- help tip -- */

  // Show help tip
  $scope.showHelpTip = function(index) {
    // No helptip here (done in network controller)
  };
}



angular.module('cesium.controllers', [
    'cesium.app.controllers',
    'cesium.join.controllers',
    'cesium.login.controllers',
    'cesium.help.controllers',
    'cesium.wallet.controllers',
    'cesium.wallets.controllers',
    'cesium.currency.controllers',
    'cesium.wot.controllers',
    'cesium.transfer.controllers',
    'cesium.settings.controllers',
    'cesium.network.controllers',
    'cesium.blockchain.controllers'
  ])
;

angular.module("cesium.templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("templates/menu.html","<ion-side-menus enable-menu-with-back-views=\"true\" bind-notifier=\"{locale:$root.settings.locale.id}\">\n  <!-- HEADER -->\n  <ion-side-menu-content>\n    <ion-nav-bar class=\"bar-dark\" title-align=\"left\">\n      <ion-nav-back-button class=\"no-text\">\n      </ion-nav-back-button>\n\n      <ion-nav-buttons side=\"left\">\n        <button class=\"button button-icon button-clear icon ion-navicon visible-nomenu\" menu-toggle=\"left\"></button>\n      </ion-nav-buttons>\n      <ion-nav-buttons side=\"right\">\n\n        <!-- current node info -->\n        <button class=\"button button-clear hidden-xs hidden-sm gray icon-left\" ng-if=\"$root.settings.expertMode\" style=\"max-width: 450px !important\" ng-click=\"showPeerInfoPopover($event)\">\n          <small class=\"ion-locked\" ng-if=\"$root.currency.node.useSsl\">&nbsp;</small>\n          {{$root.currency.node.host}}{{$root.currency.node.port != 80 && $root.currency.node.port != 443 ? \':\'+$root.currency.node.port : \'\'}}\n          <small>&nbsp;</small>\n          <small class=\"ion-arrow-down-b\"></small>\n        </button>\n\n        <!-- Allow extension here -->\n        <cs-extension-point name=\"nav-buttons-right\"></cs-extension-point>\n\n        <!-- profile -->\n        <a id=\"helptip-header-bar-btn-profile\" class=\"button button-icon button-clear hidden-xs hidden-sm\" ng-click=\"showProfilePopover($event)\">\n          <i class=\"avatar avatar-member\" ng-if=\"!walletData.avatar\" ng-class=\"{\'disable\': !login, \'royal-bg\': login}\">\n          </i>\n          <i class=\"avatar\" ng-if=\"walletData.avatar\" style=\"background-image: url(\'{{walletData.avatar.src}}\')\">\n          </i>\n          <span ng-if=\"login && !auth\" class=\"badge badge-button badge-secondary badge-assertive ion-locked\"> </span>\n        </a>\n      </ion-nav-buttons>\n    </ion-nav-bar>\n    <ion-nav-view name=\"menuContent\"></ion-nav-view>\n  </ion-side-menu-content>\n\n  <!-- MENU -->\n  <ion-side-menu id=\"menu\" side=\"left\" expose-aside-when=\"large\" enable-menu-with-back-views=\"false\" width=\"225\">\n    <ion-header-bar>\n      <h1 class=\"title dark hidden-sm hidden-xs\">\n        <span class=\"animate-fade-in animate-show-hide ng-hide\" ng-show=\"$root.currency.name\">\n          {{:locale:\'COMMON.APP_NAME\'|translate}} {{$root.currency.name|abbreviate}}\n        </span>\n      </h1>\n\n      <div class=\"visible-sm visible-xs hero\">\n        <div class=\"content\">\n          <i class=\"avatar avatar-member hero-icon\" ng-if=\"!walletData.avatar\" ng-class=\"{\'royal-bg\': login, \'stable-bg\': !login}\" ng-click=\"!login ? showHome() : loginAndGo()\" menu-close></i>\n          <a class=\"avatar hero-icon\" ng-if=\"walletData.avatar\" style=\"background-image: url(\'{{walletData.avatar.src}}\')\" ui-sref=\"app.view_wallet\" menu-close></a>\n          <h4 ng-if=\"login\">\n            <a class=\"light\" ui-sref=\"app.view_wallet\" menu-close>\n              {{walletData.name||walletData.uid}}\n              <span ng-if=\"!walletData.name && !walletData.uid\"><i class=\"icon ion-key\"></i>&nbsp;{{walletData.pubkey|formatPubkey}}</span>\n            </a>\n          </h4>\n          <h4 ng-if=\"!login\">\n            <a class=\"light\" ui-sref=\"app.login\" menu-close>\n              {{\'COMMON.BTN_LOGIN\'|translate}}\n              <i class=\"ion-arrow-right-b\"></i>\n            </a>\n          </h4>\n          <cs-extension-point name=\"menu-profile-user\"></cs-extension-point>\n        </div>\n        <!-- logout -->\n        <a ng-if=\"login\" class=\"button-icon\" ng-click=\"logout({askConfirm: true})\" style=\"position: absolute; top: 5px; left: 5px\">\n          <i class=\"icon stable ion-android-exit\"></i>\n        </a>\n      </div>\n    </ion-header-bar>\n\n    <ion-content scroll=\"false\">\n      <ion-list class=\"list\">\n\n        <!-- DISCOVER Section -->\n        <ion-item menu-close class=\"item-icon-left hidden-xs\" ui-sref=\"app.home\" active-link=\"active\">\n          <i class=\"icon ion-home\"></i>\n          {{:locale:\'MENU.HOME\'|translate}}\n        </ion-item>\n\n        <a menu-close class=\"item item-icon-left\" active-link=\"active\" active-link-path-prefix=\"#/app/currency\" ui-sref=\"app.currency\">\n          <i class=\"icon ion-ios-world-outline\"></i>\n          {{:locale:\'MENU.CURRENCY\'|translate}}\n        </a>\n        <a id=\"helptip-menu-btn-currency\"></a>\n\n        <a menu-close class=\"item item-icon-left hidden-xs hidden-sm\" active-link=\"active\" active-link-path-prefix=\"#/app/network\" ui-sref=\"app.network\">\n          <i class=\"icon ion-cloud\"></i>\n          {{:locale:\'MENU.NETWORK\'|translate}}\n        </a>\n        <a id=\"helptip-menu-btn-network\"></a>\n\n        <!-- Allow extension here -->\n        <cs-extension-point name=\"menu-discover\"></cs-extension-point>\n\n        <!-- MAIN Section -->\n        <div class=\"item item-divider\"></div>\n\n        <a menu-close class=\"item item-icon-left\" active-link=\"active\" active-link-path-prefix=\"#/app/wot\" ui-sref=\"app.wot_lookup.tab_search\">\n          <i class=\"icon ion-person-stalker\"></i>\n          {{:locale:\'MENU.WOT\'|translate}}\n        </a>\n        <a id=\"helptip-menu-btn-wot\"></a>\n\n        <!-- Allow extension here -->\n        <cs-extension-point name=\"menu-main\"></cs-extension-point>\n\n        <!-- USER Section -->\n        <div class=\"item item-divider\"></div>\n\n        <a menu-close class=\"item item-icon-left\" active-link=\"active\" active-link-path-prefix=\"#/app/account\" ui-sref=\"app.view_wallet\" ng-class=\"{\'item-menu-disable\': !login}\">\n          <i class=\"icon ion-person\"></i>\n          {{:locale:\'MENU.ACCOUNT\'|translate}}\n        </a>\n        <a id=\"helptip-menu-btn-account\"></a>\n\n        <a menu-close class=\"item item-icon-left\" active-link=\"active\" active-link-path-prefix=\"#/app/wallets\" ui-sref=\"app.view_wallets\" ng-class=\"{\'item-menu-disable\': !login}\">\n          <i class=\"icon ion-card\" style=\"top: -5px; left: 22px; font-size: 18px\"></i>\n          <i class=\"icon-secondary ion-card\" style=\"top: 22px; left: 19px; font-size: 20px; background-color: white; width:17px; height: 14px\"></i>\n          {{:locale:\'MENU.WALLETS\'|translate}}\n        </a>\n\n        <a menu-close class=\"item item-icon-left\" active-link=\"active\" active-link-path-prefix=\"#/app/history\" ui-sref=\"app.view_wallet_tx\" ng-class=\"{\'item-menu-disable\': !login}\">\n          <i class=\"icon ion-card\"></i>\n          {{:locale:\'MENU.TRANSACTIONS\'|translate}}\n        </a>\n        <a id=\"helptip-menu-btn-tx\"></a>\n\n\n        <div class=\"item item-divider visible-xs visible-sm\"></div>\n\n        <!-- Allow extension here -->\n        <cs-extension-point name=\"menu-user\"></cs-extension-point>\n\n        <a menu-close class=\"item item-icon-left visible-xs visible-sm\" active-link=\"active\" active-link-path-prefix=\"#/app/settings\" ui-sref=\"app.settings\">\n          <i class=\"icon ion-android-settings\"></i>\n          {{:locale:\'MENU.SETTINGS\'|translate}}\n        </a>\n        <a id=\"helptip-menu-btn-settings\"></a>\n\n        <!-- actions divider -->\n        <div class=\"item item-divider\" ng-if=\"login\"></div>\n\n\n        <ion-item menu-close class=\"item item-button-right\" ng-if=\"login\" ng-class=\"::{\'item-button-left\': $root.device.barcode.enable}\">\n          <!-- transfer -->\n          <button class=\"button button-positive ink-dark\" ng-click=\"showTransferModal()\">\n            <i class=\"icon ion-paper-airplane\"></i>\n          </button>\n\n          <!-- scan QR code -->\n          <button class=\"button button-stable ink\" ng-if=\"$root.device.barcode.enable\" ng-click=\"scanQrCodeAndGo()\">\n            <i class=\"icon ion-qr-scanner\"></i>\n          </button>\n        </ion-item>\n\n        <cs-extension-point name=\"menu-actions\"></cs-extension-point>\n\n      </ion-list>\n\n    </ion-content>\n\n    <!-- removeIf(device) -->\n    <ion-footer-bar class=\"bar-stable footer hidden-xs hidden-sm\">\n      <a class=\"pull-left icon-help\" menu-toggle=\"left\" title=\"{{:locale:\'HOME.BTN_HELP\'|translate}}\" ui-sref=\"app.help\"></a>\n\n      <a class=\"title gray\" ng-click=\"showAboutModal()\">\n\n        <!-- version -->\n        <span title=\"{{:locale:\'HOME.BTN_ABOUT\'|translate}}\" ng-class=\"{\'assertive\': $root.newRelease}\">\n          <!-- warning icon, if new version available -->\n          <i ng-if=\"$root.newRelease\" class=\"ion-alert-circled assertive\"></i>\n\n          {{:locale:\'COMMON.APP_VERSION\'|translate:{version: config.version} }}\n        </span>\n        |\n        <!-- about -->\n        <span title=\"{{:locale:\'HOME.BTN_ABOUT\'|translate}}\">\n          {{:locale:\'HOME.BTN_ABOUT\'|translate}}\n        </span>\n      </a>\n\n\n    </ion-footer-bar>\n    <!-- endRemoveIf(device) -->\n  </ion-side-menu>\n\n\n</ion-side-menus>\n");
$templateCache.put("templates/modal_about.html","<ion-modal-view class=\"about\">\n  <ion-header-bar class=\"bar-positive\">\n    <button class=\"button button-clear visible-xs\" ng-click=\"closeModal()\" translate>COMMON.BTN_CLOSE\n    </button>\n    <h1 class=\"title\" translate>ABOUT.TITLE</h1>\n  </ion-header-bar>\n\n  <ion-content class=\"text-center\" scroll=\"true\">\n\n    <div class=\"list item-wrap-text\">\n      <ion-item class=\"item-icon-left item-text-wrap\">\n        {{\'COMMON.APP_NAME\'|translate}}&nbsp;<b>{{\'COMMON.APP_VERSION\'|translate:$root.config}}</b>\n        <i ng-if=\"$root.newRelease\" class=\"assertive ion-alert-circled\"></i>\n        <h3 ng-if=\"$root.config.build\" class=\"gray\">{{\'COMMON.APP_BUILD\'|translate:$root.config}}</h3>\n        <span translate>ABOUT.LICENSE</span>\n      </ion-item>\n\n      <!-- new version -->\n      <ion-item class=\"item-icon-left\" ng-if=\"$root.newRelease\">\n        <i class=\"item-image icon ion-alert-circled assertive\"></i>\n\n        <span ng-if=\"!$root.device.isWeb()\" ng-bind-html=\"\'ABOUT.PLEASE_UPDATE\' | translate:$root.newRelease \"></span>\n        <span ng-if=\"$root.device.isWeb()\" ng-bind-html=\"\'ABOUT.LATEST_RELEASE\' | translate:$root.newRelease \"></span>\n\n        <!-- link to release page -->\n        <h3 ng-if=\"!$root.device.enable\">\n          <a ng-click=\"openLink($event, $root.newRelease.url)\" translate>{{::$root.newRelease.url}}</a>\n        </h3>\n      </ion-item>\n\n      <!-- report issue -->\n      <ion-item class=\"item-icon-left item-text-wrap\">\n        <i class=\"item-image icon ion-bug\"></i>\n        <span translate>ABOUT.PLEASE_REPORT_ISSUE</span>\n        <h3>\n          <a ng-click=\"openLink($event, $root.settings.newIssueUrl)\" translate>ABOUT.REPORT_ISSUE</a>\n        </h3>\n      </ion-item>\n\n\n      <!-- source code -->\n      <ion-item class=\"item-icon-left\">\n        <i class=\"item-image icon ion-network\"></i>\n        {{\'ABOUT.CODE\' | translate}}\n        <h3><a ng-click=\"openLink($event, \'https://git.duniter.org/clients/cesium/cesium\')\">https://git.duniter.org/clients/cesium/cesium</a></h3>\n      </ion-item>\n\n      <!-- forum -->\n      <ion-item class=\"item-icon-left\">\n        <i class=\"item-image icon ion-chatbubbles\"></i>\n        {{\'ABOUT.FORUM\' | translate}}\n        <h3><a ng-click=\"openLink($event, $root.settings.userForumUrl)\">{{::$root.settings.userForumUrl}}</a></h3>\n      </ion-item>\n\n      <!-- team -->\n      <ion-item class=\"item-icon-left\">\n        <i class=\"item-image icon ion-person-stalker\"></i>\n        {{\'ABOUT.DEVELOPERS\' | translate}}\n        <h3>\n          <a href=\"https://github.com/blavenie\" target=\"_system\">Benoit Lavenier</a>,\n          <a href=\"https://github.com/c-geek\" target=\"_system\">cgeek</a>,\n          <a href=\"https://github.com/devingfx\" target=\"_system\">DiG</a>,\n          <a href=\"https://git.duniter.org/ji_emme\" target=\"_system\">Ji_emme</a>\n        </h3>\n      </ion-item>\n\n      <div class=\"padding hidden-xs text-center\">\n        <button class=\"button button-stable icon-left ink\" type=\"submit\" ng-click=\"closeModal()\" ui-sref=\"app.help\">\n          <i class=\"icon ion-ios-help-outline\"></i>\n          {{\'HOME.BTN_HELP\' | translate}}\n        </button>\n\n        <button class=\"button button-positive ink\" type=\"submit\" ng-click=\"closeModal()\">\n          {{\'COMMON.BTN_CLOSE\' | translate}}\n        </button>\n      </div>\n\n    </div>\n  </ion-content>\n</ion-modal-view>\n");
$templateCache.put("templates/api/doc.html","\n\n  <!-- transfer -->\n  <h2 class=\"padding\" translate>API.DOC.TRANSFER.TITLE</h2>\n\n\n  <div class=\"list padding no-padding-xs no-padding-top\">\n\n    <div class=\"item item-divider no-border\">\n      <p translate>API.DOC.DESCRIPTION_DIVIDER</p>\n    </div>\n\n    <div class=\"item item-text-wrap\">\n      <p translate>API.DOC.TRANSFER.DESCRIPTION</p>\n    </div>\n\n    <div class=\"item item-divider no-border\">\n      <p translate>API.DOC.URL_DIVIDER</p>\n    </div>\n\n    <div class=\"item item-text-wrap\">\n      <p class=\"gray text-right\">\n        {{$root.rootPath}}#/v1/payment/:pubkey?amount=<span class=\"text-italic\" translate>API.DOC.TRANSFER.PARAM_AMOUNT</span>\n      </p>\n    </div>\n\n    <div class=\"item item-divider no-border\">\n      <p translate>API.DOC.PARAMETERS_DIVIDER</p>\n    </div>\n\n    <div class=\"item item-text-wrap\">\n      <p translate>API.DOC.AVAILABLE_PARAMETERS</p>\n      <div class=\"row\">\n        <div class=\"col col-20 text-italic\">pubkey</div>\n        <div class=\"col gray\" translate>API.DOC.TRANSFER.PARAM_PUBKEY_HELP</div>\n      </div>\n      <div class=\"row stable-bg\">\n        <div class=\"col col-20 text-italic dark\">amount</div>\n        <div class=\"col gray\" translate>API.DOC.TRANSFER.PARAM_AMOUNT_HELP</div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col col-20 text-italic\">comment</div>\n        <div class=\"col gray\" translate>API.DOC.TRANSFER.PARAM_COMMENT_HELP</div>\n      </div>\n      <div class=\"row stable-bg\">\n        <div class=\"col col-20 text-italic dark\">name</div>\n        <div class=\"col gray\" translate>API.DOC.TRANSFER.PARAM_NAME_HELP</div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col col-20 text-italic\">redirect_url</div>\n        <div class=\"col gray\" translate>API.DOC.TRANSFER.PARAM_REDIRECT_URL_HELP</div>\n      </div>\n      <div class=\"row stable-bg\">\n        <div class=\"col col-20 text-italic dark\">cancel_url</div>\n        <div class=\"col gray\" translate>API.DOC.TRANSFER.PARAM_CANCEL_URL_HELP</div>\n      </div>\n    </div>\n\n    <!-- demo -->\n    <div class=\"item item-divider no-border\">\n      <p translate>API.DOC.DEMO_DIVIDER</p>\n    </div>\n    <div class=\"item item-button-right item-text-wrap padding-bottom\">\n      <p class=\"item-icon-right-padding\" translate>API.DOC.DEMO_HELP</p>\n      <span class=\"badge\" ng-if=\"loading\">\n        <ion-spinner class=\"icon\" icon=\"android\"></ion-spinner>\n      </span>\n      <a ng-if=\"!loading\" href=\"{{transferDemoUrl}}\" class=\"button button-raised button-positive icon ion-play\"></a>\n    </div>\n    <div class=\"item item-text-wrap\" ng-if=\"result.type === \'payment\' && !result.cancelled\">\n      <h2 class=\"text-right balanced\" translate>API.DOC.DEMO_SUCCEED</h2>\n      <h4 class=\"gray\" translate>API.DOC.DEMO_RESULT</h4>\n      <p class=\"balanced-100-bg padding dark text-keep-lines\">{{result.content}}</p>\n    </div>\n    <div class=\"item item-text-wrap\" ng-if=\"result.type === \'payment\' && result.cancelled\">\n      <h2 class=\"text-right assertive\" translate>API.DOC.DEMO_CANCELLED</h2>\n    </div>\n\n    <div class=\"item item-divider no-border\">\n      <p translate>API.DOC.INTEGRATE_DIVIDER</p>\n    </div>\n\n    <div class=\"item item-text-wrap\">\n      <p translate>API.DOC.TRANSFER.EXAMPLES_HELP</p>\n\n      <div class=\"row responsive-sm\">\n        <div class=\"col col-20 text-italic\">\n          <span translate>API.DOC.TRANSFER.EXAMPLE_BUTTON</span>\n        </div>\n\n        <!-- no text on button -->\n        <div class=\"col gray no-border\">\n\n          <!-- code -->\n          <p>\n            <i class=\"icon ion-code\"></i>\n            <span translate>API.DOC.INTEGRATE_CODE</span>\n          </p>\n          <div class=\"item item-input\">\n            <textarea class=\"gray\" select-on-click rows=\"5\" ng-model=\"transferButton.html\" ng-model-options=\"{ debounce: 650 }\"></textarea>\n          </div>\n\n          <!-- preview -->\n          <p class=\"padding-top\">\n            <i class=\"icon ion-eye\"></i>\n            <span translate>API.DOC.INTEGRATE_RESULT</span>\n          </p>\n          <div class=\"padding-left\" bind-notifier=\"{ notifierKey:watchedExpression }\">\n            <ng-bind-html ng-bind-html=\"transferButton.html|trustAsHtml\"></ng-bind-html>\n          </div>\n        </div>\n      </div>\n      <div class=\"row responsive-sm\">\n\n        <div class=\"col col-20 hidden-xs hidden-sm\">&nbsp;</div>\n\n        <!-- HTML button parameters -->\n        <div class=\"col gray no-border\">\n          <p class=\"padding-top\">\n            <a class=\"positive\" ng-click=\"transferButton.showParameters=!transferButton.showParameters\">\n              <i class=\"icon ion-wrench\"></i>\n              <span translate>API.DOC.INTEGRATE_PARAMETERS</span>\n              <i class=\"icon\" ng-class=\"{\'ion-arrow-down-b\': !transferButton.showParameters, \'ion-arrow-up-b\': transferButton.showParameters}\"></i>\n            </a>\n          </p>\n\n          <div ng-if=\"transferButton.showParameters\" class=\"padding-left\">\n\n            <form id=\"transferForm\" class=\"stable-bg padding\">\n              <p class=\"padding-top\">\n                <i class=\"icon ion-key\"></i>\n                {{\'API.DOC.TRANSFER.PARAM_PUBKEY\' | translate}} :\n              </p>\n              <label class=\"item item-input\">\n                <input type=\"text\" ng-model=\"transferData.pubkey\" ng-model-options=\"{ debounce: 650 }\" placeholder=\"{{\'API.DOC.TRANSFER.PARAM_PUBKEY_HELP\'|translate}}\">\n              </label>\n\n              <p class=\"padding-top\">\n                <i class=\"icon ion-pricetag\"></i>\n                {{\'API.DOC.TRANSFER.PARAM_AMOUNT\' | translate}} :\n              </p>\n              <label class=\"item item-input\">\n                <input type=\"text\" ng-model=\"transferData.amount\" ng-model-options=\"{ debounce: 650 }\" placeholder=\"{{\'API.DOC.TRANSFER.PARAM_AMOUNT_HELP\'|translate}}\">\n              </label>\n\n              <p class=\"padding-top\">\n                <i class=\"icon ion-flag\"></i>\n                {{\'API.DOC.TRANSFER.PARAM_COMMENT\' | translate}} :\n              </p>\n              <label class=\"item item-input\">\n                <input type=\"text\" ng-model=\"transferData.comment\" placeholder=\"{{\'API.DOC.TRANSFER.PARAM_COMMENT\'|translate}}\">\n              </label>\n\n              <p class=\"padding-top\">\n                <i class=\"icon ion-ios-world-outline\"></i>\n                {{\'API.DOC.TRANSFER.PARAM_NAME\' | translate}} :\n              </p>\n              <label class=\"item item-input\">\n                <input type=\"text\" ng-model=\"transferData.name\" ng-model-options=\"{ debounce: 650 }\" placeholder=\"{{\'API.DOC.TRANSFER.PARAM_NAME\'|translate}}\">\n              </label>\n\n              <p class=\"padding-top\">\n                <i class=\"icon ion-arrow-return-left\"></i>\n                {{\'API.DOC.TRANSFER.PARAM_REDIRECT_URL\' | translate}} :\n              </p>\n              <label class=\"item item-input\">\n                <input type=\"text\" ng-model=\"transferData.redirect_url\" ng-model-options=\"{ debounce: 650 }\" placeholder=\"{{\'API.DOC.TRANSFER.PARAM_REDIRECT_URL\'|translate}}\">\n              </label>\n\n              <p class=\"padding-top\">\n                <i class=\"icon ion-backspace\"></i>\n                {{\'API.DOC.TRANSFER.PARAM_CANCEL_URL\' | translate}} :\n              </p>\n              <label class=\"item item-input\">\n                <input type=\"text\" ng-model=\"transferData.cancel_url\" ng-model-options=\"{ debounce: 650 }\" placeholder=\"{{\'API.DOC.TRANSFER.PARAM_CANCEL_URL\'|translate}}\">\n              </label>\n\n              <p class=\"padding-top\">\n                <a class=\"positive\" ng-click=\"transferButton.style.enable=!transferButton.style.enable\">\n                  <i class=\"icon\" ng-class=\"{\'ion-android-checkbox-outline\': transferButton.style.enable, \'ion-android-checkbox-outline-blank\': !transferButton.style.enable}\"></i>\n                  <span translate>API.DOC.TRANSFER.EXAMPLE_BUTTON_DEFAULT_STYLE</span>\n                </a>\n              </p>\n\n              <div ng-if=\"transferButton.style.enable\">\n\n                <!-- button icon -->\n                <p class=\"padding-top\">\n                  <i class=\"icon ion-image\"></i>\n                  {{\'API.DOC.TRANSFER.EXAMPLE_BUTTON_TEXT_ICON\' | translate}} :\n                </p>\n                <label class=\"item item-input item-select\">\n                  <select class=\"stable-bg dark\" ng-model=\"transferButton.style.icon\" style=\"width: 100%; max-width: 100%\" ng-options=\"l as (l.label | translate) for l in transferButton.icons track by l.filename\">\n                  </select>\n                </label>\n\n                <!-- button text -->\n                <p class=\"padding-top\">\n                  <i class=\"icon ion-quote\"></i>\n                  {{\'API.DOC.TRANSFER.EXAMPLE_BUTTON_TEXT_HELP\' | translate}} :\n                </p>\n                <label class=\"item item-input\">\n                  <input type=\"text\" ng-model=\"transferButton.style.text\" ng-model-options=\"{ debounce: 650 }\" placeholder=\"{{\'API.DOC.TRANSFER.EXAMPLE_BUTTON_TEXT_HELP\'|translate}}\">\n                </label>\n\n\n                <!-- button bg color -->\n                <p class=\"padding-top\">\n                  <i class=\"icon ion-paintbucket\"></i>\n                  {{\'API.DOC.TRANSFER.EXAMPLE_BUTTON_BG_COLOR\' | translate}} :\n                </p>\n                <label class=\"item item-input\">\n                  <input type=\"text\" ng-model=\"transferButton.style.bgColor\" ng-model-options=\"{ debounce: 650 }\" placeholder=\"{{\'API.DOC.TRANSFER.EXAMPLE_BUTTON_BG_COLOR_HELP\'|translate}}\">\n                </label>\n\n                <!-- button font color -->\n                <p class=\"padding-top\">\n                  <i class=\"icon ion-paintbrush\"></i>\n                  {{\'API.DOC.TRANSFER.EXAMPLE_BUTTON_FONT_COLOR\' | translate}} :\n                </p>\n                <label class=\"item item-input\">\n                  <input type=\"text\" ng-model=\"transferButton.style.fontColor\" ng-model-options=\"{ debounce: 650 }\" placeholder=\"{{\'API.DOC.TRANSFER.EXAMPLE_BUTTON_FONT_COLOR_HELP\'|translate}}\">\n                </label>\n\n                <!-- button width -->\n                <p class=\"padding-top\">\n                  <i class=\"icon ion-ios-crop-strong\"></i>\n                  {{\'API.DOC.TRANSFER.EXAMPLE_BUTTON_TEXT_WIDTH\' | translate}} :\n                </p>\n                <label class=\"item item-input\">\n                  <input type=\"text\" ng-model=\"transferButton.style.width\" ng-model-options=\"{ debounce: 650 }\" placeholder=\"{{\'API.DOC.TRANSFER.EXAMPLE_BUTTON_TEXT_WIDTH_HELP\'|translate}}\">\n                </label>\n              </div>\n            </form></div>\n          \n\n        </div>\n      </div>\n    </div>\n\n  </div>\n");
$templateCache.put("templates/api/home.html","<ion-view class=\"circle-bg-dark\">\n  <ion-nav-title>\n    <span class=\"title visible-xs visible-sm\" translate>API.HOME.TITLE</span>\n  </ion-nav-title>\n\n  <ion-nav-buttons side=\"right\">\n    <!-- locales -->\n    <button class=\"button button-clear hidden-xs hidden-sm gray icon-left\" style=\"max-width: 450px !important\" ng-click=\"showLocalesPopover($event)\">\n      <i class=\"icon ion-earth\"></i>\n      {{$root.settings.locale.label}}\n      <small class=\"ion-arrow-down-b\"></small>\n    </button>\n  </ion-nav-buttons>\n\n  <ion-content class=\"has-header no-padding-xs positive-900-bg\">\n\n    <br class=\"hidden-xs\">\n\n    <div class=\"light text-center\">\n      <h4 class=\"hidden-xs\" translate>API.HOME.MESSAGE</h4>\n      <h4 class=\"visible-xs padding\" translate>API.HOME.MESSAGE_SHORT</h4>\n    </div>\n\n    <br class=\"hidden-xs\">\n\n    <div class=\"row no-padding-xs\">\n      <div class=\"col col-20 hidden-xs hidden-sm\">&nbsp;</div>\n      <div class=\"col\">\n\n        <div class=\"light-bg no-padding\">\n          <!-- include documentation -->\n          <ng-include src=\"\'templates/api/doc.html\'\"></ng-include>\n        </div>\n      </div>\n\n      <div class=\"col col-20 hidden-xs hidden-sm text-center\" id=\"home\">\n        <div style=\"display: block; width: 100%\">\n          <div class=\"logo\"></div>\n          <small class=\"gray padding-top\">v{{$root.config.version}}</small>\n        </div>\n      </div>\n    </div>\n\n    <p class=\"visible-xs visible-sm light padding-top text-center\">\n      {{\'COMMON.APP_NAME\'|translate}} API\n      - <a href=\"#\" ng-click=\"showAboutModal($event)\">v{{$root.config.version}}</a>\n    </p>\n\n    <p class=\"hidden-xs hidden-sm gray padding-top text-center\">\n      {{\'COMMON.APP_NAME\'|translate}} API v{{$root.config.version}}\n      - <a href=\"#\" ng-click=\"showAboutModal($event)\" title=\"{{\'HOME.BTN_ABOUT\'|translate}}\">{{\'HOME.BTN_ABOUT\'|translate}}</a>\n      - <a href=\"../\" title=\"{{\'API.COMMON.LINK_STANDARD_APP_HELP\'|translate}}\">{{\'API.COMMON.LINK_STANDARD_APP\'|translate}}</a>\n    </p>\n\n  </ion-content>\n\n</ion-view>\n\n");
$templateCache.put("templates/api/locales_popover.html","<ion-popover-view class=\"fit popover-locales\" style=\"height: {{locales.length*48}}px\">\n  <ion-content scroll=\"false\">\n    <div class=\"list item-text-wrap block\">\n\n      <a ng-repeat=\"l in locales track by l.id\" class=\"item item-icon-left ink\" ng-click=\"changeLanguage(l.id)\">\n        {{l.label | translate}}\n      </a>\n\n    </div>\n  </ion-content>\n</ion-popover-view>\n");
$templateCache.put("templates/api/menu.html","\n<ion-nav-bar class=\"bar-dark\" title-align=\"left\">\n  <ion-nav-back-button class=\"no-text\">\n  </ion-nav-back-button>\n\n  <ion-nav-buttons side=\"left\">\n  </ion-nav-buttons>\n\n  <ion-nav-buttons side=\"right\">\n  </ion-nav-buttons>\n</ion-nav-bar>\n<ion-nav-view name=\"menuContent\"></ion-nav-view>\n\n");
$templateCache.put("templates/api/transfer.html","<ion-view class=\"circle-bg-dark\">\n\n  <ion-nav-buttons side=\"left\">\n    <button class=\"button button-clear visible-xs\" ng-click=\"closeModal()\" translate>COMMON.BTN_CANCEL\n    </button>\n  </ion-nav-buttons>\n\n  <ion-nav-title>\n    <span class=\"title visible-xs\" translate>API.TRANSFER.TITLE_SHORT</span>\n  </ion-nav-title>\n\n  <ion-nav-buttons side=\"right\">\n    <!-- locales -->\n    <button class=\"button button-clear hidden-xs hidden-sm gray icon-left\" style=\"max-width: 450px !important\" ng-click=\"showLocalesPopover($event)\">\n      <i class=\"icon ion-earth\"></i>\n      {{$root.settings.locale.label}}\n      <small class=\"ion-arrow-down-b\"></small>\n    </button>\n\n    <button class=\"button button-positive button-icon button-clear icon ion-android-done visible-xs\" ng-click=\"doLogin()\">\n    </button>\n  </ion-nav-buttons>\n\n  <ion-content class=\"has-header no-padding-xs positive-900-bg\">\n\n    <br class=\"hidden-xs\">\n\n    <div class=\"row no-padding-xs\">\n      <div class=\"col col-20 hidden-xs hidden-sm\">\n        &nbsp;\n      </div>\n      <div class=\"col no-padding-xs\">\n\n        <div class=\"light-bg\">\n\n          <h2 class=\"padding-top text-center hidden-xs\" translate>API.TRANSFER.TITLE</h2>\n\n          <div class=\"no-padding energized-100-bg\" ng-if=\"demo\">\n            <div class=\"item item-icon-left item-text-wrap no-border\">\n              <i class=\"icon ion-information-circled positive\"></i>\n              <p translate>API.TRANSFER.DEMO.HELP</p>\n            </div>\n          </div>\n\n          <ng-include src=\"\'templates/login/form_login.html\'\"></ng-include>\n\n        </div>\n        <br class=\"hidden-xs\">\n        <br class=\"hidden-xs\">\n        <div class=\"list padding no-padding-xs light-bg expert-mode\">\n          <div class=\"item\">\n            <p translate>API.TRANSFER.SUMMARY</p>\n          </div>\n\n          <div class=\"item item-icon-left-padding item-tx no-border\">\n            <h2 translate>API.TRANSFER.AMOUNT</h2>\n            <div class=\"badge item-note badge-calm\" ng-bind-html=\"transferData.amount|formatAmount:{useRelative: false, currency: $root.currency.name}\"></div>\n            <div class=\"badge badge-secondary\" ng-bind-html=\"transferData.amount|formatAmount:{useRelative: true, currency: $root.currency.name}\"></div>\n          </div>\n          <div class=\"item item-icon-left-padding\" ng-if=\"transferData.name\">\n            <h2 translate>API.TRANSFER.NAME</h2>\n            <div class=\"badge item-note\">\n              {{transferData.name}}\n            </div>\n          </div>\n          <div class=\"item item-icon-left-padding item-text-wrap\">\n            <h2 translate>API.TRANSFER.PUBKEY</h2>\n            <div class=\"badge\">\n              <span class=\"hidden-xs\"><br class=\"visible-sm visible-md\"><i class=\"icon ion-key\"> </i>{{transferData.pubkey}}</span>\n              <span class=\"visible-xs\" copy-on-click=\"{{transferData.pubkey}}\"><br class=\"visible-xs\"><i class=\"icon ion-key\"></i> {{transferData.pubkey|formatPubkey}}</span>\n            </div>\n          </div>\n\n          <div class=\"item item-icon-left-padding\">\n            <h2 translate>API.TRANSFER.COMMENT</h2>\n            <div class=\"badge item-note\">\n              <span class=\"hidden-xs\"><br class=\"visible-sm visible-md\">{{transferData.comment}}</span>\n              <span class=\"visible-xs\" copy-on-click=\"{{transferData.comment}}\"><br>{{transferData.comment}}</span>\n            </div>\n          </div>\n          <!-- spacer in small screen -->\n          <div class=\"padding-bottom visible-xs\">&nbsp;</div>\n        </div>\n      </div>\n      <div class=\"col col-20 hidden-xs hidden-sm text-center\" id=\"home\">\n        <div style=\"display: block; width: 100%\">\n          <div class=\"logo text-center\"></div>\n          <small class=\"gray padding-top\">v{{$root.config.version}}</small>\n        </div>\n      </div>\n    </div>\n\n    <p class=\"visible-xs visible-sm light padding-top text-center\">\n      {{\'COMMON.APP_NAME\'|translate}}\n      - <a href=\"#\" ng-click=\"showAboutModal($event)\">v{{$root.config.version}}</a>\n    </p>\n\n    <p class=\"hidden-xs hidden-sm gray padding-top text-center\">\n      {{\'COMMON.APP_NAME\'|translate}} API v{{$root.config.version}}\n      - <a href=\"#\" ng-click=\"showAboutModal($event)\" title=\"{{\'HOME.BTN_ABOUT\'|translate}}\">{{\'HOME.BTN_ABOUT\'|translate}}</a>\n      - <a ui-sref=\"app.home\" target=\"_system\" title=\"{{\'API.COMMON.LINK_DOC_HELP\'|translate}}\">{{\'API.COMMON.LINK_DOC\'|translate}}</a>\n      - <a href=\"../\" title=\"{{\'API.COMMON.LINK_STANDARD_APP_HELP\'|translate}}\">{{\'API.COMMON.LINK_STANDARD_APP\'|translate}}</a>\n    </p>\n\n  </ion-content>\n\n</ion-view>");
$templateCache.put("templates/blockchain/item_block.html","<a name=\"block-{{:rebind:block.number}}\"></a>\n<ion-item id=\"block-{{:rebind:block.number}}\" class=\"item item-icon-left item-block {{::ionItemClass}}\" ng-class=\"{\'ink\': !block.empty||!block.compacted, \'item-block-empty\': block.empty, \'compacted\': block.compacted && compactMode}\" ng-click=\"selectBlock(block)\">\n\n  <i class=\"icon ion-cube stable\" ng-if=\":rebind:(!block.empty && !block.avatar)\"></i>\n  <i class=\"avatar\" ng-if=\":rebind:!block.empty && block.avatar\" style=\"background-image: url(\'{{:rebind:block.avatar.src}}\')\"></i>\n\n  <div class=\"row no-padding\" ng-if=\":rebind:!block.compacted || !compactMode\">\n    <div class=\"col\" style=\"min-width: 110px; max-width: 130px\">\n      <h4 ng-class=\"{\'gray\': block.compacted, \'dark\': !block.compacted}\">\n        <i class=\"ion-clock\"></i>\n        {{:rebind:block.medianTime|formatDate}}\n      </h4>\n      <h4 ng-if=\"!block.empty\">\n        <!-- joiners/leavers -->\n        <ng-if ng-if=\":rebind:block.joinersCount||(block.excludedCount-block.revokedCount)\">\n          <i class=\"dark ion-person\"></i>\n          <span class=\"dark\" ng-if=\":rebind:block.joinersCount\">+{{:rebind:block.joinersCount}}</span>\n          <span class=\"dark\" ng-if=\":rebind:block.excludedCount\">-{{:rebind:block.excludedCount-block.revokedCount}}</span>\n        </ng-if>\n        <span class=\"dark\" ng-if=\":rebind:block.revokedCount\" class=\"assertive\"><i class=\"ion-minus-circled\"></i> {{:rebind:block.revokedCount}}&nbsp;&nbsp;</span>\n        <span class=\"dark\" ng-if=\":rebind:block.activesCount\" class=\"gray\"><i class=\"gray ion-refresh\"></i> {{:rebind:block.activesCount}}&nbsp;&nbsp;</span>\n        <span class=\"dark\" ng-if=\":rebind:block.certificationsCount\"><i class=\"ion-ribbon-a\"></i> {{:rebind:block.certificationsCount}}&nbsp;&nbsp;</span>\n        <span class=\"dark\" ng-if=\":rebind:block.dividend\" class=\"gray\"><i class=\"gray ion-arrow-up-c\"></i> {{\'COMMON.UD\'|translate}}&nbsp;&nbsp;</span>\n        <span class=\"dark\" ng-if=\":rebind:block.transactionsCount\"><i class=\"ion-card\"> {{:rebind:block.transactionsCount}}</i></span>\n      </h4>\n    </div>\n\n    <div class=\"col positive hidden-md\">\n      <h4><i class=\"ion-person\"></i> {{:rebind:block.name||block.uid}}</h4>\n    </div>\n\n    <div class=\"col col-20\">\n      <span class=\"badge\" ng-class=\"{\'badge-balanced\': !$index , \'badge-calm\': $index && !block.compacted && !block.empty}\">{{:rebind:block.number|formatInteger}}</span>\n    </div>\n\n  </div>\n</ion-item>\n");
$templateCache.put("templates/blockchain/item_block_empty_lg.html","<a name=\"block-{{::block.number}}\"></a>\n<div id=\"block-{{::block.number}}\" class=\"item item-block item-icon-left item-block-empty\" ng-class=\"{\'compacted\': block.compacted && compactMode}\" ng-click=\"selectBlock(block)\">\n  <div class=\"row no-padding\" ng-if=\":rebind:!block.compacted || !compactMode\">\n    <div class=\"col\">\n      <h3 class=\"gray\">\n        <i class=\"ion-clock\"></i>\n        {{:rebind:block.medianTime|formatDate}}\n      </h3>\n    </div>\n\n    <div class=\"col\">\n      <h3>\n        <span class=\"gray\" ng-if=\":rebind:expertMode\">\n          <i class=\"ion-key\"></i> {{:rebind:block.issuer|formatPubkey}}\n        </span>\n        <span class=\"positive\">\n          <i class=\"ion-person\"></i> {{:rebind:block.name||block.uid}}\n        </span>\n      </h3>\n    </div>\n\n    <div class=\"col col-20\"></div>\n\n    <div class=\"col col-20\">\n      <span class=\"badge\" ng-class=\"{\'badge-balanced\': !$index && search.type==\'last\'}\">{{block.number|formatInteger}}</span>\n    </div>\n\n  </div>\n</div>\n");
$templateCache.put("templates/blockchain/item_block_lg.html","<ion-item id=\"block-{{::block.number}}\" class=\"item item-block item-icon-left ink {{::ionItemClass}}\" ng-class=\"{{::ionItemClass}}\" ng-click=\"selectBlock(block)\">\n\n  <i class=\"icon ion-cube stable\" ng-if=\":rebind:!block.avatar\"></i>\n  <i class=\"avatar\" ng-if=\":rebind:!block.empty && block.avatar\" style=\"background-image: url(\'{{:rebind:block.avatar.src}}\')\"></i>\n\n  <div class=\"row no-padding\">\n    <div class=\"col\">\n      <h3 class=\"dark\"><i class=\"ion-clock\"></i> {{:rebind:block.medianTime|formatDate}}</h3>\n      <h4 class=\"gray\">{{:rebind:\'BLOCKCHAIN.HASH\'|translate}} {{:rebind:block.hash|formatHash}}</h4>\n    </div>\n\n    <div class=\"col\">\n      <h3>\n        <span class=\"gray\" ng-if=\":rebind:expertMode\">\n          <i class=\"ion-key\"></i> {{:rebind:block.issuer|formatPubkey}}\n        </span>\n        <span class=\"positive\">\n          <i class=\"ion-person\"></i> {{:rebind:block.name||block.uid}}\n        </span>\n      </h3>\n    </div>\n\n    <div class=\"col col-20\">\n      <small>\n        <ng-if ng-if=\":rebind:block.joinersCount||(block.excludedCount-block.revokedCount)\">\n          <i class=\"ion-person\"></i>\n          <span ng-if=\":rebind:block.joinersCount\">+{{:rebind:block.joinersCount}}</span>\n          <span ng-if=\":rebind:block.excludedCount\">-{{:rebind:block.excludedCount-block.revokedCount}}</span>\n          &nbsp;&nbsp;\n        </ng-if>\n        <span ng-if=\":rebind:block.revokedCount\" class=\"assertive\"><i class=\"ion-minus-circled\"></i> -{{:rebind:block.revokedCount}}&nbsp;&nbsp;</span>\n        <span ng-if=\":rebind:block.activesCount\"><i class=\"ion-refresh\"></i> {{:rebind:block.activesCount}}&nbsp;&nbsp;</span>\n        <span ng-if=\":rebind:block.certificationsCount\"><i class=\"ion-ribbon-a\"></i> {{:rebind:block.certificationsCount}}&nbsp;&nbsp;</span>\n        <span ng-if=\":rebind:block.dividend\"><i class=\"gray ion-arrow-up-c\"></i> {{:rebind:\'COMMON.UD\'|translate}}&nbsp;&nbsp;</span>\n        <span ng-if=\":rebind:block.transactionsCount\"><i class=\"ion-card\"> {{:rebind:block.transactionsCount}}</i>&nbsp;&nbsp;</span>\n\n      </small>\n    </div>\n\n    <div class=\"col col-20\">\n      <span class=\"badge\" ng-class=\"{\'badge-balanced\': !$index && search.type==\'last\', \'badge-calm\': ($index  || search.type!=\'last\')&& !block.compacted && !block.empty}\">{{:rebind:block.number}}</span>\n    </div>\n\n  </div>\n</ion-item>\n");
$templateCache.put("templates/blockchain/items_blocks.html","  <div class=\"center padding\" ng-if=\"search.loading\">\n    <ion-spinner icon=\"android\"></ion-spinner>\n  </div>\n\n  <ion-list class=\"animate-ripple padding padding-xs\">\n    <div class=\"padding gray\" ng-if=\"!search.loading && !search.results.length\" translate>\n      BLOCKCHAIN.LOOKUP.NO_BLOCK\n    </div>\n    <!-- blocks -->\n    <ng-repeat ng-repeat=\"block in :rebind:search.results track by block.number\" ng-include=\"\'templates/blockchain/item_block.html\'\">\n    </ng-repeat>\n  </ion-list>\n\n  <ion-infinite-scroll ng-if=\"search.hasMore\" icon=\"android\" on-infinite=\"showMore()\" distance=\"1%\">\n  </ion-infinite-scroll>\n");
$templateCache.put("templates/blockchain/link_identity.html","<a ui-sref=\"app.wot_identity({pubkey: identity.pubkey, uid: identity.uid})\">\n  <span class=\"positive\" ng-if=\"identity.uid\"><i class=\"icon ion-person\"></i> {{::identity.uid}}&nbsp;</span>\n  <span class=\"gray\" ng-class=\"{\'hidden-xs hidden-sm\': identity.uid}\"><i class=\"icon ion-key\"></i>&nbsp;{{::identity.pubkey|formatPubkey}}</span>\n</a>\n");
$templateCache.put("templates/blockchain/list_blocks.html","\n  <div class=\"center padding\" ng-if=\"search.loading\">\n    <ion-spinner icon=\"android\"></ion-spinner>\n  </div>\n\n  <ion-list class=\"padding padding-xs list-blocks\" ng-class=\"::motion.ionListClass\">\n    <div class=\"padding gray\" ng-if=\"!search.loading && !search.results.length\" translate>\n      BLOCKCHAIN.LOOKUP.NO_BLOCK\n    </div>\n    <!-- blocks -->\n    <ng-repeat ng-repeat=\"block in :rebind:search.results track by block.number\" ng-include=\"\'templates/blockchain/item_block.html\'\">\n    </ng-repeat>\n  </ion-list>\n\n  <ion-infinite-scroll ng-if=\"search.hasMore\" spinner=\"android\" on-infinite=\"showMore()\" distance=\"1%\">\n  </ion-infinite-scroll>\n");
$templateCache.put("templates/blockchain/list_blocks_lg.html","  <div class=\"padding padding-xs\" style=\"display: block; height: 100px\">\n    <h4 translate>BLOCKCHAIN.LOOKUP.LAST_BLOCKS</h4>\n\n    <div class=\"pull-right\">\n      <a class=\"button button-text button-small ink\" ng-class=\"{\'button-text-positive\': compactMode, \'button-text-stable\': !compactMode}\" ng-click=\"toggleCompactMode()\">\n        <i class=\"icon ion-navicon\"></i>\n        <b class=\"ion-arrow-down-b\" style=\"position: absolute; top: -2px; left: 4px; font-size: 8px\"></b>\n        <b class=\"ion-arrow-up-b\" style=\"position: absolute; top: 10px; left: 4px; font-size: 8px\"></b>\n        <span>{{\'BLOCKCHAIN.LOOKUP.BTN_COMPACT\'|translate}}</span>\n      </a>\n    </div>\n  </div>\n\n  <div class=\"center padding\" ng-if=\"search.loading\">\n    <ion-spinner icon=\"android\"></ion-spinner>\n  </div>\n\n  <ion-list class=\"padding padding-xs list-blocks\" ng-class=\"::motion.ionListClass\">\n    <div class=\"padding gray\" ng-if=\"!search.loading && !search.results.length\" translate>\n      BLOCKCHAIN.LOOKUP.NO_BLOCK\n    </div>\n    <!-- blocks -->\n    <ng-repeat ng-repeat=\"block in search.results\" ng-include=\"!block.empty ? \'templates/blockchain/item_block_lg.html\' : \'templates/blockchain/item_block_empty_lg.html\'\">\n    </ng-repeat>\n  </ion-list>\n\n  <ion-infinite-scroll ng-if=\"search.hasMore\" spinner=\"android\" on-infinite=\"showMore()\" distance=\"1%\">\n  </ion-infinite-scroll>\n");
$templateCache.put("templates/blockchain/lookup.html","<ion-view>\n  <ion-nav-title>\n    <span translate>BLOCKCHAIN.LOOKUP.TITLE</span>\n  </ion-nav-title>\n\n\n  <ion-content class=\"padding no-padding-xs\" scroll=\"true\">\n    <ng-include src=\"\'templates/blockchain/list_blocks.html\'\"></ng-include>\n  </ion-content>\n</ion-view>\n");
$templateCache.put("templates/blockchain/lookup_lg.html","<ion-view>\n  <ion-nav-title>\n    <span translate>BLOCKCHAIN.LOOKUP.TITLE</span>\n  </ion-nav-title>\n\n  <ion-content class=\"padding no-padding-xs\" scroll=\"true\">\n    <ng-include src=\"\'templates/blockchain/list_blocks_lg.html\'\"></ng-include>\n  </ion-content>\n</ion-view>\n");
$templateCache.put("templates/blockchain/unlock_condition_popover.html","<ion-popover-view class=\"fit\">\n  <ion-header-bar>\n    <h1 class=\"title\" translate>BLOCKCHAIN.VIEW.TX_OUTPUT_UNLOCK_CONDITIONS</h1>\n  </ion-header-bar>\n  <ion-content scroll=\"true\">\n    <div class=\"row\" ng-repeat=\"condition in popoverData.unlockConditions track by $index\" ng-style=\"::condition.style\">\n      <span class=\"gray\" ng-if=\"::condition.operator\">{{::\'BLOCKCHAIN.VIEW.TX_OUTPUT_OPERATOR.\'+condition.operator|translate}}&nbsp;</span>\n      <div ng-if=\"::condition.type==\'SIG\'\">\n          <i class=\"icon ion-key dark\"></i>\n        <span class=\"dark\" ng-bind-html=\"::\'BLOCKCHAIN.VIEW.TX_OUTPUT_FUNCTION.SIG\' | translate\"></span>\n        <a ng-click=\"goState(\'app.wot_identity\', {pubkey:condition.value})\" style=\"text-decoration: none\" class=\"positive\">\n          {{condition.value|formatPubkey}}\n        </a>\n      </div>\n      <div ng-if=\"::condition.type==\'XHX\'\">\n        <i class=\"icon ion-lock-combination dark\"></i>\n        <span class=\"dark\" ng-bind-html=\"::\'BLOCKCHAIN.VIEW.TX_OUTPUT_FUNCTION.XHX\' | translate\"></span>\n        <a copy-on-click=\"{{::condition.value}}\" class=\"positive\">\n          {{::condition.value|formatPubkey}}...\n        </a>\n      </div>\n      <div ng-if=\"condition.type==\'CSV\'\">\n        <i class=\"icon ion-clock dark\"></i>\n        <span class=\"dark\" ng-bind-html=\"::\'BLOCKCHAIN.VIEW.TX_OUTPUT_FUNCTION.CSV\' | translate\"></span>\n        {{::condition.value|formatDuration}}\n      </div>\n      <div ng-if=\"condition.type==\'CLTV\'\">\n        <i class=\"icon ion-clock dark\"></i>\n        <span class=\"dark\" ng-bind-html=\"::\'BLOCKCHAIN.VIEW.TX_OUTPUT_FUNCTION.CLTV\' | translate\"></span>\n        {{::condition.value|formatDate}}\n      </div>\n    </div>\n  </ion-content>\n</ion-popover-view>\n");
$templateCache.put("templates/blockchain/view_block.html","<ion-view>\n  <ion-nav-title>\n    <span class=\"title visible-xs visible-sm\" ng-if=\"number==\'current\'\">{{\'BLOCKCHAIN.VIEW.TITLE_CURRENT\'|translate}}</span>\n    <span class=\"title visible-xs visible-sm\" ng-if=\"number!=\'current\'\">{{\'BLOCKCHAIN.VIEW.TITLE\'|translate:formData}}</span>\n  </ion-nav-title>\n\n  <ion-content class=\"no-padding-xs\" scroll=\"true\">\n\n    <div class=\"row no-padding\">\n      <div class=\"col col-15 hidden-xs hidden-sm\">&nbsp;</div>\n\n      <div class=\"col no-padding\">\n\n        <div class=\"center padding\" ng-if=\"loading\">\n          <ion-spinner icon=\"android\"></ion-spinner>\n        </div>\n\n        <!-- animate-fade-slide-in -->\n        <div class=\"list item-text-wrap no-padding-xs\" ng-if=\"!loading\">\n\n          <!-- header -->\n          <div class=\"item item-text-wrap\">\n\n            <h1 class=\"padding-top hidden-xs hidden-sm\">\n              <span ng-if=\"number!=\'current\'\">{{\'BLOCKCHAIN.VIEW.TITLE\'|translate:formData}}</span>\n              <span ng-if=\"number==\'current\'\">{{\'BLOCKCHAIN.VIEW.TITLE_CURRENT\'|translate}}</span>\n            </h1>\n\n            <h3>\n              <span class=\"dark\">\n                <i class=\"icon ion-clock\"></i>\n                {{formData.medianTime | formatDate}}\n              </span>\n              <span class=\"gray\">\n                |\n                {{formData.medianTime | formatFromNow}}\n              </span>\n            </h3>\n\n            <h3>\n              <span class=\"dark\">\n                <i class=\"icon ion-lock-combination\"></i>\n                {{\'BLOCKCHAIN.VIEW.COMPUTED_BY\'|translate}}\n              </span>\n              <a class=\"positive\" ui-sref=\"app.wot_identity({pubkey:issuer.pubkey, uid: issuer.uid})\">\n                <i class=\"icon ion-person positive\"></i>\n                {{issuer.name||issuer.uid}}\n                <span class=\"gray\" ng-if=\"issuer.name\">\n                  ({{issuer.uid}})\n                </span>\n              </a>\n            </h3>\n\n            <h3>\n              <a ng-click=\"openRawBlock($event)\">\n                <i class=\"icon ion-share\"></i> {{\'BLOCKCHAIN.VIEW.SHOW_RAW\'|translate}}\n              </a>\n            </h3>\n\n          </div>\n\n          <!-- button bar-->\n          <div class=\"item hidden-xs hidden-sm padding text-center\">\n            <div class=\"pull-right\">\n              <a class=\"button button-text button-small ink\" ng-class=\"{\'button-text-positive\': compactMode, \'button-text-stable\': !compactMode}\" ng-click=\"toggleCompactMode()\">\n                <i class=\"icon ion-navicon\"></i>\n                <b class=\"ion-arrow-down-b\" style=\"position: absolute; top: -2px; left: 4px; font-size: 8px\"></b>\n                <b class=\"ion-arrow-up-b\" style=\"position: absolute; top: 10px; left: 4px; font-size: 8px\"></b>\n                <span>{{\'BLOCKCHAIN.LOOKUP.BTN_COMPACT\'|translate}}</span>\n              </a>\n            </div>\n\n            <!-- Allow extension here -->\n            <cs-extension-point name=\"buttons\"></cs-extension-point>\n          </div>\n\n          <span class=\"item item-divider\">\n            {{\'BLOCKCHAIN.VIEW.TECHNICAL_DIVIDER\' | translate}}\n          </span>\n\n          <!-- protocole -->\n          <ion-item class=\"item-icon-left item-text-wrap\" ng-if=\"!compactMode || $root.settings.expertMode\">\n            <i class=\"icon ion-gear-b\"></i>\n            {{\'BLOCKCHAIN.VIEW.VERSION\'|translate}}\n            <span class=\"badge badge-stable\">\n              {{::formData.version}}\n            </span>\n          </ion-item>\n\n          <!-- difficulty -->\n          <ion-item class=\"item-icon-left item-text-wrap\" ng-if=\"!compactMode || $root.settings.expertMode\" copy-on-click=\"{{::formData.powMin}}\">\n            <i class=\"icon ion-lock-combination\"></i>\n            {{\'BLOCKCHAIN.VIEW.POW_MIN\'|translate}}\n            <h4 class=\"gray\">{{\'BLOCKCHAIN.VIEW.POW_MIN_HELP\'|translate}}</h4>\n            <span class=\"badge badge-stable\">\n              {{::formData.powMin}}\n            </span>\n          </ion-item>\n\n          <!-- hash -->\n          <ion-item class=\"item-icon-left item-text-wrap\" copy-on-click=\"{{::formData.hash}}\">\n            <i class=\"icon ion-pound\"></i>\n            {{\'BLOCKCHAIN.VIEW.HASH\'|translate}}\n            <span class=\"item-note hidden-xs hidden-sm dark\">\n              {{::formData.hash}}\n            </span>\n            <h5 class=\"visible-xs visible-sm dark\">\n              {{::formData.hash}}\n            </h5>\n          </ion-item>\n\n          <!-- spacer -->\n          <ion-item class=\"hidden-sm hidden-xs\"></ion-item>\n\n          <span class=\"item item-divider\">\n            {{\'BLOCKCHAIN.VIEW.DATA_DIVIDER\' | translate}}\n          </span>\n\n          <!-- If Empty & compact -->\n          <ion-item ng-if=\"compactMode && formData.empty\" class=\"item-icon-left item-text-wrap\">\n            {{\'BLOCKCHAIN.VIEW.EMPTY\'|translate}}\n          </ion-item>\n\n          <!-- DU -->\n          <ion-item ng-if=\"!compactMode || formData.dividend\" class=\"item-icon-left item-text-wrap\" copy-on-click=\"{{::formData.dividend/100}}\">\n            <i class=\"icon ion-arrow-up-c\"></i>\n            <div class=\"col col-60\">\n              {{\'COMMON.UNIVERSAL_DIVIDEND\'|translate}}\n              <h4 class=\"gray\">{{\'BLOCKCHAIN.VIEW.UNIVERSAL_DIVIDEND_HELP\'|translate: {membersCount: formData.membersCount} }}</h4>\n            </div>\n            <span class=\"badge badge-balanced\" ng-if=\"formData.dividend\">\n              +1 <span ng-bind-html=\"formData.currency|currencySymbol: {useRelative: true} \"></span> / {{\'COMMON.MEMBER\'|translate|lowercase}}\n            </span>\n            <span class=\"badge badge-stable\" ng-if=\"!formData.dividend\">0</span>\n            <span class=\"badge badge-secondary\" ng-if=\"formData.dividend\">+ {{formData.dividend| formatAmount: {currency: formData.currency, useRelative: false} }} / {{\'COMMON.MEMBER\'|translate|lowercase}}</span>\n          </ion-item>\n\n          <!-- identities -->\n          <ng-if ng-if=\"!compactMode || formData.identitiesCount\">\n            <ion-item class=\"item-icon-left\">\n              <i class=\"icon ion-person\"></i>\n              <b class=\"ion-clock\" style=\"position: absolute; top: 16px; left: 39px; font-size: 12px\"></b>\n              {{\'BLOCKCHAIN.VIEW.IDENTITIES_COUNT\'|translate}}\n              <span class=\"badge badge-balanced\" ng-if=\"formData.identitiesCount\">+{{::formData.identitiesCount}}</span>\n              <span class=\"badge badge-stable\" ng-if=\"!formData.identitiesCount\">0</span>\n            </ion-item>\n\n            <div class=\"padding-bottom item-icon-left-padding item-icon-right-padding\" ng-if=\"formData.identitiesCount\">\n              <ion-item ng-repeat=\"identity in ::formData.identities\" class=\"item-border-large item-small-height\" ng-include=\"\'templates/blockchain/link_identity.html\'\">\n              </ion-item>\n            </div>\n          </ng-if>\n\n          <!-- joiners -->\n          <ng-if ng-if=\"!compactMode || formData.joinersCount\">\n            <ion-item class=\"item-icon-left\">\n              <i class=\"icon ion-person-add\"></i>\n              {{\'BLOCKCHAIN.VIEW.JOINERS_COUNT\'|translate}}\n              <span class=\"badge badge-balanced\" ng-if=\"formData.joinersCount\">+{{::formData.joinersCount}}</span>\n              <span class=\"badge badge-stable\" ng-if=\"!formData.joinersCount\">0</span>\n            </ion-item>\n\n            <div class=\"padding-bottom item-icon-left-padding item-icon-right-padding\" ng-if=\"formData.joinersCount\">\n              <ion-item ng-repeat=\"identity in ::formData.joiners\" class=\"item-border-large item-small-height\" ng-include=\"\'templates/blockchain/link_identity.html\'\">\n              </ion-item>\n            </div>\n          </ng-if>\n\n          <!-- actives -->\n          <ng-if ng-if=\"!compactMode || formData.activesCount\">\n            <ion-item class=\"item-icon-left\">\n              <i class=\"icon ion-person\"></i>\n              <b class=\"ion-refresh\" style=\"position: absolute; top: 25px; left: 39px; font-size: 12px\"></b>\n              {{\'BLOCKCHAIN.VIEW.ACTIVES_COUNT\'|translate}}\n              <h4 class=\"gray\">{{\'BLOCKCHAIN.VIEW.ACTIVES_COUNT_HELP\'|translate}}</h4>\n              <span class=\"badge badge-balanced\" ng-if=\"formData.activesCount\">{{::formData.activesCount}}</span>\n              <span class=\"badge badge-stable\" ng-if=\"!formData.activesCount\">0</span>\n            </ion-item>\n\n            <div class=\"padding-bottom item-icon-left-padding item-icon-right-padding\" ng-if=\"formData.activesCount\">\n              <ion-item ng-repeat=\"identity in ::formData.actives\" class=\"item-border-large item-small-height\" ng-include=\"\'templates/blockchain/link_identity.html\'\">\n              </ion-item>\n            </div>\n          </ng-if>\n\n          <!-- excluded -->\n          <ng-if ng-if=\"!compactMode || (formData.excludedCount-formData.revokedCount)\">\n            <ion-item class=\"item-icon-left\">\n              <i class=\"icon ion-person\"></i>\n              <b class=\"ion-close dark\" style=\"position: absolute; top: 25px; left: 39px; font-size: 12px\"></b>\n              {{\'BLOCKCHAIN.VIEW.EXCLUDED_COUNT\'|translate}}\n              <h4 class=\"gray\">{{\'BLOCKCHAIN.VIEW.EXCLUDED_COUNT_HELP\'|translate}}</h4>\n              <span class=\"badge badge-assertive\" ng-if=\"formData.excludedCount-formData.revokedCount\">-{{::formData.excludedCount-formData.revokedCount}}</span>\n              <span class=\"badge badge-stable\" ng-if=\"!(formData.excludedCount-formData.revokedCount)\">0</span>\n            </ion-item>\n\n            <div class=\"padding-bottom item-icon-left-padding item-icon-right-padding\" ng-if=\"formData.excludedCount\">\n              <ion-item ng-repeat=\"identity in ::formData.excluded\" class=\"item-border-large item-small-height\" ng-include=\"\'templates/blockchain/link_identity.html\'\">\n              </ion-item>\n            </div>\n          </ng-if>\n\n          <!-- leavers -->\n          <ng-if ng-if=\"!compactMode || formData.leaversCount\">\n            <ion-item class=\"item-icon-left\" ng-if=\"!compactMode || formData.leaversCount\">\n              <i class=\"icon ion-person\"></i>\n              <b class=\"ion-minus\" style=\"position: absolute; top: 25px; left: 39px; font-size: 12px\"></b>\n              {{\'BLOCKCHAIN.VIEW.LEAVERS_COUNT\'|translate}}\n              <h4 class=\"gray\">{{\'BLOCKCHAIN.VIEW.LEAVERS_COUNT_HELP\'|translate}}</h4>\n              <span class=\"badge badge-assertive\" ng-if=\"formData.leaversCount\">-{{::formData.leaversCount}}</span>\n              <span class=\"badge badge-stable\" ng-if=\"!formData.leaversCount\">0</span>\n            </ion-item>\n\n            <div class=\"padding-bottom item-icon-left-padding item-icon-right-padding\" ng-if=\"formData.leaversCount\">\n              <ion-item ng-repeat=\"identity in ::formData.leavers\" class=\"item-border-large item-small-height\" ng-include=\"\'templates/blockchain/link_identity.html\'\">\n              </ion-item>\n            </div>\n          </ng-if>\n\n          <!-- revoked -->\n          <ng-if ng-if=\"!compactMode || formData.revokedCount\">\n            <ion-item class=\"item-icon-left\">\n              <i class=\"icon ion-person\"></i>\n              <b class=\"ion-minus-circled assertive\" style=\"position: absolute; top: 25px; left: 39px; font-size: 12px\"></b>\n              {{\'BLOCKCHAIN.VIEW.REVOKED_COUNT\'|translate}}\n              <h4 class=\"gray\">{{\'BLOCKCHAIN.VIEW.REVOKED_COUNT_HELP\'|translate}}</h4>\n              <span class=\"badge badge-balanced\" ng-if=\"formData.revokedCount\">-{{::formData.revokedCount}}</span>\n              <span class=\"badge badge-stable\" ng-if=\"!formData.revokedCount\">0</span>\n            </ion-item>\n\n            <div class=\"padding-bottom item-icon-left-padding item-icon-right-padding\" ng-if=\"formData.revokedCount\">\n              <ion-item ng-repeat=\"identity in ::formData.revoked\" class=\"item-border-large item-small-height\" ng-include=\"\'templates/blockchain/link_identity.html\'\">\n              </ion-item>\n            </div>\n          </ng-if>\n\n          <!-- cert -->\n          <ng-if ng-if=\"!compactMode || formData.certificationsCount\">\n            <ion-item class=\"item-icon-left\">\n              <i class=\"icon ion-ribbon-a\"></i>\n              {{\'BLOCKCHAIN.VIEW.CERT_COUNT\'|translate}}\n              <span class=\"badge badge-stable\" ng-class=\"{\'badge-positive\':formData.certificationsCount}\">{{::formData.certificationsCount}}</span>\n            </ion-item>\n\n            <div class=\"padding-bottom item-icon-left-padding item-icon-right-padding no-padding-xs\" ng-if=\"formData.certificationsCount\">\n              <div ng-repeat=\"(key, certs) in formData.certifications\" class=\"item item-border-large item-small-height\">\n                <div class=\"row no-padding\">\n                  <div class=\"col col-center no-padding\">\n                    <ng-repeat ng-repeat=\"cert in certs\">\n                      <ng-include src=\"\'templates/blockchain/link_identity.html\'\" onload=\"identity=cert.from\"></ng-include>\n                      <br>\n                    </ng-repeat>\n                  </div>\n                  <div class=\"col col-10 col-center gray text-center no-padding\">\n                    <h2><i class=\"icon ion-arrow-right-a\"></i></h2>\n                  </div>\n                  <div class=\"col col-40 col-center no-padding\" ng-include=\"\'templates/blockchain/link_identity.html\'\" onload=\"identity=certs[0].to\">\n                  </div>\n                </div>\n              </div>\n            </div>\n          </ng-if>\n\n          <!-- TX -->\n          <ng-if ng-if=\"!compactMode || formData.transactionsCount\">\n            <ion-item class=\"item-icon-left\">\n              <i class=\"icon ion-card\"></i>\n              {{\'BLOCKCHAIN.VIEW.TX_COUNT\'|translate}}\n              <span class=\"badge badge-stable\" ng-class=\"{\'badge-positive\':formData.transactionsCount}\">{{::formData.transactionsCount}}</span>\n            </ion-item>\n\n            <div class=\"padding-bottom item-icon-left-padding item-icon-right-padding no-padding-xs\" ng-if=\"formData.transactionsCount\">\n              <div ng-repeat=\"tx in ::formData.transactions\" class=\"item item-small-height item-border-large\">\n                <div class=\"row no-padding\" style=\"padding-top: 3px\">\n                  <div class=\"col col-40 col-center no-padding list no-margin\">\n                    <div ng-repeat=\"identity in ::tx.issuers\" class=\"item no-padding item-small-height\">\n                      <ng-include src=\"\'templates/blockchain/link_identity.html\'\"></ng-include>\n                    </div>\n                  </div>\n                  <div class=\"col col-10 col-center gray text-center no-padding\">\n                    <h2><i class=\"icon ion-arrow-right-a\"></i></h2>\n                  </div>\n                  <!-- recipients -->\n                  <div class=\"col no-padding padding-right no-padding-xs col-text-wrap list no-margin\">\n                    <span class=\"gray\" class=\"gray\" ng-if=\"tx.toHimself\" translate>BLOCKCHAIN.VIEW.TX_TO_HIMSELF</span>\n                    <div ng-repeat=\"output in ::tx.outputs\" class=\"item no-padding item-small-height\">\n\n                      <!-- simple SIG expression -->\n                      <ng-include ng-if=\"::output.pubkey\" src=\"\'templates/blockchain/link_identity.html\'\" onload=\"identity=output\"></ng-include>\n\n                      <!-- complex unlock condition -->\n                      <span ng-if=\"::!output.pubkey && output.unlockFunctions\">\n                        <i class=\"icon ion-locked\"></i>\n                        (<a ng-click=\"showUnlockConditionPopover(output, $event)\">\n                          <i ng-repeat=\"unlockFunction in ::output.unlockFunctions\" ng-class=\"::{\'ion-key\': (unlockFunction==\'SIG\'), \'ion-clock\': (unlockFunction==\'CSV\' || unlockFunction==\'CLTV\'), \'ion-lock-combination\': (unlockFunction==\'XHX\') }\" class=\"icon\"></i>\n                        </a>)\n                      </span>\n                      <span class=\"badge badge-balanced\" ng-bind-html=\"::output.amount | formatAmount:{currency: formData.currency, useRelative: false} \"></span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </ng-if>\n\n        </div>\n      </div>\n\n      <div class=\"col col-15 hidden-xs\"></div>\n    </div>\n\n  </ion-content>\n\n</ion-view>\n");
$templateCache.put("templates/common/badge_certification_count.html","<span ng-attr-id=\"{{$ctrl.csId}}\" class=\"badge badge-balanced\" ng-class=\"{\'badge-energized\': $ctrl.requirements.willNeedCertificationCount || ($ctrl.requirements.needCertificationCount + $ctrl.requirements.pendingCertificationCount >= $ctrl.parameters.sigQty),\n               \'badge-assertive\': ($ctrl.requirements.needCertificationCount + $ctrl.requirements.pendingCertificationCount < $ctrl.parameters.sigQty)}\">\n  <span ng-if=\"$ctrl.requirements.certificationCount || !$ctrl.requirements.pendingCertificationCount\">\n    <i ng-if=\"!$ctrl.requirements.needCertificationCount\" class=\"ion-android-done\"></i>\n    {{$ctrl.requirements.certificationCount}}\n    <i ng-if=\"$ctrl.requirements.willNeedCertificationCount\" class=\"ion-android-warning\"></i>\n  </span>\n  <span ng-if=\"$ctrl.requirements.pendingCertificationCount\">\n    <ng-if ng-if=\"$ctrl.requirements.certificationCount\">+ </ng-if>\n    <i class=\"ion-clock\"></i>\n    {{$ctrl.requirements.pendingCertificationCount}}\n  </span>\n</span>\n");
$templateCache.put("templates/common/badge_given_certification_count.html","<div ng-attr-id=\"{{$ctrl.csId}}\" class=\"badge badge-calm\" ng-class=\"{\'badge-assertive\': $ctrl.identity.given_cert.length >= $ctrl.parameters.sigStock}\">\n        <span>\n          <i ng-if=\"$ctrl.identity.given_cert.length\" class=\"ion-android-done\"></i>\n          {{$ctrl.identity.given_cert.length}}\n        </span>\n  <span ng-if=\"$ctrl.identity.given_cert_pending.length\">\n          (<ng-if ng-if=\"$ctrl.identity.given_cert.length\">+ </ng-if>\n          <i class=\"ion-clock\"></i>\n          {{$ctrl.identity.given_cert_pending.length}})\n        </span>\n  <small>/ {{$ctrl.parameters.sigStock}}</small>\n</div>\n");
$templateCache.put("templates/common/form_error_messages.html","  <div class=\"form-error\" ng-message=\"minlength\">\n    <span translate=\"ERROR.FIELD_TOO_SHORT\"></span>\n  </div>\n  <div class=\"form-error\" ng-message=\"maxlength\">\n    <span translate=\"ERROR.FIELD_TOO_LONG\"></span>\n  </div>\n  <div class=\"form-error\" ng-message=\"pattern\">\n    <span translate=\"ERROR.FIELD_ACCENT\"></span>\n  </div>\n  <div class=\"form-error\" ng-message=\"required\">\n    <span translate=\"ERROR.FIELD_REQUIRED\"></span>\n  </div>\n");
$templateCache.put("templates/common/popover_copy.html","<ion-popover-view class=\"popover-copy\" style=\"height: {{(!rows || rows &lt;= 1) ? 50 : rows*22}}px\">\n  <ion-content scroll=\"false\">\n    <div class=\"list\">\n      <div class=\"item item-input\">\n        <input type=\"text\" ng-if=\"!rows || rows &lt;= 1\" ng-model=\"value\">\n        <textarea ng-if=\"rows && rows > 1\" ng-model=\"value\" rows=\"{{rows}}\" cols=\"10\">\n      </textarea></div>\n    </div>\n  </ion-content>\n</ion-popover-view>\n");
$templateCache.put("templates/common/popover_helptip.html","<ion-popover-view class=\"popover-helptip\">\n  <ion-content scroll=\"false\" class=\"list\">\n    <p>\n      <i ng-if=\"icon.position && !icon.position.startsWith(\'bottom-\')\" class=\"{{icon.class}} icon-{{icon.position}} hidden-xs\" style=\"{{icon.style}}\"></i>\n\n      <!-- close button-->\n      <a ng-click=\"closePopover()\" class=\"pull-right button-close\" ng-class=\"{\'pull-left\': icon.position === \'right\', \'pull-right\': icon.position !== \'right\'}\">\n        <i class=\"ion-close\"></i>\n      </a>\n\n      <span>&nbsp;</span>\n    </p>\n\n    <p class=\"padding light\">\n      <ng-bind-html ng-bind-html=\"content | translate:contentParams\"></ng-bind-html>\n      <ng-bind-html ng-bind-html=\"trustContent\"></ng-bind-html>\n    </p>\n\n    <!-- buttons (if helptip) -->\n    <div class=\"text-center\" ng-if=\"!tour\">\n      <button class=\"button button-small button-stable\" ng-if=\"!hasNext\" ng-click=\"closePopover(true)\" translate>COMMON.BTN_UNDERSTOOD</button>\n      <button class=\"button button-small button-stable\" id=\"helptip-btn-ok\" ng-if=\"hasNext\" ng-click=\"closePopover(false)\" translate>COMMON.BTN_UNDERSTOOD</button>\n      <button id=\"helptip-btn-ok\" class=\"button button-small button-positive icon-right ink\" ng-if=\"hasNext\" ng-click=\"closePopover(true)\">\n              <i class=\"icon ion-chevron-right\"></i>\n      </button>\n    </div>\n\n    <!-- buttons (if feature tour) -->\n    <div class=\"text-center\" ng-if=\"tour\">\n      <button class=\"button button-small button-positive\" id=\"helptip-btn-ok\" ng-if=\"!hasNext\" ng-click=\"closePopover(false)\" translate>COMMON.BTN_CLOSE</button>\n      <button id=\"helptip-btn-ok\" class=\"button button-small button-positive icon-right ink\" ng-if=\"hasNext\" ng-click=\"closePopover(true)\">\n        {{\'COMMON.BTN_CONTINUE\'|translate}}\n        <i class=\"icon ion-chevron-right\"></i>\n      </button>\n    </div>\n\n    <p>\n      <i ng-if=\"icon.position && icon.position.startsWith(\'bottom-\')\" class=\"{{icon.class}} icon-{{icon.position}} hidden-xs\"></i>\n    </p>\n  </ion-content>\n</ion-popover-view>\n");
$templateCache.put("templates/common/popover_profile.html","<ion-popover-view class=\"fit has-header popover-profile hidden-xs hidden-sm\">\n  <ion-content scroll=\"false\">\n    <div class=\"row\">\n      <div class=\"col col-33\">\n        <i class=\"avatar avatar-member\" ng-if=\"!walletData.avatar\" ng-class=\"{\'royal-bg\': login, \'stable-bg\': !login}\"></i>\n        <i class=\"avatar\" ng-if=\"walletData.avatar\" style=\"background-image: url(\'{{walletData.avatar.src}}\')\"></i>\n      </div>\n      <div class=\"col col-66\" ng-if=\"login\">\n        <h4>{{walletData.name||walletData.uid}}</h4>\n        <h4 class=\"gray\" ng-if=\"!walletData.name && !walletData.uid\" copy-on-click=\"{{walletData.pubkey}}\">\n          <i class=\"icon ion-key\"></i> {{walletData.pubkey|formatPubkey}}\n        </h4>\n        <span class=\"gray\" ng-if=\"walletData.name||walletData.uid\" copy-on-click=\"{{walletData.pubkey}}\">\n          <i class=\"icon ion-key\"></i> {{walletData.pubkey|formatPubkey}}\n        </span>\n      </div>\n    </div>\n\n    <div class=\"row\" ng-show=\"login\">\n      <div class=\"col col-66 col-offset-33\">\n\n        <!-- auth -->\n        <button ng-show=\"!auth\" class=\"button button-assertive button-small ink\" ng-click=\"doAuth()\">\n          {{\'AUTH.BTN_AUTH\' | translate}}\n        </button>\n\n        <!-- Allow extension here -->\n        <cs-extension-point name=\"profile-popover-user\"></cs-extension-point>\n      </div>\n    </div>\n\n    <div class=\"row\" ng-show=\"!login\">\n      <div class=\"col col-66 col-offset-33\">\n        <div class=\"text-center no-padding gray\">\n          {{\'LOGIN.NO_ACCOUNT_QUESTION\'|translate}}\n          <br class=\"visible-xs\">\n          <b>\n            <button class=\"button button-calm button-small ink\" ng-click=\"showJoinModal()\">\n              {{\'LOGIN.CREATE_ACCOUNT\'|translate}}\n            </button>\n          </b>\n        </div>\n      </div>\n    </div>\n  </ion-content>\n  <ion-footer-bar class=\"stable-bg row\">\n    <div class=\"col\">\n      <!-- settings -->\n      <button class=\"button button-raised button-block button-stable ink ink-dark\" id=\"helptip-popover-profile-btn-settings\" ng-click=\"showSettings()\" ui-sref=\"app.settings\">\n        <i class=\"icon ion-android-settings\"></i>\n        {{\'MENU.SETTINGS\' | translate}}\n      </button>\n    </div>\n    <div class=\"col\">\n      <button class=\"button button-raised button-block button-stable ink ink-dark\" ng-show=\"login\" ng-click=\"logout()\" translate>COMMON.BTN_LOGOUT</button>\n      <button class=\"button button-raised button-block button-positive ink\" ng-show=\"!login\" ng-click=\"loginAndGo(\'app.view_wallet\')\" translate>COMMON.BTN_LOGIN</button>\n    </div>\n  </ion-footer-bar>\n</ion-popover-view>\n");
$templateCache.put("templates/common/popover_share.html","<ion-popover-view class=\"popover-share\">\n  <ion-content scroll=\"false\">\n    <div class=\"bar bar-header\">\n      <h1 class=\"title\">{{titleKey|translate:titleValues}}</h1>\n      <span class=\"gray pull-right\">{{time|formatDate}}</span>\n    </div>\n    <div class=\"list no-margin no-padding has-header has-footer block\">\n      <div class=\"item item-input\">\n        <input type=\"text\" ng-model=\"value\">\n      </div>\n    </div>\n\n    <div class=\"bar bar-footer\">\n      <div class=\"button-bar\">\n\n        <a class=\"button button-icon positive icon ion-social-facebook\" href=\"https://www.facebook.com/sharer/sharer.php?u={{postUrl|formatEncodeURI}}&amp;title={{postMessage|formatEncodeURI}}\" onclick=\"window.open(this.href, \'facebook-share\',\'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,width=580,height=296\');return false;\" title=\"{{\'COMMON.POPOVER_SHARE.SHARE_ON_FACEBOOK\'|translate}}\">\n        </a>\n\n        <a class=\"button button-icon positive icon ion-social-twitter\" href=\"https://twitter.com/intent/tweet?url={{postUrl|formatEncodeURI}}&amp;text={{postMessage|formatEncodeURI}}\" onclick=\"window.open(this.href, \'twitter-share\',\'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,width=580,height=296\');return false;\" title=\"{{\'COMMON.POPOVER_SHARE.SHARE_ON_TWITTER\'|translate}}\">\n        </a>\n\n        <a class=\"button button-icon positive icon ion-social-googleplus\" href=\"https://plus.google.com/share?url={{postUrl|formatEncodeURI}}\" onclick=\"window.open(this.href, \'google-plus-share\', \'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=296,width=580\');return false;\" title=\"{{\'COMMON.POPOVER_SHARE.SHARE_ON_GOOGLEPLUS\'|translate}}\">\n        </a>\n\n        <a class=\"button button-icon positive icon ion-social-diaspora\" href=\"https://sharetodiaspora.github.io/?title={{postMessage|formatEncodeURI}}&amp;url={{postUrl|formatEncodeURI}}\" onclick=\"window.open(this.href, \'diaspora-share\',\'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,width=580,height=296\');return false;\" title=\"{{\'COMMON.POPOVER_SHARE.SHARE_ON_DIASPORA\'|translate}}\">\n        </a>\n\n        <a class=\"button-close\" title=\"{{\'COMMON.BTN_CLOSE\'|translate}}\" ng-click=\"closePopover()\">\n          <i class=\"icon ion-close\"></i>\n        </a>\n        </div>\n    </div>\n  </ion-content>\n</ion-popover-view>\n");
$templateCache.put("templates/common/popup_password.html","<form name=\"pwdForm\" ng-submit=\"submit($event)\">\n  <div class=\"list\" ng-init=\"setForm(pwdForm)\">\n    <label class=\"item item-input\" ng-class=\"{\'item-input-error\': pwdForm.$submitted && pwdForm.password.$invalid}\">\n      <input name=\"password\" type=\"password\" placeholder=\"{{\'ACCOUNT.SECURITY.KEYFILE.PASSWORD_POPUP.PASSWORD_HELP\' | translate}}\" ng-model=\"formData.password\" ng-minlength=\"1\" required>\n    </label>\n    <div class=\"form-errors\" ng-if=\"pwdForm.$submitted && pwdForm.pseudo.$error\" ng-messages=\"pwdForm.password.$error\">\n      <div class=\"form-error\" ng-message=\"required\">\n        <span translate=\"ERROR.FIELD_REQUIRED\"></span>\n      </div>\n      <div class=\"form-error\" ng-message=\"minlength\">\n        <span translate=\"ERROR.FIELD_TOO_SHORT\"></span>\n      </div>\n    </div>\n    <div class=\"form-errors\" ng-if=\"error\">\n      <div class=\"form-error\">{{error|translate}}</div>\n    </div>\n  </div>\n</form>\n");
$templateCache.put("templates/common/view_passcode.html","<ion-view left-buttons=\"leftButtons\">\n  <ion-nav-title>\n    <span class=\"visible-xs visible-sm\" translate>COMMON.PASSCODE.TITLE</span>\n  </ion-nav-title>\n\n  <ion-content scroll=\"false\">\n\n  </ion-content>\n</ion-view>\n");
$templateCache.put("templates/currency/items_network.html","\n  <ion-item id=\"helptip-network-blockchain\" class=\"item-icon-left item-text-wrap\">\n    <i class=\"icon ion-clock\"></i>\n    <span class=\"col col-60\" translate>CURRENCY.VIEW.MEDIAN_TIME</span>\n    <span class=\"badge badge-stable\">{{formData.medianTime | formatDate}}</span>\n  </ion-item>\n\n\n  <ion-item class=\"item-icon-left item-text-wrap\">\n    <i class=\"icon ion-lock-combination\"></i>\n    <span class=\"col col-75\" translate>CURRENCY.VIEW.POW_MIN</span>\n    <span class=\"badge badge-stable\">{{formData.difficulty | formatInteger}}</span>\n  </ion-item>\n\n  <!-- Allow extension here -->\n  <cs-extension-point name=\"network-actual\"></cs-extension-point>\n\n  <div class=\"item item-divider\">\n    <span translate>CURRENCY.VIEW.NETWORK_RULES_DIVIDER</span>\n  </div>\n\n  <ion-item class=\"item-icon-left item-text-wrap\">\n    <i class=\"icon ion-clock\" style=\"position: absolute; font-size: 20px; left: 16px; margin-top: 11px\"></i>\n    <b class=\"icon-secondary ion-lock-combination\" style=\"left: 14px; margin-top: -4px\"></b>\n    <b class=\"icon-secondary ion-arrow-right-c\" style=\"font-size: 12px; left: 28px; margin-top: -4px\"></b>\n    <b class=\"icon-secondary ion-lock-combination\" style=\"left: 38px; margin-top: -4px\"></b>\n\n    <span class=\"col col-75\" translate>CURRENCY.VIEW.AVG_GEN_TIME</span>\n    <span class=\"badge badge-stable\">{{formData.avgGenTime | formatDuration}}</span>\n  </ion-item>\n\n\n    <div id=\"helptip-network-peers\" class=\"item item-divider\">\n      <div class=\"pull-left\">\n        <span ng-if=\"search.type==\'member\'\" translate>PEER.MEMBERS</span>\n        <span ng-if=\"search.type==\'mirror\'\" translate>PEER.MIRRORS</span>\n        <span ng-if=\"search.type==\'offline\'\" translate>PEER.OFFLINE</span>\n        <span ng-if=\"!search.type\" translate>PEER.PEERS</span>\n        <span ng-if=\"!search.loading\">({{search.results.length}})</span>\n      </div>\n\n      <div class=\"buttons pull-right\">\n        <ion-spinner class=\"icon\" icon=\"android\" ng-if=\"search.loading\"></ion-spinner>\n        <a class=\"button button-icon button-small-padding icon ion-loop gray hidden-xs hidden-sm ink\" ng-if=\"!search.loading\" ng-click=\"refresh()\">\n        </a>\n        <a class=\"button button-icon button-small-padding icon ion-android-more-vertical gray hidden-xs hidden-sm ink\" ng-if=\"!search.loading\" ng-click=\"showActionsPopover($event)\">\n        </a>\n\n      </div>\n    </div>\n\n    <ng-include src=\"\'templates/network/items_peers.html\'\"></ng-include>\n");
$templateCache.put("templates/currency/items_parameters.html","<div bind-notifier=\"{ rebind:formData.useRelative }\">\n\n  <ion-item class=\"item-icon-left item-text-wrap visible-xs visible-sm\">\n    <i class=\"icon ion-android-bookmark\"></i>\n    <span translate>CURRENCY.VIEW.CURRENCY_NAME</span>\n    <div class=\"item-note dark\" ng-if=\"!loading\">\n      {{formData.currency}} (<span ng-bind-html=\":rebind:formData.currency | currencySymbol:formData.useRelative\"></span>)\n    </div>\n  </ion-item>\n\n\n  <ion-item class=\"item-icon-left item-text-wrap\">\n    <i class=\"icon ion-record\"></i>\n    <div class=\"col col-60\">\n      <span translate>CURRENCY.VIEW.MASS</span>\n      <span class=\"gray\">(M<sub>t</sub>)</span>\n    </div>\n    <span class=\"badge badge-calm\" ng-if=\"!loading\" ng-bind-html=\":rebind:formData.M | formatAmount:{currency: formData.currency, useRelative: formData.useRelative, currentUD: formData.currentUD}\"></span>\n  </ion-item>\n\n  <ion-item id=\"helptip-currency-mass-member\" class=\"item-icon-left item-text-wrap\">\n    <i class=\"icon ion-pie-graph\"></i>\n    <div class=\"col col-60\">\n      <span translate>CURRENCY.VIEW.SHARE</span>\n      <span class=\"gray\">(M<sub>t</sub>/N<sub>t</sub>)</span>\n    </div>\n    <span id=\"helptip-currency-mass-member-unit\" ng-if=\"!loading\" class=\"badge badge-energized\" ng-bind-html=\":rebind:formData.MoverN | formatAmount:{currency: formData.currency, useRelative: formData.useRelative, currentUD: formData.currentUD}\">\n    </span>\n  </ion-item>\n\n\n  <!-- Allow extension here -->\n  <cs-extension-point name=\"parameters-actual\"></cs-extension-point>\n\n\n  <ion-item class=\"item-icon-left item-text-wrap\">\n    <i class=\"icon ion-arrow-graph-up-right\"></i>\n    <div class=\"col col-60\">\n      <span translate>CURRENCY.VIEW.C_ACTUAL</span>\n      <span class=\"gray\">(c<sub>{{\'CURRENCY.VIEW.CURRENT\'|translate}}</sub>)</span>\n    </div>\n    <span class=\"badge badge-stable\">{{formData.cactual | formatNumeral: \'0,0.00\'}} %&nbsp;/&nbsp;{{formData.dt | formatPeriod}}</span>\n  </ion-item>\n\n\n  <ion-item class=\"item-icon-left item-text-wrap\">\n    <i class=\"icon ion-load-c\"></i>\n    <div class=\"col col-60\">\n      <span translate>CURRENCY.VIEW.UD</span>\n      <span class=\"gray\">({{\'COMMON.UD\'|translate}}<sub>t</sub>)</span>\n    </div>\n    <div class=\"badge badge-royal\" ng-if=\"!loading\">\n      <span ng-if=\"formData.useRelative\">\n        1 <ng-bind-html ng-bind-html=\":rebind:formData.currency| currencySymbol:true\"></ng-bind-html>\n      </span>\n      <span ng-if=\"!formData.useRelative\" ng-bind-html=\":rebind:formData.currentUD | formatAmount:{currency: formData.currency, useRelative: formData.useRelative, currentUD: formData.currentUD}\">\n      </span>\n      &nbsp;/&nbsp;{{formData.dt | formatPeriod}}\n    </div>\n  </ion-item>\n\n  <div class=\"item item-toggle dark\">\n    <div class=\"item-label text-right gray\" translate>COMMON.BTN_RELATIVE_UNIT</div>\n    <label class=\"toggle toggle-royal\" id=\"helptip-currency-change-unit\">\n      <input type=\"checkbox\" ng-model=\"formData.useRelative\">\n      <div class=\"track\">\n        <div class=\"handle\"></div>\n      </div>\n    </label>\n  </div>\n\n\n  <a name=\"helptip-currency-rules-anchor\"></a>\n  <div class=\"item item-divider\" id=\"helptip-currency-rules\">\n    <span translate>CURRENCY.VIEW.MONEY_RULES_DIVIDER</span>\n  </div>\n\n  <ion-item class=\"item-icon-left item-text-wrap\">\n    <i class=\"icon ion-arrow-graph-up-right\"></i>\n    <div class=\"col col-60\">\n      <span translate>CURRENCY.VIEW.C_RULE</span>\n      <span class=\"gray\">(c)</span>\n    </div>\n    <!-- compat with Duniter 0.90 -->\n    <span class=\"item-note dark\" ng-if=\"!loading && !formData.udReevalTime0\">{{formData.c*100 | formatNumeral: \'0,0.00\'}} %&nbsp;/&nbsp;{{formData.dt | formatPeriod}}</span>\n    <!-- Duniter 1.0+ -->\n    <span class=\"badge badge-stable\" ng-if=\"!loading && formData.udReevalTime0\">{{formData.c*100 | formatNumeral: \'0,0.00\'}} %&nbsp;/&nbsp;{{formData.dtReeval | formatDuration}}</span>\n  </ion-item>\n\n  <!-- only Duniter 1.0+ -->\n  <ion-item class=\"item-icon-left item-text-wrap\" ng-if=\"formData.udReevalTime0 && formData.allRules\">\n    <i class=\"icon ion-load-c\"></i>\n    <b class=\"ion-clock icon-secondary\" style=\"font-size: 18px; left: 36px; top: -12px\"></b>\n    <div class=\"col col-60\">\n      <span translate>CURRENCY.VIEW.DT_REEVAL</span>\n      <span class=\"gray\">(dt<sub>{{\'CURRENCY.VIEW.REEVAL_SYMBOL\'|translate}}</sub>)</span>\n    </div>\n    <span class=\"item-note dark\" ng-if=\"!loading\" translate=\"CURRENCY.VIEW.DT_REEVAL_VALUE\" translate-values=\"formData\">\n    </span>\n  </ion-item>\n\n  <!-- only Duniter 1.0+ -->\n  <ion-item class=\"item-icon-left item-text-wrap\" ng-if=\"formData.udReevalTime0 && formData.allRules\">\n    <i class=\"icon ion-load-c\"></i>\n    <b class=\"ion-calendar icon-secondary\" style=\"font-size: 18px; left: 36px; top: -12px\"></b>\n    <div class=\"col col-60\">\n      <span translate>CURRENCY.VIEW.UD_REEVAL_TIME0</span>\n      <span class=\"gray\">(t0<sub>{{\'CURRENCY.VIEW.REEVAL_SYMBOL\'|translate}}</sub>)</span>\n    </div>\n    <span class=\"item-note dark\" ng-if=\"!loading\">{{formData.udReevalTime0|formatDate}}\n    </span>\n  </ion-item>\n\n  <ion-item class=\"item-icon-left item-text-wrap\" ng-if=\"formData.allRules\">\n    <i class=\"icon ion-load-c\"></i>\n    <b class=\"ion-calculator icon-secondary\" style=\"font-size: 18px; left: 36px; top: -12px\"></b>\n    <div class=\"col col-60\">\n      <span translate>CURRENCY.VIEW.UD_RULE</span>\n      <span class=\"gray\" ng-if=\"formData.udReevalTime0\">- {{\'COMMON.UD\'|translate}}<sub>{{formData.dt|formatPeriod}}</sub>(t<sub>{{\'CURRENCY.VIEW.REEVAL_SYMBOL\'|translate}}</sub>)</span>\n    </div>\n    <!-- compat with Duniter 0.90 -->\n    <span class=\"item-note dark\" ng-if=\"!loading && !formData.udReevalTime0\">{{\'COMMON.UD\'|translate}}<sub>t-1</sub> + c<sup>2</sup> * M<sub>t-1</sub>/N<sub>t-1</sub></span>\n    <!-- Duniter 1.0+ -->\n    <span class=\"item-note dark\" ng-if=\"!loading && formData.udReevalTime0\">{{\'COMMON.UD\'|translate}}<sub>{{formData.dt|formatPeriod}}</sub>(t<sub>{{\'CURRENCY.VIEW.REEVAL_SYMBOL\'|translate}}</sub> - dt<sub>{{\'CURRENCY.VIEW.REEVAL_SYMBOL\'|translate}}</sub>)+ c<sup>2</sup> * (M/N)(t<sub>{{\'CURRENCY.VIEW.REEVAL_SYMBOL\'|translate}}</sub> - dt<sub>{{\'CURRENCY.VIEW.REEVAL_SYMBOL\'|translate}}</sub>) / dt<sub>{{\'CURRENCY.VIEW.REEVAL_SYMBOL\'|translate}}</sub></span>\n  </ion-item>\n\n  <div class=\"item item-toggle dark\">\n    <div class=\"item-label text-right gray\" translate>CURRENCY.VIEW.DISPLAY_ALL_RULES</div>\n    <label class=\"toggle toggle-royal\">\n      <input type=\"checkbox\" ng-model=\"formData.allRules\">\n      <div class=\"track\">\n        <div class=\"handle\"></div>\n      </div>\n    </label>\n  </div>\n\n</div>\n");
$templateCache.put("templates/currency/items_wot.html","\n  <div bind-notifier=\"{ rebind:formData.useRelative }\">\n\n    <a name=\"helptip-currency-newcomers-anchor\"></a>\n    <ion-item class=\"item-icon-left item-text-wrap\">\n      <i class=\"icon ion-person-stalker\"></i>\n      <div class=\"col col-60\">\n        <span translate>CURRENCY.VIEW.MEMBERS</span>\n        <span class=\"gray\">(N<sub>{{\'CURRENCY.VIEW.CURRENT\'|translate}}</sub>)</span>\n      </div>\n      <span class=\"badge badge-calm\" ng-if=\"!loading\">{{formData.N | formatInteger}}</span>\n    </ion-item>\n\n    <ion-item id=\"helptip-currency-newcomers\" class=\"item-icon-left item-text-wrap\">\n      <i class=\"icon ion-arrow-graph-up-right\"></i>\n      <div class=\"col col-75\">\n        <span translate=\"CURRENCY.VIEW.MEMBERS_VARIATION\" translate-values=\"{duration: formData.durationFromLastUD}\"></span>\n        <span class=\"gray\">(&#916;N)</span>\n      </div>\n      <div class=\"badge\" ng-if=\"!loading\" ng-class=\"{\'badge-balanced\': (formData.N>formData.Nprev), \'badge-stable\': (formData.N==formData.Nprev) ,\'badge-assertive\': (formData.Nprev>formData.N)}\">\n        {{formData.N > formData.Nprev ? \'+\' : \'\'}}{{formData.N - formData.Nprev}}\n      </div>\n    </ion-item>\n\n    <!-- Allow extension here -->\n    <cs-extension-point name=\"wot-actual\"></cs-extension-point>\n\n    <div class=\"item item-divider\">\n      <span translate>CURRENCY.VIEW.WOT_RULES_DIVIDER</span>\n    </div>\n\n    <ion-item class=\"item-icon-left item-text-wrap\">\n      <i class=\"icon ion-ribbon-b\"></i>\n      <span class=\"col col-75\" translate>CURRENCY.VIEW.SIG_QTY_RULE</span>\n      <span class=\"badge badge-balanced\" ng-if=\"!loading\">{{formData.sigQty}}</span>\n    </ion-item>\n\n    <ion-item class=\"item-icon-left item-text-wrap\">\n      <i class=\"icon ion-person\"></i>\n      <b class=\"ion-clock icon-secondary\" style=\"font-size: 18px; left: 33px; top: -12px\"></b>\n      <span class=\"col col-60\" translate>CURRENCY.VIEW.MS_WINDOW</span>\n      <span class=\"badge badge-assertive\" ng-if=\"!loading\">{{formData.msWindow | formatDuration}}</span>\n    </ion-item>\n\n    <ion-item class=\"item-icon-left item-text-wrap\">\n      <i class=\"icon ion-person\"></i>\n      <b class=\"ion-calendar icon-secondary\" style=\"font-size: 18px; left: 33px; top: -12px\"></b>\n      <span class=\"col col-60\" translate>CURRENCY.VIEW.MS_VALIDITY</span>\n      <span class=\"badge badge-balanced\" ng-if=\"!loading\">{{formData.msValidity | formatDuration}}</span>\n    </ion-item>\n\n    <ion-item class=\"item-icon-left item-text-wrap\" ng-if=\"formData.allWotRules\">\n      <i class=\"icon ion-ribbon-b\"></i>\n      <b class=\"ion-clock icon-secondary\" style=\"font-size: 18px; left: 33px; top: -12px\"></b>\n      <span class=\"col col-60\" translate>CURRENCY.VIEW.SIG_WINDOW</span>\n      <span class=\"badge badge-stable\" ng-if=\"!loading\">{{formData.sigWindow | formatDuration}}</span>\n    </ion-item>\n\n    <ion-item class=\"item-icon-left item-text-wrap\" ng-if=\"formData.allWotRules\">\n      <i class=\"icon ion-ribbon-b\"></i>\n      <b class=\"ion-calendar icon-secondary\" style=\"font-size: 18px; left: 33px; top: -12px\"></b>\n      <span class=\"col col-60\" translate>CURRENCY.VIEW.SIG_VALIDITY</span>\n      <span class=\"badge badge-balanced\" ng-if=\"!loading\">{{formData.sigValidity | formatDuration}}</span>\n    </ion-item>\n\n    <ion-item class=\"item-icon-left item-text-wrap\" ng-if=\"formData.allWotRules\">\n      <i class=\"icon ion-ribbon-a\"></i>\n      <span class=\"col col-75\" translate>CURRENCY.VIEW.SIG_STOCK</span>\n      <span class=\"badge badge-stable\" ng-if=\"!loading\">{{formData.sigStock}}</span>\n    </ion-item>\n\n    <ion-item class=\"item-icon-left item-text-wrap\" ng-if=\"formData.allWotRules\">\n      <i class=\"icon ion-clock\" style=\"position: absolute; font-size: 20px; left: 16px\"></i>\n      <b class=\"ion-ribbon-a icon-secondary\" style=\"left: 16px; top: -15px\"></b>\n      <b class=\"ion-arrow-right-c icon-secondary\" style=\"left: 28px; top: -15px\"></b>\n      <b class=\"ion-ribbon-a icon-secondary\" style=\"left: 40px; top: -15px\"></b>\n      <span class=\"col col-75\" translate>CURRENCY.VIEW.SIG_PERIOD</span>\n      <span class=\"badge badge-stable\" ng-if=\"!loading\">{{formData.sigPeriod | formatDuration}}</span>\n    </ion-item>\n\n    <ion-item class=\"item-icon-left item-text-wrap\" ng-if=\"formData.allWotRules\">\n      <i class=\"icon ion-steam\"></i>\n      <b class=\"ion-person icon-secondary\" style=\"left: 38px; top: -17px\"></b>\n      <div class=\"col col-75\">\n        <span ng-bind-html=\"\'CURRENCY.VIEW.STEP_MAX\'|translate\"></span>\n        <span class=\"gray\">(stepMax)</span>\n      </div>\n      <span class=\"badge badge-assertive\" ng-if=\"!loading\">{{formData.stepMax}}</span>\n    </ion-item>\n\n    <ion-item class=\"item-icon-left item-text-wrap\" ng-if=\"formData.allWotRules\">\n      <i class=\"icon ion-ribbon-b\"></i>\n      <b class=\"ion-star icon-secondary\" style=\"color: yellow; font-size: 16px; left: 25px; top: -7px\"></b>\n      <span class=\"col col-75\" translate>CURRENCY.VIEW.SENTRIES</span>\n      <span class=\"badge badge-stable\" ng-if=\"!loading\">{{formData.sentries}}</span>\n    </ion-item>\n\n    <ion-item class=\"item-icon-left item-text-wrap\" ng-if=\"formData.allWotRules\">\n      <i class=\"icon ion-ribbon-b\"></i>\n      <b class=\"ion-star icon-secondary\" style=\"color: yellow; font-size: 16px; left: 25px; top: -7px\"></b>\n      <span class=\"col col-75\" translate>CURRENCY.VIEW.SENTRIES_FORMULA</span>\n      <span class=\"item-note dark\" ng-if=\"!loading\">{{\'CURRENCY.VIEW.MATH_CEILING\'| translate}}( N<sub>t</sub><sup>^ (1 / stepMax)</sup>)</span>\n    </ion-item>\n\n    <ion-item class=\"item-icon-left item-text-wrap\" ng-if=\"formData.allWotRules\">\n      <i class=\"icon ion-pull-request\"></i>\n      <span class=\"col col-75\" translate>CURRENCY.VIEW.XPERCENT</span>\n      <span class=\"badge badge-stable\" ng-if=\"!loading\">{{formData.xpercent*100| formatNumeral: \'0,0\'}} %</span>\n    </ion-item>\n\n    <div class=\"item item-toggle dark\">\n      <div class=\"item-label text-right gray\" translate>CURRENCY.VIEW.DISPLAY_ALL_RULES</div>\n      <label class=\"toggle toggle-royal\">\n        <input type=\"checkbox\" ng-model=\"formData.allWotRules\">\n        <div class=\"track\">\n          <div class=\"handle\"></div>\n        </div>\n      </label>\n    </div>\n\n  </div>\n");
$templateCache.put("templates/currency/lookup.html","<ion-view view-title=\"{{\'CURRENCY.SELECT.TITLE\' | translate}}\">\n  <ion-content class=\"padding no-padding-xs\">\n    <h4 class=\"content double-padding-x\" translate>CURRENCY.SELECT.CURRENCIES</h4>\n\n    <ng-include src=\"\'templates/currency/lookup_form.html\'\">\n  </ion-content>\n</ion-view>\n");
$templateCache.put("templates/currency/lookup_form.html","<ion-list>\n\n  <div class=\"item center\" ng-if=\"search.loading\">\n    <ion-spinner icon=\"android\"></ion-spinner>\n  </div>\n\n  <div ng-repeat=\"currency in search.results\" ng-class=\"{ selected: selectedCurrency == currency }\">\n    <a class=\"item card card-item stable-bg padding ink\" ng-click=\"selectCurrency(currency)\" ng-class=\"{ selected: selectedCurrency && selectedCurrency.name == currency.name }\">\n      <h2>{{currency.name}}</h2>\n      <h4 class=\"gray\">{{currency.peer.server}}</h4>\n      <span class=\"badge badge-royal\">{{\'CURRENCY.SELECT.MEMBERS_COUNT\'|translate:currency}}</span>\n    </a>\n  </div>\n</ion-list>\n");
$templateCache.put("templates/currency/modal_license.html","<ion-modal-view class=\"modal-full-height modal-license\">\n  <ion-header-bar class=\"bar-positive\">\n    <button class=\"button button-clear visible-xs\" ng-click=\"closeModal()\" translate>COMMON.BTN_CANCEL</button>\n    <h1 class=\"title\" translate>CURRENCY.LICENSE.TITLE</h1>\n\n    <button class=\"button button-icon button-clear icon ion-android-send visible-xs\" ng-click=\"doTransfer()\">\n    </button>\n  </ion-header-bar>\n\n  <ion-content scroll=\"false\" style=\"bottom: 0px\">\n\n    <p ng-if=\"!licenseUrl && !loading\">\n      translate>CURRENCY.LICENSE.NO_LICENSE_FILE\n    </p>\n    <iframe ng-if=\"licenseUrl && !loading\" class=\"padding-left padding-right no-padding-xs iframe-license\" id=\"iframe-license\" ng-src=\"{{licenseUrlHtml||licenseUrl}}\">\n    </iframe>\n\n    <div class=\"padding hidden-xs text-center\">\n      <button class=\"button button-stable ink\" ng-click=\"downloadFile()\">\n        {{\'CURRENCY.LICENSE.BTN_DOWNLOAD\' | translate}}\n      </button>\n\n      <button class=\"button button-positive ink\" type=\"submit\" ng-click=\"closeModal()\">\n        {{\'COMMON.BTN_CLOSE\' | translate}}\n      </button>\n    </div>\n  </ion-content>\n</ion-modal-view>\n");
$templateCache.put("templates/currency/popover_actions.html","<ion-popover-view class=\"fit has-header popover-wallet-actions\">\n  <ion-header-bar>\n    <h1 class=\"title\" translate>COMMON.POPOVER_ACTIONS_TITLE</h1>\n  </ion-header-bar>\n  <ion-content scroll=\"false\">\n    <div class=\"list item-text-wrap\">\n\n      <!-- help tour -->\n      <a class=\"item item-icon-left ink hidden-sm hidden-xs\" ng-click=\"startCurrencyTour()\">\n        <i class=\"icon ion-easel\"></i>\n        {{\'COMMON.BTN_HELP_TOUR_SCREEN\' | translate}}\n      </a>\n    </div>\n  </ion-content>\n</ion-popover-view>\n");
$templateCache.put("templates/currency/view_currency.html","<ion-view left-buttons=\"leftButtons\" cache-view=\"false\">\n\n  <ion-tabs class=\"tabs-positive tabs-icon-top\">\n\n    <ion-tab title=\"{{\'CURRENCY.VIEW.TAB_CURRENCY\'|translate}}\" icon=\"ion-stats-bars\" ui-sref=\"app.currency.tab_parameters\">\n      <ion-nav-view name=\"tab-parameters\"></ion-nav-view>\n    </ion-tab>\n\n    <ion-tab title=\"{{\'CURRENCY.VIEW.TAB_WOT\'|translate}}\" icon=\"ion-person-stalker\" ui-sref=\"app.currency.tab_wot\">\n      <ion-nav-view name=\"tab-wot\"></ion-nav-view>\n    </ion-tab>\n\n    <ion-tab id=\"helptip-currency-tab-peers\" title=\"{{\'CURRENCY.VIEW.TAB_NETWORK\'|translate}}\" icon=\"ion-cloud\" ui-sref=\"app.currency.tab_network\">\n      <ion-nav-view name=\"tab-network\"></ion-nav-view>\n    </ion-tab>\n\n    <ion-tab title=\"{{\'CURRENCY.VIEW.TAB_BLOCKS\'|translate}}\" icon=\"ion-lock-combination\" ui-sref=\"app.currency.tab_blocks\">\n      <ion-nav-view name=\"tab-blocks\"></ion-nav-view>\n    </ion-tab>\n\n  </ion-tabs>\n</ion-view>\n");
$templateCache.put("templates/currency/view_currency_lg.html","<ion-view left-buttons=\"leftButtons\" cache-view=\"false\">\n    <ion-nav-title bind-notifier=\"{ rebind:formData.useRelative }\">\n      <span ng-if=\"!loading\">\n         {{\'CURRENCY.VIEW.TITLE\' | translate}} {{formData.currency|abbreviate}}\n      </span>\n    </ion-nav-title>\n\n    <ion-nav-buttons side=\"secondary\">\n        <button class=\"button button-icon button-clear icon ion-loop visible-xs visible-sm\" ng-click=\"refreshPeers()\">\n        </button>\n\n        <!-- Allow extension here -->\n        <cs-extension-point name=\"nav-buttons\"></cs-extension-point>\n    </ion-nav-buttons>\n\n    <ion-content>\n\n      <!-- Buttons bar-->\n      <div class=\"hidden-xs hidden-sm padding text-center\">\n\n\n        <button class=\"button button-stable icon-right ink\" ng-if=\"formData.licenseUrl\" ng-click=\"showLicenseModal()\">\n          <i class=\"icon ion-document-text\"></i>&nbsp;\n          {{\'CURRENCY.VIEW.BTN_SHOW_LICENSE\' | translate}}\n        </button>\n\n        <button class=\"button button-stable button-small-padding icon ion-loop ink\" ng-click=\"refresh()\" title=\"{{\'COMMON.BTN_REFRESH\' | translate}}\">\n        </button>\n\n        <button class=\"button button-stable button-small-padding icon ion-android-more-vertical ink\" ng-click=\"showActionsPopover($event)\">\n        </button>\n\n      </div>\n\n      <div class=\"item item-text-wrap no-border no-padding pull-left\">\n        <div class=\"item-icon-left card padding stable-900-bg\">\n          <ion-spinner class=\"icon\" icon=\"android\" ng-if=\"loading\"></ion-spinner>\n          <i class=\"icon ion-help-circled calm\" ng-if=\"!loading\"></i>\n          <div class=\"item-icon-left-padding\" style=\"min-height: 26px\">\n            <span ng-if=\"!loading\" trust-as-html=\"\'CURRENCY.VIEW.CURRENCY_SHORT_DESCRIPTION\'|translate:formData\">\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"row responsive-sm\">\n        <!-- currency -->\n        <div class=\"col list\">\n          <div class=\"item item-divider\">\n            <span translate>CURRENCY.VIEW.MONEY_DIVIDER</span>\n          </div>\n          <ng-include src=\"\'templates/currency/items_parameters.html\'\"></ng-include>\n\n        </div>\n\n        <!-- wot -->\n        <div class=\"col list\">\n          <div class=\"item item-divider\">\n            <span translate>CURRENCY.VIEW.WOT_DIVIDER</span>\n          </div>\n          <ng-include src=\"\'templates/currency/items_wot.html\'\"></ng-include>\n\n        </div>\n      </div>\n    </ion-content>\n</ion-view>\n");
$templateCache.put("templates/help/help.html","\n  <a name=\"join\"></a>\n  <h2 translate>HELP.JOIN.SECTION</h2>\n\n    <a name=\"join-salt\"></a>\n    <div class=\"row responsive-sm\" ng-class=\"itemsClass[\'join-salt\']\">\n      <div class=\"col col-20\" translate>LOGIN.SALT</div>\n      <div class=\"col\" translate>HELP.JOIN.SALT</div>\n    </div>\n\n    <a name=\"join-password\"></a>\n    <div class=\"row responsive-sm\" ng-class=\"itemsClass[\'join-password\']\">\n      <div class=\"col col-20\" translate>LOGIN.PASSWORD</div>\n      <div class=\"col\" translate>HELP.JOIN.PASSWORD</div>\n    </div>\n\n    <a name=\"join-pseudo\"></a>\n    <div class=\"row responsive-sm\" ng-class=\"itemsClass[\'join-pseudo\']\">\n      <div class=\"col col-20\" translate>ACCOUNT.NEW.PSEUDO</div>\n      <div class=\"col\" translate>HELP.JOIN.PSEUDO</div>\n    </div>\n\n  <a name=\"login\"></a>\n  <h2 translate>HELP.LOGIN.SECTION</h2>\n\n  <a name=\"login-pubkey\"></a>\n  <div class=\"row responsive-sm\" ng-class=\"itemsClass[\'login-pubkey\']\">\n    <div class=\"col col-20\" translate>HELP.LOGIN.PUBKEY</div>\n    <div class=\"col\" translate>HELP.LOGIN.PUBKEY_DEF</div>\n  </div>\n\n  <a name=\"login-method\"></a>\n  <div class=\"row responsive-sm\" ng-class=\"itemsClass[\'login-method\']\">\n    <div class=\"col col-20\" translate>HELP.LOGIN.METHOD</div>\n    <div class=\"col\" translate>HELP.LOGIN.METHOD_DEF</div>\n  </div>\n\n  <a name=\"glossary\"></a>\n  <h2 translate>HELP.GLOSSARY.SECTION</h2>\n\n    <a name=\"pubkey\"></a>\n    <div class=\"row responsive-sm\" ng-class=\"itemsClass.pubkey\">\n      <div class=\"col col-20\" translate>COMMON.PUBKEY</div>\n      <div class=\"col\" translate>HELP.GLOSSARY.PUBKEY_DEF</div>\n    </div>\n\n    <a name=\"blockchain\"></a>\n    <div class=\"row responsive-sm\" ng-class=\"itemsClass.blockchain\">\n      <div class=\"col col-20\" translate>HELP.GLOSSARY.BLOCKCHAIN</div>\n      <div class=\"col\" translate>HELP.GLOSSARY.BLOCKCHAIN_DEF</div>\n    </div>\n\n    <a name=\"universal_dividend\"></a>\n    <a name=\"ud\"></a>\n    <div class=\"row responsive-sm\" ng-class=\"itemsClass.ud\">\n      <div class=\"col col-20\" translate>COMMON.UNIVERSAL_DIVIDEND</div>\n      <div class=\"col\" translate>HELP.GLOSSARY.UNIVERSAL_DIVIDEND_DEF</div>\n    </div>\n\n    <a name=\"member\"></a>\n    <div class=\"row responsive-sm\" ng-class=\"itemsClass.member\">\n      <div class=\"col col-20\" translate>HELP.GLOSSARY.MEMBER</div>\n      <div class=\"col\" translate>HELP.GLOSSARY.MEMBER_DEF</div>\n    </div>\n\n    <a name=\"currency_rules\"></a>\n    <div class=\"row responsive-sm\" ng-class=\"itemsClass.currency_rules\">\n      <div class=\"col col-20\" translate>HELP.GLOSSARY.CURRENCY_RULES</div>\n      <div class=\"col\" translate>HELP.GLOSSARY.CURRENCY_RULES_DEF</div>\n    </div>\n");
$templateCache.put("templates/help/modal_help.html","<ion-modal-view class=\"modal-full-height modal-help\">\n\n    <ion-header-bar class=\"bar-positive\">\n      <button class=\"button button-clear\" ng-click=\"closeModal()\" translate>COMMON.BTN_CLOSE\n      </button>\n\n      <h1 class=\"title\" translate>HELP.TITLE</h1>\n    </ion-header-bar>\n\n    <ion-content scroll=\"true\" class=\"padding no-padding-xs\">\n\n      <div ng-class=\"listClass\">\n        <ng-include src=\"\'templates/help/help.html\'\"></ng-include>\n      </div>\n\n      <div class=\"padding hidden-xs text-center\">\n        <button class=\"button button-positive ink\" type=\"submit\" ng-click=\"closeModal()\">\n          {{\'COMMON.BTN_CLOSE\' | translate}}\n        </button>\n      </div>\n\n    </ion-content>\n</ion-modal-view>\n");
$templateCache.put("templates/help/view_help.html","<ion-view left-buttons=\"leftButtons\">\n  <ion-nav-title>\n    <span class=\"visible-xs visible-sm\" translate>HELP.TITLE</span>\n  </ion-nav-title>\n\n  <ion-content scroll=\"true\" class=\"padding\">\n\n    <h1 class=\"hidden-xs hidden-sm\" translate>HELP.TITLE</h1>\n\n    <ng-include src=\"\'templates/help/help.html\'\"></ng-include>\n\n  </ion-content>\n</ion-view>\n");
$templateCache.put("templates/home/home.html","<ion-view id=\"home\" class=\"\">\n  <ion-nav-title>\n\n  </ion-nav-title>\n\n  <ion-content class=\"has-header text-center padding-xs positive-900-bg circle-bg-dark\">\n\n    <div id=\"helptip-home-logo\" class=\"logo\"></div>\n\n    <h4>\n      <span class=\"hidden-xs\" translate>HOME.WELCOME</span>\n      <span ng-show=\"!loading\" translate-values=\":currency:{currency: $root.currency.name}\" translate>HOME.MESSAGE</span>\n    </h4>\n\n    <div class=\"center padding\" ng-if=\"loading\">\n      <ion-spinner icon=\"android\"></ion-spinner>\n    </div>\n\n    <div class=\"center padding animate-fade-in animate-show-hide ng-hide\" ng-show=\"!loading && error\">\n      <div class=\"card card-item padding\">\n        <p class=\"item-content item-text-wrap\">\n            <span class=\"dark\" trust-as-html=\"\'HOME.CONNECTION_ERROR\'|translate:node\"></span>\n        </p>\n\n        <!-- Retry -->\n        <button type=\"button\" class=\"button button-positive icon icon-left ion-refresh ink\" ng-click=\"reload()\">{{\'COMMON.BTN_REFRESH\'|translate}}</button>\n      </div>\n    </div>\n\n    <div class=\"center animate-fade-in animate-show-hide ng-hide\" ng-show=\"!loading && !error\">\n\n      <!-- Help tour (NOT ready yet for small device) -->\n      <button type=\"button\" class=\"button button-block button-stable button-raised icon-left icon ion-easel ink-dark hidden-xs\" ng-click=\"startHelpTour()\">\n        {{\'COMMON.BTN_HELP_TOUR\'|translate}}\n      </button>\n\n      <!-- Currency-->\n      <button type=\"button\" class=\"item button button-block button-stable button-raised icon icon-left ion-ios-world-outline ink-dark hidden-sm hidden-xs\" ui-sref=\"app.currency\">{{\'HOME.BTN_CURRENCY\'|translate:$root.currency }}</button>\n\n      <button type=\"button\" class=\"item button button-block button-positive button-raised icon icon-left ion-locked ink-dark\" ui-sref=\"app.view_wallet\" ng-show=\"!login\" translate>COMMON.BTN_LOGIN</button>\n\n      <button type=\"button\" class=\"item button button-block button-positive button-raised icon icon-left ion-person ink-dark\" ui-sref=\"app.view_wallet\" ng-show=\"login\" translate>MENU.ACCOUNT</button>\n\n      <button type=\"button\" class=\"item button button-block button-positive button-raised icon icon-left ion-card ink-dark visible-xs\" ui-sref=\"app.view_wallet_tx\" ng-show=\"login\" translate>MENU.TRANSACTIONS</button>\n\n      <br class=\"visible-xs visible-sm\">\n\n      <!-- join link -->\n      <div class=\"text-center no-padding\" ng-show=\"!login\">\n        <br class=\"visible-xs visible-sm\">\n        {{\'LOGIN.NO_ACCOUNT_QUESTION\'|translate}}\n        <b>\n          <a class=\"assertive hidden-xs hidden-sm\" ng-click=\"showJoinModal()\" translate>\n            LOGIN.CREATE_ACCOUNT\n          </a>\n        </b>\n      </div>\n\n      <!-- disconnect link -->\n      <div class=\"text-center no-padding\" ng-show=\"login\">\n        <br class=\"visible-xs visible-sm\">\n        <span ng-bind-html=\"\'HOME.NOT_YOUR_ACCOUNT_QUESTION\'|translate:{pubkey: walletData.pubkey}\"></span>\n        <br>\n        <b>\n          <a class=\"assertive hidden-xs hidden-sm\" ng-click=\"logout()\" translate>\n            HOME.BTN_CHANGE_ACCOUNT\n          </a>\n        </b>\n      </div>\n\n      <button type=\"button\" class=\"button button-block button-calm button-raised icon icon-left ion-wand ink-dark visible-xs visible-sm\" ng-click=\"showJoinModal()\" ng-if=\"!login\" translate>LOGIN.CREATE_ACCOUNT</button>\n      <button type=\"button\" class=\"button button-block button-assertive button-raised icon icon-left ion-wand ink-dark visible-xs visible-sm\" ng-click=\"logout()\" ng-if=\"login\" translate>COMMON.BTN_LOGOUT</button>\n\n\n      <div class=\"text-center no-padding visible-xs stable\">\n        <br>\n        <!-- version -->\n        {{\'COMMON.APP_VERSION\'|translate:{version: config.version} }}\n        |\n        <!-- about -->\n        <a href=\"#\" ng-click=\"showAboutModal()\" translate>HOME.BTN_ABOUT</a>\n      </div>\n\n    </div>\n  </ion-content>\n\n</ion-view>\n\n");
$templateCache.put("templates/join/modal_choose_account_type.html","<ion-modal-view class=\"modal-full-height\">\n\n  <ion-header-bar class=\"bar-positive\">\n\n    <button class=\"button button-clear visible-xs\" ng-if=\"!slides.slider.activeIndex\" ng-click=\"closeModal()\" translate>COMMON.BTN_CANCEL\n    </button>\n    <button class=\"button button-icon button-clear icon ion-ios-arrow-back buttons header-item\" ng-click=\"slidePrev()\" ng-if=\"slides.slider.activeIndex\">\n    </button>\n\n    <h1 class=\"title\" translate>ACCOUNT.NEW.TITLE</h1>\n\n    <button class=\"button button-clear icon-right visible-xs\" ng-if=\"slides.slider.activeIndex === 0\" ng-click=\"slideNext()\">\n      <span translate>COMMON.BTN_NEXT</span>\n      <i class=\"icon ion-ios-arrow-right\"></i>\n    </button>\n  </ion-header-bar>\n\n\n    <ion-slides options=\"slides.options\" slider=\"slides.slider\">\n\n      <!-- STEP 1: currency -->\n      <ion-slide-page>\n        <ion-content class=\"has-header padding\">\n          <div class=\"center padding\" ng-if=\"loading\">\n            <ion-spinner class=\"icon\" icon=\"android\"></ion-spinner>\n          </div>\n\n          <div ng-if=\"!loading\">\n\n\n            <p ng-bind-html=\"\'ACCOUNT.NEW.INTRO_WARNING_TIME\'|translate:currency\"></p>\n\n            <div class=\"row responsive-sm\">\n              <div class=\"col\">\n                <div class=\"item card item-icon-left padding item-text-wrap stable-bg\">\n                  <i class=\"icon ion-android-warning assertive\"></i>\n\n                  <p class=\"item-content item-icon-left-padding\">\n                    <span class=\"dark\" translate>ACCOUNT.NEW.INTRO_WARNING_SECURITY</span><br>\n                    <small translate>ACCOUNT.NEW.INTRO_WARNING_SECURITY_HELP</small>\n                  </p>\n                </div>\n              </div>\n\n              <div class=\"col\">\n                <div class=\"item card item-icon-left padding item-text-wrap stable-bg\">\n                  <i class=\"icon ion-information-circled positive\"></i>\n                  <p class=\"item-content item-icon-left-padding\">\n                    <span class=\"dark\" trust-as-html=\"\'ACCOUNT.NEW.REGISTRATION_NODE\'|translate:currency.node\"></span><br>\n                    <small trust-as-html=\"\'ACCOUNT.NEW.REGISTRATION_NODE_HELP\'|translate:currency.node\"></small>\n                  </p>\n                </div>\n              </div>\n            </div>\n\n\n          </div>\n\n          <p class=\"hidden-xs hidden-sm\" ng-bind-html=\"\'ACCOUNT.NEW.INTRO_HELP\'|translate\"></p>\n\n          <div class=\"padding hidden-xs text-right\">\n            <button class=\"button button-clear button-dark ink\" ng-click=\"closeModal()\" type=\"button\" translate>COMMON.BTN_CANCEL\n            </button>\n            <button class=\"button button-positive icon-right ion-chevron-right ink\" ng-click=\"slideNext()\" ng-disabled=\"loading\" type=\"button\" translate>\n              COMMON.BTN_START\n            </button>\n          </div>\n        </ion-content>\n      </ion-slide-page>\n\n      <!-- STEP 2: account type -->\n      <ion-slide-page>\n        <ion-content class=\"has-header padding\">\n          <p translate>ACCOUNT.NEW.SELECT_ACCOUNT_TYPE</p>\n          <div class=\"list\">\n            <!-- member account -->\n            <div class=\"item item-complex card stable-bg item-icon-left item-icon-right ink\" ng-click=\"selectAccountTypeAndClose(\'member\')\">\n              <div class=\"item-content item-text-wrap\">\n                <i class=\"item-image icon dark ion-person\"></i>\n                <h2 translate>ACCOUNT.NEW.MEMBER_ACCOUNT</h2>\n                <h4 class=\"gray\" ng-bind-html=\"\'ACCOUNT.NEW.MEMBER_ACCOUNT_HELP\'|translate:currency\"></h4>\n                <i class=\"icon dark ion-ios-arrow-right\"></i>\n              </div>\n            </div>\n\n            <!-- Allow extension here -->\n            <cs-extension-point name=\"select-account-type\"></cs-extension-point>\n\n            <!-- simple wallet -->\n            <div class=\"item item-complex card stable-bg item-icon-left item-icon-right ink\" ng-click=\"selectAccountTypeAndClose(\'wallet\')\">\n              <div class=\"item-content item-text-wrap\">\n                <i class=\"item-image icon dark ion-card\"></i>\n                <h2 translate>ACCOUNT.NEW.WALLET_ACCOUNT</h2>\n                <h4 class=\"gray\" translate>ACCOUNT.NEW.WALLET_ACCOUNT_HELP</h4>\n                <i class=\"icon dark ion-ios-arrow-right\"></i> </div>\n            </div>\n          </div>\n          <div class=\"padding hidden-xs text-right\">\n            <button class=\"button button-clear button-dark ink\" ng-click=\"closeModal()\" type=\"button\" translate>COMMON.BTN_CANCEL\n            </button>\n          </div>\n        </ion-content>\n      </ion-slide-page>\n    \n</ion-slides></ion-modal-view>\n");
$templateCache.put("templates/join/modal_join_member.html","<ion-modal-view class=\"modal-full-height\">\n\n  <ion-header-bar class=\"bar-positive\">\n\n    <button class=\"button button-clear visible-xs\" ng-if=\"!slides.slider.activeIndex\" ng-click=\"closeModal()\" translate>COMMON.BTN_CANCEL\n    </button>\n    <button class=\"button button-icon button-clear icon ion-ios-arrow-back buttons header-item\" ng-click=\"doPrev()\" ng-if=\"slides.slider.activeIndex && slideBehavior.hasPreviousButton\">\n    </button>\n    <button class=\"button button-icon button-clear icon ion-ios-help-outline visible-xs\" ng-if=\"slideBehavior.helpAnchor\" ng-click=\"showHelpModal(slideBehavior.helpAnchor)\">\n    </button>\n\n    <h1 class=\"title\" translate>ACCOUNT.NEW.MEMBER_ACCOUNT_TITLE</h1>\n\n    <!-- next -->\n    <button class=\"button button-clear icon-right visible-xs\" ng-if=\"slideBehavior.hasNextButton\" ng-click=\"doNext()\">\n      <span translate>COMMON.BTN_NEXT</span>\n      <i class=\"icon ion-ios-arrow-right\"></i>\n    </button>\n    <!-- accept -->\n    <button class=\"button button-clear icon-right visible-xs\" ng-class=\"{\'button-text-stable\': !isLicenseRead}\" ng-if=\"slideBehavior.hasAcceptButton\" ng-click=\"isLicenseRead ? doNext() : undefined\">\n      <span translate>ACCOUNT.NEW.BTN_ACCEPT</span>\n      <i class=\"icon ion-ios-arrow-right\"></i>\n    </button>\n    <!-- send -->\n    <button class=\"button button-clear icon-right visible-xs\" ng-if=\"slideBehavior.hasSendButton\" ng-click=\"doNewAccount()\">\n      <i class=\"icon ion-android-send\"></i>\n    </button>\n  </ion-header-bar>\n\n\n    <ion-slides options=\"slides.options\" slider=\"slides.slider\">\n\n      <!-- STEP 1: license -->\n      <ion-slide-page ng-if=\"licenseFileUrl\">\n        <ion-content class=\"has-header\" scroll=\"false\">\n            <div class=\"padding\" translate>ACCOUNT.NEW.INFO_LICENSE</div>\n\n            <div class=\"center padding\" ng-if=\"loading\">\n              <ion-spinner class=\"icon\" icon=\"android\"></ion-spinner>\n            </div>\n\n            <iframe ng-if=\"!loading\" class=\"padding-left padding-right no-padding-xs iframe-license\" id=\"iframe-license\" ng-src=\"{{licenseFileUrl}}\">\n            </iframe>\n\n            <div class=\"padding hidden-xs text-right\">\n              <button class=\"button button-clear button-dark ink\" ng-click=\"closeModal()\" type=\"button\" translate>\n                COMMON.BTN_CANCEL\n              </button>\n              <button class=\"button button-calm icon-right ion-chevron-right ink\" ng-click=\"doNext(\'licenceForm\')\" ng-disabled=\"!isLicenseRead\" type=\"button\" translate>\n                ACCOUNT.NEW.BTN_ACCEPT_LICENSE\n              </button>\n            </div>\n        </ion-content>\n      </ion-slide-page>\n\n      <!-- STEP 2: pseudo-->\n      <ion-slide-page>\n        <ion-content class=\"has-header\" scroll=\"false\">\n          <form name=\"pseudoForm\" novalidate=\"\" ng-submit=\"doNext(\'pseudoForm\')\">\n\n            <div class=\"item item-text-wrap text-center padding\">\n              <a class=\"pull-right icon-help hidden-xs\" ng-click=\"showHelpModal(\'join-pseudo\')\"></a>\n              <span translate>ACCOUNT.NEW.PSEUDO_WARNING</span>\n            </div>\n\n            <div class=\"list\" ng-init=\"setForm(pseudoForm, \'pseudoForm\')\">\n\n              <!-- pseudo -->\n              <div class=\"item item-input\" ng-class=\"{\'item-input-error\': (pseudoForm.$submitted && pseudoForm.pseudo.$invalid) || (uiAlreadyUsed && formData.pseudo)}\">\n                <span class=\"input-label\" translate>ACCOUNT.NEW.PSEUDO</span>\n                <input id=\"pseudo\" name=\"pseudo\" type=\"text\" placeholder=\"{{\'ACCOUNT.NEW.PSEUDO_HELP\' | translate}}\" ng-model=\"formData.pseudo\" autocomplete=\"off\" ng-minlength=\"3\" ng-maxlength=\"100\" ng-pattern=\"userIdPattern\" ng-model-options=\"{ debounce: 250 }\" required>\n              </div>\n              <div class=\"form-errors\" ng-show=\"pseudoForm.$submitted && pseudoForm.pseudo.$error\" ng-messages=\"pseudoForm.pseudo.$error\">\n                <div class=\"form-error\" ng-message=\"minlength\">\n                  <span translate=\"ERROR.FIELD_TOO_SHORT_WITH_LENGTH\" translate-values=\"{minLength: 3}\"></span>\n                </div>\n                <div class=\"form-error\" ng-message=\"maxlength\">\n                  <span translate=\"ERROR.FIELD_TOO_LONG_WITH_LENGTH\" translate-values=\"{maxLength: 100}\"></span>\n                </div>\n                <div class=\"form-error\" ng-message=\"required\">\n                  <span translate=\"ERROR.FIELD_REQUIRED\"></span>\n                </div>\n                <div class=\"form-error\" ng-message=\"pattern\">\n                  <span translate=\"ERROR.INVALID_USER_ID\"></span>\n                </div>\n              </div>\n\n              <!-- Show if valid pseudo-->\n              <div class=\"text-right\" style=\"min-height: 18px\">\n                <div class=\"form-error gray\" ng-if=\"formData.computing && formData.pseudo\">\n                  <ion-spinner class=\"icon ion-spinner-small\" icon=\"android\" ng-if=\"formData.computing && formData.pseudo\"></ion-spinner>\n                  <span translate>ACCOUNT.NEW.CHECKING_PSEUDO</span>\n                </div>\n\n                <ng-if ng-if=\"!formData.computing && formData.pseudo\">\n                  <div class=\"form-error balanced\" ng-if=\"!uiAlreadyUsed \">\n                    <i class=\"icon ion-checkmark balanced\"></i>\n                    <span translate>ACCOUNT.NEW.PSEUDO_AVAILABLE</span>\n                  </div>\n                  <div class=\"form-error\" ng-if=\"uiAlreadyUsed\">\n                    <i class=\"icon ion-close-circled assertive\"></i>\n                    <span translate>ACCOUNT.NEW.PSEUDO_NOT_AVAILABLE</span>\n                  </div>\n                </ng-if>\n\n              </div>\n\n              <div class=\"padding hidden-xs text-right\">\n                <button class=\"button button-clear button-dark ink\" ng-click=\"closeModal()\" type=\"button\" translate>COMMON.BTN_CANCEL\n                </button>\n                <button class=\"button button-calm icon-right ion-chevron-right ink\" type=\"submit\" ng-disabled=\"UIDFound\" translate>\n                  COMMON.BTN_NEXT\n                </button>\n              </div>\n            </div>\n          </form>\n        </ion-content>\n      </ion-slide-page>\n\n\n      <!-- STEP 3: salt -->\n      <ion-slide-page>\n        <ion-content class=\"has-header\" scroll=\"false\">\n          <form name=\"saltForm\" novalidate=\"\" ng-submit=\"doNext(\'saltForm\')\">\n\n            <div class=\"list\" ng-init=\"setForm(saltForm, \'saltForm\')\">\n\n              <div class=\"item item-text-wrap text-center padding hidden-xs\">\n                <a class=\"pull-right icon-help\" ng-click=\"showHelpModal(\'join-salt\')\"></a>\n                <span translate>ACCOUNT.NEW.SALT_WARNING</span>\n              </div>\n\n              <!-- salt -->\n              <div class=\"item item-input\" ng-class=\"{ \'item-input-error\': saltForm.$submitted && saltForm.username.$invalid}\">\n                <span class=\"input-label\" translate>LOGIN.SALT</span>\n                <input ng-if=\"!showUsername\" name=\"username\" type=\"password\" placeholder=\"{{\'LOGIN.SALT_HELP\' | translate}}\" ng-change=\"formDataChanged()\" ng-model=\"formData.username\" autocomplete=\"off\" ng-minlength=\"8\" different-to=\"formData.pseudo\" required>\n                <!-- different-to=\"formData.pseudo\" -->\n                <input ng-if=\"showUsername\" name=\"username\" type=\"text\" placeholder=\"{{\'LOGIN.SALT_HELP\' | translate}}\" ng-change=\"formDataChanged()\" ng-model=\"formData.username\" autocomplete=\"off\" ng-minlength=\"8\" different-to=\"formData.pseudo\" required>\n              </div>\n              <div class=\"form-errors\" ng-show=\"saltForm.$submitted && saltForm.username.$error\" ng-messages=\"saltForm.username.$error\">\n                <div class=\"form-error\" ng-message=\"minlength\">\n                  <span translate=\"ERROR.FIELD_TOO_SHORT_WITH_LENGTH\" translate-values=\"{minLength: 8}\"></span>\n                </div>\n                <div class=\"form-error\" ng-message=\"required\">\n                  <span translate=\"ERROR.FIELD_REQUIRED\"></span>\n                </div>\n                <div class=\"form-error\" ng-message=\"differentTo\">\n                  <span translate=\"ERROR.EQUALS_TO_PSEUDO\"></span>\n                </div>\n              </div>\n\n              <!-- confirm salt -->\n              <div class=\"item item-input\" ng-class=\"{ \'item-input-error\': saltForm.$submitted && saltForm.confirmSalt.$invalid}\">\n                <span class=\"input-label pull-right\" translate>ACCOUNT.NEW.SALT_CONFIRM</span>\n                <input ng-if=\"!showUsername\" name=\"confirmUsername\" type=\"password\" placeholder=\"{{\'ACCOUNT.NEW.SALT_CONFIRM_HELP\' | translate}}\" ng-model=\"formData.confirmUsername\" autocomplete=\"off\" compare-to=\"formData.username\">\n                <input ng-if=\"showUsername\" name=\"confirmUsername\" type=\"text\" placeholder=\"{{\'ACCOUNT.NEW.SALT_CONFIRM_HELP\' | translate}}\" ng-model=\"formData.confirmUsername\" autocomplete=\"off\" compare-to=\"formData.username\">\n              </div>\n              <div class=\"form-errors\" ng-show=\"saltForm.$submitted && saltForm.confirmUsername.$error\" ng-messages=\"saltForm.confirmUsername.$error\">\n                <div class=\"form-error\" ng-message=\"compareTo\">\n                  <span translate=\"ERROR.SALT_NOT_CONFIRMED\"></span>\n                </div>\n              </div>\n\n              <!-- Show values -->\n              <div class=\"item item-toggle dark\">\n                <span translate>COMMON.SHOW_VALUES</span>\n                <label class=\"toggle toggle-royal\">\n                  <input type=\"checkbox\" ng-model=\"showUsername\">\n                  <div class=\"track\">\n                    <div class=\"handle\"></div>\n                  </div>\n                </label>\n              </div>\n\n              <div class=\"padding hidden-xs text-right\">\n                <button class=\"button button-clear button-dark ink\" ng-click=\"closeModal()\" type=\"button\" translate>COMMON.BTN_CANCEL\n                </button>\n                <button class=\"button button-calm icon-right ion-chevron-right ink\" type=\"submit\" translate>\n                  COMMON.BTN_NEXT\n                  <i class=\"icon ion-arrow-right-a\"></i>\n                </button>\n              </div>\n            </div>\n          </form>\n        </ion-content>\n      </ion-slide-page>\n\n      <!-- STEP 4: password-->\n      <ion-slide-page>\n        <ion-content class=\"has-header\" scroll=\"false\">\n          <form name=\"passwordForm\" novalidate=\"\" ng-submit=\"doNext(\'passwordForm\')\">\n\n            <div class=\"item item-text-wrap text-center padding hidden-xs\">\n              <a class=\"pull-right icon-help\" ng-click=\"showHelpModal(\'join-password\')\"></a>\n              <span translate>ACCOUNT.NEW.PASSWORD_WARNING</span>\n            </div>\n\n            <div class=\"list\" ng-init=\"setForm(passwordForm, \'passwordForm\')\">\n\n              <!-- password -->\n              <div class=\"item item-input\" ng-class=\"{ \'item-input-error\': passwordForm.$submitted && passwordForm.password.$invalid}\">\n                <span class=\"input-label\" translate>LOGIN.PASSWORD</span>\n                <input ng-if=\"!showPassword\" name=\"password\" type=\"password\" placeholder=\"{{\'LOGIN.PASSWORD_HELP\' | translate}}\" ng-model=\"formData.password\" autocomplete=\"off\" ng-change=\"formDataChanged()\" ng-minlength=\"8\" different-to=\"formData.username\" required>\n                <input ng-if=\"showPassword\" name=\"text\" type=\"text\" placeholder=\"{{\'LOGIN.PASSWORD_HELP\' | translate}}\" ng-model=\"formData.password\" autocomplete=\"off\" ng-change=\"formDataChanged()\" ng-minlength=\"8\" different-to=\"formData.username\" required>\n              </div>\n              <div class=\"form-errors\" ng-show=\"passwordForm.$submitted && passwordForm.password.$error\" ng-messages=\"passwordForm.password.$error\">\n                <div class=\"form-error\" ng-message=\"minlength\">\n                  <span translate=\"ERROR.FIELD_TOO_SHORT_WITH_LENGTH\" translate-values=\"{minLength: 8}\"></span>\n                </div>\n                <div class=\"form-error\" ng-message=\"required\">\n                  <span translate=\"ERROR.FIELD_REQUIRED\"></span>\n                </div>\n                <div class=\"form-error\" ng-message=\"differentTo\">\n                  <span translate=\"ERROR.EQUALS_TO_SALT\"></span>\n                </div>\n              </div>\n\n              <!-- confirm password -->\n              <div class=\"item item-input\" ng-class=\"{ \'item-input-error\': passwordForm.$submitted && passwordForm.confirmPassword.$invalid}\">\n                <span class=\"input-label\" translate>ACCOUNT.NEW.PASSWORD_CONFIRM</span>\n                <input ng-if=\"!showPassword\" name=\"confirmPassword\" type=\"password\" placeholder=\"{{\'ACCOUNT.NEW.PASSWORD_CONFIRM_HELP\' | translate}}\" ng-model=\"formData.confirmPassword\" autocomplete=\"off\" compare-to=\"formData.password\">\n                <input ng-if=\"showPassword\" name=\"confirmPassword\" type=\"text\" placeholder=\"{{\'ACCOUNT.NEW.PASSWORD_CONFIRM_HELP\' | translate}}\" ng-model=\"formData.confirmPassword\" autocomplete=\"off\" compare-to=\"formData.password\">\n              </div>\n              <div class=\"form-errors\" ng-show=\"passwordForm.$submitted && passwordForm.confirmPassword.$error\" ng-messages=\"passwordForm.confirmPassword.$error\">\n                <div class=\"form-error\" ng-message=\"compareTo\">\n                  <span translate=\"ERROR.PASSWORD_NOT_CONFIRMED\"></span>\n                </div>\n              </div>\n\n              <!-- Show values -->\n              <div class=\"item item-toggle dark\">\n                <span translate>COMMON.SHOW_VALUES</span>\n                <label class=\"toggle toggle-royal\">\n                  <input type=\"checkbox\" ng-model=\"showPassword\">\n                  <div class=\"track\">\n                    <div class=\"handle\"></div>\n                  </div>\n                </label>\n              </div>\n            </div>\n\n            <div class=\"padding hidden-xs text-right\">\n              <button class=\"button button-clear button-dark ink\" ng-click=\"closeModal()\" type=\"button\" translate>COMMON.BTN_CANCEL\n              </button>\n              <button class=\"button button-calm icon-right ion-chevron-right ink\" type=\"submit\" ng-click=\"getRevocationDocument()\" translate>\n                  COMMON.BTN_NEXT\n              </button>\n            </div>\n\n            <div class=\"padding hidden-xs\">\n            </div>\n          </form>\n        </ion-content>\n      </ion-slide-page>\n\n      <!--<cs-extension-point name=\"last-slide\"></cs-extension-point>-->\n\n      <!-- STEP 5: last slide  -->\n      <ion-slide-page>\n        <ion-content class=\"has-header\" scroll=\"false\">\n\n          <!-- Computing -->\n          <div class=\"center padding\" ng-if=\"formData.computing\">\n            <ion-spinner icon=\"android\"></ion-spinner>\n          </div>\n\n          <!-- Account available -->\n          <ng-if ng-if=\"!formData.computing\">\n            <div class=\"animate-fade-in animate-show-hide ng-hide\" ng-show=\"accountAvailable\">\n              <div class=\"padding text-center\" translate>ACCOUNT.NEW.LAST_SLIDE_CONGRATULATION</div>\n\n              <div class=\"list\">\n\n                <ion-item class=\"item text-center item-text-wrap\">\n                  <h3 class=\"gray\" translate>LOGIN.ASSOCIATED_PUBKEY</h3>\n                  <!-- do NOT add copy-on-click attribute here - see issue #470-->\n                  <h3 class=\"dark bold\">\n                    {{formData.pubkey}}\n                  </h3>\n                </ion-item>\n              </div>\n\n              <div class=\"padding hidden-xs text-right\">\n                <button class=\"button button-clear button-dark ink\" ng-click=\"closeModal()\" type=\"button\" translate>COMMON.BTN_CANCEL\n                </button>\n                <button class=\"button button-positive ink\" ng-click=\"doNewAccount()\" translate>\n                  COMMON.BTN_SEND\n                  <i class=\"icon ion-android-send\"></i>\n                </button>\n              </div>\n            </div>\n\n            <!-- Existing non-empty account -->\n            <div class=\"animate-fade-in animate-show-hide ng-hide\" ng-show=\"!accountAvailable\">\n\n              <ion-item class=\"item-icon-left item-text-wrap text-center\">\n                  <i class=\"icon ion-minus-circled assertive\"></i>\n                  <span id=\"modal-license\" trust-as-html=\"\'ERROR.EXISTING_ACCOUNT\'|translate\"></span>\n              </ion-item>\n\n              <div class=\"list\">\n\n                <ion-item class=\"item item-text-wrap item-border\">\n                  <div class=\"padding text-center\">\n                    <span class=\"gray text-no-wrap\">\n                      {{formData.pubkey}}\n                    </span>\n                  </div>\n                </ion-item>\n\n                <div class=\"padding text-center\">\n                  <span translate>ERROR.EXISTING_ACCOUNT_REQUEST</span>\n                </div>\n\n              </div>\n              <div class=\"padding hidden-xs text-left\">\n                <button class=\"button button-assertive icon-left ion-chevron-left ink\" ng-click=\"identifierRecovery()\" translate>\n                  COMMON.BTN_MODIFY\n                </button>\n              </div>\n            </div>\n          </ng-if>\n\n        </ion-content>\n      </ion-slide-page>\n    </ion-slides>\n  \n</ion-modal-view>\n");
$templateCache.put("templates/join/modal_join_wallet.html","<ion-modal-view class=\"modal-full-height\">\n\n  <ion-header-bar class=\"bar-positive\">\n\n    <button class=\"button button-clear visible-xs\" ng-if=\"!slides.slider.activeIndex\" ng-click=\"closeModal()\" translate>COMMON.BTN_CANCEL\n    </button>\n    <button class=\"button button-icon button-clear icon ion-ios-arrow-back buttons header-item\" ng-click=\"slidePrev()\" ng-if=\"slideBehavior.hasPreviousButton\">\n    </button>\n    <button class=\"button button-icon button-clear icon ion-ios-help-outline visible-xs\" ng-if=\"slideBehavior.helpAnchor\" ng-click=\"showHelpModal(slideBehavior.helpAnchor)\">\n    </button>\n\n    <h1 class=\"title\" translate>ACCOUNT.NEW.WALLET_ACCOUNT_TITLE</h1>\n\n    <!-- next -->\n    <button class=\"button button-clear icon-right visible-xs\" ng-if=\"slideBehavior.hasNextButton\" ng-click=\"doNext()\">\n      <span translate>COMMON.BTN_NEXT</span>\n      <i class=\"icon ion-ios-arrow-right\"></i>\n    </button>\n    <!-- send -->\n    <button class=\"button button-clear icon-right visible-xs\" ng-if=\"slideBehavior.hasSendButton\" ng-click=\"doNewAccount()\">\n      <i class=\"icon ion-android-send\"></i>\n    </button>\n  </ion-header-bar>\n\n\n    <ion-slides options=\"slides.options\" slider=\"slides.slider\">\n\n      <!-- STEP 1: salt -->\n      <ion-slide-page>\n        <ion-content class=\"has-header\" scroll=\"false\">\n          <form name=\"saltForm\" novalidate=\"\" ng-submit=\"doNext(\'saltForm\')\">\n\n            <div class=\"list\" ng-init=\"setForm(saltForm, \'saltForm\')\">\n\n              <div class=\"item item-text-wrap text-center padding hidden-xs\">\n                <a class=\"pull-right icon-help\" ng-click=\"showHelpModal(\'join-salt\')\"></a>\n                <span translate>ACCOUNT.NEW.SALT_WARNING</span>\n              </div>\n\n              <!-- salt -->\n              <div class=\"item item-input\" ng-class=\"{ \'item-input-error\': saltForm.$submitted && saltForm.username.$invalid}\">\n                <span class=\"input-label\" translate>LOGIN.SALT</span>\n                <input ng-if=\"!showUsername\" name=\"username\" type=\"password\" placeholder=\"{{\'LOGIN.SALT_HELP\' | translate}}\" ng-change=\"formDataChanged()\" ng-model=\"formData.username\" ng-minlength=\"8\" required>\n                <input ng-if=\"showUsername\" name=\"username\" type=\"text\" placeholder=\"{{\'LOGIN.SALT_HELP\' | translate}}\" ng-change=\"formDataChanged()\" ng-model=\"formData.username\" ng-minlength=\"8\" required>\n              </div>\n              <div class=\"form-errors\" ng-show=\"saltForm.$submitted && saltForm.username.$error\" ng-messages=\"saltForm.username.$error\">\n                <div class=\"form-error\" ng-message=\"minlength\">\n                  <span translate=\"ERROR.FIELD_TOO_SHORT_WITH_LENGTH\" translate-values=\"{minLength: 8}\"></span>\n                </div>\n                <div class=\"form-error\" ng-message=\"required\">\n                  <span translate=\"ERROR.FIELD_REQUIRED\"></span>\n                </div>\n              </div>\n\n              <!-- confirm salt -->\n              <div class=\"item item-input\" ng-class=\"{ \'item-input-error\': saltForm.$submitted && saltForm.confirmSalt.$invalid}\">\n                <span class=\"input-label pull-right\" translate>ACCOUNT.NEW.SALT_CONFIRM</span>\n                <input ng-if=\"!showUsername\" name=\"confirmUsername\" type=\"password\" placeholder=\"{{\'ACCOUNT.NEW.SALT_CONFIRM_HELP\' | translate}}\" ng-model=\"formData.confirmUsername\" compare-to=\"formData.username\">\n                <input ng-if=\"showUsername\" name=\"confirmUsername\" type=\"text\" placeholder=\"{{\'ACCOUNT.NEW.SALT_CONFIRM_HELP\' | translate}}\" ng-model=\"formData.confirmUsername\" compare-to=\"formData.username\">\n              </div>\n              <div class=\"form-errors\" ng-show=\"saltForm.$submitted && saltForm.confirmUsername.$error\" ng-messages=\"saltForm.confirmUsername.$error\">\n                <div class=\"form-error\" ng-message=\"compareTo\">\n                  <span translate=\"ERROR.SALT_NOT_CONFIRMED\"></span>\n                </div>\n              </div>\n\n              <!-- Show values -->\n              <div class=\"item item-toggle dark\">\n                <span translate>COMMON.SHOW_VALUES</span>\n                <label class=\"toggle toggle-royal\">\n                  <input type=\"checkbox\" ng-model=\"showUsername\">\n                  <div class=\"track\">\n                    <div class=\"handle\"></div>\n                  </div>\n                </label>\n              </div>\n\n              <div class=\"padding hidden-xs text-right\">\n                <button class=\"button button-clear button-dark ink\" ng-click=\"closeModal()\" type=\"button\" translate>COMMON.BTN_CANCEL\n                </button>\n                <button class=\"button button-calm icon-right ion-chevron-right ink\" type=\"submit\" translate>\n                  COMMON.BTN_NEXT\n                  <i class=\"icon ion-arrow-right-a\"></i>\n                </button>\n              </div>\n            </div>\n          </form>\n        </ion-content>\n      </ion-slide-page>\n\n      <!-- STEP 2: password-->\n      <ion-slide-page>\n        <ion-content class=\"has-header\" scroll=\"false\">\n          <form name=\"passwordForm\" novalidate=\"\" ng-submit=\"doNext(\'passwordForm\')\">\n\n            <div class=\"item item-text-wrap text-center padding hidden-xs\">\n              <a class=\"pull-right icon-help\" ng-click=\"showHelpModal(\'join-password\')\"></a>\n              <span translate>ACCOUNT.NEW.PASSWORD_WARNING</span>\n            </div>\n\n            <div class=\"list\" ng-init=\"setForm(passwordForm, \'passwordForm\')\">\n\n              <!-- password -->\n              <div class=\"item item-input\" ng-class=\"{ \'item-input-error\': passwordForm.$submitted && passwordForm.password.$invalid}\">\n                <span class=\"input-label\" translate>LOGIN.PASSWORD</span>\n                <input ng-if=\"!showPassword\" name=\"password\" type=\"password\" placeholder=\"{{\'LOGIN.PASSWORD_HELP\' | translate}}\" ng-model=\"formData.password\" ng-change=\"formDataChanged()\" ng-minlength=\"8\" required>\n                <input ng-if=\"showPassword\" name=\"text\" type=\"text\" placeholder=\"{{\'LOGIN.PASSWORD_HELP\' | translate}}\" ng-model=\"formData.password\" ng-change=\"formDataChanged()\" ng-minlength=\"8\" required>\n              </div>\n              <div class=\"form-errors\" ng-show=\"passwordForm.$submitted && passwordForm.password.$error\" ng-messages=\"passwordForm.password.$error\">\n                <div class=\"form-error\" ng-message=\"minlength\">\n                  <span translate=\"ERROR.FIELD_TOO_SHORT_WITH_LENGTH\" translate-values=\"{minLength: 8}\"></span>\n                </div>\n                <div class=\"form-error\" ng-message=\"required\">\n                  <span translate=\"ERROR.FIELD_REQUIRED\"></span>\n                </div>\n              </div>\n\n              <!-- confirm password -->\n              <div class=\"item item-input\" ng-class=\"{ \'item-input-error\': passwordForm.$submitted && passwordForm.confirmPassword.$invalid}\">\n                <span class=\"input-label\" translate>ACCOUNT.NEW.PASSWORD_CONFIRM</span>\n                <input ng-if=\"!showPassword\" name=\"confirmPassword\" type=\"password\" placeholder=\"{{\'ACCOUNT.NEW.PASSWORD_CONFIRM_HELP\' | translate}}\" ng-model=\"formData.confirmPassword\" compare-to=\"formData.password\">\n                <input ng-if=\"showPassword\" name=\"confirmPassword\" type=\"text\" placeholder=\"{{\'ACCOUNT.NEW.PASSWORD_CONFIRM_HELP\' | translate}}\" ng-model=\"formData.confirmPassword\" compare-to=\"formData.password\">\n              </div>\n              <div class=\"form-errors\" ng-show=\"passwordForm.$submitted && passwordForm.confirmPassword.$error\" ng-messages=\"passwordForm.confirmPassword.$error\">\n                <div class=\"form-error\" ng-message=\"compareTo\">\n                  <span translate=\"ERROR.PASSWORD_NOT_CONFIRMED\"></span>\n                </div>\n              </div>\n\n              <!-- Show values -->\n              <div class=\"item item-toggle dark\">\n                <span translate>COMMON.SHOW_VALUES</span>\n                <label class=\"toggle toggle-royal\">\n                  <input type=\"checkbox\" ng-model=\"showPassword\">\n                  <div class=\"track\">\n                    <div class=\"handle\"></div>\n                  </div>\n                </label>\n              </div>\n            </div>\n\n            <div class=\"padding hidden-xs text-right\">\n              <button class=\"button button-clear button-dark ink\" ng-click=\"closeModal()\" type=\"button\" translate>COMMON.BTN_CANCEL\n              </button>\n              <button class=\"button button-calm icon-right ion-chevron-right ink\" type=\"submit\" translate>\n                  COMMON.BTN_NEXT\n              </button>\n            </div>\n\n            <div class=\"padding hidden-xs\">\n            </div>\n          </form>\n        </ion-content>\n      </ion-slide-page>\n\n\n      <!--<cs-extension-point name=\"last-slide\"></cs-extension-point>-->\n\n      <!-- STEP 3: last slide  -->\n      <ion-slide-page>\n        <ion-content class=\"has-header\" scroll=\"false\">\n\n          <!-- Computing -->\n\n          <div class=\"padding center\" ng-if=\"formData.computing\">\n            <ion-spinner icon=\"android\"></ion-spinner>\n          </div>\n          <!-- ng-if=\"formData.computing\" -->\n\n          <!-- Account available -->\n          <div ng-if=\"accountAvailable && !formData.computing\">\n            <div class=\"padding text-center\" translate>ACCOUNT.NEW.LAST_SLIDE_CONGRATULATION</div>\n\n            <div class=\"list\">\n\n              <ion-item class=\"item item-text-wrap item-border\">\n                <div class=\"dark pull-right padding-right\" ng-if=\"formData.computing\">\n                  <ion-spinner icon=\"android\"></ion-spinner>\n                </div>\n                <span class=\"input-label\" translate>COMMON.PUBKEY</span>\n                <span class=\"gray text-no-wrap\" ng-if=\"formData.computing\" translate>\n                  ACCOUNT.NEW.COMPUTING_PUBKEY\n                </span>\n                <span class=\"gray text-no-wrap\" ng-if=\"formData.pubkey\">\n                  {{formData.pubkey}}\n                </span>\n              </ion-item>\n            </div>\n\n            <div class=\"padding hidden-xs text-right\">\n              <button class=\"button button-clear button-dark ink\" ng-click=\"closeModal()\" type=\"button\" translate>COMMON.BTN_CANCEL\n              </button>\n              <button class=\"button button-positive ink\" ng-click=\"doNewAccount()\" translate>\n                COMMON.BTN_CREATE\n              </button>\n            </div>\n          </div>\n\n          <!-- Existing non-empty account -->\n          <div ng-if=\"!accountAvailable && !formData.computing\">\n\n            <ion-item class=\"item-icon-left item-text-wrap text-center\">\n                <i class=\"icon ion-android-close active\"></i>\n                <span id=\"modal-license\" translate>ERROR.EXISTING_ACCOUNT</span>\n            </ion-item>\n\n\n            <div class=\"list\">\n\n              <ion-item class=\"item item-text-wrap item-border\">\n                <div class=\"dark pull-right padding-right\" ng-if=\"formData.computing\">\n                  <ion-spinner icon=\"android\"></ion-spinner>\n                </div>\n                <span class=\"gray text-no-wrap\" ng-if=\"formData.computing\" translate>\n                  ACCOUNT.NEW.COMPUTING_PUBKEY\n                </span>\n                <div class=\"padding text-center\">\n                  <span class=\"gray text-no-wrap\" ng-if=\"formData.pubkey\">\n                    {{formData.pubkey}}\n                  </span>\n                </div>\n              </ion-item>\n\n              <div class=\"padding text-center\">\n                <span translate>ERROR.EXISTING_ACCOUNT_REQUEST</span>\n              </div>\n\n            </div>\n            <div class=\"padding hidden-xs text-left\">\n              <button class=\"button button-assertive icon-left ion-chevron-left ink\" ng-click=\"identifierRecovery()\" translate>\n                COMMON.BTN_MODIFY\n              </button>\n            </div>\n          </div>\n\n        </ion-content>\n      </ion-slide-page>\n  \n</ion-slides></ion-modal-view>\n");
$templateCache.put("templates/login/form_file_import.html","<div class=\"item\">\n  <p class=\"item-text-wrap\" translate>LOGIN.FILE_FORM_HELP</p>\n</div>\n\n<div class=\"item item-icon-left item-text-wrap\">\n  <i class=\"icon ion-ios-information-outline positive\"></i>\n  <span class=\"positive\" translate>LOGIN.FILE.HELP</span>\n</div>\n\n<div class=\"dropzone\" dropzone=\"onKeyFileDrop(file)\">\n  <div ng-if=\"!formData.file\" onclick=\"angular.element(document.querySelector(\'#loginImportFile\'))[0].click();\">\n    <h2 class=\"gray\" translate>COMMON.CHOOSE_FILE</h2>\n    <input type=\"file\" id=\"loginImportFile\" accept=\".dunikey,.yml\" style=\"visibility:hidden; position:absolute\" onchange=\"angular.element(this).scope().fileChanged(event)\">\n  </div>\n\n  <div class=\"item item-icon-left item-icon-right stable-bg\" ng-if=\"formData.file\">\n    <i class=\"icon ion-document-text dark\"></i>\n    <div class=\"item-content row\">\n      <div class=\"col\">\n        <h2>\n          {{formData.file.name}}\n        </h2>\n        <h4 class=\"dark\" ng-if=\"formData.file.lastModified\">\n          <span class=\"gray\" translate>LOGIN.FILE.DATE</span> {{formData.file.lastModified/1000|formatDate}}\n        </h4>\n        <h5 class=\"dark\">\n          <span class=\"gray\" translate>LOGIN.FILE.SIZE</span> {{formData.file.size|formatInteger}} Ko\n        </h5>\n      </div>\n\n      <div class=\"col\">\n        <h3>\n          <span class=\"gray\" translate>COMMON.PUBKEY</span>\n        </h3>\n        <h3 ng-if=\"validatingFile\" translate>LOGIN.FILE.VALIDATING</h3>\n        <h3 ng-if=\"!validatingFile\">\n          <span class=\"dark animate-show-hide ng-hide\" ng-show=\"formData.file.pubkey\">{{formData.file.pubkey}}</span>\n          <span class=\"assertive animate-show-hide ng-hide\" ng-show=\"!formData.file.valid\"><br>\n            <i class=\"ion-close-circled assertive\"></i>\n            {{formData.file.pubkey ? \'ERROR.AUTH_INVALID_PUBKEY\' : \'ERROR.AUTH_INVALID_FILE\' |translate}}\n          </span>\n        </h3>\n      </div>\n    </div>\n\n    <!--  -->\n    <a class=\"ion-close-round gray pull-right\" style=\"font-size: 10px; position: absolute; top: 6px; right: 6px\" ng-click=\"removeKeyFile()\"></a>\n  </div>\n</div>\n\n\n<!-- keep auth after login (checkbox)  -->\n<ion-checkbox ng-model=\"formData.keepAuth\" class=\"item ink item-text-wrap\">\n  <div class=\"item-content dark\" translate>LOGIN.MEMORIZE_AUTH_FILE</div>\n</ion-checkbox>\n\n\n");
$templateCache.put("templates/login/form_login.html","\n  <form name=\"loginForm\" novalidate=\"\" ng-submit=\"doLogin()\" autocomplete=\"off\">\n\n   <div class=\"list padding no-padding-xs\" ng-init=\"setForm(loginForm)\" ng-switch on=\"formData.method\">\n\n     <div class=\"item hidden-xs no-padding\" ng-if=\"showMethods\">\n       <div class=\"pull-right\">\n          <a class=\"button button-text button-small-padding icon-right ink\" ng-click=\"showMethodsPopover($event)\">\n            <i class=\"icon ion-wrench\"></i>\n            {{\'LOGIN.BTN_METHODS\'| translate}}\n          </a>&nbsp;\n          <a class=\"button button-icon positive button-small-padding icon ion-ios-help-outline\" style=\"right: 8px\" ng-click=\"showHelpModal(\'login-method\')\">\n          </a>\n       </div>\n     </div>\n\n     <div class=\"item item-text-wrap\" ng-if=\"::isAuth\">\n       <p ng-if=\"::expectedPubkey\" ng-bind-html=\"::expectedUid ? \'AUTH.EXPECTED_UID_HELP\' : \'AUTH.EXPECTED_PUBKEY_HELP\' |translate: {uid: expectedUid, pubkey: expectedPubkey}\"></p>\n       <p ng-if=\"::!expectedPubkey\" ng-bind-html=\"::\'AUTH.GENERAL_HELP\'|translate\"></p>\n     </div>\n\n      <!-- Form content, depending of the login method -->\n      <div ng-switch-when=\"SCRYPT_DEFAULT\">\n        <ng-include src=\"\'templates/login/form_scrypt.html\'\"></ng-include>\n      </div>\n      <div ng-switch-when=\"SCRYPT_ADVANCED\">\n        <ng-include src=\"\'templates/login/form_scrypt_advanced.html\'\"></ng-include>\n      </div>\n      <div ng-switch-when=\"PUBKEY\">\n        <ng-include src=\"\'templates/login/form_pubkey.html\'\"></ng-include>\n      </div>\n      <div ng-switch-when=\"FILE\">\n        <ng-include src=\"\'templates/login/form_file_import.html\'\"></ng-include>\n      </div>\n       <div ng-switch-when=\"SCAN\">\n         <ng-include src=\"\'templates/login/form_scan.html\'\"></ng-include>\n       </div>\n      <div ng-switch-default>\n        <ng-include src=\"\'templates/login/form_scrypt.html\'\"></ng-include>\n      </div>\n    </div>\n\n    <div class=\"padding hidden-xs text-right\">\n      <button class=\"button button-clear button-dark ink\" ng-click=\"closeModal()\" type=\"button\" translate>COMMON.BTN_CANCEL\n      </button>\n      <button class=\"button button-positive ink\" ng-class=\"{\'button-assertive\': isAuth, \'button-positive\': !isAuth}\" type=\"submit\">\n        {{okText || (isAuth ? \'AUTH.BTN_AUTH\' : \'COMMON.BTN_LOGIN\') | translate}}\n      </button>\n    </div>\n\n    <div class=\"text-center no-padding visible-xs\">\n      <button type=\"button\" class=\"button button-small icon-right ink\" ng-click=\"showMethodsPopover($event)\">\n        <i class=\"icon ion-loop\"></i>\n        <span translate>LOGIN.BTN_METHODS_DOTS</span>\n      </button>\n      <br><br>\n    </div>\n\n    <!-- Register ? -->\n    <ng-if ng-if=\"!isAuth && showNewAccountLink\">\n      <div class=\"text-center no-padding\">\n        {{\'LOGIN.NO_ACCOUNT_QUESTION\'|translate}}\n        <br class=\"visible-xs\">\n        <a ng-click=\"showJoinModal()\" translate>\n          LOGIN.CREATE_ACCOUNT\n        </a>\n      </div>\n\n      <br class=\"visible-xs\">\n\n      <div class=\"text-center no-padding\">\n        <a ng-click=\"showAccountSecurityModal()\" translate>\n          LOGIN.FORGOTTEN_ID\n        </a>\n      </div>\n    </ng-if>\n  </form>\n");
$templateCache.put("templates/login/form_pubkey.html","<div class=\"item\">\n  <p class=\"item-text-wrap\" translate>LOGIN.PUBKEY_FORM_HELP</p>\n</div>\n\n<!-- pubkey  -->\n<div class=\"item item-input item-button-right\" ng-class=\"{ \'item-input-error\': form.$submitted && form.pubkey.$invalid}\">\n  <span class=\"input-label hidden-xs\" translate>COMMON.PUBKEY</span>\n  <input name=\"pubkey\" type=\"text\" placeholder=\"{{\'LOGIN.PUBKEY_HELP\' | translate}}\" ng-model=\"formData.pubkey\" ng-model-options=\"{ debounce: 650 }\" required>\n  <a class=\"button button-stable icon ion-android-search ink\" ng-click=\"showWotLookupModal(form.pubkey.$viewValue)\">\n  </a>\n</div>\n<div class=\"form-errors\" ng-show=\"form.$submitted && form.pubkey.$error\" ng-messages=\"form.pubkey.$error\">\n  <div class=\"form-error\" ng-message=\"required\">\n    <span translate=\"ERROR.FIELD_REQUIRED\"></span>\n  </div>\n  <div class=\"form-error\" ng-message=\"checksum\">\n    <span translate=\"ERROR.INVALID_PUBKEY_CHECKSUM\"></span>\n  </div>\n</div>\n\n");
$templateCache.put("templates/login/form_scan.html","<div class=\"item\">\n  <p class=\"item-text-wrap\" ng-bind-html=\"::isAuth ? \'AUTH.SCAN_FORM_HELP\' : \'LOGIN.SCAN_FORM_HELP\' |translate\"></p>\n</div>\n\n<!-- pubkey  -->\n<div class=\"item item-icon-right item-text-wrap item-input\" ng-class=\"{ \'item-input-error\': pubkeyError}\">\n  <span class=\"input-label\" translate>COMMON.PUBKEY</span>\n  <div class=\"item-content text-wrap\">\n    <span class=\"gray animate-show-hide\" ng-show=\"!computing && formData.pubkey\">{{formData.pubkey}}</span>\n    <ion-spinner class=\"ion-spinner-small\" icon=\"android\" ng-if=\"computing\"></ion-spinner>\n    <input type=\"hidden\" ng-model=\"formData.pubkey\" required>\n  </div>\n  <a class=\"button button-icon positive button-small-padding icon ion-qr-scanner animate-show-hide\" ng-show=\"!computing && (!expectedPubkey || pubkeyError)\" ng-click=\"doScan()\">\n  </a>\n  <span class=\"button button-icon balanced button-small-padding icon ion-checkmark animate-show-hide\" ng-if=\"expectedPubkey\" ng-show=\"!computing && !pubkeyError\">\n  </span>\n</div>\n\n<div class=\"form-errors\" ng-if=\"expectedPubkey\">\n  <div class=\"form-error\" ng-show=\"pubkeyError\">\n    <span trust-as-html=\"::\'ERROR.AUTH_INVALID_PUBKEY\'|translate:{pubkey: expectedPubkey}\"></span>\n  </div>\n</div>\n\n\n<!--<div class=\"item item-input item-button-right\"-->\n       <!--ng-class=\"{ \'item-input-error\': form.$submitted && form.pubkey.$invalid}\">-->\n  <!--<span class=\"input-label hidden-xs\" translate>COMMON.PUBKEY</span>-->\n  <!--<input name=\"pubkey\" type=\"text\" placeholder=\"{{\'LOGIN.PUBKEY_HELP\' | translate}}\"-->\n         <!--ng-model=\"formData.pubkey\"-->\n         <!--ng-model-options=\"{ debounce: 650 }\"-->\n         <!--readonly-->\n         <!--required >-->\n  <!--<a class=\"button button-stable icon ion-qr-scanner ink\"-->\n          <!--ng-click=\"doScan()\">-->\n  <!--</a>-->\n<!--</div>-->\n<!--<div class=\"form-errors\"-->\n     <!--ng-show=\"form.$submitted && form.pubkey.$error\"-->\n     <!--ng-messages=\"form.pubkey.$error\">-->\n  <!--<div class=\"form-error\" ng-message=\"required\">-->\n    <!--<span translate=\"ERROR.FIELD_REQUIRED\"></span>-->\n  <!--</div>-->\n  <!--<div class=\"form-error\" ng-message=\"checksum\">-->\n    <!--<span translate=\"ERROR.INVALID_PUBKEY_CHECKSUM\"></span>-->\n  <!--</div>-->\n<!--</div>-->\n<!--<div class=\"form-errors\" ng-if=\"expectedPubkey\">-->\n  <!--<div class=\"form-error\" ng-show=\"pubkeyError\">-->\n    <!--<span trust-as-html=\"::\'ERROR.AUTH_INVALID_PUBKEY\'|translate:{pubkey: expectedPubkey}\"></span>-->\n  <!--</div>-->\n<!--</div>-->\n\n");
$templateCache.put("templates/login/form_scrypt.html","\n  <div class=\"item item-text-wrap\" ng-if=\"!isAuth\">\n    <p ng-bind-html=\"\'LOGIN.SCRYPT_FORM_HELP\'|translate\"></p>\n  </div>\n\n  <!-- avoid web browser to fill password automatically -->\n  <input type=\"password\" name=\"fake-password\" autocomplete=\"off\" style=\"visibility:hidden; position:absolute\">\n\n  <!-- salt (=username, to enable browser login cache) -->\n  <label class=\"item item-input\" ng-class=\"{ \'item-input-error\': form.$submitted && form.username.$invalid}\">\n    <span class=\"input-label hidden-xs\" translate>LOGIN.SALT</span>\n    <input name=\"username\" type=\"password\" placeholder=\"{{\'LOGIN.SALT_HELP\' | translate}}\" autocomplete=\"off\" ng-model=\"formData.username\" ng-model-options=\"{ debounce: 650 }\" class=\"highlight-light\" required>\n  </label>\n  <div class=\"form-errors\" ng-show=\"form.$submitted && form.username.$error\" ng-messages=\"form.username.$error\">\n    <div class=\"form-error\" ng-message=\"required\">\n      <span translate=\"ERROR.FIELD_REQUIRED\"></span>\n    </div>\n  </div>\n\n  <!-- password-->\n  <label class=\"item item-input\" ng-class=\"{ \'item-input-error\': form.$submitted && form.password.$invalid}\">\n    <span class=\"input-label hidden-xs\" translate>LOGIN.PASSWORD</span>\n    <input name=\"password\" type=\"password\" placeholder=\"{{\'LOGIN.PASSWORD_HELP\' | translate}}\" autocomplete=\"off\" ng-model=\"formData.password\" ng-model-options=\"{ debounce: 650 }\" select-on-click required>\n  </label>\n  <div class=\"form-errors\" ng-show=\"form.$submitted && form.password.$error\" ng-messages=\"form.password.$error\">\n    <div class=\"form-error\" ng-message=\"required\">\n      <span translate=\"ERROR.FIELD_REQUIRED\"></span>\n    </div>\n  </div>\n\n  <div class=\"item item-icon-right item-text-wrap\" ng-class=\"{ \'item-input-error\': pubkeyError, \'item-input\': showPubkey}\">\n    <span class=\"input-label hidden-xs animate-show-hide ng-hide\" ng-show=\"showPubkey\" translate>COMMON.PUBKEY</span>\n    <div class=\"item-content text-wrap\">\n      <a class=\"positive ink animate-show-hide ng-hide\" ng-show=\"showComputePubkeyButton && !pubkey\" ng-click=\"computePubkey()\">\n        <i class=\"ion-eye\"></i>\n        {{\'COMMON.BTN_SHOW_PUBKEY\' | translate}}\n      </a>\n      <span class=\"gray animate-show-hide\" ng-show=\"!computing && pubkey\">{{pubkey}}</span>\n      <ion-spinner class=\"ion-spinner-small\" icon=\"android\" ng-if=\"computing\"></ion-spinner>\n    </div>\n    <a class=\"button button-icon positive button-small-padding icon ion-ios-help-outline animate-show-hide\" ng-click=\"showHelpModal(\'login-pubkey\')\" ng-if=\"!expectedPubkey\" ng-show=\"showPubkey\">\n    </a>\n    <span class=\"button button-icon balanced button-small-padding icon ion-checkmark animate-show-hide\" ng-if=\"expectedPubkey\" ng-show=\"showPubkey && !showComputePubkeyButton && !computing && !pubkeyError\">\n    </span>\n  </div>\n  <div class=\"form-errors\" ng-if=\"expectedPubkey\">\n    <div class=\"form-error\" ng-show=\"pubkeyError\">\n      <span trust-as-html=\"::\'ERROR.AUTH_INVALID_PUBKEY\'|translate:{pubkey: expectedPubkey}\"></span>\n    </div>\n  </div>\n\n");
$templateCache.put("templates/login/form_scrypt_advanced.html","\n<!-- Scrypt method: params -->\n<div class=\"row responsive-md responsive-sm padding-left\">\n  <div class=\"col col-33 no-padding\">\n    <label class=\"item item-input item-select\">\n      <select ng-model=\"formData.scrypt\" style=\"max-width: 100%\" ng-change=\"changeScrypt(formData.scrypt)\" ng-options=\"l as (l.label | translate) for l in scryptParamsValues track by l.id\">\n      </select>\n    </label>\n  </div>\n  <div class=\"col no-padding\">\n    <label class=\"item item-input\">\n      <span class=\"input-label\" translate>LOGIN.SCRYPT.N</span>\n      <input class=\"no-padding-right\" type=\"number\" placeholder=\"N\" ng-model=\"formData.scrypt.params.N\" ng-model-options=\"{ debounce: 650 }\" ng-change=\"onScryptFormChanged()\" required>\n    </label>\n  </div>\n  <div class=\"col no-padding\">\n    <label class=\"item item-input\">\n      <span class=\"input-label\" translate>LOGIN.SCRYPT.r</span>\n      <input class=\"no-padding-right\" type=\"number\" placeholder=\"r\" ng-model=\"formData.scrypt.params.r\" ng-model-options=\"{ debounce: 650 }\" ng-change=\"onScryptFormChanged()\" required>\n    </label>\n  </div>\n  <div class=\"col no-padding\">\n    <label class=\"item item-input\">\n      <span class=\"input-label\" translate>LOGIN.SCRYPT.p</span>\n      <input class=\"no-padding-right\" type=\"number\" placeholder=\"p\" ng-model=\"formData.scrypt.params.p\" ng-model-options=\"{ debounce: 650 }\" ng-change=\"onScryptFormChanged()\" required>\n    </label>\n  </div>\n</div>\n\n\n<!-- WARN: not implemented yet -->\n<p class=\"energized-100-bg padding\">\n  <i class=\"icon ion-android-warning\"></i>\n  <span translate>INFO.FEATURES_NOT_IMPLEMENTED</span>\n</p>\n\n<ng-include src=\"\'templates/login/form_scrypt.html\'\"></ng-include>\n\n");
$templateCache.put("templates/login/item_remember_me.html","<!-- remember me (checkbox) -->\n<ion-checkbox ng-model=\"formData.rememberMe\" ng-if=\"!isAuth\" class=\"item ink item-text-wrap\">\n  <div class=\"item-content dark\" translate>SETTINGS.REMEMBER_ME</div>\n</ion-checkbox>\n");
$templateCache.put("templates/login/modal_login.html","<ion-modal-view class=\"modal-full-height modal-login\">\n  <ion-header-bar class=\"\" ng-class=\"{\'bar-positive\': !isAuth, \'bar-assertive\': isAuth}\">\n    <button class=\"button button-clear visible-xs\" ng-click=\"closeModal()\" translate>COMMON.BTN_CANCEL\n    </button>\n    <h1 class=\"title\" ng-bind-html=\"title | translate\">\n    </h1>\n    <div class=\"buttons buttons-right\">\n      <div class=\"secondary-buttons\">\n        <button class=\"button button-icon button-clear icon ion-android-done visible-xs\" ng-class=\"{\'button-positive\': !isAuth}\" ng-click=\"doLogin()\">\n        </button>\n      </div>\n    </div>\n\n  </ion-header-bar>\n\n  <ion-content>\n    <ng-include src=\"\'templates/login/form_login.html\'\"></ng-include>\n  </ion-content>\n</ion-modal-view>\n");
$templateCache.put("templates/login/popover_methods.html","<ion-popover-view class=\"fit has-header popover-login-methods\" ng-class=\"{\'auth\': isAuth}\">\n  <ion-header-bar>\n    <h1 class=\"title\" translate>LOGIN.METHOD_POPOVER_TITLE</h1>\n  </ion-header-bar>\n  <ion-content scroll=\"false\">\n\n\n    <div class=\"list item-text-wrap\">\n\n      <a class=\"item item-icon-left ink\" ng-click=\"changeMethod(\'SCRYPT_DEFAULT\')\">\n        <i class=\"icon ion-shuffle\" style=\"font-size: 22px\"></i>\n        {{\'LOGIN.METHOD.SCRYPT_DEFAULT\' | translate}}\n      </a>\n\n      <a class=\"item item-icon-left ink\" ng-click=\"changeMethod(\'SCRYPT_ADVANCED\')\">\n        <i class=\"icon ion-shuffle\" style=\"font-size: 22px\"></i>\n        <i class=\"icon-secondary ion-plus\" style=\"font-size: 13px; left: 40px; margin-top: -4px\"></i>\n        {{\'LOGIN.METHOD.SCRYPT_ADVANCED\' | translate}}\n      </a>\n\n      <a class=\"item item-icon-left ink hidden-xs\" ng-click=\"changeMethod(\'FILE\')\">\n        <i class=\"icon ion-document-text\"></i>\n        {{\'LOGIN.METHOD.FILE\' | translate}}\n      </a>\n\n      <div ng-if=\"!isAuth\" class=\"item-divider hidden-xs hidden-sm\"></div>\n\n      <a class=\"item item-icon-left ink\" ng-if=\"$root.device.barcode.enable\" ng-click=\"changeMethod(\'SCAN\')\">\n        <i class=\"icon ion-qr-scanner\"></i>\n        {{\'LOGIN.METHOD.SCAN\' | translate}}\n      </a>\n\n      <a class=\"item item-icon-left ink\" ng-if=\"!isAuth\" ng-click=\"changeMethod(\'PUBKEY\')\">\n        <i class=\"icon ion-key\"></i>\n        {{\'LOGIN.METHOD.PUBKEY\' | translate}}\n      </a>\n\n    </div>\n  </ion-content>\n</ion-popover-view>\n");
$templateCache.put("templates/network/item_content_peer.html","\n    <i class=\"icon ion-android-desktop\" ng-class=\":rebind:{\'balanced\': peer.online && peer.hasMainConsensusBlock, \'energized\': peer.online && peer.hasConsensusBlock, \'gray\': peer.online && !peer.hasConsensusBlock && !peer.hasMainConsensusBlock, \'stable\': !peer.online}\" ng-if=\":rebind:!peer.avatar\"></i>\n    <b class=\"icon-secondary ion-person\" ng-if=\":rebind:!peer.avatar\" ng-class=\":rebind:{\'balanced\': peer.online && peer.hasMainConsensusBlock, \'energized\': peer.online && peer.hasConsensusBlock, \'gray\': peer.online && !peer.hasConsensusBlock && !peer.hasMainConsensusBlock, \'stable\': !peer.online}\" style=\"left: 26px; top: -3px\"></b>\n    <i class=\"avatar\" ng-if=\":rebind:peer.avatar\" style=\"background-image: url(\'{{:rebind:peer.avatar.src}}\')\"></i>\n    <b class=\"icon-secondary assertive ion-close-circled\" ng-if=\":rebind:!peer.online\" style=\"left: 37px; top: -10px\"></b>\n\n    <div class=\"row no-padding\">\n      <div class=\"col no-padding\">\n        <h3 class=\"dark\" ng-if=\":rebind:!peer.bma.private\">{{:rebind:peer.dns || peer.server}}</h3>\n        <h4 class=\"gray\" ng-if=\":rebind:peer.bma.private\"><i class=\"ion-flash\"></i> {{\'NETWORK.VIEW.PRIVATE_ACCESS\'|translate}}</h4>\n        <h4>\n          <span class=\"gray\" ng-if=\":rebind:!peer.uid\">\n            <i class=\"ion-key\"></i> {{:rebind:peer.pubkey|formatPubkey}}\n          </span>\n          <span class=\"positive\" ng-if=\":rebind:peer.uid\">\n            <i class=\"ion-person\"></i> {{:rebind:peer.name || peer.uid}}\n          </span>\n          <span class=\"gray\">{{:rebind:peer.dns && (\' | \' + peer.server) + (peer.bma.path||\'\') }}</span>\n        </h4>\n      </div>\n      <div class=\"col col-15 no-padding text-center hidden-xs hidden-sm\" ng-if=\"::expertMode\">\n        <div style=\"min-width: 50px; padding-top: 5px\" title=\"SSL\">\n          <span ng-if=\":rebind:peer.isSsl()\">\n            <i class=\"ion-locked\"></i><small class=\"hidden-md\"> SSL</small>\n          </span>\n          <span ng-if=\":rebind:peer.isWs2p()\" ng-click=\"showWs2pPopover($event, peer)\" title=\"WS2P\">\n            <i class=\"ion-arrow-swap\"></i><small class=\"hidden-md\"> WS2P</small>\n          </span>\n        </div>\n        <div ng-if=\":rebind:!peer.isWs2p()&&peer.hasEndpoint(\'ES_USER_API\')\" ng-click=\"showEndpointsPopover($event, peer, \'ES_USER_API\')\" title=\"Cesium+\">\n          <i class=\"ion-es-user-api\"></i>\n          <b class=\"ion-plus dark\" style=\"position: relative; left: -14px; top:-17px; font-size : 16px\"></b>\n        </div>\n        <div ng-if=\":rebind:!peer.isWs2p()&&peer.isTor()\" ng-click=\"showEndpointsPopover($event, peer, \'BMATOR\')\">\n          <i class=\"ion-bma-tor-api\"></i>\n        </div>\n        <div ng-if=\":rebind:peer.isWs2p()&&peer.isTor()\" ng-click=\"showWs2pPopover($event, peer)\">\n          <i class=\"ion-bma-tor-api\"></i>\n        </div>\n      </div>\n      <div class=\"col col-20 no-padding text-center\" ng-if=\"::expertMode && search.type != \'offline\'\">\n        <h3 class=\"hidden-sm hidden-xs gray\">\n          <span ng-if=\":rebind:peer.uid\"><i class=\"ion-lock-combination\"></i>{{:rebind:peer.difficulty||\'?\'}}</span>\n          <span ng-if=\":rebind:!peer.uid\" translate>PEER.MIRROR</span>\n        </h3>\n        <h4 class=\"hidden-sm hidden-xs gray\">{{:rebind: peer.version ? (\'v\'+peer.version) : \'\'}}</h4>\n      </div>\n      <div class=\"col col-20 no-padding text-center\">\n        <span id=\"{{$index === 0 ? helptipPrefix + \'-peer-0-block\' : \'\'}}\" class=\"badge\" ng-class=\":rebind:{\'badge-balanced\': peer.hasMainConsensusBlock, \'badge-energized\': peer.hasConsensusBlock, \'ng-hide\': !peer.currentNumber }\">\n          {{::!expertMode ? (\'COMMON.BLOCK\'|translate) : \'\' }}\n          {{:rebind:peer.currentNumber|formatInteger}}</span>\n        <span class=\"badge badge-secondary\" ng-if=\":rebind:peer.consensusBlockDelta && expertMode\">\n          <i class=\"ion-clock\"></i>&nbsp;\n          {{:rebind:peer.consensusBlockDelta|formatDurationTime}}</span>\n\n      </div>\n    </div>\n");
$templateCache.put("templates/network/items_peers.html","<div ng-class=\"::motion.ionListClass\" class=\"no-padding\">\n\n  <div class=\"item item-text-wrap no-border done in gray no-padding-top no-padding-bottom inline text-italic\" ng-if=\"::isHttps && expertMode\">\n    <small><i class=\"icon ion-alert-circled\"></i> {{\'NETWORK.INFO.ONLY_SSL_PEERS\'|translate}}</small>\n  </div>\n\n  <div class=\"item row row-header hidden-xs hidden-sm done in\" ng-if=\"::expertMode\">\n    <a class=\"col col-header no-padding dark\" ng-click=\"toggleSort(\'uid\')\">\n      <cs-sort-icon asc=\"search.asc\" sort=\"search.sort\" toggle=\"\'uid\'\"></cs-sort-icon>\n      {{\'COMMON.UID\' | translate}} / {{\'COMMON.PUBKEY\' | translate}}\n    </a>\n    <a class=\"no-padding dark hidden-md col col-15 col-header\" ng-click=\"toggleSort(\'api\')\">\n      <cs-sort-icon asc=\"search.asc\" sort=\"search.sort\" toggle=\"\'api\'\"></cs-sort-icon>\n      {{\'PEER.API\' | translate}}\n    </a>\n    <a class=\"no-padding dark col col-20 col-header\" ng-click=\"toggleSort(\'difficulty\')\">\n      <cs-sort-icon asc=\"search.asc\" sort=\"search.sort\" toggle=\"\'difficulty\'\"></cs-sort-icon>\n      {{\'PEER.DIFFICULTY\' | translate}}\n    </a>\n    <a class=\"col col-20 col-header no-padding dark\" ng-click=\"toggleSort(\'current_block\')\">\n      <cs-sort-icon asc=\"search.asc\" sort=\"search.sort\" toggle=\"\'current_block\'\"></cs-sort-icon>\n      {{\'PEER.CURRENT_BLOCK\' | translate}}\n    </a>\n  </div>\n\n  <div ng-repeat=\"peer in :rebind:search.results track by peer.id\" class=\"item item-peer item-icon-left ink\" ng-class=\"::ionItemClass\" id=\"{{helptipPrefix}}-peer-{{$index}}\" ng-click=\"selectPeer(peer)\" ng-include=\"\'templates/network/item_content_peer.html\'\">\n  </div>\n\n</div>\n");
$templateCache.put("templates/network/lookup_popover_actions.html","<ion-popover-view class=\"fit has-header\">\n  <ion-header-bar>\n    <h1 class=\"title\" translate>PEER.POPOVER_FILTER_TITLE</h1>\n  </ion-header-bar>\n  <ion-content scroll=\"false\">\n    <div class=\"list item-text-wrap\">\n\n      <a class=\"item item-icon-left item-icon-right ink\" ng-click=\"toggleSearchType(\'member\')\">\n        <i class=\"icon ion-person\"></i>\n        {{\'PEER.MEMBERS\' | translate}}\n        <i class=\"icon ion-ios-checkmark-empty\" ng-show=\"search.type==\'member\'\"></i>\n      </a>\n\n      <a class=\"item item-icon-left item-icon-right ink\" ng-click=\"toggleSearchType(\'mirror\')\">\n        <i class=\"icon ion-radio-waves\"></i>\n        {{\'PEER.MIRRORS\' | translate}}\n        <i class=\"icon ion-ios-checkmark-empty\" ng-show=\"search.type==\'mirror\'\"></i>\n      </a>\n\n      <a class=\"item item-icon-left item-icon-right ink\" ng-click=\"toggleSearchType(\'offline\')\">\n        <i class=\"icon ion-eye-disabled\"></i>\n        {{\'PEER.OFFLINE\' | translate}}\n        <i class=\"icon ion-ios-checkmark-empty\" ng-show=\"search.type==\'offline\'\"></i>\n      </a>\n\n    </div>\n  </ion-content>\n</ion-popover-view>\n");
$templateCache.put("templates/network/modal_network.html","<ion-modal-view id=\"nodes\" class=\"modal-full-height\" cache-view=\"false\">\n  <ion-header-bar class=\"bar-positive\">\n    <button class=\"button button-clear\" ng-click=\"closeModal()\" translate>COMMON.BTN_CANCEL</button>\n    <h1 class=\"title\" translate>PEER.PEER_LIST</h1>\n    <div class=\"buttons buttons-right header-item\">\n      <span class=\"secondary\">\n        <button class=\"button button-clear icon ion-loop button-clear\" ng-click=\"refresh()\">\n\n        </button>\n        <button class=\"button button-icon button-clear icon ion-android-more-vertical visible-xs visible-sm\" ng-click=\"showActionsPopover($event)\">\n        </button>\n      </span>\n    </div>\n  </ion-header-bar>\n\n  <ion-content>\n    <div class=\"list\">\n      <div class=\"padding padding-xs\" style=\"display: block; height: 60px\">\n\n        <div class=\"pull-left\">\n          <h4 ng-if=\"enableFilter && search.type==\'member\'\">\n            {{\'PEER.MEMBERS\' | translate}} <span ng-if=\"!search.loading\">({{search.results.length}})</span>\n          </h4>\n          <h4 ng-if=\"enableFilter && search.type==\'mirror\'\">\n            {{\'PEER.MIRRORS\' | translate}} <span ng-if=\"!search.loading\">({{search.results.length}})</span>\n          </h4>\n          <h4 ng-if=\"!enableFilter || !search.type\">\n            {{\'PEER.ALL_PEERS\' | translate}} <span ng-if=\"!search.loading\">({{search.results.length}})</span>\n          </h4>\n        </div>\n\n        <div class=\"pull-right\">\n          <ion-spinner class=\"icon\" icon=\"android\" ng-if=\"search.loading\"></ion-spinner>&nbsp;\n\n          <div class=\"pull-right\">\n            <a class=\"button button-text button-small hidden-xs hidden-sm ink\" ng-if=\"enableFilter\" ng-class=\"{\'button-text-positive\': search.type==\'member\'}\" ng-click=\"toggleSearchType(\'member\')\">\n              <i class=\"icon ion-person\"></i>\n              {{\'PEER.MEMBERS\'|translate}}\n            </a>\n            &nbsp;\n            <a class=\"button button-text button-small hidden-xs hidden-sm ink\" ng-if=\"enableFilter\" ng-class=\"{\'button-text-positive\': search.type==\'mirror\'}\" ng-click=\"toggleSearchType(\'mirror\')\">\n              <i class=\"icon ion-ios-infinite\"></i>\n              {{\'PEER.MIRRORS\'|translate}}\n            </a>\n          </div>\n        </div>\n      </div>\n\n      <ng-include src=\"\'templates/network/items_peers.html\'\"></ng-include>\n\n	  </div>\n  </ion-content>\n</ion-modal-view>\n");
$templateCache.put("templates/network/popover_endpoints.html","<ion-popover-view class=\"popover-endpoints popover-light\" style=\"height: {{(titleKey?30:0)+((!items || items.length &lt;= 1) ? 55 : 3+items.length*52)}}px\">\n  <ion-header-bar class=\"bar bar-header stable-bg\" ng-if=\"titleKey\">\n    <div class=\"title\">\n      {{titleKey | translate:titleValues }}\n    </div>\n  </ion-header-bar>\n  <ion-content scroll=\"false\">\n    <div class=\"list\" ng-class=\"{\'has-header\': titleKey}\">\n      <div class=\"item item-text-wrap\" ng-repeat=\"item in items\">\n        <div class=\"item-label\" ng-if=\"item.label\">{{item.label | translate}}</div>\n        <div id=\"endpoint_{{$index}}\" class=\"badge item-note dark\">{{item.value}}\n      </div>\n    </div>\n  </div></ion-content>\n</ion-popover-view>\n");
$templateCache.put("templates/network/popover_network.html","<ion-popover-view class=\"fit hidden-xs hidden-sm popover-notification popover-network\" ng-controller=\"NetworkLookupPopoverCtrl\">\n  <ion-header-bar class=\"stable-bg block\">\n    <div class=\"title\">\n      {{\'MENU.NETWORK\'|translate}}\n      <ion-spinner class=\"ion-spinner-small\" icon=\"android\" ng-if=\"search.loading\"></ion-spinner>\n    </div>\n\n    <div class=\"pull-right\">\n      <a ng-class=\"{\'positive\': search.type==\'member\', \'dark\': search.type!==\'member\'}\" ng-click=\"toggleSearchType(\'member\')\" translate>PEER.MEMBERS</a>\n    </div>\n  </ion-header-bar>\n  <ion-content scroll=\"true\">\n    <div class=\"list no-padding\">\n      <ng-include src=\"\'templates/network/items_peers.html\'\"></ng-include>\n    </div>\n  </ion-content>\n\n  <ion-footer-bar class=\"stable-bg block\">\n    <!-- settings -->\n    <div class=\"pull-left\">\n      <a class=\"positive\" ui-sref=\"app.settings\" ng-click=\"closePopover()\" translate>COMMON.NOTIFICATIONS.SETTINGS</a>\n    </div>\n\n    <!-- show all -->\n    <div class=\"pull-right\">\n      <a class=\"positive\" ui-sref=\"app.network\" ng-click=\"closePopover()\" translate>COMMON.NOTIFICATIONS.SHOW_ALL</a>\n    </div>\n  </ion-footer-bar>\n</ion-popover-view>\n");
$templateCache.put("templates/network/popover_peer_info.html","<ion-popover-view class=\"fit hidden-xs hidden-sm popover-notification popover-peer-info\" ng-controller=\"PeerInfoPopoverCtrl\">\n  <ion-header-bar class=\"stable-bg block\">\n    <div class=\"title\">\n      {{\'PEER.VIEW.TITLE\'|translate}}\n    </div>\n  </ion-header-bar>\n  <ion-content scroll=\"true\">\n    <div class=\"center padding\" ng-if=\"loading\">\n      <ion-spinner icon=\"android\"></ion-spinner>\n    </div>\n\n    <div class=\"list no-padding\" ng-if=\"!loading\">\n\n      <div class=\"item\" ng-if=\":rebind:formData.software\">\n        <i class=\"ion-outlet\"></i>\n        {{\'NETWORK.VIEW.SOFTWARE\'|translate}}\n        <div class=\"badge\" ng-class=\":rebind:{\'badge-energized\': formData.isPreRelease, \'badge-assertive\': formData.hasNewRelease }\">\n          {{formData.software}} v{{:rebind:formData.version}}\n        </div>\n        <div class=\"gray badge badge-secondary\" ng-if=\"formData.isPreRelease\">\n          <i class=\"ion-alert-circled\"></i>\n          <span ng-bind-html=\"\'NETWORK.VIEW.WARN_PRE_RELEASE\'|translate: formData.latestRelease\"></span>\n        </div>\n        <div class=\"gray badge badge-secondary\" ng-if=\"formData.hasNewRelease\">\n          <i class=\"ion-alert-circled\"></i>\n          <span ng-bind-html=\"\'NETWORK.VIEW.WARN_NEW_RELEASE\'|translate: formData.latestRelease\"></span>\n        </div>\n      </div>\n\n      <div class=\"item\">\n        <i class=\"ion-locked\"></i>\n        {{\'NETWORK.VIEW.ENDPOINTS.BMAS\'|translate}}\n        <div class=\"badge badge-balanced\" ng-if=\":rebind:formData.useSsl\" translate>COMMON.BTN_YES</div>\n        <div class=\"badge badge-assertive\" ng-if=\":rebind:!formData.useSsl\" translate>COMMON.BTN_NO</div>\n      </div>\n\n      <div class=\"item\">\n        <i class=\"ion-cube\"></i>\n        {{\'BLOCKCHAIN.VIEW.TITLE_CURRENT\'|translate}}\n        <div class=\"badge badge-balanced\">\n          {{:rebind:formData.number | formatInteger}}\n        </div>\n      </div>\n\n      <div class=\"item\">\n          <i class=\"ion-clock\"></i>\n          {{\'CURRENCY.VIEW.MEDIAN_TIME\'|translate}}\n        <div class=\"badge dark\">\n          {{:rebind:formData.medianTime | formatDate}}\n        </div>\n      </div>\n\n      <div class=\"item\">\n        <i class=\"ion-lock-combination\"></i>\n        {{\'CURRENCY.VIEW.POW_MIN\'|translate}}\n        <div class=\"badge dark\">\n          {{:rebind:formData.powMin | formatInteger}}\n        </div>\n      </div>\n\n      <!-- Allow extension here -->\n      <cs-extension-point name=\"default\"></cs-extension-point>\n\n    </div>\n  </ion-content>\n\n  <ion-footer-bar class=\"stable-bg block\">\n    <!-- settings -->\n    <div class=\"pull-left\">\n      <a class=\"positive\" ui-sref=\"app.settings\" ng-click=\"closePopover()\" translate>MENU.SETTINGS</a>\n    </div>\n\n    <!-- show all -->\n    <div class=\"pull-right\">\n      <a class=\"positive\" ui-sref=\"app.view_peer\" ng-click=\"closePopover()\" translate>PEER.BTN_SHOW_PEER</a>\n    </div>\n  </ion-footer-bar>\n</ion-popover-view>\n");
$templateCache.put("templates/network/view_network.html","<ion-view>\n  <ion-nav-title>\n    <span translate>MENU.NETWORK</span>\n  </ion-nav-title>\n\n  <ion-nav-buttons side=\"secondary\">\n    <button class=\"button button-icon button-clear icon ion-loop visible-xs visible-sm\" ng-click=\"refresh()\">\n    </button>\n  </ion-nav-buttons>\n\n\n  <ion-content scroll=\"true\" ng-init=\"enableFilter=true; ionItemClass=\'item-border-large\';\">\n\n    <div class=\"row responsive-sm responsive-md responsive-lg\">\n      <div class=\"col list col-border-right\">\n        <div class=\"padding padding-xs\" style=\"display: block; height: 60px\">\n          <div class=\"pull-left\">\n            <h4>\n              <span ng-if=\"enableFilter && search.type==\'member\'\" translate>PEER.MEMBERS</span>\n              <span ng-if=\"enableFilter && search.type==\'mirror\'\" translate>PEER.MIRRORS</span>\n              <span ng-if=\"enableFilter && search.type==\'offline\'\" translate>PEER.OFFLINE</span>\n              <span ng-if=\"!enableFilter || !search.type\" translate>PEER.ALL_PEERS</span>\n              <span ng-if=\"search.results.length\">({{search.results.length}})</span>\n              <ion-spinner ng-if=\"search.loading\" class=\"icon ion-spinner-small\" icon=\"android\"></ion-spinner>\n            </h4>\n          </div>\n\n          <div class=\"pull-right\">\n\n            <div class=\"pull-right\" ng-if=\"enableFilter\">\n              <a class=\"button button-text button-small hidden-xs hidden-sm ink\" ng-class=\"{\'button-text-positive\': search.type==\'member\'}\" ng-click=\"toggleSearchType(\'member\')\">\n                <i class=\"icon ion-person-stalker\"></i>\n                {{\'PEER.MEMBERS\'|translate}}\n              </a>\n              &nbsp;\n              <a class=\"button button-text button-small hidden-xs hidden-sm ink\" ng-class=\"{\'button-text-positive\': search.type==\'mirror\'}\" ng-click=\"toggleSearchType(\'mirror\')\">\n                <i class=\"icon ion-radio-waves\"></i>\n                {{\'PEER.MIRRORS\'|translate}}\n              </a>\n\n              <a class=\"button button-text button-small hidden-xs hidden-sm ink\" ng-class=\"{\'button-text-positive\': search.type==\'offline\', \'button-text-stable\': search.type!=\'offline\'}\" ng-click=\"toggleSearchType(\'offline\')\">\n                <i class=\"icon ion-close-circled light-gray\"></i>\n                <span>{{\'PEER.OFFLINE\'|translate}}</span>\n              </a>\n\n              <!-- Allow extension here -->\n              <cs-extension-point name=\"filter-buttons\"></cs-extension-point>\n            </div>\n          </div>\n        </div>\n\n        <div id=\"helptip-network-blockchain\" style=\"display: block\"></div>\n        <div id=\"helptip-network-peers\" style=\"display: block\"></div>\n\n        <ng-include src=\"\'templates/network/items_peers.html\'\"></ng-include>\n      </div>\n\n      <div class=\"col col-33\" ng-controller=\"BlockLookupCtrl\">\n\n        <div class=\"padding padding-xs\" style=\"display: block; height: 100px\">\n          <h4 translate>BLOCKCHAIN.LOOKUP.LAST_BLOCKS</h4>\n\n          <div class=\"pull-right hidden-xs hidden-sm\">\n            <a class=\"button button-text button-small ink\" ng-class=\"{\'button-text-positive\': compactMode, \'button-text-stable\': !compactMode}\" ng-click=\"toggleCompactMode()\">\n              <i class=\"icon ion-navicon\"></i>\n              <b class=\"icon-secondary ion-arrow-down-b\" style=\"top: -8px; left: 5px; font-size: 8px\"></b>\n              <b class=\"icon-secondary ion-arrow-up-b\" style=\"top: 4px; left: 5px; font-size: 8px\"></b>\n              <span>{{\'BLOCKCHAIN.LOOKUP.BTN_COMPACT\'|translate}}</span>\n            </a>\n\n            <!-- Allow extension here -->\n            <cs-extension-point name=\"buttons\"></cs-extension-point>\n\n          </div>\n        </div>\n\n        <ng-include src=\"\'templates/blockchain/list_blocks.html\'\"></ng-include>\n      </div>\n    </div>\n  </ion-content>\n</ion-view>\n");
$templateCache.put("templates/network/view_peer.html","<ion-view>\n  <ion-nav-title>\n    <span translate>PEER.VIEW.TITLE</span>\n  </ion-nav-title>\n\n  <ion-content class=\"has-header\" scroll=\"true\">\n\n    <div class=\"row no-padding\">\n      <div class=\"col col-20 hidden-xs hidden-sm\">&nbsp;\n      </div>\n\n      <div class=\"col list\">\n\n        <ion-item>\n          <h1>\n            <span translate>PEER.VIEW.TITLE</span>\n            <span class=\"gray\">\n              {{node.host}}\n            </span>\n          </h1>\n          <h2 class=\"gray\">\n            <i class=\"gray icon ion-android-globe\"></i>\n            {{node.bma.dns || node.server}}\n            <span class=\"gray\" ng-if=\"!loading && node.useSsl\">\n              <i class=\"gray ion-locked\"></i> <small>SSL</small>\n            </span>\n            <span class=\"gray\" ng-if=\"!loading && node.useTor\">\n              <i class=\"gray ion-bma-tor-api\"></i>\n            </span>\n\n            <span class=\"assertive\" ng-if=\"!loading && !node.uid\">({{\'PEER.MIRROR\'|translate}})</span>\n          </h2>\n\n          <!-- node owner -->\n          <h3>\n            <span class=\"dark\">\n              <i class=\"icon ion-android-desktop\"></i>\n              {{\'PEER.VIEW.OWNER\'|translate}}\n            </span>\n            <a class=\"positive\" ng-if=\"node.uid\" ui-sref=\"app.wot_identity({pubkey: node.pubkey, uid: node.uid})\">\n              <i class=\"ion-person\"></i> {{node.name || node.uid}}\n              <span class=\"gray\" ng-if=\"node.name\">\n                ({{node.uid}})\n              </span>\n            </a>\n            <span ng-if=\"!loading && !node.uid\">\n              <a class=\"gray\" ui-sref=\"app.wot_identity({pubkey: node.pubkey})\">\n                <i class=\"ion-key\"></i>\n                {{node.pubkey|formatPubkey}}\n                <span class=\"gray\" ng-if=\"node.name\">\n                  ({{node.name}})\n                </span>\n              </a>\n            </span>\n          </h3>\n\n          <h3>\n            <a ng-click=\"openRawPeering($event)\">\n              <i class=\"icon ion-share\"></i> {{\'PEER.VIEW.SHOW_RAW_PEERING\'|translate}}\n            </a>\n\n            <span class=\"gray\" ng-if=\"!isReachable\"> | </span>\n            <a ng-if=\"!isReachable\" ng-click=\"openRawCurrentBlock($event)\">\n              <i class=\"icon ion-share\"></i> <span translate>PEER.VIEW.SHOW_RAW_CURRENT_BLOCK</span>\n            </a>\n          </h3>\n        </ion-item>\n\n\n        <div class=\"item item-divider\" translate>\n          PEER.VIEW.GENERAL_DIVIDER\n        </div>\n\n        <ion-item class=\"item-icon-left item-text-wrap ink\" copy-on-click=\"{{node.pubkey}}\">\n          <i class=\"icon ion-key\"></i>\n          <span translate>COMMON.PUBKEY</span>\n          <h4 class=\"dark text-left\">{{node.pubkey}}</h4>\n        </ion-item>\n\n        <a class=\"item item-icon-left item-icon-right item-text-wrap ink\" ng-if=\"isReachable\" ui-sref=\"app.view_server_block_hash({server: node.server, ssl: node.useSsl, tor: node.useTor, number: current.number, hash: current.hash})\">\n          <i class=\"icon ion-cube\"></i>\n          <span translate>BLOCKCHAIN.VIEW.TITLE_CURRENT</span>\n          <div class=\"badge badge-calm\" ng-if=\"!loading\">\n            {{current.number|formatInteger}}\n          </div>\n          <i class=\"gray icon ion-ios-arrow-right\"></i>\n        </a>\n\n        <a class=\"item item-icon-left item-icon-right item-text-wrap ink\" ng-if=\"isReachable\" ui-sref=\"app.server_blockchain({server: node.server, ssl: node.useSsl, tor: node.useTor})\">\n          <i class=\"icon ion-cube\" style=\"font-size: 25px\"></i>\n          <i class=\"icon-secondary ion-clock\" style=\"font-size: 18px; left: 33px; top: -12px\"></i>\n          <span translate>PEER.VIEW.LAST_BLOCKS</span>\n          <i class=\"gray icon ion-ios-arrow-right\"></i>\n        </a>\n\n        <!-- Allow extension here -->\n        <cs-extension-point name=\"general\"></cs-extension-point>\n\n        <div class=\"item item-divider\" ng-hide=\"loading || !isReachable\" translate>\n          PEER.VIEW.KNOWN_PEERS\n        </div>\n\n        <ion-item class=\"item item-text-wrap no-border done in gray no-padding-top no-padding-bottom inline text-italic\" ng-show=\"!loading && !isReachable\">\n          <small><i class=\"icon ion-alert-circled\"></i> {{\'NETWORK.INFO.ONLY_SSL_PEERS\'|translate}}</small>\n        </ion-item>\n\n        <div class=\"item center\" ng-if=\"loading\">\n            <ion-spinner class=\"icon\" icon=\"android\"></ion-spinner>\n        </div>\n\n        <div class=\"list no-padding {{::motion.ionListClass}}\" ng-if=\"isReachable\">\n\n          <div ng-repeat=\"peer in :rebind:peers track by peer.id\" class=\"item item-peer item-icon-left ink\" ng-class=\"::ionItemClass\" ng-click=\"selectPeer(peer)\" ng-include=\"\'templates/network/item_content_peer.html\'\">\n          </div>\n\n        </div>\n      </div>\n\n      <div class=\"col col-20 hidden-xs hidden-sm\">&nbsp;\n      </div>\n    </div>\n\n  </ion-content>\n</ion-view>\n");
$templateCache.put("templates/settings/popover_actions.html","<ion-popover-view class=\"fit has-header\">\n  <ion-header-bar>\n    <h1 class=\"title\" translate>COMMON.POPOVER_ACTIONS_TITLE</h1>\n  </ion-header-bar>\n  <ion-content scroll=\"false\">\n    <div class=\"list item-text-wrap\">\n\n      <a class=\"item item-icon-left ink visible-xs visible-sm\" ng-click=\"reset()\">\n        <i class=\"icon ion-refresh\"></i>\n        {{\'SETTINGS.BTN_RESET\' | translate}}\n      </a>\n\n      <!-- help tour -->\n      <a class=\"item item-icon-left ink\" ng-click=\"startSettingsTour()\">\n        <i class=\"icon ion-easel\"></i>\n        {{\'COMMON.BTN_HELP_TOUR_SCREEN\' | translate}}\n      </a>\n    </div>\n  </ion-content>\n</ion-popover-view>\n");
$templateCache.put("templates/settings/popup_node.html","<form name=\"popupForm\" ng-submit=\"\">\n\n  <div class=\"list no-padding\" ng-init=\"setPopupForm(popupForm)\">\n    <div class=\"item item-input item-floating-label\" ng-class=\"{\'item-input-error\': popupForm.$submitted && popupForm.newNode.$invalid}\">\n      <span class=\"input-label\" ng-bind-html=\"\'SETTINGS.POPUP_PEER.HOST\'|translate\"></span>\n      <input name=\"newNode\" type=\"text\" placeholder=\"{{\'SETTINGS.POPUP_PEER.HOST_HELP\' | translate}}\" ng-model=\"popupData.newNode\" ng-minlength=\"3\" required>\n    </div>\n    <div class=\"form-errors\" ng-if=\"popupForm.$submitted && popupForm.newNode.$error\" ng-messages=\"popupForm.newNode.$error\">\n      <div class=\"form-error\" ng-message=\"required\">\n        <span translate=\"ERROR.FIELD_REQUIRED\"></span>\n      </div>\n      <div class=\"form-error\" ng-message=\"minlength\">\n        <span translate=\"ERROR.FIELD_TOO_SHORT\"></span>\n      </div>\n    </div>\n\n    <div class=\"item item-toggle\">\n      <span class=\"input-label\">\n        {{\'SETTINGS.POPUP_PEER.USE_SSL\' | translate}}\n      </span>\n      <h4>\n        <small class=\"gray\" ng-bind-html=\"\'SETTINGS.POPUP_PEER.USE_SSL_HELP\' | translate\">\n        </small>\n      </h4>\n      <label class=\"toggle toggle-royal no-padding-right\">\n        <input type=\"checkbox\" ng-model=\"popupData.useSsl\">\n        <div class=\"track\">\n          <div class=\"handle\"></div>\n        </div>\n      </label>\n    </div>\n\n\n    <a class=\"button button-positive button-clear positive button-outline button-full button-small-padding icon-left ink no-padding\" ng-click=\"showNodeList()\">\n      <i class=\"icon ion-search\"></i>\n      {{\'SETTINGS.POPUP_PEER.BTN_SHOW_LIST\' | translate}}\n    </a>\n  </div>\n\n  <button type=\"submit\" class=\"hide\"></button>\n</form>\n\n\n\n");
$templateCache.put("templates/settings/settings.html","<ion-view left-buttons=\"leftButtons\" cache-view=\"false\" class=\"settings\">\n  <ion-nav-title translate>SETTINGS.TITLE</ion-nav-title>\n\n  <ion-nav-buttons side=\"secondary\">\n    <button class=\"button button-icon button-clear icon ion-android-more-vertical visible-xs visible-sm\" ng-click=\"showActionsPopover($event)\">\n    </button>\n  </ion-nav-buttons>\n\n  <ion-content>\n\n    <!-- Buttons bar-->\n    <div class=\"padding text-center hidden-xs hidden-sm\">\n      <button class=\"button button-raised button-stable ink\" ng-click=\"reset()\">\n        <i class=\"icon ion-refresh\"></i>\n        {{\'SETTINGS.BTN_RESET\' | translate}}\n      </button>\n\n      <button class=\"button button-stable button-small-padding icon ion-android-more-vertical\" ng-click=\"showActionsPopover($event)\" title=\"{{\'COMMON.BTN_OPTIONS\' | translate}}\">\n      </button>\n    </div>\n\n    <div class=\"list item-border-large\">\n\n      <div class=\"item item-toggle dark\">\n        <div class=\"input-label\">\n          {{\'COMMON.BTN_RELATIVE_UNIT\' | translate}}\n        </div>\n        <label class=\"toggle toggle-royal\" id=\"helptip-settings-btn-unit-relative\">\n            <input type=\"checkbox\" ng-model=\"formData.useRelative\">\n            <div class=\"track\">\n                <div class=\"handle\"></div>\n            </div>\n        </label>\n      </div>\n\n      <label class=\"item item-input item-select\">\n        <div class=\"input-label\">\n          {{\'COMMON.LANGUAGE\' | translate}}\n        </div>\n        <select ng-model=\"formData.locale\" ng-change=\"changeLanguage(formData.locale.id)\" ng-options=\"l as l.label for l in locales track by l.id\">\n        </select>\n      </label>\n\n      <div class=\"item item-text-wrap item-toggle dark\">\n        <div class=\"input-label\">\n         {{\'SETTINGS.USE_LOCAL_STORAGE\' | translate}}\n        </div>\n        <h4 class=\"gray\" ng-bind-html=\"\'SETTINGS.USE_LOCAL_STORAGE_HELP\' | translate\">\n        </h4>\n        <label class=\"toggle toggle-royal\">\n          <input type=\"checkbox\" ng-model=\"formData.useLocalStorage\">\n          <div class=\"track\">\n            <div class=\"handle\"></div>\n          </div>\n        </label>\n      </div>\n\n      <div class=\"item item-toggle dark item-text-wrap\">\n        <div class=\"input-label\" ng-bind-html=\"\'SETTINGS.ENABLE_HELPTIP\' | translate\">\n        </div>\n        <label class=\"toggle toggle-royal\">\n          <input type=\"checkbox\" ng-model=\"formData.helptip.enable\">\n          <div class=\"track\">\n            <div class=\"handle\"></div>\n          </div>\n        </label>\n      </div>\n\n     <!-- <div class=\"item item-toggle dark item-text-wrap\">\n        <div class=\"input-label\" ng-bind-html=\"\'SETTINGS.ENABLE_UI_EFFECTS\' | translate\">\n        </div>\n        <label class=\"toggle toggle-royal\">\n          <input type=\"checkbox\" ng-model=\"formData.enableUuiEffects\" >\n          <div class=\"track\">\n            <div class=\"handle\"></div>\n          </div>\n        </label>\n      </div>-->\n      <!-- Allow extension here -->\n      <cs-extension-point name=\"common\"></cs-extension-point>\n\n      <span class=\"item item-divider\">\n        {{\'SETTINGS.AUTHENTICATION_SETTINGS\' | translate}}\n      </span>\n\n      <div class=\"item item-toggle\">\n        <div class=\"input-label\" ng-class=\"{\'gray\': !formData.useLocalStorage}\">\n          {{\'SETTINGS.REMEMBER_ME\' | translate}}\n        </div>\n        <h4 class=\"gray text-wrap\" ng-bind-html=\"\'SETTINGS.REMEMBER_ME_HELP\' | translate\"></h4>\n\n        <label class=\"toggle toggle-royal\">\n          <input type=\"checkbox\" ng-model=\"formData.rememberMe\" ng-disabled=\"!formData.useLocalStorage\">\n          <div class=\"track\">\n            <div class=\"handle\"></div>\n          </div>\n        </label>\n      </div>\n\n      <div class=\"item item-input item-select\">\n        <div class=\"input-label\">\n          <span class=\"input-label\" translate>SETTINGS.KEEP_AUTH</span>\n          <h4 class=\"gray text-wrap\" ng-bind-html=\"\'SETTINGS.KEEP_AUTH_HELP\' | translate\"></h4>\n        </div>\n\n        <label>\n          <select ng-model=\"formData.keepAuthIdle\" ng-options=\"i as (keepAuthIdleLabels[i].labelKey | translate:keepAuthIdleLabels[i].labelParams ) for i in keepAuthIdles track by i\">\n          </select>\n        </label>\n      </div>\n\n      <span class=\"item item-divider\" translate>SETTINGS.HISTORY_SETTINGS</span>\n\n      <div class=\"item item-toggle dark\">\n        <div class=\"input-label\" translate>SETTINGS.DISPLAY_UD_HISTORY</div>\n        <label class=\"toggle toggle-royal\">\n          <input type=\"checkbox\" ng-model=\"formData.showUDHistory\">\n          <div class=\"track\">\n            <div class=\"handle\"></div>\n          </div>\n        </label>\n      </div>\n\n      <div class=\"item item-toggle dark hidden-xs hidden-sm\">\n        <div class=\"input-label\" translate>SETTINGS.TX_HISTORY_AUTO_REFRESH</div>\n        <h4 class=\"gray text-wrap\" ng-bind-html=\"\'SETTINGS.TX_HISTORY_AUTO_REFRESH_HELP\' | translate\"></h4>\n        <label class=\"toggle toggle-royal\">\n          <input type=\"checkbox\" ng-model=\"formData.walletHistoryAutoRefresh\">\n          <div class=\"track\">\n            <div class=\"handle\"></div>\n          </div>\n        </label>\n      </div>\n\n      <!-- Allow extension here -->\n      <cs-extension-point name=\"history\"></cs-extension-point>\n\n      <span class=\"item item-divider\" translate>SETTINGS.NETWORK_SETTINGS</span>\n\n      <div class=\"item ink item-text-wrap\" ng-click=\"changeNode()\">\n        <div class=\"input-label\">\n        {{\'SETTINGS.PEER\' | translate}}\n        </div>\n\n        <!-- node temporary changed -->\n        <ng-if ng-if=\"formData.node.temporary\">\n          <h4 class=\"gray text-wrap assertive\">\n            <i class=\"icon ion-alert-circled\"></i>\n            <span ng-bind-html=\"\'SETTINGS.PEER_CHANGED_TEMPORARY\' | translate \"></span>\n          </h4>\n          <div class=\"item-note assertive text-italic\">{{bma.server}}</div>\n        </ng-if>\n\n        <div class=\"item-note dark\" ng-if=\"!formData.node.temporary\">{{bma.server}}</div>\n      </div>\n\n      <div class=\"item item-text-wrap item-toggle dark hidden-xs hidden-sm\">\n        <div class=\"input-label\" ng-bind-html=\"\'SETTINGS.EXPERT_MODE\' | translate\"></div>\n        <h4 class=\"gray\" ng-bind-html=\"\'SETTINGS.EXPERT_MODE_HELP\' | translate\"></h4>\n        <label class=\"toggle toggle-royal\">\n          <input type=\"checkbox\" ng-model=\"formData.expertMode\">\n          <div class=\"track\">\n            <div class=\"handle\"></div>\n          </div>\n        </label>\n      </div>\n\n      <ion-item class=\"item-input item-select\">\n        <div class=\"input-label\">\n          <div class=\"input-label hidden-xs\" translate>SETTINGS.BLOCK_VALIDITY_WINDOW</div>\n          <div class=\"input-label visible-xs\" translate>SETTINGS.BLOCK_VALIDITY_WINDOW_SHORT</div>\n          <h4 class=\"gray\" ng-bind-html=\"\'SETTINGS.BLOCK_VALIDITY_WINDOW_HELP\' | translate\"></h4>\n        </div>\n        <label>\n          <select ng-model=\"formData.blockValidityWindow\" ng-options=\"i as (blockValidityWindowLabels[i].labelKey | translate:blockValidityWindowLabels[i].labelParams ) for i in blockValidityWindows track by i\">\n          </select>\n        </label>\n      </ion-item>\n\n      <!-- Allow extension here -->\n      <cs-extension-point name=\"network\"></cs-extension-point>\n\n      <span class=\"item item-divider\" ng-if=\"$root.config.plugins\" translate>SETTINGS.PLUGINS_SETTINGS</span>\n\n      <!-- Allow extension here -->\n      <cs-extension-point name=\"plugins\"></cs-extension-point>\n    </div>\n  </ion-content>\n</ion-view>\n");
$templateCache.put("templates/wallet/item_tx.html","<i class=\"icon item-image\" ng-if=\"::!tx.avatar\" ng-class=\"::{\'ion-person dark\': tx.uid, \'ion-card dark\': !tx.uid}\"></i>\n<i class=\"avatar\" ng-if=\"::tx.avatar\" style=\"background-image: url({{::tx.avatar.src}})\"></i>\n\n<div class=\"row no-padding\">\n  <div class=\"col no-padding\">\n    <b class=\"ion-clock\" ng-if=\"::pending\"> </b>\n    <b class=\"ion-clock\" ng-if=\"::validating\"> </b>\n    <a class=\"\" ui-sref=\"app.wot_identity({pubkey:tx.pubkey, uid:tx.uid})\" ng-if=\"tx.uid\">\n      {{::tx.name||tx.uid}}\n    </a>\n    <a class=\"gray\" ui-sref=\"app.wot_identity({pubkey:tx.pubkey, uid:tx.uid})\" ng-if=\"!tx.uid\">\n      <i class=\"ion-key gray\"></i>\n      {{::tx.pubkey | formatPubkey}}\n    </a>\n    <p class=\"dark visible-xs width-cup text-italic\" data-toggle=\"tooltip\" ng-if=\"::tx.comment\" title=\"{{::tx.comment}}\">\n      <i class=\"ion-ios-chatbubble-outline\"></i>\n      {{::tx.comment}}<br>\n    </p>\n    <h4>\n      <a ng-if=\"::!pending\" class=\"gray underline\" ui-sref=\"app.view_block({number: tx.block_number})\">\n        {{::tx.time | formatFromNow}} | {{::tx.time | formatDate}}\n      </a>\n      <span ng-if=\"::pending\" class=\"gray\">\n        {{::tx.time | formatFromNow}} | {{::tx.time | formatDate}}\n      </span>\n    </h4>\n  </div>\n  <div class=\"col col-50 no-padding\" ng-if=\"::tx.comment\">\n    <p class=\"vertical-center gray text-italic hidden-xs\" data-toggle=\"tooltip\" title=\"{{::tx.comment}}\">{{::tx.comment}}</p>\n  </div>\n  <div class=\"col col-10 no-padding\">\n\n    <!-- not locked TX -->\n    <span ng-if=\"::!tx.lockedOutputs\" class=\"badge item-note\" ng-class=\"{\'badge-calm\': tx.amount > 0}\">\n      <!--<span class=\"hidden-xs\" ng-if=\":rebind:tx.amount>0\">+</span>-->\n      <span ng-bind-html=\":rebind:tx.amount| formatAmount:{currency:$root.currency.name}\"></span>\n    </span>\n\n    <!-- Locked TX -->\n    <a ng-if=\":rebind:tx.lockedOutputs\" class=\"badge item-note\" ng-class=\"{\'badge-calm\': tx.amount > 0}\" ng-click=\"showLockedOutputsPopover(tx, $event)\">\n      <i class=\"icon ion-locked\"></i>\n      <!--<span class=\"hidden-xs\" ng-if=\":rebind:tx.amount>0\">+</span>-->\n      <span ng-bind-html=\":rebind:tx.amount| formatAmount:{currency:$root.currency.name}\"></span>\n    </a>\n\n    <div class=\"badge badge-secondary\" ng-if=\"$root.settings.expertMode\">\n      (<span ng-bind-html=\":rebind:tx.amount| formatAmount:{useRelative: !$root.settings.useRelative, currency:$root.currency.name}\"></span>)\n    </div>\n  </div>\n</div>\n");
$templateCache.put("templates/wallet/item_ud.html","<i class=\"icon item-image ion-arrow-up-c energized\"></i>\n\n<div class=\"row no-padding\">\n  <div class=\"col no-padding\">\n    <span class=\"energized\" translate>COMMON.UNIVERSAL_DIVIDEND</span>\n    <h4>\n      <a class=\"gray underline\" ui-sref=\"app.view_block({number: tx.block_number})\">\n        {{::tx.time | formatFromNow}} | {{::tx.time | formatDate}}\n      </a>\n    </h4>\n  </div>\n  <div class=\"col col-10 no-padding\">\n\n    <span class=\"badge item-note badge-energized\">\n      <!--<span class=\"hidden-xs\" ng-if=\":rebind:tx.amount>0\">+</span>-->\n      <span ng-bind-html=\":rebind:tx.amount| formatAmount:{currency:$root.currency.name}\"></span>\n    </span>\n\n    <div class=\"badge badge-secondary\" ng-if=\"$root.settings.expertMode\">\n      (<span ng-bind-html=\":rebind:tx.amount| formatAmount:{useRelative: !$root.settings.useRelative, currency:$root.currency.name}\"></span>)\n    </div>\n  </div>\n</div>\n");
$templateCache.put("templates/wallet/modal_security.html","<ion-modal-view class=\"modal-full-height\">\n\n  <ion-header-bar class=\"bar-positive\">\n\n    <button class=\"button button-clear visible-xs\" ng-if=\"!slides.slider.activeIndex\" ng-click=\"closeModal()\" translate>COMMON.BTN_CANCEL\n    </button>\n    <button class=\"button button-icon button-clear icon ion-ios-arrow-back buttons header-item\" ng-click=\"slidePrev()\" ng-if=\"slides.slider.activeIndex\">\n    </button>\n\n    <h1 class=\"title hidden-xs\" translate>ACCOUNT.SECURITY.TITLE</h1>\n\n    <button class=\"button button-clear icon-right visible-xs\" ng-if=\"!isLastSlide && slides.slider.activeIndex > 0\" ng-click=\"doNext()\">\n      <span translate>COMMON.BTN_NEXT</span>\n      <i class=\"icon ion-ios-arrow-right\"></i>\n    </button>\n    <button class=\"button button-positive button-icon button-clear icon ion-android-done visible-xs\" ng-click=\"doNext()\" ng-if=\"isLastSlide && option === \'saveID\'\">\n    </button>\n  </ion-header-bar>\n\n\n    <ion-slides options=\"slides.options\" slider=\"slides.slider\">\n\n      <!-- STEP 1 -->\n      <ion-slide-page>\n        <ion-content class=\"has-header padding\">\n\n          <div class=\"list\">\n\n            <div class=\"item item-complex card stable-bg item-icon-left item-icon-right ink\" ng-click=\"selectOption(\'recoverID\')\" ng-if=\"!login\">\n              <div class=\"item-content item-text-wrap\">\n                <i class=\"item-image dark icon ion-person\"></i>\n                <b class=\"ion-ios-undo icon-secondary dark\" style=\"top: -8px; left: 39px; font-size: 12px\"></b>\n                <h2 translate>ACCOUNT.SECURITY.RECOVER_ID</h2>\n                <h4 class=\"gray\" translate>ACCOUNT.SECURITY.RECOVER_ID_HELP</h4>\n                <i class=\"icon dark ion-ios-arrow-right\"></i>\n              </div>\n            </div>\n\n            <div class=\"item item-complex card stable-bg item-icon-left item-icon-right ink\" ng-click=\"selectOption(\'revocation\')\" ng-if=\"!login\">\n              <div class=\"item-content item-text-wrap\">\n                <i class=\"item-image dark icon ion-person\"></i>\n                <b class=\"ion-close icon-secondary dark\" style=\"top: -8px; left: 39px; font-size: 12px\"></b>\n                <h2 translate>ACCOUNT.SECURITY.REVOCATION_WITH_FILE</h2>\n                <h4 class=\"gray\" translate>ACCOUNT.SECURITY.REVOCATION_WITH_FILE_DESCRIPTION</h4>\n                <i class=\"icon dark ion-ios-arrow-right\"></i>\n              </div>\n            </div>\n\n            <div class=\"item item-complex card stable-bg item-icon-left item-icon-right ink hidden-xs\" ng-click=\"selectOption(\'saveID\')\" ng-if=\"login && !$root.device.enable\">\n              <div class=\"item-content item-text-wrap\">\n                <i class=\"item-image dark icon ion-person\"></i>\n                <b class=\"ion-ios-redo icon-secondary dark\" style=\"top: -8px; left: 39px; font-size: 12px\"></b>\n                <b class=\"ion-locked icon-secondary dark\" style=\"top: 0px; left: 40px; font-size: 8px\"></b>\n                <h2 translate>ACCOUNT.SECURITY.SAVE_ID</h2>\n                <h4 class=\"gray\" translate>ACCOUNT.SECURITY.SAVE_ID_HELP</h4>\n                <i class=\"icon dark ion-ios-arrow-right\"></i>\n              </div>\n            </div>\n\n            <!-- keyfile generation (hidden if device enable, because we do not known were the file is stored) -->\n            <div class=\"item item-complex card stable-bg item-icon-left item-icon-right ink hidden-xs\" ng-click=\"selectOption(\'generateKeyfile\')\" ng-if=\"login && !$root.device.enable\">\n              <div class=\"item-content item-text-wrap\">\n                <i class=\"item-image dark icon ion-document-text\"></i>\n                <b class=\"ion-key icon-secondary dark\" style=\"top: -8px; left: 42px; font-size: 12px\"></b>\n                <h2 translate>ACCOUNT.SECURITY.GENERATE_KEYFILE</h2>\n                <h4 class=\"gray\" translate>ACCOUNT.SECURITY.GENERATE_KEYFILE_HELP</h4>\n                <i class=\"icon dark ion-ios-arrow-right\"></i>\n              </div>\n            </div>\n\n            <div class=\"item item-complex card stable-bg item-icon-left item-icon-right ink hidden-xs hidden-sm\" ng-click=\"downloadRevokeFile()\" ng-if=\"canRevoke && !$root.device.enable\">\n              <div class=\"item-content item-text-wrap\">\n                <i class=\"item-image dark icon ion-person\"></i>\n                <b class=\"ion-ios-redo icon-secondary dark\" style=\"top: -8px; left: 39px; font-size: 12px\"></b>\n                <b class=\"ion-close icon-secondary dark\" style=\"top: 0px; left: 40px; font-size: 8px\"></b>\n                <h2 translate>ACCOUNT.SECURITY.DOWNLOAD_REVOKE</h2>\n                <h4 class=\"gray\" translate>ACCOUNT.SECURITY.DOWNLOAD_REVOKE_HELP</h4>\n                <i class=\"icon dark ion-android-archive\"></i>\n              </div>\n            </div>\n\n            <div class=\"item item-complex card stable-bg item-icon-left item-icon-right ink\" ng-click=\"self()\" ng-if=\"needSelf\">\n              <div class=\"item-content item-text-wrap\">\n                <i class=\"item-image icon ion-person dark\"></i>\n                <b class=\"ion-flag icon-secondary dark\" style=\"top: -8px; left: 39px; font-size: 12px\"></b>\n                <h2 translate>ACCOUNT.SECURITY.SEND_IDENTITY</h2>\n                <h4 class=\"gray\" ng-bind-html=\"::\'ACCOUNT.SECURITY.SEND_IDENTITY_HELP\' | translate\"></h4>\n              </div>\n            </div>\n\n            <div class=\"item item-complex card stable-bg item-icon-left item-icon-right ink\" ng-click=\"membershipIn()\" ng-if=\"needMembership\">\n              <div class=\"item-content item-text-wrap\">\n                <i class=\"item-image icon ion-person dark\"></i>\n                <b class=\"ion-plus icon-secondary dark\" style=\"top: -8px; left: 39px; font-size: 12px\"></b>\n                <h2 translate>ACCOUNT.SECURITY.MEMBERSHIP_IN</h2>\n                <h4 class=\"gray\" ng-bind-html=\"::\'ACCOUNT.SECURITY.MEMBERSHIP_IN_HELP\' | translate\"></h4>\n              </div>\n            </div>\n\n            <div class=\"item item-complex card stable-bg item-icon-left item-icon-right ink\" ng-click=\"revokeWalletIdentity()\" ng-if=\"canRevoke\">\n              <div class=\"item-content item-text-wrap\">\n                <i class=\"item-image icon ion-person assertive-900\"></i>\n                <b class=\"ion-close icon-secondary assertive-900\" style=\"top: -8px; left: 39px; font-size: 12px\"></b>\n                <h2 translate>ACCOUNT.SECURITY.REVOCATION_WALLET</h2>\n                <h4 class=\"gray\" translate>ACCOUNT.SECURITY.REVOCATION_WALLET_HELP</h4>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"padding hidden-xs text-right\">\n            <button class=\"button button-clear button-dark ink\" ng-click=\"closeModal()\" type=\"button\" translate>COMMON.BTN_CANCEL\n            </button>\n          </div>\n        </ion-content>\n      </ion-slide-page>\n\n      <ion-slide-page ng-if=\"option == \'revocation\'\">\n        <ng-include src=\"\'templates/wallet/slides/slides_revocation_file.html\'\"></ng-include>\n      </ion-slide-page>\n\n      <ion-slide-page ng-if=\"login && option == \'saveID\'\">\n        <ng-include src=\"\'templates/wallet/slides/slides_saveID_1.html\'\"></ng-include>\n      </ion-slide-page>\n      <ion-slide-page ng-if=\"login && option == \'saveID\'\">\n        <ng-include src=\"\'templates/wallet/slides/slides_saveID_2.html\'\"></ng-include>\n      </ion-slide-page>\n\n      <ion-slide-page ng-if=\"option == \'recoverID\'\">\n        <ng-include src=\"\'templates/wallet/slides/slides_recoverID_1.html\'\"></ng-include>\n      </ion-slide-page>\n      <ion-slide-page ng-if=\"option == \'recoverID\'\">\n        <ng-include src=\"\'templates/wallet/slides/slides_recoverID_2.html\'\"></ng-include>\n      </ion-slide-page>\n      <ion-slide-page ng-if=\"option == \'recoverID\'\">\n        <ng-include src=\"\'templates/wallet/slides/slides_recoverID_3.html\'\"></ng-include>\n      </ion-slide-page>\n\n      <ion-slide-page ng-if=\"login && option == \'generateKeyfile\'\">\n        <ng-include src=\"\'templates/wallet/slides/slides_generate_keyfile.html\'\"></ng-include>\n      </ion-slide-page>\n\n    </ion-slides>\n</ion-modal-view>\n");
$templateCache.put("templates/wallet/modal_transfer.html","<ion-modal-view id=\"transfer\" class=\"modal-full-height modal-transfer\">\n  <ion-header-bar class=\"bar-positive\">\n    <button class=\"button button-clear visible-xs\" ng-click=\"closeModal()\" translate>COMMON.BTN_CANCEL</button>\n    <h1 class=\"title\" translate>TRANSFER.MODAL.TITLE</h1>\n\n    <button class=\"button button-icon button-clear icon ion-android-send visible-xs\" ng-click=\"doTransfer()\">\n    </button>\n  </ion-header-bar>\n\n  <ion-content scroll=\"true\">\n      <ng-include src=\"\'templates/wallet/transfer_form.html\'\"></ng-include>\n  </ion-content>\n\n  <!-- Digit keyboard - fix #30 -->\n  <ion-digit-keyboard settings=\"digitKeyboardSettings\" ng-if=\"digitKeyboardVisible\"></ion-digit-keyboard>\n</ion-modal-view>\n");
$templateCache.put("templates/wallet/new_transfer.html","<ion-view left-buttons=\"leftButtons\" id=\"transfer\">\n  <ion-nav-title>\n    <span class=\"visible-xs visible-sm\" translate>TRANSFER.TITLE</span>\n  </ion-nav-title>\n\n  <ion-nav-buttons side=\"secondary\">\n      <button class=\"button button-icon button-clear icon ion-android-send visible-xs\" ng-click=\"doTransfer()\">\n      </button>\n  </ion-nav-buttons>\n\n  <ion-content scroll=\"true\">\n    <div class=\"row no-padding-xs\">\n      <div class=\"col col-20 hidden-xs hidden-sm\">&nbsp;</div>\n      <div class=\"col no-padding-xs\">\n        <h2 class=\"hidden-xs hidden-sm\" ng-if=\"formData\">\n          {{(formData.all ? \'TRANSFER.SUB_TITLE_ALL\' : \'TRANSFER.SUB_TITLE\')|translate}}\n        </h2>\n        <h4 class=\"hidden-xs hidden-sm\">&nbsp;</h4>\n        <ng-include src=\"\'templates/wallet/transfer_form.html\'\"></ng-include>\n      </div>\n      <div class=\"col col-20 hidden-xs hidden-sm\">&nbsp;</div>\n    </div>\n  </ion-content>\n\n  <!-- Digit keyboard - fix #30 -->\n  <ion-digit-keyboard settings=\"digitKeyboardSettings\" ng-if=\"digitKeyboardVisible\"></ion-digit-keyboard>\n</ion-view>\n");
$templateCache.put("templates/wallet/popover_actions.html","<ion-popover-view class=\"fit has-header popover-wallet-actions\">\n  <ion-header-bar>\n    <h1 class=\"title\" translate>COMMON.POPOVER_ACTIONS_TITLE</h1>\n  </ion-header-bar>\n  <ion-content scroll=\"false\">\n    <div class=\"list item-text-wrap\">\n\n      <a class=\"item item-icon-left ink visible-xs visible-sm\" ng-click=\"showSharePopover($event)\">\n        <i class=\"icon ion-android-share-alt\"></i>\n        {{\'COMMON.BTN_SHARE\' | translate}}\n      </a>\n\n      <!-- alternatives identities -->\n      <a class=\"item item-icon-left ink\" ng-if=\"walletData.requirements.alternatives\" ng-click=\"showSelectIdentitiesModal()\">\n        <i class=\"icon ion-person\"></i>\n        <b class=\"icon-secondary ion-loop\" style=\"margin-top: 4px; left: 15px\"></b>\n        {{\'ACCOUNT.BTN_SELECT_ALTERNATIVES_IDENTITIES\' | translate}}\n      </a>\n\n      <!-- renew membership -->\n      <!-- (show only if a SELF has been sent - fix #673) -->\n      <a class=\"item item-icon-left ink visible-xs visible-sm\" ng-if=\"!walletData.requirements.needSelf && walletData.requirements.needRenew\" ng-click=\"renewMembership()\">\n        <i class=\"icon ion-loop\"></i>\n        {{\'ACCOUNT.BTN_MEMBERSHIP_RENEW_DOTS\' | translate}}\n      </a>\n      <a class=\"item item-icon-left ink hidden-xs hidden-sm\" ng-if=\"!walletData.requirements.needSelf && !walletData.requirements.hasBadSelfBlock && !walletData.requirements.revoked\" ng-class=\"{\'gray\':!walletData.requirements.needRenew}\" ng-click=\"renewMembership()\">\n        <i class=\"icon ion-loop\"></i>\n        {{\'ACCOUNT.BTN_MEMBERSHIP_RENEW_DOTS\' | translate}}\n      </a>\n      <a class=\"item item-icon-left ink hidden-xs hidden-sm\" ng-if=\"walletData.requirements.hasBadSelfBlock\" ng-click=\"fixMembership()\">\n        <i class=\"icon ion-loop\"></i>\n        {{\'ACCOUNT.BTN_FIX_MEMBERSHIP\' | translate}}\n      </a>\n\n      <a class=\"item item-icon-left assertive ink\" ng-if=\"walletData.requirements.canMembershipOut\" ng-click=\"membershipOut()\">\n        <i class=\"icon ion-log-out\"></i>\n        {{\'ACCOUNT.BTN_MEMBERSHIP_OUT_DOTS\' | translate}}\n      </a>\n\n      <a class=\"item item-icon-left ink\" ng-click=\"showSecurityModal()\">\n        <i class=\"icon ion-locked\"></i>\n        <span ng-bind-html=\"\'ACCOUNT.BTN_SECURITY_DOTS\' | translate\"></span>\n\n      </a>\n\n      <div class=\"item-divider hidden-sm hidden-xs\"></div>\n\n      <!-- help tour -->\n      <a class=\"item item-icon-left ink hidden-sm hidden-xs\" ng-if=\"isDefaultWallet\" ng-click=\"startWalletTour()\">\n        <i class=\"icon ion-easel\"></i>\n        {{\'COMMON.BTN_HELP_TOUR_SCREEN\' | translate}}\n      </a>\n    </div>\n  </ion-content>\n</ion-popover-view>\n");
$templateCache.put("templates/wallet/popover_unit.html","<ion-popover-view class=\"popover-unit\">\n  <ion-content scroll=\"false\">\n    <div class=\"list\">\n      <a class=\"item item-icon-left\" ng-class=\"{ \'selected\': !formData.useRelative}\" ng-click=\"closePopover(false)\">\n        <i class=\"icon\" ng-class=\"{ \'ion-ios-checkmark-empty\': !formData.useRelative}\"></i>\n        <i ng-bind-html=\"$root.currency.name | currencySymbol:false\"></i>\n      </a>\n      <a class=\"item item-icon-left\" ng-class=\"{ \'selected\': formData.useRelative}\" ng-click=\"closePopover(true)\">\n        <i class=\"icon\" ng-class=\"{ \'ion-ios-checkmark-empty\': formData.useRelative}\"></i>\n        <i ng-bind-html=\"$root.currency.name | currencySymbol:true\"></i>\n      </a>\n    </div>\n  </ion-content>\n</ion-popover-view>\n");
$templateCache.put("templates/wallet/popup_register.html","<form name=\"registerForm\" ng-submit=\"\">\n  <div class=\"list\" ng-init=\"setRegisterForm(registerForm)\">\n    <label class=\"item item-input\" ng-class=\"{\'item-input-error\': registerForm.$submitted && registerForm.pseudo.$invalid}\">\n      <input name=\"pseudo\" type=\"text\" placeholder=\"{{\'ACCOUNT.NEW.PSEUDO_HELP\' | translate}}\" ng-model=\"walletData.newUid\" ng-minlength=\"3\" required>\n    </label>\n    <div class=\"form-errors\" ng-if=\"registerForm.$submitted && registerForm.pseudo.$error\" ng-messages=\"registerForm.pseudo.$error\">\n      <div class=\"form-error\" ng-message=\"required\">\n        <span translate=\"ERROR.FIELD_REQUIRED\"></span>\n      </div>\n      <div class=\"form-error\" ng-message=\"minlength\">\n        <span translate=\"ERROR.FIELD_TOO_SHORT\"></span>\n      </div>\n    </div>\n  </div>\n</form>\n");
$templateCache.put("templates/wallet/transfer_form.html","  <form name=\"transferForm\" novalidate=\"\" ng-submit=\"doTransfer()\">\n\n    <div class=\"list no-padding-xs\" ng-init=\"setForm(transferForm)\">\n\n      <!-- dest -->\n      <ion-item class=\"item-icon-right gray ink\" ng-class=\"{\'item-input-error\': form.$submitted && !formData.destPub}\" ng-click=\"showWotLookupModal()\">\n          <span class=\"gray\" translate>TRANSFER.TO</span>\n          <span class=\"badge badge-royal animate-fade-in animate-show-hide ng-hide\" ng-show=\"destUid\">\n            <i class=\"ion-person\"></i> {{destUid}}\n          </span>&nbsp;\n          <span class=\"badge badge-royal\" ng-show=\"!destUid && formData.destPub\">\n            <i class=\"ion-key\"></i> {{formData.destPub | formatPubkey}}\n          </span>\n        <i class=\"gray icon ion-ios-arrow-right\"></i>\n      </ion-item>\n      <div class=\"form-errors\" ng-if=\"form.$submitted && !formData.destPub\">\n        <div class=\"form-error\">\n          <span translate=\"ERROR.FIELD_REQUIRED\"></span>\n        </div>\n      </div>\n\n      <!-- from -->\n      <ion-item class=\"item-text-wrap ink\" ng-class=\"{\'item-icon-right\': enableSelectWallet}\" ng-click=\"showSelectWalletModal()\">\n        <span class=\"gray\" translate>TRANSFER.FROM</span>\n        <span class=\"badge animate-fade-in animate-show-hide ng-hide\" ng-show=\"!loading\" ng-class=\"{\'badge-assertive\': (convertedBalance <= 0 || form.amount.$error.max), \'badge-balanced\': (convertedBalance > 0 && (!form.amount.$error.max)) }\">\n            <ion-spinner icon=\"android\" ng-show=\"!walletData.pubkey\"></ion-spinner>\n            <span ng-if=\"walletData.pubkey && !walletData.isMember\">\n              <i class=\"ion-key\"></i> {{walletData.pubkey| formatPubkey}}&nbsp;&nbsp;\n            </span>\n            <span ng-if=\"walletData.isMember\">\n              <i class=\"ion-person\"></i> {{walletData.name||walletData.uid}}&nbsp;&nbsp;\n            </span>\n            <span ng-bind-html=\"walletData.balance|formatAmount:{useRelative: formData.useRelative, currency:currency}\"></span>\n        </span>\n\n        <i class=\"gray icon ion-ios-arrow-right\" ng-if=\"enableSelectWallet\"></i>\n      </ion-item>\n\n      <!-- Amount -->\n      <ion-item class=\"item-input item-floating-label item-button-right\" ng-class=\"{\'item-input-error\': form.$submitted && form.amount.$invalid}\">\n        <div class=\"input-label\">\n          <span translate>TRANSFER.AMOUNT</span>\n          (<span ng-bind-html=\"$root.currency.name | currencySymbol:formData.useRelative\"></span>)\n        </div>\n        <input type=\"text\" class=\"hidden-xs hidden-sm\" name=\"amount\" placeholder=\"{{::\'TRANSFER.AMOUNT_HELP\' | translate}} ({{$root.currency.name | currencySymbolNoHtml:formData.useRelative}})\" ng-model=\"formData.amount\" required number-float>\n\n        <!-- mobile: come OVER the input -->\n        <input type=\"text\" class=\"visible-xs visible-sm\" name=\"amount\" placeholder=\"{{::\'TRANSFER.AMOUNT_HELP\' | translate}} ({{$root.currency.name | currencySymbolNoHtml:formData.useRelative}})\" ng-model=\"formData.amount\" required number-float>\n        <!-- This div will catch click event, to open digit keyboard -->\n        <div class=\"block visible-xs visible-sm\" style=\"position:absolute; opacity:0; z-index:100; top: 0; left: 0; height: 100%; width: 100%\" ng-click=\"showDigitKeyboard()\"></div>\n\n        <a class=\"button button-stable icon ion-arrow-swap gray ink hidden-xs hidden-sm\" ng-click=\"showUnitPopover($event)\">\n        </a>\n        <a class=\"button button-icon gray icon ion-android-more-vertical ink visible-xs visible-sm\" style=\"z-index:110; right: 0px\" ng-click=\"showUnitPopover($event)\">\n        </a>\n      </ion-item>\n      <div class=\"form-errors\" ng-show=\"form.$submitted && form.amount.$error\" ng-messages=\"form.amount.$error\">\n        <div class=\"form-error\" ng-message=\"required\">\n          <span translate=\"ERROR.FIELD_REQUIRED\"></span>\n        </div>\n        <div class=\"form-error\" ng-message=\"numberFloat\">\n          <span translate=\"ERROR.FIELD_NOT_NUMBER\"></span>\n        </div>\n        <div class=\"form-error\" ng-message=\"numberInt\">\n          <span translate=\"ERROR.FIELD_NOT_INT\"></span>\n        </div>\n        <div class=\"form-error\" ng-message=\"min\">\n          <span translate=\"ERROR.FIELD_MIN\" translate-values=\"{min: minAmount}\"></span>\n        </div>\n        <div class=\"form-error\" ng-message=\"max\">\n          <span translate=\"ERROR.NOT_ENOUGH_CREDIT\"></span>\n        </div>\n      </div>\n\n\n      <!-- rest -->\n      <a class=\"item item-icon-right gray ink\" ng-class=\"{\'item-input-error\': form.$submitted && !formData.destPub}\" ng-click=\"showWotLookupModal(\'restPub\')\" ng-if=\"formData.all && formData.restAmount\">\n        <span class=\"gray\">\n          <i translate>TRANSFER.REST</i>\n          <ng-if ng-if=\"formData.restAmount\">(<i ng-bind-html=\"formData.restAmount|formatAmount:{useRelative: formData.useRelative, currency:currency}\"></i>)</ng-if>\n          <i translate>TRANSFER.REST_TO</i>\n        </span>\n        <span class=\"badge badge-royal animate-fade-in animate-show-hide ng-hide\" ng-show=\"restUid\">\n            <i class=\"ion-person\"></i> {{restUid}}\n          </span>&nbsp;\n        <span class=\"badge badge-royal\" ng-show=\"!restUid && formData.restPub\">\n            <i class=\"ion-key\"></i> {{formData.restPub | formatPubkey}}\n          </span>\n        <i class=\"gray icon ion-ios-arrow-right\"></i>\n      </a>\n      <div class=\"form-errors\" ng-if=\"form.$submitted && formData.all && !formData.restPub && formData.restAmount &gt; 0\">\n        <div class=\"form-error\">\n          <span translate=\"ERROR.FIELD_REQUIRED\"></span>\n        </div>\n      </div>\n\n      <!-- Enable comment ? -->\n      <div class=\"pull-right visible-xs visible-sm\" ng-if=\"!formData.useComment\">\n        <a class=\"button button-text button-small ink\" ng-click=\"addComment()\">\n          <i class=\"icon ion-plus\"></i>\n          <span translate>TRANSFER.BTN_ADD_COMMENT</span>\n        </a>\n      </div>\n\n      <!-- Comment -->\n      <label class=\"item item-input item-floating-label hidden-xs hidden-sm\" ng-class=\"{\'item-input-error\': form.$submitted && form.comment.$invalid}\">\n        <span class=\"input-label\">{{\'TRANSFER.COMMENT\' | translate}}</span>\n        <textarea placeholder=\"{{\'TRANSFER.COMMENT_HELP\' | translate}}\" name=\"comment\" ng-model=\"formData.comment\" ng-maxlength=\"255\" ng-pattern=\"commentPattern\">\n        </textarea>\n      </label>\n      <label class=\"item item-input item-floating-label visible-xs visible-sm\" ng-if=\"formData.useComment\" ng-class=\"{\'item-input-error\': form.$submitted && form.comment.$invalid}\">\n        <span class=\"input-label\">{{\'TRANSFER.COMMENT\' | translate}}</span>\n        <textarea placeholder=\"{{\'TRANSFER.COMMENT_HELP\' | translate}}\" id=\"{{commentInputId}}\" name=\"comment\" ng-model=\"formData.comment\" ng-model-options=\"{ debounce: 650 }\" ng-maxlength=\"255\" ng-pattern=\"commentPattern\" ng-focus=\"hideDigitKeyboard()\">\n        </textarea>\n      </label>\n      <div class=\"form-errors\" ng-show=\"form.comment.$error\" ng-messages=\"form.comment.$error\">\n        <div class=\"form-error\" ng-message=\"maxlength\">\n          <span translate=\"ERROR.FIELD_TOO_LONG\"></span>\n        </div>\n        <div class=\"form-error\" ng-message=\"pattern\">\n          <span translate=\"ERROR.FIELD_ACCENT\"></span>\n        </div>\n      </div>\n\n      <!-- Warn comment is public -->\n      <div class=\"item item-icon-left item-text-wrap item-no-border hidden-xs hidden-sm\">\n        <div class=\"animate-fade-in animate-show-hide ng-hide\" ng-show=\"formData.comment && formData.comment.length || form.comment.$invalid\">\n          <i class=\"icon ion-android-alert positive\"></i>\n          <h4 class=\"positive\" translate>TRANSFER.WARN_COMMENT_IS_PUBLIC</h4>\n        </div>\n      </div>\n      <div class=\"item item-icon-left item-text-wrap item-no-border visible-xs visible-sm\" ng-if=\"formData.useComment\">\n        <i class=\"icon ion-android-alert positive\"></i>\n        <h4 class=\"positive\" translate>TRANSFER.WARN_COMMENT_IS_PUBLIC</h4>\n      </div>\n\n\n    </div>\n\n    <div class=\"padding hidden-xs text-right\">\n      <button class=\"button button-clear button-dark ink\" ng-click=\"cancel()\" type=\"button\" translate>COMMON.BTN_CANCEL\n      </button>\n      <button class=\"button ink\" ng-class=\"{\'button-assertive\': formData.all, \'button-positive\': !formData.all}\" type=\"submit\" translate>\n        TRANSFER.BTN_SEND\n      </button>\n    </div>\n  </form>\n\n\n");
$templateCache.put("templates/wallet/tx_locked_outputs_popover.html","<ion-popover-view class=\"fit popover-locked-outputs\">\n  <ion-header-bar>\n    <h1 class=\"title\" translate>ACCOUNT.LOCKED_OUTPUTS_POPOVER.TITLE</h1>\n  </ion-header-bar>\n  <ion-content scroll=\"true\">\n\n    <div ng-if=\"popoverData.lockedOuputs.length == 1\" class=\"item item-text-wrap no-border\">\n      <h4 class=\"positive\" translate>ACCOUNT.LOCKED_OUTPUTS_POPOVER.DESCRIPTION</h4>\n    </div>\n    <div ng-if=\"popoverData.lockedOuputs.length > 1\" class=\"item item-text-wrap no-border\">\n      <h4 class=\"positive\" translate>ACCOUNT.LOCKED_OUTPUTS_POPOVER.DESCRIPTION_MANY</h4>\n    </div>\n\n    <!-- outputs -->\n    <div ng-repeat=\"output in popoverData.lockedOuputs track by $index\" class=\"item\">\n\n      <!-- output amount (only visible if more than one outputs -->\n      <h2 class=\"gray\" ng-if=\"popoverData.lockedOuputs.length > 1\" translate>ACCOUNT.LOCKED_OUTPUTS_POPOVER.LOCKED_AMOUNT</h2>\n      <div ng-if=\"popoverData.lockedOuputs.length > 1\" class=\"badge item-note\" ng-class=\"{\'badge-balanced\': output.amount > 0}\">\n        <i class=\"icon ion-locked\"></i>\n        <span ng-bind-html=\"::output.amount| formatAmount\"></span>\n        <span ng-bind-html=\"::unit\"></span>\n      </div>\n\n      <!-- unlock conditions -->\n      <div ng-repeat=\"condition in output.unlockConditions track by $index\" class=\"row\" ng-class=\"::{\'padding-top\': !$index && popoverData.lockedOuputs.length > 1}\" ng-style=\"::condition.style\">\n        <span class=\"gray\" ng-if=\"::condition.operator\">{{::\'BLOCKCHAIN.VIEW.TX_OUTPUT_OPERATOR.\'+condition.operator|translate}}&nbsp;</span>\n        <div ng-if=\"::condition.type==\'SIG\'\">\n            <i class=\"icon ion-key dark\"></i>\n          <span class=\"dark\" ng-bind-html=\"::\'BLOCKCHAIN.VIEW.TX_OUTPUT_FUNCTION.SIG\' | translate\"></span>\n          <a ng-click=\"goState(\'app.wot_identity\', {pubkey:condition.value})\" style=\"text-decoration: none\" class=\"positive\">\n            {{condition.value|formatPubkey}}\n          </a>\n        </div>\n        <div ng-if=\"::condition.type==\'XHX\'\">\n          <i class=\"icon ion-lock-combination dark\"></i>\n          <span class=\"dark\" ng-bind-html=\"::\'BLOCKCHAIN.VIEW.TX_OUTPUT_FUNCTION.XHX\' | translate\"></span>\n          <a copy-on-click=\"{{::condition.value}}\" class=\"positive\">\n            {{::condition.value|formatPubkey}}...\n          </a>\n        </div>\n        <div ng-if=\"condition.type==\'CSV\'\">\n          <i class=\"icon ion-clock dark\"></i>\n          <span class=\"dark\" ng-bind-html=\"::\'BLOCKCHAIN.VIEW.TX_OUTPUT_FUNCTION.CSV\' | translate\"></span>\n          {{::condition.value|formatDuration}}\n        </div>\n        <div ng-if=\"condition.type==\'CLTV\'\">\n          <i class=\"icon ion-clock dark\"></i>\n          <span class=\"dark\" ng-bind-html=\"::\'BLOCKCHAIN.VIEW.TX_OUTPUT_FUNCTION.CLTV\' | translate\"></span>\n          {{::condition.value|formatDate}}\n        </div>\n      </div>\n    </div>\n  </ion-content>\n</ion-popover-view>\n");
$templateCache.put("templates/wallet/view_wallet.html","<ion-view left-buttons=\"leftButtons\" class=\"view-wallet\" id=\"wallet\">\n  <ion-nav-title>\n    <!-- no title-->\n  </ion-nav-title>\n\n  <ion-nav-buttons side=\"secondary\">\n\n    <cs-extension-point name=\"nav-buttons\"></cs-extension-point>\n\n    <button class=\"button button-icon button-clear icon ion-android-more-vertical visible-xs visible-sm\" id=\"helptip-wallet-options-xs\" ng-click=\"showActionsPopover($event)\">\n    </button>\n  </ion-nav-buttons>\n\n  <ion-content scroll=\"true\" class=\"refresher-top-bg refresher-light\" bind-notifier=\"{ rebind:settings.useRelative, locale:$root.settings.locale.id}\">\n\n    <ion-refresher pulling-text=\"{{\'COMMON.BTN_REFRESH\' | translate}}\" on-refresh=\"doUpdate(true)\">\n    </ion-refresher>\n\n    <div class=\"positive-900-bg hero\" id=\"wallet-header\" ng-class=\"{\'hero-qrcode-active\': toggleQRCode}\">\n      <div class=\"content\" ng-if=\"!loading\">\n\n        <i class=\"avatar\" ng-if=\":rebind:!formData.avatar\" ng-class=\":rebind:{\'avatar-wallet\': !formData.isMember, \'avatar-member\': formData.isMember}\"></i>\n        <i class=\"avatar\" ng-if=\":rebind:formData.avatar\" style=\"background-image: url({{:rebind:formData.avatar.src}})\"></i>\n        <h3 class=\"light\">\n          <ng-if ng-if=\":rebind:formData.name\">{{:rebind:formData.name}}</ng-if>\n          <ng-if ng-if=\":rebind:!formData.name && formData.uid\">{{:rebind:formData.uid}}</ng-if>\n          <ng-if ng-if=\":rebind:!formData.name && !formData.uid\"><i class=\"ion-key\"></i> {{:rebind:formData.pubkey | formatPubkey}}</ng-if>\n        </h3>\n\n        <h4 class=\"assertive\"><ng-if ng-if=\":rebind:(formData.name || formData.uid) && !formData.isMember\" translate>WOT.NOT_MEMBER_PARENTHESIS</ng-if></h4>\n      </div>\n      <h4 class=\"content light\" ng-if=\"loading\">\n        <ion-spinner icon=\"android\"></ion-spinner>\n      </h4>\n    </div>\n\n    <div ng-attr-id=\"{{ qrcodeId }}\" class=\"qrcode spin\" ng-class=\"{\'active\': toggleQRCode}\" ng-click=\"toggleQRCode = !toggleQRCode\"></div>\n\n    <!-- Buttons bar-->\n    <a id=\"wallet-share-anchor\"></a>\n    <div class=\"hidden-xs hidden-sm padding text-center\" ng-if=\"!loading\">\n\n      <button class=\"button button-stable button-small-padding icon ion-android-share-alt ink\" ng-click=\"showSharePopover($event)\" title=\"{{\'COMMON.BTN_SHARE\' | translate}}\">\n      </button>\n\n      <button class=\"button button-stable button-small-padding icon ion-loop ink\" ng-click=\"doUpdate()\" title=\"{{\'COMMON.BTN_REFRESH\' | translate}}\">\n      </button>\n\n      <cs-extension-point name=\"buttons\"></cs-extension-point>\n\n      &nbsp;&nbsp;\n\n      <button id=\"helptip-wallet-options\" class=\"button button-stable icon-right ink\" ng-click=\"showActionsPopover($event)\">\n        &nbsp; <i class=\"icon ion-android-more-vertical\"></i>&nbsp;\n        {{:locale:\'COMMON.BTN_OPTIONS\' | translate}}\n      </button>\n\n      <div ng-if=\"formData.requirements.needRenew\">\n        <br>\n        <button class=\"button button-raised button-stable ink\" ng-click=\"renewMembership()\">\n          <i class=\"icon ion-alert-circled assertive\"></i>\n          <span class=\"assertive\">{{:locale:\'ACCOUNT.BTN_MEMBERSHIP_RENEW\' | translate}}</span>\n        </button>\n      </div>\n    </div>\n\n    <div class=\"visible-xs visible-sm padding text-center\" ng-if=\"!loading\">\n      <button class=\"button button-assertive button-small-padding ink\" ng-if=\"isDefaultWallet\" ng-click=\"logout({askConfirm: true})\">\n        <i class=\"icon ion-log-out\"></i>\n        {{\'COMMON.BTN_LOGOUT\' | translate}}\n      </button>\n      <div ng-if=\"formData.requirements.needRenew\">\n        <br>\n        <button class=\"button button-raised icon-left button-stable button-small-padding ink\" ng-click=\"renewMembership()\">\n          <i class=\"icon ion-loop assertive\"></i>\n          <span class=\"assertive\">{{:locale:\'ACCOUNT.BTN_MEMBERSHIP_RENEW\' | translate}}</span>\n        </button>\n      </div>\n    </div>\n\n    <div class=\"row no-padding\">\n      <div class=\"col col-20 hidden-xs hidden-sm\">&nbsp;</div>\n\n      <div class=\"col\">\n\n        <div class=\"list\" ng-class=\"::motion.ionListClass\" ng-hide=\"loading\">\n\n          <span class=\"item item-divider\" translate>WOT.GENERAL_DIVIDER</span>\n\n          <!-- Public key -->\n          <div id=\"helptip-wallet-pubkey\" class=\"item item-icon-left item-text-wrap ink\" on-hold=\"copy(formData.pubkey)\" copy-on-click=\"{{:rebind:formData.pubkey}}\">\n            <i class=\"icon ion-key\"></i>\n            <span>{{:locale:\'COMMON.PUBKEY\'|translate}}</span>\n            <h4 id=\"pubkey\" class=\"dark\">{{:rebind:formData.pubkey}}</h4>\n          </div>\n\n          <!-- Uid + Registration date -->\n          <ion-item class=\"item-icon-left\" ng-if=\":rebind:formData.sigDate||formData.uid\">\n            <i class=\"icon ion-calendar\"></i>\n            <span translate>COMMON.UID</span>\n            <h5 class=\"dark\" ng-if=\":rebind:formData.sigDate\">\n              <span translate>WOT.REGISTERED_SINCE</span>\n              {{:rebind:formData.sigDate | formatDate}}\n            </h5>\n            <span class=\"badge badge-stable\">{{:rebind:formData.uid}}</span>\n          </ion-item>\n\n          <!-- Certifications -->\n          <a id=\"helptip-wallet-certifications\" class=\"item item-icon-left item-icon-right item-text-wrap ink\" ng-if=\"formData.isMember||formData.requirements.pendingMembership||!formData.requirements.needSelf\" ng-click=\"showCertifications()\">\n            <i class=\"icon ion-ribbon-b\"></i>\n            <b ng-if=\"formData.requirements.isSentry\" class=\"ion-star icon-secondary\" style=\"color: yellow; font-size: 16px; left: 25px; top: -7px\"></b>\n            {{:locale:\'ACCOUNT.CERTIFICATION_COUNT\'|translate}}\n            <cs-badge-certification requirements=\"formData.requirements\" parameters=\"::currency.parameters\">\n            </cs-badge-certification>\n            <i class=\"gray icon ion-ios-arrow-right\"></i>\n          </a>\n\n          <!-- Signature stock -->\n          <a id=\"helptip-wallet-given-certifications\" class=\"item item-icon-left item-text-wrap item-icon-right ink visible-xs visible-sm\" ng-if=\"formData.isMember\" ng-click=\"showGivenCertifications()\">\n            <i class=\"icon ion-ribbon-a\"></i>\n            <span translate>WOT.GIVEN_CERTIFICATIONS.SENT</span>\n            <i class=\"gray icon ion-ios-arrow-right\"></i>\n          </a>\n\n          <!-- Account transaction -->\n          <a class=\"item item-icon-left item-icon-right ink\" ng-click=\"showTxHistory()\">\n            <i class=\"icon ion-card\"></i>\n            <span translate>WOT.ACCOUNT_OPERATIONS</span>\n            <i class=\"gray icon ion-ios-arrow-right\"></i>\n          </a>\n\n          <!-- Other wallets -->\n          <a class=\"item item-icon-left item-icon-right ink visible-xs visible-sm\" ng-if=\"isDefaultWallet\" ui-sref=\"app.view_wallets\">\n            <i class=\"icon ion-card\" style=\"top: -5px; left: 22px; font-size: 18px\"></i>\n            <i class=\"icon-secondary ion-card\" style=\"top: 22px; left: 19px; font-size: 20px; background-color: white; width:17px; height: 14px\"></i>\n            <span translate>ACCOUNT.WALLET_LIST.TITLE</span>\n            <span class=\"badge badge-calm\" ng-if=\"formData.children.length>0\">{{:rebind:formData.children.length}}</span>\n            <i class=\"gray icon ion-ios-arrow-right\"></i>\n          </a>\n\n          <!-- Events -->\n          <span class=\"item item-divider\" ng-if=\"formData.events.length\">\n            {{:locale:\'ACCOUNT.EVENTS\' | translate}}\n          </span>\n\n          <div class=\"item item-text-wrap item-icon-left item-wallet-event\" ng-repeat=\"event in formData.events\">\n            <i class=\"icon\" ng-class=\"{\'ion-information-circled royal\': event.type==\'info\',\'ion-alert-circled\': event.type==\'warn\'||event.type==\'error\',\'assertive\': event.type==\'error\',\'ion-clock\': event.type==\'pending\'}\"></i>\n            <span trust-as-html=\"event.message | translate:event.messageParams\"></span>\n          </div>\n\n\n          <cs-extension-point name=\"general\"></cs-extension-point>\n\n          <cs-extension-point name=\"after-general\"></cs-extension-point>\n\n\n       </div>\n      </div>\n\n      <div class=\"col col-20 hidden-xs hidden-sm\">&nbsp;\n      </div>\n    </div>\n  </ion-content>\n\n</ion-view>\n");
$templateCache.put("templates/wallet/view_wallet_tx.html","<ion-view left-buttons=\"leftButtons\" class=\"view-wallet-tx\">\n  <ion-nav-title>\n    <!-- no title on large screen-->\n    <span class=\"visible-xs visible-sm\" ng-if=\"!loading && enableSelectWallet\">\n      <span ng-if=\"formData.name || formData.uid\">{{formData.name || formData.uid}} </span>\n      <i class=\"ion-key\"></i> {{formData.pubkey|formatPubkey}}\n    </span>\n  </ion-nav-title>\n\n  <ion-nav-buttons side=\"secondary\">\n    <cs-extension-point name=\"nav-buttons\"></cs-extension-point>\n\n    <button class=\"button button-icon button-clear visible-xs visible-sm\" ng-if=\"enableSelectWallet\" ng-click=\"showSelectWalletModal()\">\n      <i class=\"ion-arrow-down-b\"></i>\n    </button>\n  </ion-nav-buttons>\n\n  <ion-content scroll=\"true\" class=\"refresher-top-bg refresher-light\" bind-notifier=\"{ rebind:settings.useRelative, locale:settings.locale.id}\">\n\n    <ion-refresher pulling-text=\"{{:locale:\'COMMON.BTN_REFRESH\' | translate}}\" on-refresh=\"doUpdate(true)\">\n    </ion-refresher>\n\n    <div class=\"positive-900-bg hero\">\n      <div class=\"content\" ng-if=\"!loading\">\n        <!-- select wallet button -->\n        <a class=\"hidden-xs hidden-sm\" style=\"color: lightgray\" ng-if=\"enableSelectWallet\" title=\"{{:locale:\'ACCOUNT.SELECT_WALLET_MODAL.TITLE\'|translate}}\" ng-click=\"showSelectWalletPopover($event)\">\n          <span ng-if=\"formData.name || formData.uid\">{{formData.name || formData.uid}} </span>\n          <i class=\"ion-key\"></i> {{formData.pubkey|formatPubkey}}\n          <i class=\"ion-arrow-down-b\"></i>\n        </a>\n\n        <h1 class=\"light\">\n          <span ng-bind-html=\":balance:rebind:formData.balance | formatAmount:{currency: $root.currency.name}\"></span>\n        </h1>\n        <h4 ng-if=\"!loading && $root.settings.expertMode\" style=\"font-style: italic\">\n          (<span ng-bind-html=\":balance:rebind:formData.balance | formatAmount:{useRelative:!$root.settings.useRelative, currency: $root.currency.name}\"></span>)\n        </h4>\n        <div class=\"helptip-anchor-center\">\n          <a id=\"helptip-wallet-balance\">&nbsp;</a>\n        </div>\n      </div>\n\n      <h2 class=\"content light\" ng-if=\"loading\">\n        <ion-spinner icon=\"android\"></ion-spinner>\n      </h2>\n    </div>\n\n    <!-- Buttons bar-->\n    <div class=\"hidden-xs hidden-sm padding text-center\" ng-if=\"!loading\">\n\n      <button class=\"button button-stable button-small-padding icon ion-loop ink\" ng-click=\"doUpdate()\" title=\"{{\'COMMON.BTN_REFRESH\' | translate}}\">\n      </button>\n\n      <button class=\"button button-stable button-small-padding icon ion-android-download ink\" ng-click=\"downloadHistoryFile()\" title=\"{{\'COMMON.BTN_DOWNLOAD_ACCOUNT_STATEMENT\' | translate}}\">\n      </button>\n\n      <cs-extension-point name=\"buttons\"></cs-extension-point>\n\n      &nbsp;&nbsp;\n\n      <button class=\"button button-calm ink\" ng-click=\"showTransferModal()\">\n        {{:locale:\'COMMON.BTN_SEND_MONEY\' | translate}}\n      </button>\n  </div>\n\n    <div class=\"row no-padding\">\n\n      <div class=\"col col-15 hidden-xs hidden-sm\">&nbsp;</div>\n\n      <div class=\"col\">\n\n\n\n        <div class=\"list\" ng-class=\"::motion.ionListClass\">\n\n          <!-- Errors transactions-->\n          <a class=\"item item-icon-left item-icon-right ink\" ng-if=\"formData.tx.errors && formData.tx.errors.length\" ng-click=\"showTxErrors()\">\n            <i class=\"icon ion-alert-circled\"></i>\n            {{:locale:\'ACCOUNT.ERROR_TX\'|translate}}\n            <div class=\"badge badge-assertive\">\n              {{formData.tx.errors.length}}\n            </div>\n            <i class=\"gray icon ion-ios-arrow-right\"></i>\n          </a>\n\n          <!-- Pending transactions -->\n          <span class=\"item item-pending item-divider\" ng-if=\"formData.tx.pendings && formData.tx.pendings.length\">\n            {{:locale:\'ACCOUNT.PENDING_TX\'|translate}}\n          </span>\n\n          <div class=\"item item-pending item-tx item-icon-left\" ng-repeat=\"tx in formData.tx.pendings\" ng-init=\"pending=true;\" ng-include=\"\'templates/wallet/item_tx.html\'\">\n          </div>\n\n          <!-- Validating transactions -->\n          <span class=\"item item-pending item-divider\" ng-if=\"formData.tx.validating &&formData.tx.validating.length\">\n            {{:locale:\'ACCOUNT.VALIDATING_TX\'|translate}}\n          </span>\n\n          <div class=\"item item-pending item-tx item-icon-left\" ng-repeat=\"tx in formData.tx.validating\" ng-init=\"validating=true;\" ng-include=\"\'templates/wallet/item_tx.html\'\">\n          </div>\n\n          <!-- Last Transactions -->\n          <span class=\"item item-divider\" ng-if=\"!loading\">\n            {{:locale:\'ACCOUNT.LAST_TX\'|translate}}\n            <a id=\"helptip-wallet-tx\" style=\"position: relative; bottom: 0; right: 0px\">&nbsp;</a>\n          </span>\n\n          <span class=\"item padding\" ng-if=\"!loading && !formData.tx.history.length\">\n            <span class=\"gray\">{{:locale:\'ACCOUNT.NO_TX\'|translate}}</span>\n          </span>\n\n          <div ng-repeat=\"tx in formData.tx.history\" class=\"item item-tx item-icon-left\" ng-include=\"::!tx.isUD ? \'templates/wallet/item_tx.html\' : \'templates/wallet/item_ud.html\'\">\n          </div>\n          <div class=\"item item-text-wrap text-center\" ng-if=\"formData.tx.fromTime > 0\">\n            <p>\n              <a ng-click=\"showMoreTx()\">{{:locale:\'ACCOUNT.SHOW_MORE_TX\'|translate}}</a>\n              <span class=\"gray\" translate=\"ACCOUNT.TX_FROM_DATE\" translate-values=\"{fromTime: formData.tx.fromTime}\"></span>\n              <span class=\"gray\">|</span>\n              <a ng-click=\"showMoreTx(-1)\" translate>ACCOUNT.SHOW_ALL_TX</a>\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"col col-15 hidden-xs hidden-sm\">&nbsp;</div>\n\n    </div>\n\n\n    \n  </ion-content>\n\n  <button id=\"fab-transfer\" ng-show=\"!loading\" class=\"button button-fab button-fab-bottom-right button-energized-900 hidden-md hidden-lg drop ng-hide\" ng-click=\"showTransferModal()\">\n    <i class=\"icon ion-android-send\"></i>\n  </button>\n</ion-view>\n");
$templateCache.put("templates/wallet/view_wallet_tx_error.html","<ion-view left-buttons=\"leftButtons\" class=\"view-wallet-tx-error\">\n  <ion-nav-title>\n    <!-- no title-->\n  </ion-nav-title>\n\n  <ion-nav-buttons side=\"secondary\">\n    <cs-extension-point name=\"nav-buttons\"></cs-extension-point>\n  </ion-nav-buttons>\n\n  <ion-content scroll=\"true\" class=\"refresher-top-bg\" bind-notifier=\"{ rebind:settings.useRelative, locale:settings.locale.id}\">\n\n    <ion-refresher pulling-text=\"{{\'COMMON.BTN_REFRESH\' | translate}}\" on-refresh=\"doUpdate(true)\">\n    </ion-refresher>\n\n    <!-- Buttons bar -->\n    <div class=\"hidden-xs hidden-sm padding text-center\">\n\n      <button class=\"button button-stable button-small-padding icon ion-loop ink\" ng-click=\"doUpdate()\" title=\"{{\'COMMON.BTN_REFRESH\' | translate}}\">\n      </button>\n    </div>\n\n    <div class=\"row no-padding\">\n      <div class=\"col col-20 hidden-xs hidden-sm\">&nbsp;\n      </div>\n\n      <div class=\"col list\" ng-class=\"::motion.ionListClass\">\n\n        <!-- Pending received TX -->\n        <span class=\"item item-divider\">\n          <span translate>ACCOUNT.PENDING_TX_RECEIVED</span>\n          <div class=\"badge item-note\">\n            <span ng-if=\"!$root.settings.useRelative\">({{$root.currency.name | abbreviate}})</span>\n            <span ng-if=\"$root.settings.useRelative\">({{\'COMMON.UD\' | translate}}<sub>{{$root.currency.name | abbreviate}}</sub>)</span>\n          </div>\n        </span>\n\n        <span class=\"item padding\" ng-if=\"!loading && !hasReceivedTx()\">\n            <span class=\"gray\">{{:locale:\'ACCOUNT.NO_TX\'|translate}}</span>\n        </span>\n\n\n        <div class=\"item item-pending item-tx item-icon-left\" ng-repeat=\"tx in formData.tx.errors | filter: filterReceivedTx\" ng-init=\"pending=true;\" ng-include=\"\'templates/wallet/item_tx.html\'\">\n        </div>\n\n        <!-- Error sent TX -->\n        <span class=\"item item-divider\">\n          <span translate>ACCOUNT.ERROR_TX_SENT</span>\n          <div class=\"badge item-note\">\n            <span ng-if=\"!$root.settings.useRelative\">({{$root.currency.name | abbreviate}})</span>\n            <span ng-if=\"$root.settings.useRelative\">({{\'COMMON.UD\' | translate}}<sub>{{$root.currency.name | abbreviate}}</sub>)</span>\n          </div>\n        </span>\n\n        <span class=\"item padding\" ng-if=\"!loading && !hasSentTx()\">\n            <span class=\"gray\">{{:locale:\'ACCOUNT.NO_TX\'|translate}}</span>\n        </span>\n\n        <div class=\"item item-pending item-tx item-icon-left\" ng-repeat=\"tx in formData.tx.errors | filter: filterSentTx\" ng-init=\"error=true;\" ng-include=\"\'templates/wallet/item_tx.html\'\">\n        </div>\n\n      </div>\n\n      <div class=\"col col-20 hidden-xs hidden-sm\">&nbsp;\n      </div>\n    </div>\n  </ion-content>\n\n  <!--button id=\"fab-redo-transfer\"\n          ng-if=\"walletData\"\n          class=\"button button-fab button-fab-bottom-right button-energized-900 hidden-md hidden-lg drop\"\n          ng-click=\"redoTransfer()\">\n    <i class=\"icon ion-refresh\"></i>\n  </button-->\n</ion-view>\n");
$templateCache.put("templates/wot/item_certification.html","\n          <i class=\"item-image\" ng-if=\"!cert.avatar\" ng-class=\"{\'ion-card\': !cert.isMember, \'ion-person\': cert.isMember}\"></i>\n          <i class=\"item-image avatar\" ng-if=\"cert.avatar\" style=\"background-image: url({{::cert.avatar.src}})\"></i>\n\n            <span ng-if=\"cert.isMember\">\n              <h3>\n                <i class=\"icon ion-clock\" ng-if=\"cert.pending\"> </i>\n                <span class=\"positive\">\n                  {{::cert.name||cert.uid}}\n                </span>\n              </h3>\n              <h4 class=\"gray\">\n                <i class=\"ion-key\"></i>\n                {{::cert.pubkey | formatPubkey}}\n                <span class=\"gray\"> | {{::cert.time|formatDate}}</span>\n                <span class=\"gray\" ng-if=\"$root.settings.expertMode\"> | {{::cert.pending ? \'WOT.SIGNED_ON_BLOCK\' : \'WOT.WRITTEN_ON_BLOCK\' | translate:cert}}</span>\n              </h4>\n            </span>\n            <span ng-if=\"!cert.isMember\">\n              <h3>\n                <i class=\"icon ion-clock\" ng-if=\"cert.pending\"> </i>\n                <span ng-if=\"cert.uid\" class=\"dark\">\n                  {{::cert.name||cert.uid}}\n                </span>\n                <span ng-if=\"!cert.uid\" class=\"gray\">\n                  <i class=\"ion-key\"> </i>\n                  {{::cert.pubkey | formatPubkey}}\n                </span>\n              </h3>\n              <h5 class=\"assertive\">\n                {{::\'WOT.NOT_MEMBER_PARENTHESIS\'|translate}}\n              </h5>\n              <h4 class=\"gray\">\n                <span ng-if=\"cert.uid\">\n                  <i class=\"ion-key\"></i>\n                  {{::cert.pubkey | formatPubkey}}\n                </span>\n                <span class=\"gray\"> | {{::cert.time|formatDate}}</span>\n                <span class=\"gray\" ng-if=\"$root.settings.expertMode\"> | {{::cert.pending ? \'WOT.SIGNED_ON_BLOCK\' : \'WOT.WRITTEN_ON_BLOCK\' | translate:cert}}</span>\n              </h4>\n            </span>\n            <div class=\"badge badge-stable\" ng-class=\"{\'badge-energized\': cert.willExpire}\" ng-if=\"cert.expiresIn\">\n              {{::cert.expiresIn | formatDurationTo}}\n            </div>\n            <div class=\"badge badge-assertive\" ng-if=\"!cert.expiresIn\">\n              {{::\'WOT.EXPIRED\' | translate}}\n            </div>\n");
$templateCache.put("templates/wot/item_content_identity.html","<i ng-if=\"::!item.avatar\" class=\"item-image icon ion-person\"></i>\n<i ng-if=\"::item.avatar\" class=\"item-image avatar\" style=\"background-image: url({{::item.avatar.src}})\"></i>\n\n<h2>\n  <ng-if ng-if=\"::item.name||item.uid\" ng-bind-html=\"::item.name||item.uid\"></ng-if>\n  <ng-if ng-if=\"::!item.name && !item.uid\">{{::item.pubkey|formatPubkey}}</ng-if>\n</h2>\n\n<h4 class=\"gray\" ng-class=\"{\'pull-right\': !smallscreen}\" ng-if=\"::item.sigDate\">\n  <i class=\"ion-clock\"></i>\n  {{::\'WOT.LOOKUP.REGISTERED\' | translate:item}}\n</h4>\n<h4 class=\"gray\" ng-class=\"{\'pull-right\': !smallscreen}\" ng-if=\"item.memberDate\">\n  <i class=\"ion-clock\"></i>\n  {{::\'WOT.LOOKUP.MEMBER_FROM\' | translate:item}}\n</h4>\n<h4 class=\"gray\">\n  <span class=\"positive\" ng-if=\"::item.name && item.uid\">\n    <i class=\"ion-person\"></i>\n    {{::item.uid}}&nbsp;\n  </span>\n  <b class=\"ion-key\"></b>\n  {{::item.pubkey | formatPubkey}}\n  <span ng-if=\"::!item.uid\" class=\"assertive\" translate>WOT.NOT_MEMBER_PARENTHESIS</span>\n  <span ng-if=\"::item.revoked\" class=\"assertive\" translate>WOT.IDENTITY_REVOKED_PARENTHESIS</span>\n</h4>\n<h4 ng-if=\"::item.events||item.tags\">\n  <span ng-repeat=\"event in ::item.events\" class=\"assertive\">\n    <i class=\"ion-alert-circled\" ng-if=\"::!item.valid\"></i>\n    <span ng-bind-html=\"::event.message|translate:event.messageParams\"></span>\n  </span>\n  <span ng-if=\"::item.tags\" class=\"dark\">\n   <ng-repeat ng-repeat=\"tag in ::item.tags\">\n     #<ng-bind-html ng-bind-html=\"::tag\"></ng-bind-html>\n   </ng-repeat>\n  </span>\n</h4>\n");
$templateCache.put("templates/wot/items_given_certifications.html","\n<div class=\"list given-certifications\" ng-class=\"::motions.givenCertifications.ionListClass\">\n  <span class=\"item item-divider hidden-xs\">\n    <span translate>WOT.GIVEN_CERTIFICATIONS.SUMMARY</span>\n  </span>\n\n  <!-- Signature stock -->\n  <div id=\"helptip-certs-stock\" class=\"item item-icon-left item-text-wrap ink\">\n    <i class=\"icon ion-ribbon-a\"></i>\n    <span translate>WOT.GIVEN_CERTIFICATIONS.SENT</span>\n\n    <cs-badge-given-certification identity=\"formData\" parameters=\"$root.currency.parameters\">\n    </cs-badge-given-certification>\n  </div>\n\n  <!-- Error certifications count -->\n  <div class=\"item item-icon-left item-text-wrap ink\" ng-if=\"formData.given_cert_error.length\">\n    <i class=\"icon ion-alert-circled\"></i>\n    <span translate>WOT.GIVEN_CERTIFICATIONS.ERROR</span>\n\n    <span class=\"badge badge-assertive\">\n      {{formData.given_cert_error.length}}\n    </span>\n  </div>\n\n  <!-- pending given certifications -->\n  <span class=\"item item-divider\" ng-if=\"formData.given_cert_pending.length\">\n    <span translate>WOT.GIVEN_CERTIFICATIONS.PENDING_LIST</span>\n    <div class=\"badge item-note\" style=\"text-align: right !important\" translate>WOT.NOT_WRITTEN_EXPIRE_IN</div>\n  </span>\n\n  <a class=\"item item-avatar ink\" ng-repeat=\"cert in formData.given_cert_pending\" ui-sref=\"app.wot_identity({pubkey:cert.pubkey, uid:cert.uid})\" ng-include=\"\'templates/wot/item_certification.html\'\">\n  </a>\n\n  <!-- validated given certifications -->\n  <span class=\"item item-divider\">\n    <span translate>WOT.GIVEN_CERTIFICATIONS.LIST</span>\n    <div class=\"badge item-note\" translate>WOT.EXPIRE_IN</div>\n  </span>\n\n  <span class=\"item gray\" ng-if=\"!formData.given_cert.length\" translate>\n    WOT.NO_GIVEN_CERTIFICATION\n  </span>\n\n  <a class=\"item item-avatar ink\" ng-repeat=\"cert in formData.given_cert\" ui-sref=\"app.wot_identity({pubkey:cert.pubkey, uid:cert.uid})\" ng-include=\"\'templates/wot/item_certification.html\'\">\n  </a>\n</div>\n");
$templateCache.put("templates/wot/items_received_certifications.html","        <div class=\"list certifications\" ng-class=\"::motions.receivedCertifications.ionListClass\">\n          <span class=\"item item-divider hidden-xs\">\n            <span translate>WOT.CERTIFICATIONS.SUMMARY</span>\n          </span>\n\n          <!-- Certifications count -->\n          <div id=\"helptip-received-certs\" class=\"item item-icon-left item-text-wrap ink\">\n            <i class=\"icon ion-ribbon-b\"></i>\n            <b ng-if=\"formData.requirements.isSentry\" class=\"ion-star icon-secondary\" style=\"color: yellow; font-size: 16px; left: 25px; top: -7px\"></b>\n\n            <span translate>WOT.CERTIFICATIONS.RECEIVED</span>\n            <h4 class=\"gray\" ng-if=\"formData.requirements.isSentry\" translate>WOT.CERTIFICATIONS.SENTRY_MEMBER</h4>\n\n            <cs-badge-certification cs-id=\"helptip-wot-view-certifications-count\" requirements=\"formData.requirements\" parameters=\"$root.currency.parameters\">\n            </cs-badge-certification>\n          </div>\n\n          <!-- Error certifications count -->\n          <div class=\"item item-icon-left item-text-wrap ink\" ng-if=\"formData.received_cert_error.length\">\n            <i class=\"icon ion-alert-circled\"></i>\n            <span translate>WOT.CERTIFICATIONS.ERROR</span>\n\n            <span class=\"badge badge-assertive\">\n              {{formData.received_cert_error.length}}\n            </span>\n          </div>\n\n          <!-- pending certifications -->\n          <span class=\"item item-divider\" ng-if=\"formData.received_cert_pending.length\">\n            <span translate>WOT.CERTIFICATIONS.PENDING_LIST</span>\n            <div class=\"badge item-note\" style=\"text-align: right !important\" translate>WOT.NOT_WRITTEN_EXPIRE_IN</div>\n          </span>\n\n          <a class=\"item item-avatar ink\" ng-repeat=\"cert in formData.received_cert_pending\" ui-sref=\"app.wot_identity({pubkey:cert.pubkey, uid:cert.uid})\" ng-include=\"\'templates/wot/item_certification.html\'\">\n          </a>\n\n          <!-- valid certifications -->\n          <span class=\"item item-divider\">\n            <span translate>WOT.CERTIFICATIONS.LIST</span>\n            <div class=\"badge item-note\" translate>WOT.EXPIRE_IN</div>\n          </span>\n\n          <span class=\"item gray\" ng-if=\"!formData.received_cert.length\" translate>WOT.NO_CERTIFICATION</span>\n\n          <a class=\"item item-avatar ink\" ng-repeat=\"cert in formData.received_cert\" ui-sref=\"app.wot_identity({pubkey:cert.pubkey, uid:cert.uid})\" ng-include=\"\'templates/wot/item_certification.html\'\">\n          </a>\n        </div>\n");
$templateCache.put("templates/wot/lookup.html","<ion-view left-buttons=\"leftButtons\">\n\n  <ion-tabs class=\"tabs-positive tabs-icon-top\">\n\n    <!--ion-tab title=\"{{\'WOT.CONTACTS.TITLE\'|translate}}\" icon=\"ion-person\"\n             ui-sref=\"app.wot_lookup.tab_contacts\">\n      <i class=\"ion-person\"></i>\n      <ion-nav-view name=\"tab\"></ion-nav-view>\n    </ion-tab-->\n\n\n    <ion-tab title=\"{{\'WOT.LOOKUP.TITLE\'|translate}}\" icon=\"ion-person-stalker\" ui-sref=\"app.wot_lookup.tab_search\">\n      <ion-nav-view name=\"tab\"></ion-nav-view>\n    </ion-tab>\n\n\n    <!-- Allow extension here -->\n    <cs-extension-point name=\"tabs\"></cs-extension-point>\n\n  </ion-tabs>\n</ion-view>\n");
$templateCache.put("templates/wot/lookup_form.html","<div class=\"lookupForm\">\n\n  <div class=\"item no-padding\">\n\n    <div class=\"double-padding-x padding-top-xs item-text-wrap\" ng-if=\"::allowMultiple\" style=\"height: 36px\">\n\n      <div class=\"gray padding-top\" ng-if=\"!selection.length && parameters.help\">{{::parameters.help|translate}}</div>\n\n      <div ng-repeat=\"identity in selection track by identity.id\" class=\"button button-small button-text button-stable button-icon-event ink\" ng-class=\"{\'button-text-positive\': identity.selected}\">\n        <span ng-bind-html=\"identity.name||identity.uid||(identity.pubkey|formatPubkey)\"></span>\n        <i class=\"icon ion-close\" ng-click=\"removeSelection(identity, $event)\">&nbsp;&nbsp;</i>\n      </div>\n\n    </div>\n\n    <div class=\"item-input\">\n      <i class=\"icon ion-search placeholder-icon\"></i>\n\n      <input type=\"text\" class=\"visible-xs visible-sm\" placeholder=\"{{\'WOT.SEARCH_HELP\'|translate}}\" ng-model=\"search.text\" ng-model-options=\"{ debounce: 650 }\" ng-change=\"doSearch()\" on-return=\"doSearchText()\" select-on-click>\n      <input type=\"text\" class=\"hidden-xs hidden-sm\" id=\"{{wotSearchTextId}}\" placeholder=\"{{\'WOT.SEARCH_HELP\'|translate}}\" ng-model=\"search.text\" on-return=\"doSearchText()\">\n      <div class=\"helptip-anchor-center\">\n        <a id=\"helptip-wot-search-text\"></a>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"padding-top padding-xs\" style=\"display: block; height: 60px\" ng-class=\"::{\'hidden-xs\': !showResultLabel}\">\n    <div class=\"pull-left\" ng-if=\"!search.loading && showResultLabel\">\n      <ng-if ng-if=\"search.type==\'newcomers\'\">\n        <h4 translate>WOT.LOOKUP.NEWCOMERS</h4>\n        <small class=\"gray no-padding\" ng-if=\"search.total\">{{\'WOT.LOOKUP.NEWCOMERS_COUNT\'|translate:{count: search.total} }}</small>\n      </ng-if>\n      <ng-if ng-if=\"search.type==\'pending\'\">\n        <h4 translate>WOT.LOOKUP.PENDING</h4>\n        <small class=\"gray no-padding\" ng-if=\"search.total\">{{\'WOT.LOOKUP.PENDING_COUNT\'|translate:{count: search.total} }}</small>\n      </ng-if>\n      <h4 ng-if=\"search.type==\'text\'\">\n        <span translate>COMMON.RESULTS_LIST</span>\n        <small class=\"gray\" ng-if=\"search.total\">({{search.total}})</small>\n      </h4>\n    </div>\n\n\n    <div class=\"pull-right hidden-xs hidden-sm\">\n      <a ng-if=\"enableFilter\" class=\"button button-text button-small ink\" ng-class=\"{\'button-text-positive\': search.type==\'newcomers\'}\" ng-click=\"doGetNewcomers()\">\n        <i class=\"icon ion-person-stalker\"></i>\n        {{\'WOT.LOOKUP.BTN_NEWCOMERS\' | translate}}\n      </a>\n      <a ng-if=\"enableFilter\" class=\"button button-text button-small ink\" ng-class=\"{\'button-text-positive\': search.type==\'pending\'}\" ng-click=\"doGetPending()\" class=\"badge-balanced\">\n        <i class=\"icon ion-clock\"></i>\n        {{\'WOT.LOOKUP.BTN_PENDING\' | translate}}\n      </a>\n\n      <!-- Allow extension here -->\n      <cs-extension-point name=\"filter-buttons\"></cs-extension-point>\n      &nbsp;\n      <button class=\"button button-small button-stable ink\" ng-click=\"doSearch()\">\n        {{\'COMMON.BTN_SEARCH\' | translate}}\n      </button>\n\n      <button class=\"button button-small button-positive {{parameters.okType}} ink\" ng-if=\"::allowMultiple\" ng-disabled=\"!selection.length\" ng-click=\"next()\">\n        {{parameters.okText||\'COMMON.BTN_NEXT\' | translate}}\n      </button>\n    </div>\n  </div>\n\n  <div class=\"text-center\" ng-if=\"search.loading\">\n    <p class=\"gray\" ng-if=\"::$root.currency.initPhase\" translate>WOT.SEARCH_INIT_PHASE_WARNING</p>\n    <ion-spinner icon=\"android\"></ion-spinner>\n  </div>\n\n  <ng-if ng-if=\"!search.loading\">\n    <div class=\"assertive padding\" ng-if=\"!search.results.length\">\n      <span ng-if=\"search.type==\'text\'\" translate>COMMON.SEARCH_NO_RESULT</span>\n      <span ng-if=\"search.type==\'pending\'\" translate>WOT.LOOKUP.NO_PENDING</span>\n      <span ng-if=\"search.type==\'newcomers\'\" translate>WOT.LOOKUP.NO_NEWCOMERS</span>\n    </div>\n\n    <!-- simple selection + device -->\n    \n\n    <!-- simple selection + no device -->\n    <!--removeIf(device)-->\n    <div ng-if=\"::!allowMultiple\" class=\"list {{::motion.ionListClass}}\">\n\n      <div ng-repeat=\"item in search.results track by item.id\" id=\"helptip-wot-search-result-{{$index}}\" ng-class=\"::{\'item-avatar item-icon-right ink\': !item.divider, \'item-divider \': item.divider}\" class=\"item item-border-large {{::item.ionItemClass}}\" ng-click=\"::select(item)\">\n\n        <!-- divider -->\n        <span ng-if=\"::item.divider\">{{::(\'WOT.SEARCH.DIVIDER_\' + item.index)|upper|translate}}</span>\n\n        <!-- item -->\n        <ng-include ng-if=\"::!item.divider\" src=\"item.templateUrl || \'templates/wot/item_content_identity.html\'\"></ng-include>\n\n        <i ng-if=\"::!item.divider\" class=\"icon ion-ios-arrow-right\"></i>\n      </div>\n    </div>\n    <!--endRemoveIf(device)-->\n\n    <!-- multi selection -->\n    <div ng-if=\"::allowMultiple\" class=\"list {{::motion.ionListClass}}\">\n\n      <ion-checkbox ng-repeat=\"item in search.results track by item.id\" ng-model=\"item.checked\" class=\"item item-border-large item-avatar ink\" ng-click=\"toggleCheck($index, $event)\">\n        <ng-include src=\"\'templates/wot/item_content_identity.html\'\"></ng-include>\n      </ion-checkbox>\n    </div>\n\n    <ion-infinite-scroll ng-if=\"search.hasMore\" spinner=\"android\" on-infinite=\"showMore()\" distance=\"20%\">\n    </ion-infinite-scroll>\n\n  </ng-if>\n</div>\n");
$templateCache.put("templates/wot/lookup_lg.html","<ion-view>\n  <ion-nav-title>\n    {{\'MENU.WOT\' | translate}}\n  </ion-nav-title>\n\n  <ion-nav-buttons side=\"secondary\">\n    \n    <button class=\"button button-icon button-clear visible-xs visible-sm\" ng-click=\"showActionsPopover($event)\">\n      <i class=\"icon ion-android-funnel\"></i>\n    </button>\n  </ion-nav-buttons>\n\n  <ion-content class=\"padding no-padding-xs\" scroll=\"true\">\n\n    <!-- Allow extension here -->\n    <cs-extension-point name=\"top\"></cs-extension-point>\n\n    <ng-include src=\"\'templates/wot/lookup_form.html\'\"></ng-include>\n  </ion-content>\n</ion-view>\n");
$templateCache.put("templates/wot/lookup_popover_actions.html","<ion-popover-view class=\"fit has-header visible-sm visible-xs\">\n  <ion-header-bar>\n    <h1 class=\"title\" translate>COMMON.POPOVER_FILTER_TITLE</h1>\n  </ion-header-bar>\n  <ion-content scroll=\"false\">\n    <div class=\"list item-text-wrap\">\n\n      <a class=\"item item-icon-left ink\" ng-click=\"doGetNewcomers()\">\n        <i class=\"icon ion-person\"></i>\n        {{\'WOT.LOOKUP.BTN_NEWCOMERS\' | translate}}\n      </a>\n\n      <a class=\"item item-icon-left ink\" ng-click=\"doGetPending()\">\n        <i class=\"icon ion-clock\"></i>\n        {{\'WOT.LOOKUP.BTN_PENDING\' | translate}}\n      </a>\n\n    </div>\n  </ion-content>\n</ion-popover-view>\n");
$templateCache.put("templates/wot/modal_lookup.html","<ion-modal-view id=\"wotLookup\" class=\"modal-full-height\">\n\n  <ion-header-bar class=\"bar-positive\">\n    <button class=\"button button-clear\" ng-click=\"closeModal()\" translate=\"\">COMMON.BTN_CANCEL</button>\n\n    <h1 class=\"title hidden-xs\">\n      {{::parameters.title?parameters.title:\'WOT.MODAL.TITLE\'|translate}}\n    </h1>\n\n    <button class=\"button button-clear icon-right visible-xs ink\" ng-if=\"allowMultiple && selection.length\" ng-click=\"closeModal(selection)\">\n      {{::parameters.okText||\'COMMON.BTN_NEXT\' | translate}}\n      <i ng-if=\"::!parameters.okText||parameters.okIcon\" class=\"icon {{::parameters.okIcon||\'ion-ios-arrow-right\'}}\"></i>\n    </button>\n  </ion-header-bar>\n\n  <ion-content class=\"padding no-padding-xs\" scroll=\"true\">\n\n    <div class=\"visible-xs visible-sm text-right stable-bg stable\">\n      \n      <button class=\"button button-icon button-small-padding dark ink\" ng-click=\"showActionsPopover($event)\">\n        <i class=\"icon ion-android-funnel\"></i>\n      </button>\n    </div>\n\n    <ng-include src=\"\'templates/wot/lookup_form.html\'\"></ng-include>\n  </ion-content>\n</ion-modal-view>\n");
$templateCache.put("templates/wot/modal_select_pubkey_identity.html","<ion-modal-view id=\"transfer\" class=\"modal-full-height modal-transfer\">\n  <ion-header-bar class=\"bar-positive\">\n    <button class=\"button button-clear\" ng-click=\"closeModal()\" translate>COMMON.BTN_CANCEL</button>\n    <h1 class=\"title\" translate>ACCOUNT.SELECT_IDENTITY_MODAL.TITLE</h1>\n  </ion-header-bar>\n\n  <ion-content scroll=\"true\">\n\n    <div class=\"padding\">\n      <p trust-as-html=\"\'ACCOUNT.SELECT_IDENTITY_MODAL.HELP\'|translate:{pubkey: pubkey}\"></p>\n    </div>\n\n    <ion-list>\n      <ion-item class=\"item-avatar item-icon-right\" ng-repeat=\"item in identities\" ng-click=\"closeModal(item)\">\n\n        <i class=\"item-image icon ion-person\"></i>\n\n        <h2>{{item.uid}}</h2>\n\n        <h4 class=\"gray\">\n          <b class=\"ion-key\"></b>\n          {{::item.pubkey | formatPubkey}}\n          <span ng-if=\"::!item.revoked && !item.pendingRevocation && !item.isMember\" class=\"assertive\" translate>WOT.NOT_MEMBER_PARENTHESIS</span>\n          <span ng-if=\"::item.revoked || item.pendingRevocation\" class=\"assertive bold\" translate>WOT.IDENTITY_REVOKED_PARENTHESIS</span>\n        </h4>\n\n        <ng-if ng-if=\"::!item.revoked && !item.pendingRevocation && (item.certificationCount || item.pendingCertificationCount)\">\n\n          <!-- certification count -->\n          <cs-badge-certification requirements=\"item\" parameters=\"$root.currency.parameters\"></cs-badge-certification>\n\n          <!-- certification label -->\n          <div class=\"gray badge badge-secondary\">\n            <span translate>ACCOUNT.CERTIFICATION_COUNT</span>\n          </div>\n        </ng-if>\n\n        <i class=\"icon ion-ios-arrow-right\"></i>\n      </ion-item>\n    </ion-list>\n\n  </ion-content>\n\n</ion-modal-view>\n");
$templateCache.put("templates/wot/view_certifications.html","<ion-view left-buttons=\"leftButtons\">\n  <ion-nav-title>\n    <span class=\"visible-xs visible-sm\">{{::formData.name||formData.uid}}</span>\n    <span class=\"hidden-xs hidden-sm\" ng-if=\"!loading\" translate=\"WOT.CERTIFICATIONS.TITLE\" translate-values=\"{uid: formData.name || formData.uid}\"></span>\n  </ion-nav-title>\n\n  <ion-nav-buttons side=\"secondary\">\n    <!-- Allow extension here -->\n    <cs-extension-point name=\"nav-buttons\"></cs-extension-point>\n  </ion-nav-buttons>\n\n  <ion-content class=\"certifications certifications-lg\">\n\n    <ion-refresher pulling-text=\"{{\'COMMON.BTN_REFRESH\' | translate}}\" on-refresh=\"doUpdate()\">\n    </ion-refresher>\n\n    <!-- Buttons bar -->\n    <div class=\"hidden-xs hidden-sm text-center padding\">\n      <button class=\"button button-stable button-small-padding icon ion-loop ink\" ng-click=\"doUpdate()\" title=\"{{\'COMMON.BTN_REFRESH\' | translate}}\">\n      </button>\n\n      <button id=\"helptip-certs-certify\" class=\"button button-raised button-calm icon-left ion-ribbon-b\" ng-if=\"canCertify\" ng-click=\"certify()\" ng-disabled=\"disableCertifyButton\">\n        {{\'WOT.BTN_CERTIFY\' | translate}}\n      </button>\n      <button id=\"helptip-certs-select-certify\" class=\"button button-raised button-calm icon-left\" ng-if=\"canSelectAndCertify\" ng-click=\"selectAndCertify()\">\n        {{\'WOT.BTN_SELECT_AND_CERTIFY\' | translate}}\n      </button>\n\n      <!-- Allow extension here -->\n      <cs-extension-point name=\"buttons\"></cs-extension-point>\n    </div>\n\n    <div class=\"center padding\" ng-if=\"loading\">\n      <ion-spinner icon=\"android\"></ion-spinner>\n    </div>\n\n    <!-- certifications tables -->\n    <div class=\"row responsive-sm responsive-md responsive-lg\">\n      <!-- Received certifications -->\n      <div class=\"col no-padding\" ng-if=\"motions.receivedCertifications.enable\">\n        <ng-include src=\"\'templates/wot/items_received_certifications.html\'\"></ng-include>\n      </div>\n\n      <!-- Avatar -->\n      <div class=\"col col-20 col-avatar hidden-xs hidden-sm hidden-md no-padding\" style=\"margin-top: 100px\" ng-if=\"motions.avatar.enable\">\n        <div class=\"row no-padding\" ng-class=\"::motions.avatar.ionListClass\">\n          <div class=\"col text-center no-padding gray\" style=\"margin-top: 30px\">\n            <i class=\"icon ion-arrow-right-a\" style=\"font-size:30px\"></i>\n          </div>\n          <div class=\"col text-center no-padding\">\n            <a style=\"text-decoration: none\" ui-sref=\"app.wot_identity({pubkey: formData.pubkey, uid: formData.uid})\">\n              <i class=\"avatar avatar-large\" ng-if=\"!formData.avatar\" ng-class=\"{\'avatar-wallet\': !formData.isMember, \'avatar-member\': formData.isMember}\"></i>\n              <i class=\"avatar avatar-large\" ng-if=\"formData.avatar\" style=\"background-image: url({{::formData.avatar.src}})\"></i>\n              <h4 class=\"text-center\" ng-class=\"{\'positive\': formData.isMember, \'gray\': !formData.isMember}\">\n                {{::formData.name||formData.uid}}\n              </h4>\n              <h5 class=\"text-center gray\">\n                <i class=\"icon ion-key\"></i> {{formData.pubkey|formatPubkey}}\n              </h5>\n              <h5 class=\"assertive\">\n                <span ng-if=\"::(formData.name || formData.uid) && !formData.isMember && !revoked\" translate>WOT.NOT_MEMBER_PARENTHESIS</span>\n                <b ng-if=\"::(formData.name || formData.uid) && !formData.isMember && revoked\" translate>WOT.IDENTITY_REVOKED_PARENTHESIS</b>\n                <b ng-if=\"::(formData.name || formData.uid) && formData.isMember && revoked\" translate>WOT.MEMBER_PENDING_REVOCATION_PARENTHESIS</b>\n              </h5>\n            </a>\n          </div>\n          <div class=\"col text-center no-padding gray\" style=\"margin-top: 30px\">\n            <i class=\"icon ion-arrow-right-a\" style=\"font-size:30px\"></i>\n          </div>\n        </div>\n      </div>\n\n      <!-- Given certifications -->\n      <div class=\"col no-padding\" ng-if=\"motions.givenCertifications.enable\">\n        <ng-include src=\"\'templates/wot/items_given_certifications.html\'\"></ng-include>\n      </div>\n    </div>\n  </ion-content>\n\n    <!-- fab button -->\n  <div class=\"visible-xs visible-sm\">\n    <button id=\"fab-certify\" class=\"button button-fab button-fab-bottom-right button-energized-900 spin\" ng-if=\"canCertify && !alreadyCertified\" ng-click=\"certify()\">\n      <i class=\"icon ion-ribbon-b\"></i>\n    </button>\n    <button id=\"fab-select-certify\" class=\"button button-fab button-fab-bottom-right button-energized-900 spin\" ng-if=\"canSelectAndCertify\" ng-click=\"selectAndCertify()\">\n      <i class=\"icon ion-plus\"></i>\n    </button>\n  </div>\n</ion-view>\n");
$templateCache.put("templates/wot/view_identity.html","<ion-view left-buttons=\"leftButtons\" class=\"view-identity\">\n  <ion-nav-title>\n  </ion-nav-title>\n\n  <ion-content scroll=\"true\" class=\"refresher-top-bg\" ng-class=\"{\'member\': !loading && formData.isMember}\">\n\n    <ion-refresher pulling-text=\"{{\'COMMON.BTN_REFRESH\' | translate}}\" on-refresh=\"doUpdate(true)\">\n    </ion-refresher>\n\n    <div class=\"hero\">\n      <div class=\"content\" ng-if=\"!loading\">\n        <i class=\"avatar\" ng-if=\"::!formData.avatar\" ng-class=\"{\'avatar-wallet\': !formData.isMember, \'avatar-member\': formData.isMember}\"></i>\n        <i class=\"avatar\" ng-if=\"::formData.avatar\" style=\"background-image: url({{::formData.avatar.src}})\"></i>\n        <ng-if ng-if=\"::formData.name\">\n          <h3 class=\"light\">{{::formData.name}}</h3>\n        </ng-if>\n        <ng-if ng-if=\"::!formData.name\">\n          <h3 class=\"light\" ng-if=\"::formData.uid\">{{::formData.uid}}</h3>\n          <h3 class=\"light\" ng-if=\"::!formData.uid\"><i class=\"ion-key\"></i> {{::formData.pubkey | formatPubkey}}</h3>\n        </ng-if>\n        <h4 class=\"assertive\">\n          <ng-if ng-if=\"::(formData.name || formData.uid) && !formData.isMember && revoked\" translate>WOT.IDENTITY_REVOKED_PARENTHESIS</ng-if>\n          <ng-if ng-if=\"::(formData.name || formData.uid) && formData.isMember && revoked\" translate>WOT.MEMBER_PENDING_REVOCATION_PARENTHESIS</ng-if>\n        </h4>\n\n      </div>\n      <h4 class=\"content light\" ng-if=\"loading\">\n        <ion-spinner icon=\"android\"></ion-spinner>\n      </h4>\n\n\n    </div>\n\n    <!-- button bar-->\n    <a id=\"wot-share-anchor-{{::formData.pubkey}}\"></a>\n    <div class=\"hidden-xs hidden-sm padding text-center\">\n      <button class=\"button button-stable button-small-padding icon ion-android-share-alt ink\" ng-click=\"showSharePopover($event)\" title=\"{{\'COMMON.BTN_SHARE\' | translate}}\">\n      </button>\n\n      <!-- Allow extension here -->\n      <cs-extension-point name=\"buttons\"></cs-extension-point>\n\n      <button class=\"button button-stable button-small-padding icon ion-ribbon-b ink\" ng-click=\"certify()\" ng-if=\":rebind:formData.hasSelf\" title=\"{{\'WOT.BTN_CERTIFY\' | translate}}\" ng-disabled=\"disableCertifyButton\">\n      </button>\n\n      <button class=\"button button-calm ink\" ng-click=\"showTransferModal({pubkey:formData.pubkey, uid: formData.name||formData.uid})\">\n        {{\'COMMON.BTN_SEND_MONEY\' | translate}}\n      </button>\n    </div>\n\n    <div class=\"row no-padding\">\n\n      <div class=\"visible-xs visible-sm\">\n        <button id=\"fab-certify-{{:rebind:formData.uid}}\" style=\"top: 170px\" class=\"button button-fab button-fab-top-left button-fab-hero button-calm spin\" ng-if=\":rebind:(canCertify && !alreadyCertified)\" ng-click=\"certify()\">\n          <i class=\"icon ion-ribbon-b\"></i>\n        </button>\n      </div>\n      <div class=\"col col-20 hidden-xs hidden-sm\">&nbsp;</div>\n\n      <div class=\"col list\" ng-class=\"::motion.ionListClass\" bind-notifier=\"{ rebind:loading}\">\n\n        <span class=\"item item-divider\" translate>WOT.GENERAL_DIVIDER</span>\n\n        <!-- Pubkey -->\n        <ion-item class=\"item-icon-left item-text-wrap ink\" copy-on-click=\"{{:rebind:formData.pubkey}}\">\n          <i class=\"icon ion-key\"></i>\n          <span translate>COMMON.PUBKEY</span>\n          <h4 id=\"pubkey\" class=\"dark text-left\">{{:rebind:formData.pubkey}}</h4>\n        </ion-item>\n\n        <div class=\"item item-icon-left item-text-wrap\" ng-if=\":rebind:!formData.hasSelf\">\n          <i class=\"icon ion-ios-help-outline positive\"></i>\n          <span translate>WOT.NOT_MEMBER_ACCOUNT</span>\n          <h4 class=\"gray\" translate>WOT.NOT_MEMBER_ACCOUNT_HELP</h4>\n        </div>\n\n        <!-- Uid + Registration date -->\n        <ion-item class=\"item-icon-left\" ng-if=\":rebind:formData.sigDate||formData.uid\">\n          <i class=\"icon ion-calendar\"></i>\n          <span translate>COMMON.UID</span>\n          <h5 class=\"dark\" ng-if=\":rebind:formData.sigDate\">\n            <span translate>WOT.REGISTERED_SINCE</span>\n            {{:rebind:formData.sigDate | formatDate}}\n          </h5>\n          <span class=\"badge badge-stable\">{{:rebind:formData.uid}}</span>\n        </ion-item>\n\n        <!-- Received certifications count -->\n        <a id=\"helptip-wot-view-certifications\" class=\"item item-icon-left item-text-wrap item-icon-right ink\" ng-if=\":rebind:formData.hasSelf\" ng-click=\"showCertifications()\">\n          <i class=\"icon ion-ribbon-b\"></i>\n          <b ng-if=\":rebind:formData.requirements.isSentry\" class=\"ion-star icon-secondary\" style=\"color: yellow; font-size: 16px; left: 25px; top: -7px\"></b>\n          <span translate>ACCOUNT.CERTIFICATION_COUNT</span>\n          <cs-badge-certification cs-id=\"helptip-wot-view-certifications-count\" requirements=\"formData.requirements\" parameters=\"{sigQty: formData.sigQty}\">\n          </cs-badge-certification>\n\n          <i class=\"gray icon ion-ios-arrow-right\"></i>\n        </a>\n\n        <!-- Signature stock -->\n        <a class=\"item item-icon-left item-text-wrap item-icon-right ink visible-xs visible-sm\" ng-if=\":rebind:formData.hasSelf && formData.isMember\" ng-click=\"showGivenCertifications()\">\n          <i class=\"icon ion-ribbon-a\"></i>\n          <span translate>WOT.GIVEN_CERTIFICATIONS.SENT</span>\n          <cs-badge-given-certification identity=\"formData\" parameters=\"$root.currency.parameters\">\n          </cs-badge-given-certification>\n          <i class=\"gray icon ion-ios-arrow-right\"></i>\n        </a>\n\n        <!-- Account transaction -->\n        <a class=\"item item-icon-left item-icon-right ink\" ng-if=\"!loading\" ui-sref=\"app.wot_identity_tx_uid({uid:formData.uid,pubkey:formData.pubkey})\">\n          <i class=\"icon ion-card\"></i>\n          <span translate>WOT.ACCOUNT_OPERATIONS</span>\n          <i class=\"gray icon ion-ios-arrow-right\"></i>\n        </a>\n\n        <div class=\"item item-text-wrap item-icon-left item-wallet-event assertive\" ng-repeat=\"event in :rebind:formData.events | filter: {type: \'error\'}\">\n          <i class=\"icon ion-alert-circled\"></i>\n          <span trust-as-html=\"event.message | translate:event.messageParams\"></span>\n        </div>\n\n        <cs-extension-point name=\"general\"></cs-extension-point>\n\n        <cs-extension-point name=\"after-general\"></cs-extension-point>\n\n      </div>\n\n      <div class=\"col col-20 hidden-xs hidden-sm\">&nbsp;</div>\n    </div>\n\n  </ion-content>\n\n  <!-- fab button -->\n  <div class=\"visible-xs visible-sm\" ng-hide=\"loading\">\n    <button id=\"fab-transfer\" class=\"button button-fab button-fab-bottom-right button-assertive drop\" ng-click=\"showTransferModal({pubkey:formData.pubkey, uid: formData.uid})\">\n      <i class=\"icon ion-android-send\"></i>\n    </button>\n  </div>\n</ion-view>\n");
$templateCache.put("templates/wot/view_identity_tx.html","<ion-view left-buttons=\"leftButtons\">\n  <ion-nav-title>\n    <span class=\"visible-xs visible-sm\">{{::formData.name||formData.uid}}</span>\n    <span class=\"hidden-xs hidden-sm\" ng-if=\"!loading\" translate=\"WOT.OPERATIONS.TITLE\" translate-values=\"{uid: formData.name || formData.uid}\"></span>\n  </ion-nav-title>\n\n  <ion-content scroll=\"true\">\n\n    <ion-refresher pulling-text=\"{{\'COMMON.BTN_REFRESH\' | translate}}\" on-refresh=\"doUpdate(true)\">\n    </ion-refresher>\n\n    <div class=\"hidden-xs hidden-sm padding text-center\">\n\n      <button class=\"button button-stable button-small-padding icon ion-loop ink\" ng-click=\"doUpdate()\" title=\"{{\'COMMON.BTN_REFRESH\' | translate}}\">\n      </button>\n\n      <button class=\"button button-stable button-small-padding icon ion-android-download ink\" ng-click=\"downloadHistoryFile()\" title=\"{{\'COMMON.BTN_DOWNLOAD_ACCOUNT_STATEMENT\' | translate}}\">\n      </button>\n\n      <cs-extension-point name=\"buttons\"></cs-extension-point>\n\n    </div>\n\n    <div class=\"center padding\" ng-if=\"loading\">\n      <ion-spinner icon=\"android\"></ion-spinner>\n    </div>\n\n    <div class=\"list {{motion.ionListClass}}\" ng-if=\"!loading\">\n\n      <div class=\"row\">\n\n        <div class=\"col col-15 hidden-xs hidden-sm\">&nbsp;</div>\n\n        <div class=\"col\">\n\n          <!-- the balance -->\n          <div class=\"item item-tx item-divider\">\n            {{\'ACCOUNT.BALANCE_ACCOUNT\'|translate}}\n            <div class=\"badge item-note\" ng-class=\":balance:{\'badge-assertive\': formData.balance <= 0, \'badge-balanced\': formData.balance > 0 }\" ng-bind-html=\":balance:formData.balance|formatAmount:{currency: $root.currency.name}\">\n            </div>\n            <div class=\"badge badge-secondary\" ng-if=\"$root.settings.expertMode\">\n              (<span ng-bind-html=\":balance:formData.balance| formatAmount: {useRelative: !$root.settings.useRelative, currency: $root.currency.name} \"></span>)\n            </div>\n          </div>\n\n          <span class=\"item item-divider\" ng-if=\"!loading\">\n            {{:locale:\'ACCOUNT.LAST_TX\'|translate}}\n            <a id=\"helptip-wallet-tx\" style=\"position: relative; bottom: 0; right: 0px\">&nbsp;</a>\n          </span>\n\n          <!-- iterate on each TX -->\n          <div ng-repeat=\"tx in formData.tx.history\" class=\"item item-tx item-icon-left\" ng-include=\"::!tx.isUD ? \'templates/wallet/item_tx.html\' : \'templates/wallet/item_ud.html\'\">\n          </div>\n\n          <div class=\"item item-text-wrap text-center\" ng-if=\"formData.tx.fromTime > 0\">\n            <p>\n              <a ng-click=\"showMoreTx()\">{{:locale:\'ACCOUNT.SHOW_MORE_TX\'|translate}}</a>\n              <span class=\"gray\" translate=\"ACCOUNT.TX_FROM_DATE\" translate-values=\"{fromTime: formData.tx.fromTime}\"></span>\n              <span class=\"gray\">|</span>\n              <a ng-click=\"showMoreTx(-1)\" translate>ACCOUNT.SHOW_ALL_TX</a>\n            </p>\n          </div>\n        </div>\n\n        <div class=\"col col-15 hidden-xs hidden-sm\">&nbsp;</div>\n\n      </div>\n    </div>\n  </ion-content>\n</ion-view>\n");
$templateCache.put("templates/currency/tabs/tab_blocks.html","<ion-view>\n  <ion-nav-buttons side=\"secondary\">\n\n    <button class=\"button button-icon button-clear icon ion-navicon visible-xs visible-sm\" ng-click=\"toggleCompactMode()\">\n      <b class=\"icon-secondary\" ng-class=\"{\'ion-arrow-down-b\': !compactMode, \'ion-arrow-up-b\': compactMode}\" style=\"top: -12px; left: 11px; font-size: 10px\"></b>\n      <b class=\"icon-secondary\" ng-class=\"{\'ion-arrow-up-b\': !compactMode,\'ion-arrow-down-b\': compactMode}\" style=\"top: 12px; left: 11px; font-size: 10px\"></b>\n    </button>\n\n    <!-- Allow extension here -->\n    <cs-extension-point name=\"nav-buttons\"></cs-extension-point>\n  </ion-nav-buttons>\n\n  <ion-content>\n    <div class=\"item item-divider\">\n      <span translate>BLOCKCHAIN.LOOKUP.LAST_BLOCKS</span>\n    </div>\n\n    <cs-extension-point name=\"buttons\"></cs-extension-point>\n\n    <ng-include src=\"\'templates/blockchain/list_blocks.html\'\"></ng-include>\n  </ion-content>\n</ion-view>\n");
$templateCache.put("templates/currency/tabs/tab_network.html","<ion-view>\n  <ion-nav-buttons side=\"secondary\">\n\n    <button class=\"button button-icon button-clear\" ng-click=\"showExtendActionsPopover($event)\">\n      <i class=\"icon ion-android-funnel\"></i>\n    </button>\n\n  </ion-nav-buttons>\n\n  <ion-content>\n    <ion-refresher pulling-text=\"{{\'COMMON.BTN_REFRESH\' | translate}}\" on-refresh=\"refreshPeers()\">\n    </ion-refresher>\n\n    <div class=\"list\">\n      <ng-include src=\"\'templates/currency/items_network.html\'\"></ng-include>\n    </div>\n  </ion-content>\n</ion-view>\n");
$templateCache.put("templates/currency/tabs/tab_parameters.html","<ion-view>\n\n  <ion-nav-buttons side=\"secondary\">\n    <!-- Allow extension here -->\n    <cs-extension-point name=\"nav-buttons\"></cs-extension-point>\n  </ion-nav-buttons>\n\n  <ion-content>\n    <ion-refresher pulling-text=\"{{\'COMMON.BTN_REFRESH\' | translate}}\" on-refresh=\"refresh()\">\n    </ion-refresher>\n\n    <div class=\"list\">\n      <ng-include src=\"\'templates/currency/items_parameters.html\'\"></ng-include>\n    </div>\n  </ion-content>\n</ion-view>\n");
$templateCache.put("templates/currency/tabs/tab_wot.html","<ion-view>\n  <ion-content>\n    <ion-refresher pulling-text=\"{{\'COMMON.BTN_REFRESH\' | translate}}\" on-refresh=\"refresh()\">\n    </ion-refresher>\n    <div class=\"list\">\n      <ng-include src=\"\'templates/currency/items_wot.html\'\"></ng-include>\n    </div>\n  </ion-content>\n</ion-view>\n");
$templateCache.put("templates/wallet/list/item_wallet.html","<div class=\"item item-avatar item-icon-right item-border-large item-wallet ink\" ng-click=\"select($event, wallet)\" ng-init=\"walletData=wallet.data;\">\n\n  <i ng-if=\"::!walletData.avatar\" class=\"item-image icon\" ng-class=\":rebind:{\'ion-card\': !walletData.isMember, \'ion-persion\': walletData.isMember}\"></i>\n  <i ng-if=\"::walletData.avatar\" class=\"item-image avatar\" style=\"background-image: url({{::walletData.avatar.src}})\"></i>\n  <div class=\"badge badge-button badge-avatar badge-assertive ion-locked\" ng-hide=\":rebind:wallet.isAuth()\">\n  </div>\n\n  <h2>\n    <span class=\"text-editable\" ng-click=\"editWallet($event, wallet)\" title=\"{{\'ACCOUNT.WALLET_LIST.BTN_RENAME\'|translate}}\">\n      <ng-if ng-if=\":rebind:walletData.localName||walletData.name||walletData.uid\" ng-bind-html=\"::walletData.localName||walletData.name||walletData.uid\"></ng-if>\n      <ng-if ng-if=\":rebind:!walletData.localName && !walletData.name && !walletData.uid\">{{::walletData.pubkey|formatPubkey}}</ng-if>\n    </span>\n  </h2>\n  <h4 class=\"gray\">\n    <span class=\"positive\" ng-if=\"::walletData.name && walletData.uid\">\n      <i class=\"ion-person\"></i>\n      {{::walletData.uid}}&nbsp;\n    </span>\n    <b class=\"ion-key\"></b>\n    {{::walletData.pubkey | formatPubkey}}\n    <span ng-if=\"::!walletData.uid\" class=\"assertive\" translate>WOT.NOT_MEMBER_PARENTHESIS</span>\n  </h4>\n\n  <h4 class=\"dark\">\n    <span ng-if=\"walletData.invitations.unreadCount\">\n      <i class=\"dark ion-person-stalker\"></i>\n      {{walletData.invitations.unreadCount}}\n    </span>\n      <span ng-if=\"walletData.messages.unreadCount\">\n      <i class=\"dark ion-email\"></i>\n      {{walletData.messages.unreadCount}}\n    </span>\n    <span ng-if=\"walletData.notifications.unreadCount\">\n      <i class=\"dark ion-android-notifications\"></i>\n      {{walletData.notifications.unreadCount}}\n    </span>\n  </h4>\n\n  <span class=\"badge\" ng-if=\"formData.showBalance\" ng-class=\":rebind:{\'badge-assertive\': (walletData.balance <= 0), \'badge-balanced\': (walletData.balance > 0) }\">\n      <span ng-bind-html=\":rebind:walletData.balance|formatAmount:{useRelative: formData.useRelative, currency: currency}\"></span>\n  </span>\n\n  <i class=\"icon ion-ios-arrow-right\"></i>\n</div>\n");
$templateCache.put("templates/wallet/list/item_wallet_light.html","\n<div class=\"item item-avatar item-icon-right item-border-large item-wallet\" ng-click=\"select($event, wallet)\" ng-init=\"walletData=wallet.data;\">\n\n  <i ng-if=\"::!walletData.avatar\" class=\"item-image icon\" ng-class=\":rebind:{\'ion-card\': !walletData.isMember, \'ion-persion\': walletData.isMember}\"></i>\n  <i ng-if=\"::walletData.avatar\" class=\"item-image avatar\" style=\"background-image: url({{::walletData.avatar.src}})\"></i>\n  <div class=\"badge badge-button badge-avatar badge-assertive ion-locked\" ng-hide=\"::wallet.isAuth()\">\n  </div>\n\n  <h2>\n    <ng-if ng-if=\"::walletData.localName||walletData.name||walletData.uid\">{{::walletData.localName||walletData.name||walletData.uid}}</ng-if>\n    <ng-if ng-if=\"::!walletData.localName && !walletData.name && !walletData.uid\">{{::walletData.pubkey|formatPubkey}}</ng-if>\n  </h2>\n\n  <h4 class=\"gray\">\n    <span class=\"positive\" ng-if=\"::walletData.name && walletData.uid\">\n      <i class=\"ion-person\"></i>\n      {{::walletData.uid}}&nbsp;\n    </span>\n    <b class=\"ion-key\"></b>\n    {{::walletData.pubkey | formatPubkey}}\n    <span ng-if=\"::!walletData.uid\" class=\"assertive\" translate>WOT.NOT_MEMBER_PARENTHESIS</span>\n  </h4>\n\n  <div class=\"badge\" ng-if=\"formData.showBalance\" ng-class=\"{\'badge-assertive\': (walletData.balance <= 0), \'badge-balanced\': (walletData.balance > 0) }\">\n    <span ng-bind-html=\"walletData.balance|formatAmount:{useRelative: formData.useRelative, currency: currency}\"></span>\n  </div>\n\n  <i class=\"icon ion-ios-arrow-right\"></i>\n</div>\n");
$templateCache.put("templates/wallet/list/modal_wallets.html","<ion-modal-view id=\"transfer\" class=\"modal-full-height\">\n  <ion-header-bar class=\"bar-positive\">\n    <button class=\"button button-clear\" ng-click=\"closeModal()\" translate>COMMON.BTN_CANCEL</button>\n    <h1 class=\"title\" translate>ACCOUNT.SELECT_WALLET_MODAL.TITLE</h1>\n  </ion-header-bar>\n\n  <ion-content scroll=\"true\">\n\n    <div class=\"center padding\" ng-if=\"loading\">\n      <ion-spinner icon=\"android\"></ion-spinner>\n    </div>\n\n    <div class=\"center padding gray\" ng-if=\"!loading && !wallets.length\">\n      {{:locale:\'ACCOUNT.WALLET_LIST.NO_WALLET\'|translate}}\n    </div>\n\n    <ion-list ng-if=\"!loading\" class=\"{{::motion.ionListClass}}\">\n      <ng-repeat ng-repeat=\"wallet in wallets track by wallet.id\" ng-include=\"\'templates/wallet/list/item_wallet_light.html\'\">\n      </ng-repeat>\n    </ion-list>\n\n  </ion-content>\n\n</ion-modal-view>\n");
$templateCache.put("templates/wallet/list/popover_actions.html","<ion-popover-view class=\"fit has-header\">\n  <ion-header-bar>\n    <h1 class=\"title\" translate>COMMON.POPOVER_ACTIONS_TITLE</h1>\n  </ion-header-bar>\n  <ion-content scroll=\"false\">\n    <div class=\"list item-text-wrap\">\n\n      <!-- delete some wallets -->\n      <button class=\"item item-icon-left ink\" ng-class=\"{\'gray\': loading || !wallets.length, \'assertive\': !loading && wallets.length}\" ng-disabled=\"loading || !wallets.length\" ng-click=\"selectAndRemoveWallet()\">\n        <i class=\"icon ion-trash-a\"></i>\n        {{\'ACCOUNT.WALLET_LIST.BTN_DELETE\' | translate}}\n      </button>\n\n    </div>\n  </ion-content>\n</ion-popover-view>\n");
$templateCache.put("templates/wallet/list/popover_wallets.html","<ion-popover-view class=\"fit popover-wallets\" ng-controller=\"PopoverWalletSelectModalCtrl\">\n  <ion-header-bar>\n    <h1 class=\"title\" translate>ACCOUNT.SELECT_WALLET_MODAL.TITLE</h1>\n  </ion-header-bar>\n  <ion-content scroll=\"true\">\n\n    <div class=\"center padding\" ng-if=\"loading\">\n      <ion-spinner icon=\"android\"></ion-spinner>\n    </div>\n\n    <div class=\"center padding gray\" ng-if=\"!loading && !wallets.length\">\n      {{:locale:\'ACCOUNT.WALLET_LIST.NO_WALLET\'|translate}}\n    </div>\n\n    <ion-list ng-if=\"!loading\">\n      <ng-repeat ng-repeat=\"wallet in wallets track by wallet.id\" ng-include=\"\'templates/wallet/list/item_wallet_light.html\'\">\n\n      </ng-repeat>\n    </ion-list>\n  </ion-content>\n</ion-popover-view>\n");
$templateCache.put("templates/wallet/list/popup_edit_name.html","<form name=\"editForm\" ng-submit=\"\">\n  <div class=\"list\" ng-init=\"setEditForm(editForm)\">\n    <label class=\"item item-input\" ng-class=\"{\'item-input-error\': editForm.$submitted && editForm.name.$invalid}\">\n      <input name=\"name\" type=\"text\" placeholder=\"{{\'ACCOUNT.WALLET_LIST.EDIT_POPOVER.NAME_HELP\' | translate}}\" ng-model=\"formData.name\" ng-minlength=\"3\" required>\n    </label>\n    <div class=\"form-errors\" ng-if=\"editForm.$submitted && editForm.name.$error\" ng-messages=\"editForm.name.$error\">\n      <div class=\"form-error\" ng-message=\"required\">\n        <span translate=\"ERROR.FIELD_REQUIRED\"></span>\n      </div>\n      <div class=\"form-error\" ng-message=\"minlength\">\n        <span translate=\"ERROR.FIELD_TOO_SHORT\"></span>\n      </div>\n    </div>\n  </div>\n</form>\n");
$templateCache.put("templates/wallet/list/view_wallets.html","<ion-view left-buttons=\"leftButtons\" class=\"view-wallet-list\">\n  <ion-nav-title>\n    <!-- no title-->\n  </ion-nav-title>\n\n  <ion-nav-buttons side=\"secondary\">\n    <cs-extension-point name=\"nav-buttons\"></cs-extension-point>\n\n    <button class=\"button button-icon button-clear icon ion-android-more-vertical visible-xs visible-sm\" ng-click=\"showActionsPopover($event)\">\n    </button>\n  </ion-nav-buttons>\n\n  <ion-content scroll=\"true\" class=\"padding no-padding-xs\" bind-notifier=\"{ rebind:formData.useRelative, locale:settings.locale.id}\">\n\n    <ion-refresher pulling-text=\"{{:locale:\'COMMON.BTN_REFRESH\' | translate}}\" on-refresh=\"doUpdate(true)\">\n    </ion-refresher>\n\n    <!-- Buttons bar-->\n    <div class=\"hidden-xs hidden-sm padding text-center\">\n\n      <button class=\"button button-stable button-small-padding icon ion-loop ink\" ng-click=\"doUpdate()\" title=\"{{:locale:\'COMMON.BTN_REFRESH\' | translate}}\">\n      </button>\n\n      <cs-extension-point name=\"buttons\"></cs-extension-point>\n\n      <button class=\"button button-calm icon-left ink\" ng-click=\"showNewWalletModal()\">\n        {{:locale:\'ACCOUNT.WALLET_LIST.BTN_NEW\' | translate}}\n      </button>\n\n      <button class=\"button button-stable button-small-padding icon ion-android-more-vertical ink\" ng-click=\"showActionsPopover($event)\" title=\"{{:locale:\'COMMON.BTN_OPTIONS\' | translate}}\">\n      </button>\n\n    </div>\n\n    <div class=\"center padding\" ng-if=\"loading\">\n      <ion-spinner icon=\"android\"></ion-spinner>\n    </div>\n\n    <div class=\"center padding gray\" ng-if=\"!loading && !wallets.length\">\n      {{:locale:\'ACCOUNT.WALLET_LIST.NO_WALLET\'|translate}}\n    </div>\n\n    <ion-list ng-if=\"!loading\" class=\"{{::motion.ionListClass}}\">\n      <ng-include ng-repeat=\"wallet in wallets track by wallet.id\" src=\"\'templates/wallet/list/item_wallet.html\'\">\n      </ng-include>\n    </ion-list>\n\n  </ion-content>\n\n  <button id=\"fab-add-wallet\" class=\"button button-fab button-fab-bottom-right button-assertive hidden-md hidden-lg drop ng-hide\" ng-show=\"!loading\" ng-click=\"showNewWalletModal()\">\n    <i class=\"icon ion-plus\"></i>\n  </button>\n</ion-view>\n");
$templateCache.put("templates/wallet/slides/slides_generate_keyfile.html","  <ion-content class=\"has-header padding\">\n    <h3 translate>ACCOUNT.SECURITY.GENERATE_KEYFILE</h3>\n\n    <!--<p translate>ACCOUNT.SECURITY.GENERATE_KEYFILE_HELP</p>-->\n\n    <div class=\"list\">\n\n      <div class=\"item item-complex card stable-bg item-icon-left item-icon-right ink\" ng-click=\"downloadKeyFile(\'PubSec\')\">\n        <div class=\"item-content item-text-wrap\">\n          <i class=\"item-image dark icon ion-document-text\"></i>\n          <b class=\"ion-ios-redo icon-secondary dark\" style=\"top: -8px; left: 42px; font-size: 12px\"></b>\n          <h2 translate>ACCOUNT.SECURITY.KEYFILE.PUBSEC_FORMAT</h2>\n          <h4 class=\"gray\" translate>ACCOUNT.SECURITY.KEYFILE.PUBSEC_FORMAT_HELP</h4>\n          <i class=\"icon dark ion-ios-arrow-right\"></i>\n        </div>\n      </div>\n\n      <div class=\"item item-complex card stable-bg item-icon-left item-icon-right ink\" ng-click=\"downloadKeyFile(\'WIF\')\">\n        <div class=\"item-content item-text-wrap\">\n          <i class=\"item-image dark icon ion-document-text\"></i>\n          <b class=\"ion-ios-redo icon-secondary dark\" style=\"top: -8px; left: 42px; font-size: 12px\"></b>\n          <h2 translate>ACCOUNT.SECURITY.KEYFILE.WIF_FORMAT</h2>\n          <h4 class=\"gray\" translate>ACCOUNT.SECURITY.KEYFILE.WIF_FORMAT_HELP</h4>\n          <i class=\"icon dark ion-ios-arrow-right\"></i>\n        </div>\n      </div>\n\n      <div class=\"item item-complex card stable-bg item-icon-left item-icon-right ink\" ng-click=\"downloadKeyFile(\'EWIF\')\">\n        <div class=\"item-content item-text-wrap\">\n          <i class=\"item-image dark icon ion-document-text\"></i>\n          <b class=\"ion-ios-redo icon-secondary dark\" style=\"top: -8px; left: 42px; font-size: 12px\"></b>\n          <b class=\"ion-locked icon-secondary dark\" style=\"top: 0px; left: 43px; font-size: 8px\"></b>\n          <h2 translate>ACCOUNT.SECURITY.KEYFILE.EWIF_FORMAT</h2>\n          <h4 class=\"gray\" translate>ACCOUNT.SECURITY.KEYFILE.EWIF_FORMAT_HELP</h4>\n          <i class=\"icon dark ion-ios-arrow-right\"></i>\n        </div>\n      </div>\n    </div>\n  </ion-content>\n");
$templateCache.put("templates/wallet/slides/slides_recoverID_1.html","<ion-content class=\"has-header padding\">\n  <h3 translate>ACCOUNT.SECURITY.RECOVER_ID</h3>\n\n  <div dropzone=\"recoverContent(file)\">\n    <div ng-if=\"!hasContent\" onclick=\"angular.element(document.querySelector(\'#saveIdFile\'))[0].click();\">\n      <h2 class=\"gray\" translate>COMMON.CHOOSE_FILE</h2>\n      <input type=\"file\" id=\"saveIdFile\" accept=\".txt\" style=\"visibility:hidden; position:absolute\" on-read-file=\"recoverContent(file)\">\n    </div>\n\n    <div ng-if=\"hasContent\" class=\"item row item-icon-left no-padding\">\n     <i class=\"icon ion-document-text gray\"></i>\n     <div class=\"col\">\n       <span>{{fileData.name}}</span>\n       <br>\n       <small>{{fileData.size}} Ko</small>\n     </div>\n     <div class=\"col-10\">\n       <b ng-class=\"{\'ion-android-done balanced\': isValidFile,\'ion-close-circled assertive\': !isValidFile}\" style=\"font-size: 28px; position: relative; top: 6px\"></b>\n        <button class=\"button-icon ion-close-round gray pull-right\" style=\"font-size:10px\" ng-click=\"restore()\"></button>\n     </div>\n   </div>\n  </div>\n\n  <div class=\"padding hidden-xs text-right\">\n   <button class=\"button button-clear button-dark ink\" ng-click=\"closeModal()\" type=\"button\" translate>COMMON.BTN_CANCEL\n   </button>\n   <button class=\"button button-calm icon-right ion-chevron-right ink\" ng-click=\"doNext()\" translate>\n     COMMON.BTN_NEXT\n     <i class=\"icon ion-arrow-right-a\"></i>\n   </button>\n  </div>\n</ion-content>\n\n\n");
$templateCache.put("templates/wallet/slides/slides_recoverID_2.html","  <ion-content class=\"has-header padding\">\n    <h3 translate>ACCOUNT.SECURITY.RECOVER_ID</h3>\n\n    <form name=\"recoverForm\" novalidate ng-submit=\"recoverId()\">\n      <div class=\"list\" ng-init=\"setForm(recoverForm, \'recoverForm\')\">\n        <ng-repeat ng-repeat=\"question in recover.questions \">\n          <label class=\"item item-input {{smallscreen ? \'item-stacked-label\' : \'item-floating-label\'}}\" ng-class=\"{\'item-input-error\': recoverForm.$submitted && recoverForm[\'question{{$index}}\'].$invalid}\">\n            <span class=\"input-label\" style=\"{{smallscreen ? \'white-space: normal\' : \'\'}}\">{{question.value }}</span>\n            <input type=\"text\" name=\"question{{$index}}\" placeholder=\"{{smallscreen ? \'\' : question.value }}\" ng-model=\"question.answer\" required>\n          </label>\n          <div class=\"form-errors\" ng-show=\"recoverForm.$submitted && recoverForm[\'question{{$index}}\'].$error\" ng-messages=\"recoverForm[\'question{{$index}}\'].$error\">\n            <div class=\"form-error\" ng-message=\"required\">\n              <span translate=\"ERROR.FIELD_REQUIRED\"></span>\n            </div>\n          </div>\n        </ng-repeat>\n        <div class=\"padding hidden-xs text-right\">\n          <button class=\"button button-clear button-dark ink\" ng-click=\"closeModal()\" type=\"button\" translate>COMMON.BTN_CANCEL\n          </button>\n          <button class=\"button button-clear button-dark\" ng-click=\"restore()\" type=\"button\" translate>ACCOUNT.SECURITY.BTN_CLEAN\n          </button>\n          <button class=\"button button-calm icon-right ion-chevron-right ink\" type=\"submit\" translate>\n            COMMON.BTN_NEXT\n            <i class=\"icon ion-arrow-right-a\"></i>\n          </button>\n        </div>\n      </div>\n    </form>\n  </ion-content>\n\n");
$templateCache.put("templates/wallet/slides/slides_recoverID_3.html","  <ion-content class=\"has-header padding\">\n    <h3 translate>ACCOUNT.SECURITY.RECOVER_ID</h3>\n\n\n    <div class=\"item item-input\">\n      <span class=\"input-label\">{{\'LOGIN.SALT\' | translate}} :</span>\n      <span>{{recover.salt}}</span>\n    </div>\n\n    <div class=\"item item-input\">\n      <span class=\"input-label\">{{\'LOGIN.PASSWORD\' | translate}} :</span>\n      <span>{{recover.pwd}}</span>\n    </div>\n\n    <div class=\"padding hidden-xs text-right\">\n          <button class=\"button button-clear button-dark ink\" ng-click=\"closeModal()\" type=\"button\" translate>COMMON.BTN_CLOSE\n          </button>\n    </div>\n  </ion-content>\n\n");
$templateCache.put("templates/wallet/slides/slides_revocation_file.html","<ion-content class=\"has-header padding\">\n  <p translate>ACCOUNT.SECURITY.REVOCATION_WITH_FILE_HELP</p>\n\n  <div dropzone=\"recoverContent(file)\">\n    <div ng-if=\"!hasContent\" onclick=\"angular.element(document.querySelector(\'#revocationFile\'))[0].click();\">\n      <h2 class=\"gray\" translate>COMMON.CHOOSE_FILE</h2>\n      <input type=\"file\" id=\"revocationFile\" accept=\".txt\" style=\"visibility:hidden; position:absolute\" on-read-file=\"recoverContent(file)\">\n    </div>\n\n    <div ng-if=\"hasContent\" class=\"item row item-icon-left no-padding\">\n      <i class=\"icon ion-document-text gray\"></i>\n      <div class=\"col\">\n        <span>{{fileData.name}}</span>\n        <br>\n        <small>{{fileData.size}} Ko</small>\n      </div>\n      <div class=\"col-10\">\n        <b ng-class=\"{\'ion-android-done balanced\': isValidFile,\'ion-close-circled assertive\': !isValidFile}\" style=\"font-size: 28px; position: relative; top: 6px\"></b>\n        <button class=\"button-icon ion-close-round gray pull-right\" style=\"font-size:10px\" ng-click=\"restore()\"></button>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"padding hidden-xs text-right\">\n    <button class=\"button button-clear button-dark ink\" ng-click=\"closeModal()\" type=\"button\" translate>COMMON.BTN_CANCEL\n    </button>\n    <button class=\"button button-calm icon-right ion-chevron-right ink\" ng-click=\"revokeWithFile()\" translate>\n      COMMON.BTN_NEXT\n      <i class=\"icon ion-arrow-right-a\"></i>\n    </button>\n  </div>\n</ion-content>\n\n\n");
$templateCache.put("templates/wallet/slides/slides_saveID_1.html","  <ion-content class=\"has-header padding\">\n    <h3 translate>ACCOUNT.SECURITY.SAVE_ID</h3>\n    <label class=\"item item-input item-select\">\n      <div class=\"input-label\" translate>\n        ACCOUNT.SECURITY.LEVEL\n      </div>\n      <select ng-model=\"formData.level\">\n        <option value=\"2\" ng-bind-html=\"\'ACCOUNT.SECURITY.LOW_LEVEL\' | translate\"></option>\n        <option value=\"4\" translate>ACCOUNT.SECURITY.MEDIUM_LEVEL</option>\n        <option value=\"6\" translate>ACCOUNT.SECURITY.STRONG_LEVEL</option>\n      </select>\n    </label>\n    <div class=\"padding-top\" translate=\"ACCOUNT.SECURITY.HELP_LEVEL\" translate-values=\"{nb: {{formData.level}}}\"></div>\n    <form name=\"questionsForm\" novalidate ng-submit=\"doNext(\'questionsForm\')\">\n      <div class=\"list\" ng-init=\"setForm(questionsForm, \'questionsForm\')\">\n\n        <ion-checkbox ng-repeat=\"question in formData.questions\" ng-model=\"question.checked\" ng-required=\"isRequired()\">\n          <span style=\"white-space: normal\">{{question.value | translate}}</span>\n        </ion-checkbox>\n        <div class=\"item item-icon-right no-padding-top\">\n          <a class=\"dark\"><i class=\"icon ion-android-add\" ng-click=\"addQuestion()\"></i></a>\n          <div class=\"list list-inset\">\n            <label class=\"item item-input\">\n              <input type=\"text\" placeholder=\"{{\'ACCOUNT.SECURITY.ADD_QUESTION\' | translate}}\" ng-model=\"formData.addQuestion\">\n            </label>\n          </div>\n        </div>\n      </div>\n      <div class=\"padding hidden-xs text-right\">\n        <button class=\"button button-clear button-dark ink\" ng-click=\"closeModal()\" type=\"button\" translate>COMMON.BTN_CANCEL\n        </button>\n        <button class=\"button button-clear button-dark\" ng-click=\"restore()\" type=\"button\" translate>ACCOUNT.SECURITY.BTN_RESET\n        </button>\n        <button class=\"button button-calm icon-right ion-chevron-right ink\" ng-disabled=\"questionsForm.$invalid\" type=\"submit\" translate>\n          COMMON.BTN_NEXT\n          <i class=\"icon ion-arrow-right-a\"></i>\n        </button>\n      </div>\n    </form>\n\n  </ion-content>\n");
$templateCache.put("templates/wallet/slides/slides_saveID_2.html","  <ion-content class=\"has-header padding\">\n    <h3 translate>ACCOUNT.SECURITY.SAVE_ID</h3>\n\n    <form name=\"answersForm\" novalidate ng-submit=\"doNext(\'answersForm\')\">\n      <div class=\"list\" ng-init=\"setForm(answersForm, \'answersForm\')\">\n        <ng-repeat ng-repeat=\"question in formData.questions |filter:true:checked\">\n          <label class=\"item item-input item-text-wrap {{smallscreen ? \'item-stacked-label\' : \'item-floating-label\'}}\" ng-class=\"{\'item-input-error\': answersForm.$submitted && answersForm[\'question{{$index}}\'].$invalid}\">\n            <span class=\"input-label\" style=\"width: 100%; max-width: inherit\">{{question.value | translate}}</span>\n            <input type=\"text\" name=\"question{{$index}}\" placeholder=\"{{smallscreen ? \'\' : question.value | translate}}\" ng-model=\"question.answer\" required>\n          </label>\n          <div class=\"form-errors\" ng-show=\"answersForm.$submitted && answersForm[\'question{{$index}}\'].$error\" ng-messages=\"answersForm[\'question{{$index}}\'].$error\">\n            <div class=\"form-error\" ng-message=\"required\">\n              <span translate=\"ERROR.FIELD_REQUIRED\"></span>\n            </div>\n          </div>\n        </ng-repeat>\n        <div class=\"padding hidden-xs text-right\">\n          <button class=\"button button-clear button-dark ink\" ng-click=\"closeModal()\" type=\"button\" translate>COMMON.BTN_CANCEL\n          </button>\n          <button class=\"button button-clear button-dark\" ng-click=\"restore()\" type=\"button\" translate>ACCOUNT.SECURITY.BTN_CLEAN\n          </button>\n          <button class=\"button button-positive ink\" type=\"submit\" translate>\n            COMMON.BTN_CONTINUE\n            <i class=\"icon ion-android-archive\"></i>\n          </button>\n        </div>\n      </div>\n\n    </form>\n  </ion-content>\n");
$templateCache.put("templates/wot/tabs/tab_given_certifications.html","<ion-view>\n  <ion-nav-buttons side=\"secondary\">\n    <button class=\"button button-icon button-clear icon ion-loop\" ng-click=\"doUpdate()\">\n    </button>\n  </ion-nav-buttons>\n\n  <ion-content ng-init=\"motions.receivedCertifications=false; motions.avatar=false\">\n    <div class=\"center padding\" ng-if=\"loading\">\n      <ion-spinner icon=\"android\"></ion-spinner>\n    </div>\n\n    <ng-include src=\"\'templates/wot/items_given_certifications.html\'\"></ng-include>\n  </ion-content>\n\n  <!-- fab button -->\n  <div class=\"visible-xs visible-sm\">\n    <button id=\"fab-select-certify\" class=\"button button-fab button-fab-bottom-right button-energized-900 spin\" ng-if=\"canSelectAndCertify || $root.tour\" ng-click=\"selectAndCertify()\">\n      <i class=\"icon ion-plus\"></i>\n    </button>\n  </div>\n</ion-view>\n");
$templateCache.put("templates/wot/tabs/tab_lookup.html","<ion-view>\n  <ion-nav-buttons side=\"secondary\">\n\n    <!-- Allow extension here -->\n    <cs-extension-point name=\"nav-buttons\"></cs-extension-point>\n\n    <button class=\"button button-icon button-clear\" ng-click=\"showActionsPopover($event)\">\n      <i class=\"icon ion-android-funnel\"></i>\n    </button>\n  </ion-nav-buttons>\n\n  <ion-content>\n\n    <ion-refresher pulling-text=\"{{\'COMMON.BTN_REFRESH\' | translate}}\" on-refresh=\"doSearch()\">\n    </ion-refresher>\n\n    <cs-extension-point name=\"buttons\"></cs-extension-point>\n\n    <ng-include src=\"\'templates/wot/lookup_form.html\'\"></ng-include>\n  </ion-content>\n</ion-view>\n");
$templateCache.put("templates/wot/tabs/tab_received_certifications.html","<ion-view>\n  <ion-nav-buttons side=\"secondary\">\n    <button class=\"button button-icon button-clear icon ion-loop\" ng-click=\"doUpdate()\">\n    </button>\n  </ion-nav-buttons>\n\n  <ion-content ng-init=\"motions.givenCertifications=false; motions.avatar=false;\" class=\"has-header\">\n    <div class=\"center padding\" ng-if=\"loading\">\n      <ion-spinner icon=\"android\"></ion-spinner>\n    </div>\n\n    <ng-include src=\"\'templates/wot/items_received_certifications.html\'\"></ng-include>\n  </ion-content>\n\n  <!-- fab button -->\n  <div class=\"visible-xs visible-sm\">\n    <button id=\"fab-certify\" class=\"button button-fab button-fab-bottom-right button-energized-900 spin\" ng-click=\"certify()\" ng-if=\"(formData.hasSelf && canCertify && !alreadyCertified) || $root.tour\">\n      <i class=\"icon ion-ribbon-b\"></i>\n    </button>\n  </div>\n</ion-view>\n");}]);
angular.module("cesium.translations", []).config(["$translateProvider", function($translateProvider) {
$translateProvider.translations("en-GB", {
  "COMMON": {
    "APP_NAME": "Cesium",
    "APP_VERSION": "v{{version}}",
    "APP_BUILD": "build {{build}}",
    "PUBKEY": "Public key",
    "MEMBER": "Member",
    "BLOCK" : "Block",
    "BTN_OK": "OK",
    "BTN_YES": "Yes",
    "BTN_NO": "No",
    "BTN_SEND": "Send",
    "BTN_SEND_MONEY": "Transfer money",
    "BTN_SEND_MONEY_SHORT": "Transfer",
    "BTN_SAVE": "Save",
    "BTN_YES_SAVE": "Yes, Save",
    "BTN_YES_CONTINUE": "Yes, Continue",
    "BTN_SHOW": "Show",
    "BTN_SHOW_PUBKEY": "Show key",
    "BTN_RELATIVE_UNIT": "Use relative unit",
    "BTN_BACK": "Back",
    "BTN_NEXT": "Next",
    "BTN_CANCEL": "Cancel",
    "BTN_CLOSE": "Close",
    "BTN_LATER": "Later",
    "BTN_LOGIN": "Sign In",
    "BTN_LOGOUT": "Logout",
    "BTN_ADD_ACCOUNT": "New Account",
    "BTN_SHARE": "Share",
    "BTN_EDIT": "Edit",
    "BTN_DELETE": "Delete",
    "BTN_ADD": "Add",
    "BTN_SEARCH": "Search",
    "BTN_REFRESH": "Refresh",
    "BTN_RETRY": "Retry",
    "BTN_START": "Start",
    "BTN_CONTINUE": "Continue",
    "BTN_CREATE": "Create",
    "BTN_UNDERSTOOD": "I understood",
    "BTN_OPTIONS": "Options",
    "BTN_HELP_TOUR": "Features tour",
    "BTN_HELP_TOUR_SCREEN": "Discover this screen",
    "BTN_DOWNLOAD": "Download",
    "BTN_DOWNLOAD_ACCOUNT_STATEMENT": "Download account statement",
    "BTN_MODIFY": "Modify",
    "CHOOSE_FILE": "Drag your file<br/>or click to select",
    "DAYS": "days",
    "NO_ACCOUNT_QUESTION": "Not a member yet? Register now!",
    "SEARCH_NO_RESULT": "No result found",
    "LOADING": "Loading...",
    "SEARCHING": "Searching...",
    "FROM": "From",
    "TO": "To",
    "COPY": "Copy",
    "LANGUAGE": "Language",
    "UNIVERSAL_DIVIDEND": "Universal dividend",
    "UD": "UD",
    "DATE_PATTERN": "DD/MM/YYYY HH:mm",
    "DATE_FILE_PATTERN": "YYYY-MM-DD",
    "DATE_SHORT_PATTERN": "DD/MM/YY",
    "DATE_MONTH_YEAR_PATTERN": "MM/YYYY",
    "EMPTY_PARENTHESIS": "(empty)",
    "UID": "Pseudonym",
    "ENABLE": "Enabled",
    "DISABLE": "Disabled",
    "RESULTS_LIST": "Results:",
    "RESULTS_COUNT": "{{count}} results",
    "EXECUTION_TIME": "executed in {{duration|formatDurationMs}}",
    "SHOW_VALUES": "Display values openly?",
    "POPOVER_ACTIONS_TITLE": "Options",
    "POPOVER_FILTER_TITLE": "Filters",
    "SHOW_MORE": "Show more",
    "SHOW_MORE_COUNT": "(current limit at {{limit}})",
    "POPOVER_SHARE": {
      "TITLE": "Share",
      "SHARE_ON_TWITTER": "Share on Twitter",
      "SHARE_ON_FACEBOOK": "Share on Facebook",
      "SHARE_ON_DIASPORA": "Share on Diaspora*",
      "SHARE_ON_GOOGLEPLUS": "Share on Google+"
    }
  },
  "SYSTEM": {
    "PICTURE_CHOOSE_TYPE": "Choose source:",
    "BTN_PICTURE_GALLERY": "Gallery",
    "BTN_PICTURE_CAMERA": "<b>Camera</b>"
  },
  "MENU": {
    "HOME": "Home",
    "WOT": "Registry",
    "CURRENCY": "Currency",
    "ACCOUNT": "My Account",
    "WALLETS": "My wallets",
    "TRANSFER": "Transfer",
    "SCAN": "Scan",
    "SETTINGS": "Settings",
    "NETWORK": "Network",
    "TRANSACTIONS": "My transactions"
  },
  "ABOUT": {
    "TITLE": "About",
    "LICENSE": "<b>Free/libre software</b> (License GNU GPLv3).",
    "LATEST_RELEASE": "There is a <b>newer version</ b> of {{'COMMON.APP_NAME' | translate}} (<b>v{{version}}</b>)",
    "PLEASE_UPDATE": "Please update {{'COMMON.APP_NAME' | translate}} (latest version: <b>v{{version}}</b>)",
    "CODE": "Source code:",
    "DEVELOPERS": "Developers:",
    "FORUM": "Forum:",
    "PLEASE_REPORT_ISSUE": "Please report any issue to us!",
    "REPORT_ISSUE": "Report an issue"
  },
  "HOME": {
    "TITLE": "Cesium",
    "WELCOME": "Welcome to the Cesium Application!",
    "MESSAGE": "Follow your {{currency|abbreviate}} wallets easily",
    "BTN_CURRENCY": "Explore currency",
    "BTN_ABOUT": "about",
    "BTN_HELP": "Help",
    "REPORT_ISSUE": "Report an issue",
    "NOT_YOUR_ACCOUNT_QUESTION" : "You do not own the account <b><i class=\"ion-key\"></i> {{pubkey|formatPubkey}}</b>?",
    "BTN_CHANGE_ACCOUNT": "Disconnect this account",
    "CONNECTION_ERROR": "Peer <b>{{server}}</b> unreachable or invalid address.<br/><br/>Check your Internet connection, or change node <a class=\"positive\" ng-click=\"doQuickFix('settings')\">in the settings</a>."
  },
  "SETTINGS": {
    "TITLE": "Settings",
    "NETWORK_SETTINGS": "Network",
    "PEER": "Duniter peer address",
    "PEER_CHANGED_TEMPORARY": "Address used temporarily",
    "USE_LOCAL_STORAGE": "Enable local storage",
    "USE_LOCAL_STORAGE_HELP": "Allows you to save your settings",
    "ENABLE_HELPTIP": "Enable contextual help tips",
    "ENABLE_UI_EFFECTS": "Enable visual effects",
    "HISTORY_SETTINGS": "Account operations",
    "DISPLAY_UD_HISTORY": "Display produced dividends?",
    "TX_HISTORY_AUTO_REFRESH": "Enable automatic refresh?",
    "TX_HISTORY_AUTO_REFRESH_HELP": "Updates the list of operations to each new block.",
    "AUTHENTICATION_SETTINGS": "Authentication",
    "KEEP_AUTH": "Expiration of authentication",
    "KEEP_AUTH_HELP": "Define when authentication is cleared from memory",
    "KEEP_AUTH_OPTION": {
      "NEVER": "After each operation",
      "SECONDS": "After {{value}}s of inactivity",
      "MINUTE": "After {{value}}min of inactivity",
      "MINUTES": "After {{value}}min of inactivity",
      "HOUR": "After {{value}}h of inactivity",
      "ALWAYS": "At the end of the session"
    },
    "REMEMBER_ME": "Remember me ?",
    "REMEMBER_ME_HELP": "Allows to remain identified from one session to another, keeping the public key locally.",
    "PLUGINS_SETTINGS": "Extensions",
    "BTN_RESET": "Restore default values",
    "EXPERT_MODE": "Enable expert mode",
    "EXPERT_MODE_HELP": "Allow to see more details",
    "BLOCK_VALIDITY_WINDOW": "Block uncertainty time",
    "BLOCK_VALIDITY_WINDOW_SHORT": "Time of uncertainty",
    "BLOCK_VALIDITY_WINDOW_HELP": "Time to wait before considering an information is validated",
    "BLOCK_VALIDITY_OPTION": {
      "NONE": "No delay",
      "N": "{{time | formatDuration}} ({{count}} blocks)"
    },
    "POPUP_PEER": {
      "TITLE" : "Duniter peer",
      "HOST" : "Address",
      "HOST_HELP": "Address: server:port",
      "USE_SSL" : "Secured?",
      "USE_SSL_HELP" : "(SSL Encryption)",
      "BTN_SHOW_LIST" : "Peer's list"
    }
  },
  "BLOCKCHAIN": {
    "HASH": "Hash: {{hash}}",
    "VIEW": {
      "HEADER_TITLE": "Block #{{number}}-{{hash|formatHash}}",
      "TITLE_CURRENT": "Current block",
      "TITLE": "Block #{{number|formatInteger}}",
      "COMPUTED_BY": "Computed by",
      "SHOW_RAW": "Show raw data",
      "TECHNICAL_DIVIDER": "Technical informations",
      "VERSION": "Format version",
      "HASH": "Computed hash",
      "UNIVERSAL_DIVIDEND_HELP": "Money co-produced by each of the {{membersCount}} members",
      "EMPTY": "Aucune donnÃ©e dans ce bloc",
      "POW_MIN": "Minimal difficulty",
      "POW_MIN_HELP": "Difficulty imposed in calculating hash",
      "DATA_DIVIDER": "Data",
      "IDENTITIES_COUNT": "New identities",
      "JOINERS_COUNT": "Joiners",
      "ACTIVES_COUNT": "Renewals",
      "ACTIVES_COUNT_HELP": "Members having renewed their membership",
      "LEAVERS_COUNT": "Leavers",
      "LEAVERS_COUNT_HELP": "Members that now refused certification",
      "EXCLUDED_COUNT": "Excluded members",
      "EXCLUDED_COUNT_HELP": "Old members, excluded because missing membreship renewal or certifications",
      "REVOKED_COUNT": "Revoked identities",
      "REVOKED_COUNT_HELP": "These accounts may no longer be member",
      "TX_COUNT": "Transactions",
      "CERT_COUNT": "Certifications",
      "TX_TO_HIMSELF": "Change",
      "TX_OUTPUT_UNLOCK_CONDITIONS": "Unlock conditions",
      "TX_OUTPUT_OPERATOR": {
        "AND": "and",
        "OR": "or"
      },
      "TX_OUTPUT_FUNCTION": {
        "SIG": "<b>Sign</b> of the public key",
        "XHX": "<b>Password</b>, including SHA256 =",
        "CSV": "Blocked during",
        "CLTV": "BloquÃ© until"
      }
    },
    "LOOKUP": {
      "TITLE": "Blocks",
      "NO_BLOCK": "No bloc",
      "LAST_BLOCKS": "Last blocks:",
      "BTN_COMPACT": "Compact"
    }
  },
  "CURRENCY": {
    "VIEW": {
      "TITLE": "Currency",
      "TAB_CURRENCY": "Currency",
      "TAB_WOT": "Web of trust",
      "TAB_NETWORK": "Network",
      "TAB_BLOCKS": "Blocks",
      "CURRENCY_SHORT_DESCRIPTION": "{{currency|capitalize}} is a <b>libre money</b>, started {{firstBlockTime | formatFromNow}}. It currently counts <b>{{N}} members </b>, who produce and collect a <a ng-click=\"showHelpModal('ud')\">Universal Dividend</a> (DU), each {{dt | formatPeriod}}.",
      "NETWORK_RULES_DIVIDER": "Network rules",
      "CURRENCY_NAME": "Currency name",
      "MEMBERS": "Members count",
      "MEMBERS_VARIATION": "Variation since {{duration|formatDuration}} (since last UD)",
      "MONEY_DIVIDER": "Money",
      "MASS": "Monetary mass",
      "SHARE": "Money share",
      "UD": "Universal Dividend",
      "C_ACTUAL": "Current growth",
      "MEDIAN_TIME": "Current blockchain time",
      "POW_MIN": "Common difficulty",
      "MONEY_RULES_DIVIDER": "Rules of currency",
      "C_RULE": "Theoretical growth target",
      "UD_RULE": "Universal dividend (formula)",
      "DT_REEVAL": "Period between two re-evaluation of the UD",
      "REEVAL_SYMBOL": "reeval",
      "DT_REEVAL_VALUE": "Every <b>{{dtReeval|formatDuration}}</b> ({{dtReeval/86400}} {{'COMMON.DAYS'|translate}})",
      "UD_REEVAL_TIME0": "Date of first reevaluation of the UD",
      "SIG_QTY_RULE": "Required number of certifications to become a member",
      "SIG_STOCK": "Maximum number of certifications sent by a member",
      "SIG_PERIOD": "Minimum delay between 2 certifications sent by one and the same issuer.",
      "SIG_WINDOW": "Maximum delay before a certification will be treated",
      "SIG_VALIDITY": "Lifetime of a certification that has been treated",
      "MS_WINDOW": "Maximum delay before a pending membership will be treated",
      "MS_VALIDITY": "Lifetime of a membership that has been treated",
      "STEP_MAX": "Maximum distance between a newcomer and each referring members.",
      "WOT_RULES_DIVIDER": "Rules for web of trust",
      "SENTRIES": "Required number of certifications (given <b>and</b> received) to become a referring member",
      "SENTRIES_FORMULA": "Required number of certifications to become a referring member (formula)",
      "XPERCENT":"Minimum percent of referring member to reach to match the distance rule",
      "AVG_GEN_TIME": "The average time between 2 blocks",
      "CURRENT": "current",
      "MATH_CEILING": "CEILING",
      "DISPLAY_ALL_RULES": "Display all rules?",
      "BTN_SHOW_LICENSE": "Show license",
      "WOT_DIVIDER": "Web of trust"
    },
    "LICENSE": {
      "TITLE": "Currency license",
      "BTN_DOWNLOAD": "Download file",
      "NO_LICENSE_FILE": "License file not found."
    }
  },
  "NETWORK": {
    "VIEW": {
      "MEDIAN_TIME": "Blockchain time",
      "LOADING_PEERS": "Loading peers...",
      "NODE_ADDRESS": "Address:",
      "SOFTWARE": "Software:",
      "WARN_PRE_RELEASE": "Pre-release (latest stable: <b>{{version}}</b>)",
      "WARN_NEW_RELEASE": "Version <b>{{version}}</b> available",
      "WS2PID": "Identifier:",
      "PRIVATE_ACCESS": "Private access",
      "POW_PREFIX": "Proof of work prefix:",
      "ENDPOINTS": {
        "BMAS": "Secure endpoint (SSL)",
        "BMATOR": "TOR endpoint",
        "WS2P": "WS2P endpoint",
        "ES_USER_API": "Cesium+ data node"
      }
    },
    "INFO": {
      "ONLY_SSL_PEERS": "Non-SSL nodes have a degraded display because Cesium works in HTTPS mode."
    }
  },
  "PEER": {
    "PEERS": "Peers",
    "SIGNED_ON_BLOCK": "Signed on block",
    "MIRROR": "mirror",
    "MIRRORS": "Mirror peers",
    "PEER_LIST" : "Peer's list",
    "MEMBERS" : "Member peers",
    "ALL_PEERS" : "All peers",
    "DIFFICULTY" : "Difficulty",
    "API" : "API",
    "CURRENT_BLOCK" : "Block #",
    "POPOVER_FILTER_TITLE": "Filter",
    "OFFLINE": "Offline peers",
    "BTN_SHOW_PEER": "Show peer",
    "VIEW": {
      "TITLE": "Peer",
      "OWNER": "Owned by ",
      "SHOW_RAW_PEERING": "See peering document",
      "SHOW_RAW_CURRENT_BLOCK": "See current block (raw format)",
      "LAST_BLOCKS": "Last blocks",
      "KNOWN_PEERS": "Known peers :",
      "GENERAL_DIVIDER": "General information",
      "ERROR": {
        "LOADING_TOR_NODE_ERROR": "Could not get peer data, using the TOR network.",
        "LOADING_NODE_ERROR": "Could not get peer data"
      }
    }
  },
  "WOT": {
    "SEARCH_HELP": "Search (member or public key)",
    "SEARCH_INIT_PHASE_WARNING": "During the pre-registration phase, the search for pending registrations <b>may be long</b>. Please wait ...",
    "REGISTERED_SINCE": "Registered on",
    "REGISTERED_SINCE_BLOCK": "Registered since block #",
    "NO_CERTIFICATION": "No validated certification",
    "NO_GIVEN_CERTIFICATION": "No given certification",
    "NOT_MEMBER_PARENTHESIS": "(non-member)",
    "IDENTITY_REVOKED_PARENTHESIS": "(identity revoked)",
    "MEMBER_PENDING_REVOCATION_PARENTHESIS": "(being revoked)",
    "EXPIRE_IN": "Expires",
    "NOT_WRITTEN_EXPIRE_IN": "Deadline<br/>treatment",
    "EXPIRED": "Expired",
    "PSEUDO": "Pseudonym",
    "SIGNED_ON_BLOCK": "Emitted on block #{{block}}",
    "WRITTEN_ON_BLOCK": "Written on block #{{block}}",
    "GENERAL_DIVIDER": "General information",
    "NOT_MEMBER_ACCOUNT": "Non-member account",
    "NOT_MEMBER_ACCOUNT_HELP": "This is a simple wallet, with no pending membership application.",
    "TECHNICAL_DIVIDER": "Technical data",
    "BTN_CERTIFY": "Certify",
    "BTN_YES_CERTIFY": "Yes, certify",
    "BTN_SELECT_AND_CERTIFY": "New certification",
    "ACCOUNT_OPERATIONS": "Account operations",
    "VIEW": {
      "POPOVER_SHARE_TITLE": "Identity {{title}}"
    },
    "LOOKUP": {
      "TITLE": "Registry",
      "NEWCOMERS": "New members:",
      "NEWCOMERS_COUNT": "{{count}} members",
      "PENDING": "Pending registrations:",
      "PENDING_COUNT": "{{count}} pending registrations",
      "REGISTERED": "Registered {{sigDate | formatFromNow}}",
      "MEMBER_FROM": "Member since {{memberDate|formatFromNowShort}}",
      "BTN_NEWCOMERS": "Latest members",
      "BTN_PENDING": "Pending registrations",
      "SHOW_MORE": "Show more",
      "SHOW_MORE_COUNT": "(current limit to {{limit}})",
      "NO_PENDING": "No pending registrations.",
      "NO_NEWCOMERS": "No members."
    },
    "CONTACTS": {
      "TITLE": "Contacts"
    },
    "MODAL": {
      "TITLE": "Search"
    },
    "CERTIFICATIONS": {
      "TITLE": "{{uid}} - Certifications",
      "SUMMARY": "Received certifications",
      "LIST": "Details of received certifications",
      "PENDING_LIST": "Pending certifications",
      "RECEIVED": "Received certifications",
      "RECEIVED_BY": "Certifications received by {{uid}}",
      "ERROR": "Received certifications in error",
      "SENTRY_MEMBER": "Referring member"
    },
    "OPERATIONS": {
      "TITLE": "{{uid}} - Operations"
    },
    "GIVEN_CERTIFICATIONS": {
      "TITLE": "{{uid}} - Certifications sent",
      "SUMMARY": "Sent certifications",
      "LIST": "Details of sent certifications",
      "PENDING_LIST": "Pending certifications",
      "SENT": "Sent certifications",
      "SENT_BY": "Certifications sent by {{uid}}",
      "ERROR": "Sent certifications with error"
    }
  },
  "LOGIN": {
    "TITLE": "<i class=\"icon ion-log-in\"></i> Login",
    "SCRYPT_FORM_HELP": "Please enter your credentials. <br> Remember to check the public key for your account.",
    "PUBKEY_FORM_HELP": "Please enter a public account key:",
    "FILE_FORM_HELP": "Choose the keychain file to use:",
    "SCAN_FORM_HELP": "Scan the QR code of a wallet.",
    "SALT": "Secret identifier",
    "SALT_HELP": "Secret identifier",
    "SHOW_SALT": "Display secret identifier?",
    "PASSWORD": "Password",
    "PASSWORD_HELP": "Password",
    "PUBKEY_HELP": "Public key or pseudonym",
    "NO_ACCOUNT_QUESTION": "Don't have an account yet?",
    "CREATE_ACCOUNT": "Create an account",
    "FORGOTTEN_ID": "Forgot password?",
    "ASSOCIATED_PUBKEY": "Public key :",
    "BTN_METHODS": "Other methods",
    "BTN_METHODS_DOTS": "Change method...",
    "METHOD_POPOVER_TITLE": "Methods",
    "MEMORIZE_AUTH_FILE": "Memorize this keychain during the navigation session",
    "SCRYPT_PARAMETERS": "ParamÃ¨tres (Scrypt) :",
    "AUTO_LOGOUT": {
      "TITLE": "Information",
      "MESSAGE": "<i class=\"ion-android-time\"></i> You were <b>logout</ b> automatically, due to prolonged inactivity.",
      "BTN_RELOGIN": "Sign In",
      "IDLE_WARNING": "You will be logout... {{countdown}}"
    },
    "METHOD": {
      "SCRYPT_DEFAULT": "Standard salt (default)",
      "SCRYPT_ADVANCED": "Advanced salt",
      "FILE": "Keychain file",
      "PUBKEY": "Public key only",
      "SCAN": "Scan a QR code"
    },
    "SCRYPT": {
      "SIMPLE": "Light salt",
      "DEFAULT": "Standard salt",
      "SECURE": "Secure salt",
      "HARDEST": "Hardest salt",
      "EXTREME": "Extreme salt",
      "USER": "Personal value",
      "N": "N (Loop):",
      "r": "r (RAM):",
      "p": "p (CPU):"
    },
    "FILE": {
      "DATE" : "Date:",
      "TYPE" : "Type:",
      "SIZE": "Size:",
      "VALIDATING": "Validating...",
      "HELP": "Expected file format: <b>.dunikey</b> (type PubSec). Other formats are under development (EWIF, WIF)."
    }
  },
  "AUTH": {
    "TITLE": "<i class=\"icon ion-locked\"></i> Authentication",
    "BTN_AUTH": "Authenticate",
    "GENERAL_HELP": "Please authenticate yourself:",
    "EXPECTED_UID_HELP": "Please authenticate to the account <i class=\"ion-person\"></i> {{uid}}:",
    "EXPECTED_PUBKEY_HELP": "Please authenticate to the wallet <i class=\"ion-key\"></i> {{pubkey|formatPubkey}}:",
    "SCAN_FORM_HELP": "Scan the QR code of the <b>private key</b> of the wallet."
  },
  "ACCOUNT": {
    "TITLE": "My Account",
    "BALANCE": "Balance",
    "LAST_TX": "Latest transactions",
    "BALANCE_ACCOUNT": "Account balance",
    "NO_TX": "No transaction",
    "SHOW_MORE_TX": "Show more",
    "SHOW_ALL_TX": "Show all",
    "TX_FROM_DATE": "(current limit to {{fromTime|formatFromNowShort}})",
    "PENDING_TX": "Pending transactions",
    "VALIDATING_TX": "Transactions being validated",
    "ERROR_TX": "Transaction not executed",
    "ERROR_TX_SENT": "Sent transactions",
    "PENDING_TX_RECEIVED": "Transactions awaiting receipt",
    "EVENTS": "Events",
    "WAITING_MEMBERSHIP": "Membership application sent. Waiting validation.",
    "WAITING_CERTIFICATIONS": "You need {{needCertificationCount}} certification(s) to become a member",
    "WILL_MISSING_CERTIFICATIONS": "You will <b>lack certifications</b> soon (at least {{willNeedCertificationCount}} more are needed)",
    "WILL_NEED_RENEW_MEMBERSHIP": "Your membership <b>will expire {{membershipExpiresIn|formatDurationTo}}</b>. Remember to <a ng-click=\"doQuickFix('renew')\">renew your membership</a> before then.",
    "NEED_RENEW_MEMBERSHIP": "You are no longer a member because your membership <b>has expired</b>. Remember to <a ng-click=\"doQuickFix('renew')\">renew your membership</a>.",
    "NO_WAITING_MEMBERSHIP": "No membership application pending. If you'd like to <b>become a member</ b>, please <a ng-click=\"doQuickFix('membership')\">send the membership application</a>.",
    "CERTIFICATION_COUNT": "Received certifications",
    "CERTIFICATION_COUNT_SHORT": "Certifications",
    "SIG_STOCK": "Stock of certifications to give",
    "BTN_RECEIVE_MONEY": "Receive",
    "BTN_SELECT_ALTERNATIVES_IDENTITIES": "Switch to another identity...",
    "BTN_FIX_MEMBERSHIP": "Resubmit membership request...",
    "BTN_MEMBERSHIP_RENEW": "Renew membership",
    "BTN_MEMBERSHIP_RENEW_DOTS": "Renew membership...",
    "BTN_MEMBERSHIP_OUT_DOTS": "Revoke membership...",
    "BTN_SECURITY_DOTS": "Sign-in and security...",
    "BTN_SHOW_DETAILS": "Display technical data",
    "LOCKED_OUTPUTS_POPOVER": {
      "TITLE": "Locked amount",
      "DESCRIPTION": "Here are the conditions for unlocking this amount:",
      "DESCRIPTION_MANY": "This transaction consists of several parts, of which the unlock conditions are:",
      "LOCKED_AMOUNT": "Conditions for the amount:"
    },
    "NEW": {
      "TITLE": "Registration",
      "INTRO_WARNING_TIME": "Creating an account on {{name|capitalize}} is very simple. Please take sufficient time to do this correctly (not to forget the usernames, passwords, etc.).",
      "INTRO_WARNING_SECURITY": "Check that the hardware you are currently using (computer, tablet, phone) <b>is secure and trustworthy </b>.",
      "INTRO_WARNING_SECURITY_HELP": "Up-to-date anti-virus, firewall enabled, session protected by password or pin code...",
      "INTRO_HELP": "Click <b> {{'COMMON.BTN_START'|translate}}</b> to begin creating an account. You will be guided step by step.",
      "REGISTRATION_NODE": "Your registration will be registered via the Duniter peer <b>{{server}}</b> node, which will then be distributed to the rest of the currency network.",
      "REGISTRATION_NODE_HELP": "If you do not trust this peer, please change <a ng-click=\"doQuickFix('settings')\">in the settings</a> of Cesium.",
      "SELECT_ACCOUNT_TYPE": "Choose the type of account to create:",
      "MEMBER_ACCOUNT": "Member account",
      "MEMBER_ACCOUNT_TITLE": "Create a member account",
      "MEMBER_ACCOUNT_HELP": "If you are not yet registered as an individual (one account possible per individual).",
      "WALLET_ACCOUNT": "Simple wallet",
      "WALLET_ACCOUNT_TITLE": "Create a wallet",
      "WALLET_ACCOUNT_HELP": "If you represent a company, association, etc. or simply need an additional wallet. No universal dividend will be created by this account.",
      "SALT_WARNING": "Choose a secret identifier.<br/>You need it for each connection to this account.<br/><br/><b>Make sure to remember this identifier</b>.<br/>If lost, there are no means to retrieve it!",
      "PASSWORD_WARNING": "Choose a password.<br/>You need it for each connection to this account.<br/><br/><b>Make sure to remember this password</b>.<br/>If lost, there are no means to retrieve it!",
      "PSEUDO_WARNING": "Choose a pseudonym.<br/>It may be used by other people to find you more easily.<br/><br/>.Use of <b>commas, spaces and accents</b> is not allowed.<br/><div class='hidden-xs'><br/>Example: <span class='gray'>JohnDalton, JackieChan, etc.</span>",
      "PSEUDO": "Pseudonym",
      "PSEUDO_HELP": "joe123",
      "SALT_CONFIRM": "Confirm",
      "SALT_CONFIRM_HELP": "Confirm the secret identifier",
      "PASSWORD_CONFIRM": "Confirm",
      "PASSWORD_CONFIRM_HELP": "Confirm the password",
      "SLIDE_6_TITLE": "Confirmation:",
      "COMPUTING_PUBKEY": "Computing...",
      "LAST_SLIDE_CONGRATULATION": "You completed all required fields.<br/><b>You can send the account creation request</b>.<br/><br/>For information, the public key below identifies your future account.<br/>It can be communicated to third parties to receive their payment.<br/>Once your account has been approved, you can find this key under <b>{{'ACCOUNT.TITLE'|translate}}</b>.",
      "CONFIRMATION_MEMBER_ACCOUNT": "<b class=\"assertive\">Warning:</b> your secret identifier, password and pseudonym can not be changed.<br/><b>Make sure you always remember it!</b><br/><b>Are you sure</b> you want to send this account creation request?",
      "CONFIRMATION_WALLET_ACCOUNT": "<b class=\"assertive\">Warning:</b> your password and pseudonym can not be changed.<br/><b>Make sure you always remember it!</b><br/><b>Are you sure</b> you want to continue?",
      "CHECKING_PSEUDO": "Checking...",
      "PSEUDO_AVAILABLE": "This pseudonym is available",
      "PSEUDO_NOT_AVAILABLE": "This pseudonym is not available",
      "INFO_LICENSE": "To be able to adhere to the currency, we ask you to kindly read and accept this license.",
      "BTN_ACCEPT": "I accept",
      "BTN_ACCEPT_LICENSE": "I accept the license"
    },
    "POPUP_REGISTER": {
      "TITLE": "Enter a pseudonym",
      "HELP": "A pseudonym is needed to let other members find you."
    },
    "SELECT_IDENTITY_MODAL": {
      "TITLE": "Identity selection",
      "HELP": "Several <b>different identities</b> have been sent, for the public key <span class=\"gray\"> <i class=\"ion-key\"></i> {{pubkey | formatPubkey}}</span>.<br/>Please select the identity to use:"
    },
    "SELECT_WALLET_MODAL": {
      "TITLE": "Wallet selection"
    },
    "WALLET_LIST": {
      "TITLE": "My wallets",
      "BTN_NEW": "Add a wallet",
      "NO_WALLET": "No secondary wallet",
      "BTN_DELETE": "Remove a secondary wallet...",
      "BTN_RENAME": "Rename the wallet",
      "EDIT_POPOVER": {
        "TITLE": "Rename the wallet",
        "HELP": "Fill in the new name",
        "NAME_HELP": "Wallet name"
      }
    },
    "SECURITY":{
      "ADD_QUESTION" : "Add custom question",
      "BTN_CLEAN" : "Clean",
      "BTN_RESET" : "Reset",
      "DOWNLOAD_REVOKE": "Save a revocation file",
      "DOWNLOAD_REVOKE_HELP" : "Having a revocation file is important, for example in case of loss of identifiers. It allows you to <b>get this account out of the Web Of Trust</b>, thus becoming a simple wallet.",
      "GENERATE_KEYFILE": "Generate my keychain file ...",
      "GENERATE_KEYFILE_HELP": "Generate a file allowing you to authenticate without entering your identifiers.<br/><b>Warning:</b> this file will contain your secret key; It is therefore very important to put it in a safe place!",
      "KEYFILE_FILENAME": "keychain-{{pubkey|formatPubkey}}-{{currency}}-{{format}}.dunikey",
      "MEMBERSHIP_IN": "Register as member...",
      "MEMBERSHIP_IN_HELP": "Allows you to <b>transform </b> a simple wallet account <b>into a member account</b>, by sending a membership request. Useful only if you do not already have another member account.",
      "SEND_IDENTITY": "Publish identity...",
      "SEND_IDENTITY_HELP": "Allows you to associate a pseudonym to this account, but <b>without applying for membership</b> to become a member. This is not very useful because the validity of this pseudonym association is limited in time.",
      "HELP_LEVEL": "Choose <strong> at least {{nb}} questions </strong> :",
      "LEVEL": "Security level",
      "LOW_LEVEL": "Low <span class=\"hidden-xs\">(2 questions minimum)</span>",
      "MEDIUM_LEVEL": "Medium <span class=\"hidden-xs\">(4 questions minimum)</span>",
      "QUESTION_1": "What was your best friend's name when you were a teen ?",
      "QUESTION_2": "What was the name of your first pet ?",
      "QUESTION_3": "What is the first meal you have learned to cook ?",
      "QUESTION_4": "What is the first movie you saw in the cinema?",
      "QUESTION_5": "Where did you go the first time you flew ?",
      "QUESTION_6": "What was your favorite elementary school teacher's name  ?",
      "QUESTION_7": "What would you consider the ideal job ?",
      "QUESTION_8": "Which children's book do you prefer?",
      "QUESTION_9": "What was the model of your first vehicle?",
      "QUESTION_10": "What was your nickname when you were a child ?",
      "QUESTION_11": "What was your favorite movie character or actor when you were a student ?",
      "QUESTION_12": "What was your favorite singer or band when you were a student ?",
      "QUESTION_13": "In which city did your parents meet ?",
      "QUESTION_14": "What was the name of your first boss ?",
      "QUESTION_15": "What is the name of the street where you grew up ?",
      "QUESTION_16": "What is the name of the first beach where you go swim ?",
      "QUESTION_17": "QWhat is the first album you bought ?",
      "QUESTION_18": "What is the name of your favorite sport team ?",
      "QUESTION_19": "What was your grand-father's job ?",
      "RECOVER_ID": "Recover my password...",
      "RECOVER_ID_HELP": "If you have a <b>backup file of your identifiers</b>, you can find them by answering your personal questions correctly.",
      "REVOCATION_WITH_FILE" : "Rekoke my member account...",
      "REVOCATION_WITH_FILE_DESCRIPTION": "If you have <b>permanently lost your member account credentials (or if account security is compromised), you can use <b>the revocation file</b> of the account <b>to quit the Web Of Trust</b>.",
      "REVOCATION_WITH_FILE_HELP": "To <b>permanently revoke</ b> a member account, please drag the revocation file in the box below, or click in the box to search for a file.",
      "REVOCATION_WALLET": "Revoke this account immediately",
      "REVOCATION_WALLET_HELP": "Requesting revocation of your identity causes <b>will revoke your membership</ b> (definitely for the associated pseudonym and public key). The account will no longer be able to produce a Universal Dividend.<br/>However, you can still use it as a simple wallet.",
      "REVOCATION_FILENAME": "revocation-{{uid}}-{{pubkey|formatPubkey}}-{{currency}}.txt",
      "SAVE_ID": "Save my credentials...",
      "SAVE_ID_HELP": "Creating a backup file, to <b>retrieve your password</b> (and the secret identifier) <b> in case of forgetting</b>. The file is <b>secured</ b> (encrypted) using personal questions.",
      "STRONG_LEVEL": "Strong <span class=\"hidden-xs \">(6 questions minimum)</span>",
      "TITLE": "Account and security",
      "KEYFILE": {
        "PUBSEC_FORMAT": "PubSec format.",
        "PUBSEC_FORMAT_HELP": "This file format is compatible in particular with Cesium and Gannonce. Your keychain is stored <b>without encryption</b>: anyone with a copy of this file will be able to empty your account.",
        "WIF_FORMAT": "Wallet Import Format (WIF)",
        "WIF_FORMAT_HELP": "This format is used in particular by paper wallets. Your keychain is stored <b>without encryption</b>: anyone with a copy of this file will be able to empty your account.",
        "EWIF_FORMAT": "Encrypted Wallet Import Format (WIF)",
        "EWIF_FORMAT_HELP": "This format is used in particular by paper wallets. However, <b>the keychain is encrypted</b> from a passphrase of your choice.",
        "PASSWORD_POPUP": {
          "TITLE": "Keychain file encrypted",
          "HELP": "Please enter the passphrase:",
          "PASSWORD_HELP": "Passphrase"
        },
        "ERROR": {
          "BAD_PASSWORD": "Bad passphrase"
        }
      }
    },
    "FILE_NAME": "{{currency}} - Account statement {{pubkey|formatPubkey}} to {{currentTime|formatDateForFile}}.csv",
    "HEADERS": {
      "TIME": "Date",
      "AMOUNT": "Amount",
      "COMMENT": "Comment"
    }
  },
  "TRANSFER": {
    "TITLE": "Transfer",
    "SUB_TITLE": "Transfer money",
    "SUB_TITLE_ALL": "Empty the account",
    "FROM": "From",
    "TO": "To",
    "AMOUNT": "Amount",
    "AMOUNT_HELP": "Amount",
    "COMMENT": "Comment",
    "COMMENT_HELP": "Comment (optional)",
    "BTN_SEND": "Send",
    "BTN_ADD_COMMENT": "Add a comment",
    "REST": "Rest of account",
    "REST_TO": "to",
    "WARN_COMMENT_IS_PUBLIC": "Please note that <b>comments are public</b> (not encrypted).",
    "MODAL": {
      "TITLE": "Transfer"
    }
  },
  "ERROR": {
    "UNKNOWN_URI_FORMAT": "Unknown URI format",
    "PUBKEY_INVALID_CHECKSUM": "Invalid public key (bad checksum).",
    "POPUP_TITLE": "Error",
    "UNKNOWN_ERROR": "Unknown error",
    "CRYPTO_UNKNOWN_ERROR": "Your browser is not compatible with cryptographic features.",
    "DOWNLOAD_KEYFILE_FAILED": "Failed to generate the keychain file.",
    "EQUALS_TO_PSEUDO": "Must be different from pseudonym",
    "EQUALS_TO_SALT": "Must be different from secret identifier",
    "FIELD_REQUIRED": "This field is required.",
    "FIELD_TOO_SHORT": "This field value is too short.",
    "FIELD_TOO_SHORT_WITH_LENGTH": "Value is too short (min {{minLength]] characters).",
    "FIELD_TOO_LONG": "Value is exceeding max length.",
    "FIELD_TOO_LONG_WITH_LENGTH": "Value is too long (max {{maxLength}} characters).",
    "FIELD_MIN": "Minimum value: {{min}}",
    "FIELD_MAX": "Maximal value: {{max}}",
    "FIELD_ACCENT": "Commas and accent characters not allowed",
    "FIELD_NOT_NUMBER": "Value is not a number",
    "FIELD_NOT_INT": "Value is not an integer",
    "FIELD_NOT_EMAIL": "Email adress not valid",
    "PASSWORD_NOT_CONFIRMED": "Must match previous password.",
    "SALT_NOT_CONFIRMED": "Must match previous identifier.",
    "SEND_IDENTITY_FAILED": "Error while trying to register.",
    "SEND_CERTIFICATION_FAILED": "Could not certify identity.",
    "NEED_MEMBER_ACCOUNT_TO_CERTIFY": "You could not send certification, because your account is <b>not a member account</b>.",
    "NEED_MEMBER_ACCOUNT_TO_CERTIFY_HAS_SELF": "You could not send certification now, because your are <b>not a member</b> yet.<br/><br/>You still need certification to become a member.",
    "NOT_MEMBER_FOR_CERTIFICATION": "Your account is not a member account yet.",
    "IDENTITY_TO_CERTIFY_HAS_NO_SELF": "This account could not be certified. No registration found, or need to renew.",
    "LOGIN_FAILED": "Error while sign in.",
    "LOAD_IDENTITY_FAILED": "Could not load identity.",
    "LOAD_REQUIREMENTS_FAILED": "Could not load identity requirements.",
    "SEND_MEMBERSHIP_IN_FAILED": "Error while sending registration as member.",
    "SEND_MEMBERSHIP_OUT_FAILED": "Error while sending membership revocation.",
    "REFRESH_WALLET_DATA": "Could not refresh wallet.",
    "GET_CURRENCY_PARAMETER": "Could not get currency parameters.",
    "GET_CURRENCY_FAILED": "Could not load currency. Please retry later.",
    "SEND_TX_FAILED": "Could not send transaction.",
    "ALL_SOURCES_USED": "Please wait the next block computation (All transaction sources has been used).",
    "NOT_ENOUGH_SOURCES": "Not enough changes to send this amount in one time.<br/>Maximum amount: {{amount}} {{unit}}<sub>{{subUnit}}</sub>.",
    "ACCOUNT_CREATION_FAILED": "Error while creating your member account.",
    "RESTORE_WALLET_DATA_ERROR": "Error while reloading settings from local storage",
    "LOAD_WALLET_DATA_ERROR": "Error while loading wallet data.",
    "COPY_CLIPBOARD_FAILED": "Could not copy to clipboard",
    "TAKE_PICTURE_FAILED": "Could not get picture.",
    "SCAN_FAILED": "Could not scan QR code.",
    "SCAN_UNKNOWN_FORMAT": "Code not recognized.",
    "WOT_LOOKUP_FAILED": "Search failed.",
    "LOAD_PEER_DATA_FAILED": "Duniter peer not accessible. Please retry later.",
    "NEED_LOGIN_FIRST": "Please sign in first.",
    "AMOUNT_REQUIRED": "Amount is required.",
    "AMOUNT_NEGATIVE": "Negative amount not allowed.",
    "NOT_ENOUGH_CREDIT": "Not enough credit.",
    "INVALID_NODE_SUMMARY": "Unreachable peer or invalid address",
    "INVALID_USER_ID": "Field 'pseudonym' must not contains spaces or special characters.",
    "INVALID_COMMENT": "Field 'reference' has a bad format.",
    "INVALID_PUBKEY": "Public key has a bad format.",
    "INVALID_PUBKEY_CHECKSUM": "Invalid checksum.",
    "IDENTITY_REVOKED": "This identity <b>has been revoked {{revocationTime|formatFromNow}}</b> ({{revocationTime|formatDate}}). It can no longer become a member.",
    "IDENTITY_PENDING_REVOCATION": "The <b>revocation of this identity</b> has been requested and is awaiting processing. Certification is therefore disabled.",
    "IDENTITY_INVALID_BLOCK_HASH": "This membership application is no longer valid (because it references a block that network peers are cancelled): the person must renew its application for membership <b>before</b> being certified.",
    "IDENTITY_EXPIRED": "This identity has expired: this person must re-apply <b>before</b> being certified.",
    "IDENTITY_SANDBOX_FULL": "Could not register, because peer's sandbox is full.<br/><br/>Please retry later or choose another Duniter peer (in <b>Settings</b>).",
    "IDENTITY_NOT_FOUND": "Identity not found",
    "IDENTITY_TX_FAILED": "Error while getting identity's transactions",
    "WOT_PENDING_INVALID_BLOCK_HASH": "Membership not valid.",
    "WALLET_INVALID_BLOCK_HASH": "Your membership application is no longer valid (because it references a block that network peers are cancelled).<br/>You must <a ng-click=\"doQuickFix('renew')\">renew your application for membership</a> to fix this issue.",
    "WALLET_IDENTITY_EXPIRED": "The publication of your identity <b>has expired</b>.<br/>You must <a ng-click=\"doQuickFix('fixIdentity')\">re-issue your identity</a> to resolve this issue.",
    "WALLET_REVOKED": "Your identity has been <b>revoked</b>: neither your pseudonym nor your public key will be used in the future for a member account.",
    "WALLET_HAS_NO_SELF": "Your identity must first have been published, and not expired.",
    "AUTH_REQUIRED": "Authentication required.",
    "AUTH_INVALID_PUBKEY": "The public key does not match the connected account.",
    "AUTH_INVALID_SCRYPT": "Invalid username or password.",
    "AUTH_INVALID_FILE": "Invalid keychain file.",
    "AUTH_FILE_ERROR": "Failed to open keychain file",
    "IDENTITY_ALREADY_CERTIFY": "You have <b>already certified</b> that identity.<br/><br/>Your certificate is still valid (expires {{expiresIn|formatDuration}}).",
    "IDENTITY_ALREADY_CERTIFY_PENDING": "You have <b>already certified</b> that identity.<br/><br/>Your certification is still pending (Deadline for treatment {{expiresIn|formatDuration}}).",
    "UNABLE_TO_CERTIFY_TITLE": "Unable to certify",
    "LOAD_NEWCOMERS_FAILED": "Unable to load new members.",
    "LOAD_PENDING_FAILED": "Unable to load pending registrations.",
    "ONLY_MEMBER_CAN_EXECUTE_THIS_ACTION": "You must <b>be a member</b> in order to perform this action.",
    "ONLY_SELF_CAN_EXECUTE_THIS_ACTION": "You must have <b>published your identity</b> in order to perform this action.",
    "GET_BLOCK_FAILED": "Error while getting block",
    "INVALID_BLOCK_HASH": "Block not found (incorrect hash)",
    "DOWNLOAD_REVOCATION_FAILED": "Error while downloading revocation file.",
    "REVOCATION_FAILED": "Error while trying to revoke the identity.",
    "SALT_OR_PASSWORD_NOT_CONFIRMED": "Wrong secret identifier or password ",
    "RECOVER_ID_FAILED": "Could not recover password",
    "LOAD_FILE_FAILED" : "Unable to load file",
    "NOT_VALID_REVOCATION_FILE": "Invalid revocation file (wrong file format)",
    "NOT_VALID_SAVE_ID_FILE": "Invalid credentials backup file (wrong file format)",
    "NOT_VALID_KEY_FILE": "Invalid keychain file (unrecognized format)",
    "EXISTING_ACCOUNT": "Your identifiers correspond to an already existing account, whose <a ng-click=\"showHelpModal('pubkey')\">public key</a> is:",
    "EXISTING_ACCOUNT_REQUEST": "Please modify your credentials so that they correspond to an unused account.",
    "GET_LICENSE_FILE_FAILED": "Unable to get license file",
    "CHECK_NETWORK_CONNECTION": "No peer appears to be accessible.<br/><br/>Please <b>check your Internet connection</b>.",
    "ISSUE_524_TX_FAILED": "Failed to transfer.<br/><br/>A message has been sent to developers to help solve the problem.<b>Thank you for your help</b>.",
    "ADD_SECONDARY_WALLET_FAILED": "Unable to add secondary wallet.",
    "UPDATE_WALLET_LIST_FAILED": "Unable to refresh the list of wallets.",
    "LOAD_WALLET_LIST_FAILED": "Unable to load the list of wallets.",
    "COULD_NOT_ADD_MAIN_WALLET": "The wallet to add <b>must be different from the main account</b> with which you are connected.",
    "UNKNOWN_WALLET_ID": "Unknown secondary wallet."
  },
  "INFO": {
    "POPUP_TITLE": "Information",
    "CERTIFICATION_DONE": "Identity successfully signed",
    "NOT_ENOUGH_CREDIT": "Not enough credit",
    "TRANSFER_SENT": "Transfer request successfully sent",
    "COPY_TO_CLIPBOARD_DONE": "Copy succeeded",
    "MEMBERSHIP_OUT_SENT": "Membership revocation sent",
    "NOT_NEED_MEMBERSHIP": "Already a member.",
    "IDENTITY_WILL_MISSING_CERTIFICATIONS": "This identity will soon lack certification (at least {{willNeedCertificationCount}}).",
    "IDENTITY_NEED_MEMBERSHIP": "This identity did not send a membership request. She will have to if she wishes to become a member.",
    "REVOCATION_SENT": "Revocation sent successfully",
    "REVOCATION_SENT_WAITING_PROCESS": "Revocation <b>has been sent successfully</b>. It is awaiting processing.",
    "FEATURES_NOT_IMPLEMENTED": "This features is not implemented yet.<br/><br/>Why not to contribute to get it faster? ;)",
    "EMPTY_TX_HISTORY": "No operations to export"
  },
  "CONFIRM": {
    "POPUP_TITLE": "<b>Confirmation</b>",
    "POPUP_WARNING_TITLE": "<b>Warning</b>",
    "POPUP_SECURITY_WARNING_TITLE": "<i class=\"icon ion-alert-circled\"></i> <b>Security warning</b>",
    "CERTIFY_RULES_TITLE_UID": "Certify {{uid}}",
    "CERTIFY_RULES": "<b class=\"assertive\">Don't certify an account</b> if you believe that: <ul><li>1.) the issuers identity might be faked.<li>2.) the issuer already has another certified account.<li>3.) the issuer purposely or carelessly violates rule 1 or 2 (he certifies faked or double accounts).</ul></small><br/>Are you sure you want to certify this identity?",
    "TRANSFER": "<b>Transfer summary:</b><br/><br/><ul><li> - From: <b>{{from}}</b></li><li> - To: <b>{{to}}</b></li><li> - Amount: <b>{{amount}} {{unit}}</b></li><li> - Comment: <i>{{comment}}</i></li></ul><br/><b>Are-you sure you want to do this transfer?</b>",
    "TRANSFER_ALL": "<b>Transfer summary:</b><br/><br/><ul><li> - From: <b>{{from}}</b></li><li> - To: <b>{{to}}</b></li><li> - Amount: <b>{{amount}} {{unit}}</b></li><li> - Comment: <i>{{comment}}</i></li><br/><li> - Rest : <b>{{restAmount}} {{unit}}</b> to <b>{{restTo}}</b></li></ul><br/><b>Are-you sure you want to do this transfer?</b>",
    "MEMBERSHIP_OUT": "This operation is <b>irreversible</b>.<br/></br/><b>Are you sure you want to terminate your membership?</b>",
    "MEMBERSHIP_OUT_2": "This operation is <b>irreversible</b>!<br/><br/>Are you sure you want to <b>terminate your membership</b>?",
    "LOGIN_UNUSED_WALLET_TITLE": "Typing error?",
    "LOGIN_UNUSED_WALLET": "The account seems to be <b>inactive</b>.<br/><br/>It's probably a <b>typing error</b> when sign in. Please try again, checking that <b>public key is yours<b/>.",
    "FIX_IDENTITY": "The pseudonym <b>{{uid}}</b> will be published again, replacing the old publication that has expired.<br/></br/><b>Are you sure</b> you want to continue?",
    "FIX_MEMBERSHIP": "Your application for membership will be sent.<br/></br/><b>Are you sure?</b>",
    "MEMBERSHIP": "Your membership request will be sent. <br/></br/><b>Are you sure?</b>",
    "RENEW_MEMBERSHIP": "Your membership will be renewed.<br/></br/><b>Are you sure?</b>",
    "REVOKE_IDENTITY": "You will <b>definitely revoke this identity</b>.<br/><br/>The public key and the associated pseudonym <b>will never be used again</b> (for a member account).<br/></br/><b>Are you sure</b> you want to revoke this identity?",
    "REVOKE_IDENTITY_2": "This operation is <b>irreversible</b>!<br/><br/>Are you sure you want to <b>revoke this identity</b>?",
    "NOT_NEED_RENEW_MEMBERSHIP": "Your membership does not need to be renewed (it will only expire in {{membershipExpiresIn|formatDuration}}).<br/></br/><b>Are you sure you</b> want to renew your membership?",
    "SAVE_BEFORE_LEAVE": "Do you want to <b>save your changes</b> before leaving the page?",
    "SAVE_BEFORE_LEAVE_TITLE": "Changes not saved",
    "LOGOUT": "Are you sure you want to logout?",
    "USE_FALLBACK_NODE": "Peer <b>{{old}}</b> unreachable or invalid address.<br/><br/>Do you want to temporarily use the <b>{{new}}</b> node?",
    "ISSUE_524_SEND_LOG": "The transaction was rejected because of a known problem (issue #524) but not reproduced.<br/><br/>To help developers correct this error, do you accept <b>the transmission of your logs</b> per message?<br/><small>(No confidential data is sent)</small>"
  },
  "DOWNLOAD": {
    "POPUP_TITLE": "<b>Revocation file</b>",
    "POPUP_REVOKE_MESSAGE": "To safeguard your account, please download the <b>account revocation document</b>. It will allow you to cancel your account (in case of account theft, ID, an incorrectly created account, etc.).<br/><br/><b>Please store it in a safe place.</b>"
  },
  "HELP": {
    "TITLE": "Online help",
    "JOIN": {
      "SECTION": "Join",
      "SALT": "The secret identifier is very important. It is used to hash you password, which in turn is used to calculate your <span class=\"text-italic\">public account key</span> (its number) and the private key to access it.<br/><b>Please remeber this identifier well</b>, because there is no way to recover it when lost.<br/>Furthermore, it cannot be changed without having to create a new account.<br/><br/>A good secret identifier must be sufficiently long (8 characters at the very least) and as original as possible.",
      "PASSWORD": "The password is very important. Together with the secret identifier, it is use to calculate your account number (pblic key) and the private key to access it.<br/><b>Please remember it well</b>, because there is no way to recover it when lost.<br/>Furthermore, it cannot be changed without having to create a new account.<br/><br/>A good password is made (ideally) of at least 8 characters, with at least one capital and one number.",
      "PSEUDO": "A pseudonym is used only when joining as <span class=\"text-italic\">member</span>. It is always associated with a wallet (by its <span class=\"text-italic\">public key</span>).<br/>It is published on the network so that other users may identify it, certify or send money to the account.<br/>A pseudonym must be unique among all members (current and past)."
    },
    "LOGIN": {
      "SECTION": "Log in",
      "PUBKEY": "Account public key",
      "PUBKEY_DEF": "The public key of the keychain is generated from the entered identifiers (any), but does not correspond to an account already used.<br/><b>Make sure your public key is the same as your account</b>. Otherwise, you will be logged into an account that is probably never used, as the risk of collision with an existing account is very small.<br/><a href=\"https://en.wikipedia.org/wiki/Elliptic_curve_cryptography\" target=\"_ system\">Learn more about cryptography</a> by public key.",
      "METHOD": "Connection methods",
      "METHOD_DEF": "Several options are available to connect to a portfolios: <br/> - The connection <b>with salt (simple or advanced)</b> mixes your password with the secret identifier, to limit the attempts of piracy<br/> - The connection <b>using public key</b> prevents you from entering your credentials, which you will be asked only when an operation need it.<br/> - The connection <b>using keychain file</b> will read the public and private keys of the account from a file without the need to enter credentials. Several file formats are possible."
    },
    "GLOSSARY": {
      "SECTION": "Glossary",
      "PUBKEY_DEF": "A public key always identifies a wallet. It may identify a member. In Cesium it is calculated using the secret identifier and the password.",
      "MEMBER": "Member",
      "MEMBER_DEF": "A member is a real and living human, wishing to participate freely to the monitary community. The member will receive universal dividend, according to the period and amount as defined in the <span class=\"text-italic\">currency parameters</span>.",
      "CURRENCY_RULES": "Currency rules",
      "CURRENCY_RULES_DEF": "The currency rules are defined only once, and for all. They set the parameters under which the currency will perform: universal dividend calculation, the amount of certifications needed to become a member, the maximum amount of certifications a member can send, etc.<br/><br/>The parameters cannot be modified because of the use of a <span class=\"text-italic\">Blockchain</span> which carries and executes these rules, and constantly verifies their correct application. <a href=\"#/app/currency\">See current parameters</a>.",
      "BLOCKCHAIN": "Blockchain",
      "BLOCKCHAIN_DEF": "The Blockchain is a decentralised system which, in case of Duniter, serves to carry and execute the <span class=\"text-italic\">currency rules</span>.<br/><a href=\"http://en.duniter.org/presentation/\" target=\"_blank\">Read more about Duniter</a> and the working of its blockchain.",
      "UNIVERSAL_DIVIDEND_DEF": "The Universal Dividend (UD) is the quantity of money co-created by each member, according to the period and the calculation defined in the <span class=\"text-italic\">currency rules</span>.<br/>Every term, the members receive an equal amount of new money on their account.<br/><br/>The UD undergoes a steady growth, to remain fair under its members (current and future), calculated by an average life expectancy, as demonstrated in the Relative Theory of Money (RTM).<br/><a href=\"http://trm.creationmonetaire.info\" target=\"_system\">Read more about RTM</a> and open money."
    },
    "TIP": {
      "MENU_BTN_CURRENCY": "Menu <b>{{'MENU.CURRENCY'|translate}}</b> allows discovery of <b>currency parameters</b> and its state.",
      "CURRENCY_WOT": "The <b>member count</b> shows the <b>community's weight and evolution</b>.",
      "CURRENCY_MASS": "Shown here is the <b>total amount</b> currently in circulation and its <b>average distribution</b> per member.<br/><br/>This allows to estimate the <b>worth of any amount</b>, in respect to what <b>others own</b> on their account (on average).",
      "CURRENCY_UNIT_RELATIVE": "The unit used here (&ldquo;<b>{{'COMMON.UD'|translate}}<sub>{{currency|abbreviate}}</sub></b>&rdquo;) signifies that the amounts in {{currency|capitalize}} have been devided by the <b>Universal Dividend</b> (UD).<br/><br/><small>This relative unit is <b>relevant</b> because it is stable in contrast to the permanently growing monitary mass.</small>",
      "CURRENCY_CHANGE_UNIT": "The option <b>{{'COMMON.BTN_RELATIVE_UNIT'|translate}}</b> allows to <b>switch the unit</b> to show amounts in <b>{{currency|capitalize}}</b>, undevided by the Universal Dividend (instead of in &ldquo;<b>{{'COMMON.UD'|translate}}<sub>{{currency|abbreviate}}</sub></b>&rdquo;).",
      "CURRENCY_CHANGE_UNIT_TO_RELATIVE": "The option <b>{{'COMMON.BTN_RELATIVE_UNIT'|translate}}</b> allows to <b>switch the unit</b> to show amounts in &ldquo;<b>{{'COMMON.UD'|translate}}<sub>{{currency|abbreviate}}</sub></b>&rdquo;, which is relative to the Universal Dividend (the amount co-produced by each member).",
      "CURRENCY_RULES": "The <b>rules</b> of the currency determine its <b>exact and predictible</b> performance.<br/><br/>As a true DNA of the currency these rules make the monetary code <b>transparent and understandable</b>.",
      "MENU_BTN_NETWORK": "Menu <b>{{'MENU.NETWORK'|translate}}</b> allows discovery of <b>network's state<b>.",
      "NETWORK_BLOCKCHAIN": "All monetary transactions are recoded in a <b>public and tamper proof</b> ledger, generally referred to as the <b>blockchain</b>.",
      "NETWORK_PEERS": "The <b>peers</b> shown here correspond to <b>computers that update and check</b> the blockchain.<br/><br/>The more active peers there are, the more <b>decentralised</b> and therefore trustworhty the currency becomes.",
      "NETWORK_PEERS_BLOCK_NUMBER": "This <b>number</b> (in green) indicates the peer's <b>latest validated block</b> (last page written in the ledger).<br/><br/>Green indicates that the block was equally validated by the <b>majority of other peers</b>.",
      "NETWORK_PEERS_PARTICIPATE": "<b>Each member</b>, equiped with a computer with Internet, <b>can participate, adding a peer</b> simply by <b>installing the Duniter software</b> (free/libre). <a target=\"_new\" href=\"{{installDocUrl}}\" target=\"_system\">Read the installation manual &gt;&gt;</a>.",
      "MENU_BTN_ACCOUNT": "<b>{{'ACCOUNT.TITLE'|translate}}</b> allows access to your account balance and transaction history.",
      "MENU_BTN_ACCOUNT_MEMBER": "Here you can consult your account status, transaction history and your certifications.",
      "WALLET_CERTIFICATIONS": "Click here to reveiw the details of your certifications (given and received).",
      "WALLET_RECEIVED_CERTIFICATIONS": "Click here to review the details of your <b>received certifications</b>.",
      "WALLET_GIVEN_CERTIFICATIONS": "Click here to review the details of your <b>given certifications</b>.",
      "WALLET_BALANCE": "Your account <b>balance</b> is shown here.",
      "WALLET_BALANCE_RELATIVE": "{{'HELP.TIP.WALLET_BALANCE'|translate}}<br/><br/>The used unit (&ldquo;<b>{{'COMMON.UD'|translate}}<sub>{{currency|abbreviate}}</sub></b>&rdquo;) signifies that the amount in {{currency|capitalize}} has been divided by the <b>Universal Dividend</b> (UD) co-created by each member.<br/>At this moment, 1 UD equals {{currentUD}} {{currency|capitalize}}.",
      "WALLET_BALANCE_CHANGE_UNIT": "You can <b>change the unit</b> in which amounts are shown in <b><i class=\"icon ion-android-settings\"></i>&nbsp;{{'MENU.SETTINGS'|translate}}</b>.<br/><br/>For example, to display amounts <b>directly in {{currency|capitalize}}</b> instead of relative amounts.",
      "WALLET_PUBKEY": "This is your account public key. You can communicate it to a third party so that it more easily identifies your account.",
      "WALLET_SEND": "Issue a payment in just a few clicks.",
      "WALLET_SEND_NO_MONEY": "Issue a payment in just a few clicks.<br/>(Your balance does not allow this yet)",
      "WALLET_OPTIONS": "Please note that this button allows access to <b>other, less used actions</b>.<br/><br/>Don't forget to take a quick look, when you have a moment!",
      "WALLET_RECEIVED_CERTS": "This shows the list of persons that certified you.",
      "WALLET_CERTIFY": "The button <b>{{'WOT.BTN_SELECT_AND_CERTIFY'|translate}}</b> allows selecting an identity and certifying it.<br/><br/>Only users that are <b>already member</b> may certify others.",
      "WALLET_CERT_STOCK": "Your supply of certifications (to send) is limited to <b>{{sigStock}} certifications</b>.<br/><br/>This supply will replete itself over time, as and when earlier certifications expire.",
      "MENU_BTN_TX_MEMBER": "<b>{{'MENU.TRANSACTIONS'|translate}}</b> allow access to transactions history, and send new payments.",
      "MENU_BTN_TX": "View the history of <b>your transactions</b> here and send new payments.",
      "MENU_BTN_WOT": "The menu <b>{{'MENU.WOT'|translate}}</b> allows searching <b>users</b> of the currency (member or not).",
      "WOT_SEARCH_TEXT_XS": "To search in the registry, type the <b>first letters of a users pseudonym or public key</b>.<br/><br/>The search will start automatically.",
      "WOT_SEARCH_TEXT": "To search in the registry, type the <b>first letters of a users pseudonym or public key</b>.<br/><br/>Then hit <b>Enter</b> to start the search.",
      "WOT_SEARCH_RESULT": "Simply click a user row to view the details sheet.",
      "WOT_VIEW_CERTIFICATIONS": "The row <b>{{'ACCOUNT.CERTIFICATION_COUNT'|translate}}</b> shows how many members members validated this identity.<br/><br/>These certifications testify that the account belongs to <b>a living human</b> and this person has <b>no other member account</b>.",
      "WOT_VIEW_CERTIFICATIONS_COUNT": "There are at least <b>{{sigQty}} certifications</b> needed to become a member and receive the <b>Universal Dividend</b>.",
      "WOT_VIEW_CERTIFICATIONS_CLICK": "Click here to open <b>a list of all certifications</b> given to and by this identity.",
      "WOT_VIEW_CERTIFY": "The button <b>{{'WOT.BTN_CERTIFY'|translate}}</b> allows to add your certification to this identity.",
      "CERTIFY_RULES": "<b>Attention:</b> Only certify <b>real and living persons</b> that do not own any other certified account.<br/><br/>The trust carried by the currency depends on each member's vigilance!",
      "MENU_BTN_SETTINGS": "The <b>{{'MENU.SETTINGS'|translate}}</b> allow you to configure the Cesium application.<br/><br/>For example, you can <b>change the unit</b> in which the currency will be shown.",
      "HEADER_BAR_BTN_PROFILE": "Click here to access your <b>user profile</b>",
      "SETTINGS_CHANGE_UNIT": "You can <b>change the display unit</b> of amounts by clicking here.<br/><br/>- Deactivate the option to show amounts in {{currency|capitalize}}.<br/>- Activate the option for relative amounts in {{'COMMON.UD'|translate}}<sub>{{currency|abbreviate}}</sub> (<b>divided</b> by the current Universal Dividend).",
      "END_LOGIN": "This guided visit has <b>ended</b>.<br/><br/>Welcome to the <b>free economy</b>!",
      "END_NOT_LOGIN": "This guided visit has <b>ended</b>.<br/><br/>If you wish to join the currency {{currency|capitalize}}, simply click <b>{{'LOGIN.CREATE_ACCOUNT'|translate}}</b> below."
    }
  },
  "API" :{
    "COMMON": {
      "LINK_DOC": "API documentation",
      "LINK_DOC_HELP": "API documentation for developers",
      "LINK_STANDARD_APP": "Standard version",
      "LINK_STANDARD_APP_HELP": "Open standard version of {{'COMMON.APP_NAME'|translate}}"
    },
    "HOME": {
      "TITLE": "{{'COMMON.APP_NAME'|translate}} API Documentation",
      "MESSAGE": "Welcome to the {{'COMMON.APP_NAME'|translate}} <b>API documentation </b>.<br/>Connect your web site to <a href=\"http://duniter.org\" target=\"_system\">Duniter</a> very easily!",
      "MESSAGE_SHORT": "Connect your websites to <a href=\"http://duniter.org\" target=\"_system\">Duniter</a> very easily!",
      "DOC_HEADER": "Available services:"
    },
    "TRANSFER": {
      "TITLE": "{{'COMMON.APP_NAME'|translate}} - Online payment",
      "TITLE_SHORT": "Online payment",
      "SUMMARY": "Order summary:",
      "AMOUNT": "Amount:",
      "NAME": "Name:",
      "PUBKEY": "Public key of the recipient:",
      "COMMENT": "Order reference:",
      "DEMO": {
        "SALT": "demo",
        "PASSWORD": "demo",
        "PUBKEY": "3G28bL6deXQBYpPBpLFuECo46d3kfYMJwst7uhdVBnD1",
        "HELP": "<b>Demonstration mode</b>: No payment will actually be sent during this simulation.<br/>Please use credentials: <b>{{'API.TRANSFER.DEMO.SALT'|translate}} / {{'API.TRANSFER.DEMO.PASSWORD'|translate}}</b>",
        "BAD_CREDENTIALS": "Invalid credentials.<br/>In demonstration mode, credentials should be: {{'API.TRANSFER.DEMO.SALT'|translate}} / {{'API.TRANSFER.DEMO.PASSWORD'|translate}}"
      },
      "INFO": {
        "SUCCESS_REDIRECTING_WITH_NAME": "Payment sent.<br/>Redirect to <b>{{name}}</b>...",
        "SUCCESS_REDIRECTING": "Payment sent.<br/>Redirect to the seller's website...",
        "CANCEL_REDIRECTING_WITH_NAME": "Payment cancelled.<br/>Redirect to <b>{{name}}</b>...",
        "CANCEL_REDIRECTING": "Payment cancelled.<br/>Redirect to the seller's website..."
      },
      "ERROR": {
        "TRANSFER_FAILED": "Payment failed"
      }
    },
    "DOC": {
      "DESCRIPTION_DIVIDER": "Description",
      "URL_DIVIDER": "Calling address",
      "PARAMETERS_DIVIDER": "Parameters",
      "AVAILABLE_PARAMETERS": "Here is the list of al available parameters:",
      "DEMO_DIVIDER": "Try it !",
      "DEMO_HELP": "To test this service, click on this button. The result content will be display below.",
      "DEMO_RESULT": "Result returned by call:",
      "DEMO_SUCCEED": "<i class=\"icon ion-checkmark\"></i> Success!",
      "DEMO_CANCELLED": "<i class=\"icon ion-close\"></i> Canceled by user",
      "INTEGRATE_DIVIDER": "Website integration",
      "INTEGRATE_CODE": "Code:",
      "INTEGRATE_RESULT": "Result preview:",
      "INTEGRATE_PARAMETERS": "Parameters",
      "TRANSFER": {
        "TITLE": "Payments",
        "DESCRIPTION": "From a site (eg online marketplace) you can delegate payment in free currency to Cesium API. To do this, simply open a page at the following address:",
        "PARAM_PUBKEY": "Recipient's public key",
        "PARAM_PUBKEY_HELP": "Recipient's public key (required)",
        "PARAM_AMOUNT": "Amount",
        "PARAM_AMOUNT_HELP": "Transaction amount (required)",
        "PARAM_COMMENT": "Reference (or comment)",
        "PARAM_COMMENT_HELP": "Reference or comment. You will allow for example to identify the payment in the BlockChain.",
        "PARAM_NAME": "Name (of recipient or website)",
        "PARAM_NAME_HELP": "The name of your website. This can be a readable name (eg \"My online site\"), or a web address (eg \"www.MySite.com\").",
        "PARAM_REDIRECT_URL": "URL redirection",
        "PARAM_REDIRECT_URL_HELP": "URL redirection after sending payment, after the payment has been sent. Can contain the following strings, which will be replaced by the values of the transaction: \"{tx}\", \"{hash}\", \"{comment}\", \"{amount}\" and \"{pubkey}\".",
        "PARAM_CANCEL_URL": "URL if cancelled",
        "PARAM_CANCEL_URL_HELP": "URL in case of cancellation.  Can contain the following strings, which will be replaced: \"{comment}\", \"{amount}\" and \"{pubkey}\".",
        "EXAMPLES_HELP": "Examples of integration:",
        "EXAMPLE_BUTTON": "HTML Button",
        "EXAMPLE_BUTTON_DEFAULT_TEXT": "Pay in {{currency|abbreviate}}",
        "EXAMPLE_BUTTON_DEFAULT_STYLE": "Custom style",
        "EXAMPLE_BUTTON_TEXT_HELP": "Button text",
        "EXAMPLE_BUTTON_BG_COLOR": "Background color",
        "EXAMPLE_BUTTON_BG_COLOR_HELP": "eg: #fbc14c, yellow, lightgrey, rgb(180,180,180)",
        "EXAMPLE_BUTTON_FONT_COLOR": "Font color",
        "EXAMPLE_BUTTON_FONT_COLOR_HELP": "eg: black, orange, rgb(180,180,180)",
        "EXAMPLE_BUTTON_TEXT_ICON": "Icon",
        "EXAMPLE_BUTTON_TEXT_WIDTH": "Width",
        "EXAMPLE_BUTTON_TEXT_WIDTH_HELP": "eg: 200px, 50%",
        "EXAMPLE_BUTTON_ICON_NONE": "No icon",
        "EXAMPLE_BUTTON_ICON_DUNITER": "Duniter logo",
        "EXAMPLE_BUTTON_ICON_CESIUM": "Cesium logo",
        "EXAMPLE_BUTTON_ICON_G1_COLOR": "Ä1 logo",
        "EXAMPLE_BUTTON_ICON_G1_BLACK": "Ä1 logo (outline)"
      }
    }
  }
}
);

$translateProvider.translations("en", {
  "COMMON": {
    "APP_NAME": "Cesium",
    "APP_VERSION": "v{{version}}",
    "APP_BUILD": "build {{build}}",
    "PUBKEY": "Public key",
    "MEMBER": "Member",
    "BLOCK" : "Block",
    "BTN_OK": "OK",
    "BTN_YES": "Yes",
    "BTN_NO": "No",
    "BTN_SEND": "Send",
    "BTN_SEND_MONEY": "Transfer money",
    "BTN_SEND_MONEY_SHORT": "Transfer",
    "BTN_SAVE": "Save",
    "BTN_YES_SAVE": "Yes, Save",
    "BTN_YES_CONTINUE": "Yes, Continue",
    "BTN_SHOW": "Show",
    "BTN_SHOW_PUBKEY": "Show key",
    "BTN_RELATIVE_UNIT": "Use relative unit",
    "BTN_BACK": "Back",
    "BTN_NEXT": "Next",
    "BTN_CANCEL": "Cancel",
    "BTN_CLOSE": "Close",
    "BTN_LATER": "Later",
    "BTN_LOGIN": "Sign In",
    "BTN_LOGOUT": "Logout",
    "BTN_ADD_ACCOUNT": "New Account",
    "BTN_SHARE": "Share",
    "BTN_EDIT": "Edit",
    "BTN_DELETE": "Delete",
    "BTN_ADD": "Add",
    "BTN_SEARCH": "Search",
    "BTN_REFRESH": "Refresh",
    "BTN_RETRY": "Retry",
    "BTN_START": "Start",
    "BTN_CONTINUE": "Continue",
    "BTN_CREATE": "Create",
    "BTN_UNDERSTOOD": "I understood",
    "BTN_OPTIONS": "Options",
    "BTN_HELP_TOUR": "Features tour",
    "BTN_HELP_TOUR_SCREEN": "Discover this screen",
    "BTN_DOWNLOAD": "Download",
    "BTN_DOWNLOAD_ACCOUNT_STATEMENT": "Download account statement",
    "BTN_MODIFY": "Modify",
    "CHOOSE_FILE": "Drag your file<br/>or click to select",
    "DAYS": "days",
    "NO_ACCOUNT_QUESTION": "Not a member yet? Register now!",
    "SEARCH_NO_RESULT": "No result found",
    "LOADING": "Loading...",
    "SEARCHING": "Searching...",
    "FROM": "From",
    "TO": "To",
    "COPY": "Copy",
    "LANGUAGE": "Language",
    "UNIVERSAL_DIVIDEND": "Universal dividend",
    "UD": "UD",
    "DATE_PATTERN": "MM/DD/YYYY HH:mm",
    "DATE_FILE_PATTERN": "YYYY-MM-DD",
    "DATE_SHORT_PATTERN": "MM/DD/YY",
    "DATE_MONTH_YEAR_PATTERN": "MM/YYYY",
    "EMPTY_PARENTHESIS": "(empty)",
    "UID": "Pseudonym",
    "ENABLE": "Enabled",
    "DISABLE": "Disabled",
    "RESULTS_LIST": "Results:",
    "RESULTS_COUNT": "{{count}} results",
    "EXECUTION_TIME": "executed in {{duration|formatDurationMs}}",
    "SHOW_VALUES": "Display values openly?",
    "POPOVER_ACTIONS_TITLE": "Options",
    "POPOVER_FILTER_TITLE": "Filters",
    "SHOW_MORE": "Show more",
    "SHOW_MORE_COUNT": "(current limit at {{limit}})",
    "POPOVER_SHARE": {
      "TITLE": "Share",
      "SHARE_ON_TWITTER": "Share on Twitter",
      "SHARE_ON_FACEBOOK": "Share on Facebook",
      "SHARE_ON_DIASPORA": "Share on Diaspora*",
      "SHARE_ON_GOOGLEPLUS": "Share on Google+"
    }
  },
  "SYSTEM": {
    "PICTURE_CHOOSE_TYPE": "Choose source:",
    "BTN_PICTURE_GALLERY": "Gallery",
    "BTN_PICTURE_CAMERA": "<b>Camera</b>"
  },
  "MENU": {
    "HOME": "Home",
    "WOT": "Registry",
    "CURRENCY": "Currency",
    "ACCOUNT": "My Account",
    "WALLETS": "My wallets",
    "TRANSFER": "Transfer",
    "SCAN": "Scan",
    "SETTINGS": "Settings",
    "NETWORK": "Network",
    "TRANSACTIONS": "My transactions"
  },
  "ABOUT": {
    "TITLE": "About",
    "LICENSE": "<b>Free/libre software</b> (License GNU GPLv3).",
    "LATEST_RELEASE": "There is a <b>newer version</ b> of {{'COMMON.APP_NAME' | translate}} (<b>v{{version}}</b>)",
    "PLEASE_UPDATE": "Please update {{'COMMON.APP_NAME' | translate}} (latest version: <b>v{{version}}</b>)",
    "CODE": "Source code:",
    "DEVELOPERS": "Developers:",
    "FORUM": "Forum:",
    "PLEASE_REPORT_ISSUE": "Please report any issue to us!",
    "REPORT_ISSUE": "Report an issue"
  },
  "HOME": {
    "TITLE": "Cesium",
    "WELCOME": "Welcome to the Cesium Application!",
    "MESSAGE": "Follow your {{currency|abbreviate}} wallets easily",
    "BTN_CURRENCY": "Explore currency",
    "BTN_ABOUT": "about",
    "BTN_HELP": "Help",
    "REPORT_ISSUE": "Report an issue",
    "NOT_YOUR_ACCOUNT_QUESTION" : "You do not own the account <b><i class=\"ion-key\"></i> {{pubkey|formatPubkey}}</b>?",
    "BTN_CHANGE_ACCOUNT": "Disconnect this account",
    "CONNECTION_ERROR": "Peer <b>{{server}}</b> unreachable or invalid address.<br/><br/>Check your Internet connection, or change node <a class=\"positive\" ng-click=\"doQuickFix('settings')\">in the settings</a>."
  },
  "SETTINGS": {
    "TITLE": "Settings",
    "NETWORK_SETTINGS": "Network",
    "PEER": "Duniter peer address",
    "PEER_CHANGED_TEMPORARY": "Address used temporarily",
    "USE_LOCAL_STORAGE": "Enable local storage",
    "USE_LOCAL_STORAGE_HELP": "Allows you to save your settings",
    "ENABLE_HELPTIP": "Enable contextual help tips",
    "ENABLE_UI_EFFECTS": "Enable visual effects",
    "HISTORY_SETTINGS": "Account operations",
    "DISPLAY_UD_HISTORY": "Display produced dividends?",
    "TX_HISTORY_AUTO_REFRESH": "Enable automatic refresh?",
    "TX_HISTORY_AUTO_REFRESH_HELP": "Updates the list of operations to each new block.",
    "AUTHENTICATION_SETTINGS": "Authentication",
    "KEEP_AUTH": "Expiration of authentication",
    "KEEP_AUTH_HELP": "Define when authentication is cleared from memory",
    "KEEP_AUTH_OPTION": {
      "NEVER": "After each operation",
      "SECONDS": "After {{value}}s of inactivity",
      "MINUTE": "After {{value}}min of inactivity",
      "MINUTES": "After {{value}}min of inactivity",
      "HOUR": "After {{value}}h of inactivity",
      "ALWAYS": "At the end of the session"
    },
    "REMEMBER_ME": "Remember me ?",
    "REMEMBER_ME_HELP": "Allows to remain identified from one session to another, keeping the public key locally.",
    "PLUGINS_SETTINGS": "Extensions",
    "BTN_RESET": "Restore default values",
    "EXPERT_MODE": "Enable expert mode",
    "EXPERT_MODE_HELP": "Allow to see more details",
    "BLOCK_VALIDITY_WINDOW": "Block uncertainty time",
    "BLOCK_VALIDITY_WINDOW_SHORT": "Time of uncertainty",
    "BLOCK_VALIDITY_WINDOW_HELP": "Time to wait before considering an information is validated",
    "BLOCK_VALIDITY_OPTION": {
      "NONE": "No delay",
      "N": "{{time | formatDuration}} ({{count}} blocks)"
    },
    "POPUP_PEER": {
      "TITLE" : "Duniter peer",
      "HOST" : "Address",
      "HOST_HELP": "Address: server:port",
      "USE_SSL" : "Secured?",
      "USE_SSL_HELP" : "(SSL Encryption)",
      "BTN_SHOW_LIST" : "Peer's list"
    }
  },
  "BLOCKCHAIN": {
    "HASH": "Hash: {{hash}}",
    "VIEW": {
      "HEADER_TITLE": "Block #{{number}}-{{hash|formatHash}}",
      "TITLE_CURRENT": "Current block",
      "TITLE": "Block #{{number|formatInteger}}",
      "COMPUTED_BY": "Computed by",
      "SHOW_RAW": "Show raw data",
      "TECHNICAL_DIVIDER": "Technical informations",
      "VERSION": "Format version",
      "HASH": "Computed hash",
      "UNIVERSAL_DIVIDEND_HELP": "Money co-produced by each of the {{membersCount}} members",
      "EMPTY": "Aucune donnÃ©e dans ce bloc",
      "POW_MIN": "Minimal difficulty",
      "POW_MIN_HELP": "Difficulty imposed in calculating hash",
      "DATA_DIVIDER": "Data",
      "IDENTITIES_COUNT": "New identities",
      "JOINERS_COUNT": "Joiners",
      "ACTIVES_COUNT": "Renewals",
      "ACTIVES_COUNT_HELP": "Members having renewed their membership",
      "LEAVERS_COUNT": "Leavers",
      "LEAVERS_COUNT_HELP": "Members that now refused certification",
      "EXCLUDED_COUNT": "Excluded members",
      "EXCLUDED_COUNT_HELP": "Old members, excluded because missing membreship renewal or certifications",
      "REVOKED_COUNT": "Revoked identities",
      "REVOKED_COUNT_HELP": "These accounts may no longer be member",
      "TX_COUNT": "Transactions",
      "CERT_COUNT": "Certifications",
      "TX_TO_HIMSELF": "Change",
      "TX_OUTPUT_UNLOCK_CONDITIONS": "Unlock conditions",
      "TX_OUTPUT_OPERATOR": {
        "AND": "and",
        "OR": "or"
      },
      "TX_OUTPUT_FUNCTION": {
        "SIG": "<b>Sign</b> of the public key",
        "XHX": "<b>Password</b>, including SHA256 =",
        "CSV": "Blocked during",
        "CLTV": "BloquÃ© until"
      }
    },
    "LOOKUP": {
      "TITLE": "Blocks",
      "NO_BLOCK": "No bloc",
      "LAST_BLOCKS": "Last blocks:",
      "BTN_COMPACT": "Compact"
    }
  },
  "CURRENCY": {
    "VIEW": {
      "TITLE": "Currency",
      "TAB_CURRENCY": "Currency",
      "TAB_WOT": "Web of trust",
      "TAB_NETWORK": "Network",
      "TAB_BLOCKS": "Blocks",
      "CURRENCY_SHORT_DESCRIPTION": "{{currency|capitalize}} is a <b>libre money</b>, started {{firstBlockTime | formatFromNow}}. It currently counts <b>{{N}} members </b>, who produce and collect a <a ng-click=\"showHelpModal('ud')\">Universal Dividend</a> (DU), each {{dt | formatPeriod}}.",
      "NETWORK_RULES_DIVIDER": "Network rules",
      "CURRENCY_NAME": "Currency name",
      "MEMBERS": "Members count",
      "MEMBERS_VARIATION": "Variation since {{duration|formatDuration}} (since last UD)",
      "MONEY_DIVIDER": "Money",
      "MASS": "Monetary mass",
      "SHARE": "Money share",
      "UD": "Universal Dividend",
      "C_ACTUAL": "Current growth",
      "MEDIAN_TIME": "Current blockchain time",
      "POW_MIN": "Common difficulty",
      "MONEY_RULES_DIVIDER": "Rules of currency",
      "C_RULE": "Theoretical growth target",
      "UD_RULE": "Universal dividend (formula)",
      "DT_REEVAL": "Period between two re-evaluation of the UD",
      "REEVAL_SYMBOL": "reeval",
      "DT_REEVAL_VALUE": "Every <b>{{dtReeval|formatDuration}}</b> ({{dtReeval/86400}} {{'COMMON.DAYS'|translate}})",
      "UD_REEVAL_TIME0": "Date of first reevaluation of the UD",
      "SIG_QTY_RULE": "Required number of certifications to become a member",
      "SIG_STOCK": "Maximum number of certifications sent by a member",
      "SIG_PERIOD": "Minimum delay between 2 certifications sent by one and the same issuer.",
      "SIG_WINDOW": "Maximum delay before a certification will be treated",
      "SIG_VALIDITY": "Lifetime of a certification that has been treated",
      "MS_WINDOW": "Maximum delay before a pending membership will be treated",
      "MS_VALIDITY": "Lifetime of a membership that has been treated",
      "STEP_MAX": "Maximum distance between a newcomer and each referring members.",
      "WOT_RULES_DIVIDER": "Rules for web of trust",
      "SENTRIES": "Required number of certifications (given <b>and</b> received) to become a referring member",
      "SENTRIES_FORMULA": "Required number of certifications to become a referring member (formula)",
      "XPERCENT":"Minimum percent of referring member to reach to match the distance rule",
      "AVG_GEN_TIME": "The average time between 2 blocks",
      "CURRENT": "current",
      "MATH_CEILING": "CEILING",
      "DISPLAY_ALL_RULES": "Display all rules?",
      "BTN_SHOW_LICENSE": "Show license",
      "WOT_DIVIDER": "Web of trust"
    },
    "LICENSE": {
      "TITLE": "Currency license",
      "BTN_DOWNLOAD": "Download file",
      "NO_LICENSE_FILE": "License file not found."
    }
  },
  "NETWORK": {
    "VIEW": {
      "MEDIAN_TIME": "Blockchain time",
      "LOADING_PEERS": "Loading peers...",
      "NODE_ADDRESS": "Address:",
      "SOFTWARE": "Software:",
      "WARN_PRE_RELEASE": "Pre-release (latest stable: <b>{{version}}</b>)",
      "WARN_NEW_RELEASE": "Version <b>{{version}}</b> available",
      "WS2PID": "Identifier:",
      "PRIVATE_ACCESS": "Private access",
      "POW_PREFIX": "Proof of work prefix:",
      "ENDPOINTS": {
        "BMAS": "Secure endpoint (SSL)",
        "BMATOR": "TOR endpoint",
        "WS2P": "WS2P endpoint",
        "ES_USER_API": "Cesium+ data node"
      }
    },
    "INFO": {
      "ONLY_SSL_PEERS": "Non-SSL nodes have a degraded display because Cesium works in HTTPS mode."
    }
  },
  "PEER": {
    "PEERS": "Peers",
    "SIGNED_ON_BLOCK": "Signed on block",
    "MIRROR": "mirror",
    "MIRRORS": "Mirror peers",
    "PEER_LIST" : "Peer's list",
    "MEMBERS" : "Member peers",
    "ALL_PEERS" : "All peers",
    "DIFFICULTY" : "Difficulty",
    "API" : "API",
    "CURRENT_BLOCK" : "Block #",
    "POPOVER_FILTER_TITLE": "Filter",
    "OFFLINE": "Offline peers",
    "BTN_SHOW_PEER": "Show peer",
    "VIEW": {
      "TITLE": "Peer",
      "OWNER": "Owned by ",
      "SHOW_RAW_PEERING": "See peering document",
      "SHOW_RAW_CURRENT_BLOCK": "See current block (raw format)",
      "LAST_BLOCKS": "Last blocks",
      "KNOWN_PEERS": "Known peers :",
      "GENERAL_DIVIDER": "General information",
      "ERROR": {
        "LOADING_TOR_NODE_ERROR": "Could not get peer data, using the TOR network.",
        "LOADING_NODE_ERROR": "Could not get peer data"
      }
    }
  },
  "WOT": {
    "SEARCH_HELP": "Search (member or public key)",
    "SEARCH_INIT_PHASE_WARNING": "During the pre-registration phase, the search for pending registrations <b>may be long</b>. Please wait ...",
    "REGISTERED_SINCE": "Registered on",
    "REGISTERED_SINCE_BLOCK": "Registered since block #",
    "NO_CERTIFICATION": "No validated certification",
    "NO_GIVEN_CERTIFICATION": "No given certification",
    "NOT_MEMBER_PARENTHESIS": "(non-member)",
    "IDENTITY_REVOKED_PARENTHESIS": "(identity revoked)",
    "MEMBER_PENDING_REVOCATION_PARENTHESIS": "(being revoked)",
    "EXPIRE_IN": "Expires",
    "NOT_WRITTEN_EXPIRE_IN": "Deadline<br/>treatment",
    "EXPIRED": "Expired",
    "PSEUDO": "Pseudonym",
    "SIGNED_ON_BLOCK": "Emitted on block #{{block}}",
    "WRITTEN_ON_BLOCK": "Written on block #{{block}}",
    "GENERAL_DIVIDER": "General information",
    "NOT_MEMBER_ACCOUNT": "Non-member account",
    "NOT_MEMBER_ACCOUNT_HELP": "This is a simple wallet, with no pending membership application.",
    "TECHNICAL_DIVIDER": "Technical data",
    "BTN_CERTIFY": "Certify",
    "BTN_YES_CERTIFY": "Yes, certify",
    "BTN_SELECT_AND_CERTIFY": "New certification",
    "ACCOUNT_OPERATIONS": "Account operations",
    "VIEW": {
      "POPOVER_SHARE_TITLE": "Identity {{title}}"
    },
    "LOOKUP": {
      "TITLE": "Registry",
      "NEWCOMERS": "New members:",
      "NEWCOMERS_COUNT": "{{count}} members",
      "PENDING": "Pending registrations:",
      "PENDING_COUNT": "{{count}} pending registrations",
      "REGISTERED": "Registered {{sigDate | formatFromNow}}",
      "MEMBER_FROM": "Member since {{memberDate|formatFromNowShort}}",
      "BTN_NEWCOMERS": "Latest members",
      "BTN_PENDING": "Pending registrations",
      "SHOW_MORE": "Show more",
      "SHOW_MORE_COUNT": "(current limit to {{limit}})",
      "NO_PENDING": "No pending registrations.",
      "NO_NEWCOMERS": "No members."
    },
    "CONTACTS": {
      "TITLE": "Contacts"
    },
    "MODAL": {
      "TITLE": "Search"
    },
    "CERTIFICATIONS": {
      "TITLE": "{{uid}} - Certifications",
      "SUMMARY": "Received certifications",
      "LIST": "Details of received certifications",
      "PENDING_LIST": "Pending certifications",
      "RECEIVED": "Received certifications",
      "RECEIVED_BY": "Certifications received by {{uid}}",
      "ERROR": "Received certifications in error",
      "SENTRY_MEMBER": "Referring member"
    },
    "OPERATIONS": {
      "TITLE": "{{uid}} - Operations"
    },
    "GIVEN_CERTIFICATIONS": {
      "TITLE": "{{uid}} - Certifications sent",
      "SUMMARY": "Sent certifications",
      "LIST": "Details of sent certifications",
      "PENDING_LIST": "Pending certifications",
      "SENT": "Sent certifications",
      "SENT_BY": "Certifications sent by {{uid}}",
      "ERROR": "Sent certifications with error"
    }
  },
  "LOGIN": {
    "TITLE": "<i class=\"icon ion-log-in\"></i> Login",
    "SCRYPT_FORM_HELP": "Please enter your credentials. <br> Remember to check the public key for your account.",
    "PUBKEY_FORM_HELP": "Please enter a public account key:",
    "FILE_FORM_HELP": "Choose the keychain file to use:",
    "SCAN_FORM_HELP": "Scan the QR code of a wallet.",
    "SALT": "Secret identifier",
    "SALT_HELP": "Secret identifier",
    "SHOW_SALT": "Display secret identifier?",
    "PASSWORD": "Password",
    "PASSWORD_HELP": "Password",
    "PUBKEY_HELP": "Public key or pseudonym",
    "NO_ACCOUNT_QUESTION": "Don't have an account yet?",
    "CREATE_ACCOUNT": "Create an account",
    "FORGOTTEN_ID": "Forgot password?",
    "ASSOCIATED_PUBKEY": "Public key :",
    "BTN_METHODS": "Other methods",
    "BTN_METHODS_DOTS": "Change method...",
    "METHOD_POPOVER_TITLE": "Methods",
    "MEMORIZE_AUTH_FILE": "Memorize this keychain during the navigation session",
    "SCRYPT_PARAMETERS": "ParamÃ¨tres (Scrypt) :",
    "AUTO_LOGOUT": {
      "TITLE": "Information",
      "MESSAGE": "<i class=\"ion-android-time\"></i> You were <b>logout</ b> automatically, due to prolonged inactivity.",
      "BTN_RELOGIN": "Sign In",
      "IDLE_WARNING": "You will be logout... {{countdown}}"
    },
    "METHOD": {
      "SCRYPT_DEFAULT": "Standard salt (default)",
      "SCRYPT_ADVANCED": "Advanced salt",
      "FILE": "Keychain file",
      "PUBKEY": "Public key only",
      "SCAN": "Scan a QR code"
    },
    "SCRYPT": {
      "SIMPLE": "Light salt",
      "DEFAULT": "Standard salt",
      "SECURE": "Secure salt",
      "HARDEST": "Hardest salt",
      "EXTREME": "Extreme salt",
      "USER": "Personal value",
      "N": "N (Loop):",
      "r": "r (RAM):",
      "p": "p (CPU):"
    },
    "FILE": {
      "DATE" : "Date:",
      "TYPE" : "Type:",
      "SIZE": "Size:",
      "VALIDATING": "Validating...",
      "HELP": "Expected file format: <b>.dunikey</b> (type PubSec). Other formats are under development (EWIF, WIF)."
    }
  },
  "AUTH": {
    "TITLE": "<i class=\"icon ion-locked\"></i> Authentication",
    "BTN_AUTH": "Authenticate",
    "GENERAL_HELP": "Please authenticate yourself:",
    "EXPECTED_UID_HELP": "Please authenticate to the account <i class=\"ion-person\"></i> {{uid}}:",
    "EXPECTED_PUBKEY_HELP": "Please authenticate to the wallet <i class=\"ion-key\"></i> {{pubkey|formatPubkey}}:",
    "SCAN_FORM_HELP": "Scan the QR code of the <b>private key</b> of the wallet."
  },
  "ACCOUNT": {
    "TITLE": "My Account",
    "BALANCE": "Balance",
    "LAST_TX": "Latest transactions",
    "BALANCE_ACCOUNT": "Account balance",
    "NO_TX": "No transaction",
    "SHOW_MORE_TX": "Show more",
    "SHOW_ALL_TX": "Show all",
    "TX_FROM_DATE": "(current limit to {{fromTime|formatFromNowShort}})",
    "PENDING_TX": "Pending transactions",
    "VALIDATING_TX": "Transactions being validated",
    "ERROR_TX": "Transaction not executed",
    "ERROR_TX_SENT": "Sent transactions",
    "PENDING_TX_RECEIVED": "Transactions awaiting receipt",
    "EVENTS": "Events",
    "WAITING_MEMBERSHIP": "Membership application sent. Waiting validation.",
    "WAITING_CERTIFICATIONS": "You need {{needCertificationCount}} certification(s) to become a member",
    "WILL_MISSING_CERTIFICATIONS": "You will <b>lack certifications</b> soon (at least {{willNeedCertificationCount}} more are needed)",
    "WILL_NEED_RENEW_MEMBERSHIP": "Your membership <b>will expire {{membershipExpiresIn|formatDurationTo}}</b>. Remember to <a ng-click=\"doQuickFix('renew')\">renew your membership</a> before then.",
    "NEED_RENEW_MEMBERSHIP": "You are no longer a member because your membership <b>has expired</b>. Remember to <a ng-click=\"doQuickFix('renew')\">renew your membership</a>.",
    "NO_WAITING_MEMBERSHIP": "No membership application pending. If you'd like to <b>become a member</ b>, please <a ng-click=\"doQuickFix('membership')\">send the membership application</a>.",
    "CERTIFICATION_COUNT": "Received certifications",
    "CERTIFICATION_COUNT_SHORT": "Certifications",
    "SIG_STOCK": "Stock of certifications to give",
    "BTN_RECEIVE_MONEY": "Receive",
    "BTN_SELECT_ALTERNATIVES_IDENTITIES": "Switch to another identity...",
    "BTN_FIX_MEMBERSHIP": "Resubmit membership request...",
    "BTN_MEMBERSHIP_RENEW": "Renew membership",
    "BTN_MEMBERSHIP_RENEW_DOTS": "Renew membership...",
    "BTN_MEMBERSHIP_OUT_DOTS": "Revoke membership...",
    "BTN_SECURITY_DOTS": "Sign-in and security...",
    "BTN_SHOW_DETAILS": "Display technical data",
    "LOCKED_OUTPUTS_POPOVER": {
      "TITLE": "Locked amount",
      "DESCRIPTION": "Here are the conditions for unlocking this amount:",
      "DESCRIPTION_MANY": "This transaction consists of several parts, of which the unlock conditions are:",
      "LOCKED_AMOUNT": "Conditions for the amount:"
    },
    "NEW": {
      "TITLE": "Registration",
      "INTRO_WARNING_TIME": "Creating an account on {{name|capitalize}} is very simple. Please take sufficient time to do this correctly (not to forget the usernames, passwords, etc.).",
      "INTRO_WARNING_SECURITY": "Check that the hardware you are currently using (computer, tablet, phone) <b>is secure and trustworthy </b>.",
      "INTRO_WARNING_SECURITY_HELP": "Up-to-date anti-virus, firewall enabled, session protected by password or pin code...",
      "INTRO_HELP": "Click <b> {{'COMMON.BTN_START'|translate}}</b> to begin creating an account. You will be guided step by step.",
      "REGISTRATION_NODE": "Your registration will be registered via the Duniter peer <b>{{server}}</b> node, which will then be distributed to the rest of the currency network.",
      "REGISTRATION_NODE_HELP": "If you do not trust this peer, please change <a ng-click=\"doQuickFix('settings')\">in the settings</a> of Cesium.",
      "SELECT_ACCOUNT_TYPE": "Choose the type of account to create:",
      "MEMBER_ACCOUNT": "Member account",
      "MEMBER_ACCOUNT_TITLE": "Create a member account",
      "MEMBER_ACCOUNT_HELP": "If you are not yet registered as an individual (one account possible per individual).",
      "WALLET_ACCOUNT": "Simple wallet",
      "WALLET_ACCOUNT_TITLE": "Create a wallet",
      "WALLET_ACCOUNT_HELP": "If you represent a company, association, etc. or simply need an additional wallet. No universal dividend will be created by this account.",
      "SALT_WARNING": "Choose a secret identifier.<br/>You need it for each connection to this account.<br/><br/><b>Make sure to remember this identifier</b>.<br/>If lost, there are no means to retrieve it!",
      "PASSWORD_WARNING": "Choose a password.<br/>You need it for each connection to this account.<br/><br/><b>Make sure to remember this password</b>.<br/>If lost, there are no means to retrieve it!",
      "PSEUDO_WARNING": "Choose a pseudonym.<br/>It may be used by other people to find you more easily.<br/><br/>.Use of <b>commas, spaces and accents</b> is not allowed.<br/><div class='hidden-xs'><br/>Example: <span class='gray'>JohnDalton, JackieChan, etc.</span>",
      "PSEUDO": "Pseudonym",
      "PSEUDO_HELP": "joe123",
      "SALT_CONFIRM": "Confirm",
      "SALT_CONFIRM_HELP": "Confirm the secret identifier",
      "PASSWORD_CONFIRM": "Confirm",
      "PASSWORD_CONFIRM_HELP": "Confirm the password",
      "SLIDE_6_TITLE": "Confirmation:",
      "COMPUTING_PUBKEY": "Computing...",
      "LAST_SLIDE_CONGRATULATION": "You completed all required fields.<br/><b>You can send the account creation request</b>.<br/><br/>For information, the public key below identifies your future account.<br/>It can be communicated to third parties to receive their payment.<br/>Once your account has been approved, you can find this key under <b>{{'ACCOUNT.TITLE'|translate}}</b>.",
      "CONFIRMATION_MEMBER_ACCOUNT": "<b class=\"assertive\">Warning:</b> your secret identifier, password and pseudonym can not be changed.<br/><b>Make sure you always remember it!</b><br/><b>Are you sure</b> you want to send this account creation request?",
      "CONFIRMATION_WALLET_ACCOUNT": "<b class=\"assertive\">Warning:</b> your password and pseudonym can not be changed.<br/><b>Make sure you always remember it!</b><br/><b>Are you sure</b> you want to continue?",
      "CHECKING_PSEUDO": "Checking...",
      "PSEUDO_AVAILABLE": "This pseudonym is available",
      "PSEUDO_NOT_AVAILABLE": "This pseudonym is not available",
      "INFO_LICENSE": "To be able to adhere to the currency, we ask you to kindly read and accept this license.",
      "BTN_ACCEPT": "I accept",
      "BTN_ACCEPT_LICENSE": "I accept the license"
    },
    "POPUP_REGISTER": {
      "TITLE": "Enter a pseudonym",
      "HELP": "A pseudonym is needed to let other members find you."
    },
    "SELECT_IDENTITY_MODAL": {
      "TITLE": "Identity selection",
      "HELP": "Several <b>different identities</b> have been sent, for the public key <span class=\"gray\"> <i class=\"ion-key\"></i> {{pubkey | formatPubkey}}</span>.<br/>Please select the identity to use:"
    },
    "SELECT_WALLET_MODAL": {
      "TITLE": "Wallet selection"
    },
    "WALLET_LIST": {
      "TITLE": "My wallets",
      "BTN_NEW": "Add a wallet",
      "NO_WALLET": "No secondary wallet",
      "BTN_DELETE": "Remove a secondary wallet...",
      "BTN_RENAME": "Rename the wallet",
      "EDIT_POPOVER": {
        "TITLE": "Rename the wallet",
        "HELP": "Fill in the new name",
        "NAME_HELP": "Wallet name"
      }
    },
    "SECURITY":{
      "ADD_QUESTION" : "Add custom question",
      "BTN_CLEAN" : "Clean",
      "BTN_RESET" : "Reset",
      "DOWNLOAD_REVOKE": "Save a revocation file",
      "DOWNLOAD_REVOKE_HELP" : "Having a revocation file is important, for example in case of loss of identifiers. It allows you to <b>get this account out of the Web Of Trust</b>, thus becoming a simple wallet.",
      "GENERATE_KEYFILE": "Generate my keychain file ...",
      "GENERATE_KEYFILE_HELP": "Generate a file allowing you to authenticate without entering your identifiers.<br/><b>Warning:</b> this file will contain your secret key; It is therefore very important to put it in a safe place!",
      "KEYFILE_FILENAME": "keychain-{{pubkey|formatPubkey}}-{{currency}}-{{format}}.dunikey",
      "MEMBERSHIP_IN": "Register as member...",
      "MEMBERSHIP_IN_HELP": "Allows you to <b>transform </b> a simple wallet account <b>into a member account</b>, by sending a membership request. Useful only if you do not already have another member account.",
      "SEND_IDENTITY": "Publish identity...",
      "SEND_IDENTITY_HELP": "Allows you to associate a pseudonym to this account, but <b>without applying for membership</b> to become a member. This is not very useful because the validity of this pseudonym association is limited in time.",
      "HELP_LEVEL": "Choose <strong> at least {{nb}} questions </strong> :",
      "LEVEL": "Security level",
      "LOW_LEVEL": "Low <span class=\"hidden-xs\">(2 questions minimum)</span>",
      "MEDIUM_LEVEL": "Medium <span class=\"hidden-xs\">(4 questions minimum)</span>",
      "QUESTION_1": "What was your best friend's name when you were a teen ?",
      "QUESTION_2": "What was the name of your first pet ?",
      "QUESTION_3": "What is the first meal you have learned to cook ?",
      "QUESTION_4": "What is the first movie you saw in the cinema?",
      "QUESTION_5": "Where did you go the first time you flew ?",
      "QUESTION_6": "What was your favorite elementary school teacher's name  ?",
      "QUESTION_7": "What would you consider the ideal job ?",
      "QUESTION_8": "Which children's book do you prefer?",
      "QUESTION_9": "What was the model of your first vehicle?",
      "QUESTION_10": "What was your nickname when you were a child ?",
      "QUESTION_11": "What was your favorite movie character or actor when you were a student ?",
      "QUESTION_12": "What was your favorite singer or band when you were a student ?",
      "QUESTION_13": "In which city did your parents meet ?",
      "QUESTION_14": "What was the name of your first boss ?",
      "QUESTION_15": "What is the name of the street where you grew up ?",
      "QUESTION_16": "What is the name of the first beach where you go swim ?",
      "QUESTION_17": "QWhat is the first album you bought ?",
      "QUESTION_18": "What is the name of your favorite sport team ?",
      "QUESTION_19": "What was your grand-father's job ?",
      "RECOVER_ID": "Recover my password...",
      "RECOVER_ID_HELP": "If you have a <b>backup file of your identifiers</b>, you can find them by answering your personal questions correctly.",
      "REVOCATION_WITH_FILE" : "Rekoke my member account...",
      "REVOCATION_WITH_FILE_DESCRIPTION": "If you have <b>permanently lost your member account credentials (or if account security is compromised), you can use <b>the revocation file</b> of the account <b>to quit the Web Of Trust</b>.",
      "REVOCATION_WITH_FILE_HELP": "To <b>permanently revoke</ b> a member account, please drag the revocation file in the box below, or click in the box to search for a file.",
      "REVOCATION_WALLET": "Revoke this account immediately",
      "REVOCATION_WALLET_HELP": "Requesting revocation of your identity causes <b>will revoke your membership</ b> (definitely for the associated pseudonym and public key). The account will no longer be able to produce a Universal Dividend.<br/>However, you can still use it as a simple wallet.",
      "REVOCATION_FILENAME": "revocation-{{uid}}-{{pubkey|formatPubkey}}-{{currency}}.txt",
      "SAVE_ID": "Save my credentials...",
      "SAVE_ID_HELP": "Creating a backup file, to <b>retrieve your password</b> (and the secret identifier) <b> in case of forgetting</b>. The file is <b>secured</ b> (encrypted) using personal questions.",
      "STRONG_LEVEL": "Strong <span class=\"hidden-xs \">(6 questions minimum)</span>",
      "TITLE": "Account and security",
      "KEYFILE": {
        "PUBSEC_FORMAT": "PubSec format.",
        "PUBSEC_FORMAT_HELP": "This file format is compatible in particular with Cesium and Gannonce. Your keychain is stored <b>without encryption</b>: anyone with a copy of this file will be able to empty your account.",
        "WIF_FORMAT": "Wallet Import Format (WIF)",
        "WIF_FORMAT_HELP": "This format is used in particular by paper wallets. Your keychain is stored <b>without encryption</b>: anyone with a copy of this file will be able to empty your account.",
        "EWIF_FORMAT": "Encrypted Wallet Import Format (WIF)",
        "EWIF_FORMAT_HELP": "This format is used in particular by paper wallets. However, <b>the keychain is encrypted</b> from a passphrase of your choice.",
        "PASSWORD_POPUP": {
          "TITLE": "Keychain file encrypted",
          "HELP": "Please enter the passphrase:",
          "PASSWORD_HELP": "Passphrase"
        },
        "ERROR": {
          "BAD_PASSWORD": "Bad passphrase"
        }
      }
    },
    "FILE_NAME": "{{currency}} - Account statement {{pubkey|formatPubkey}} to {{currentTime|formatDateForFile}}.csv",
    "HEADERS": {
      "TIME": "Date",
      "AMOUNT": "Amount",
      "COMMENT": "Comment"
    }
  },
  "TRANSFER": {
    "TITLE": "Transfer",
    "SUB_TITLE": "Transfer money",
    "SUB_TITLE_ALL": "Empty the account",
    "FROM": "From",
    "TO": "To",
    "AMOUNT": "Amount",
    "AMOUNT_HELP": "Amount",
    "COMMENT": "Comment",
    "COMMENT_HELP": "Comment (optional)",
    "BTN_SEND": "Send",
    "BTN_ADD_COMMENT": "Add a comment",
    "REST": "Rest of account",
    "REST_TO": "to",
    "WARN_COMMENT_IS_PUBLIC": "Please note that <b>comments are public</b> (not encrypted).",
    "MODAL": {
      "TITLE": "Transfer"
    }
  },
  "ERROR": {
    "UNKNOWN_URI_FORMAT": "Unknown URI format",
    "PUBKEY_INVALID_CHECKSUM": "Invalid public key (bad checksum).",
    "POPUP_TITLE": "Error",
    "UNKNOWN_ERROR": "Unknown error",
    "CRYPTO_UNKNOWN_ERROR": "Your browser is not compatible with cryptographic features.",
    "DOWNLOAD_KEYFILE_FAILED": "Failed to generate the keychain file.",
    "EQUALS_TO_PSEUDO": "Must be different from pseudonym",
    "EQUALS_TO_SALT": "Must be different from secret identifier",
    "FIELD_REQUIRED": "This field is required.",
    "FIELD_TOO_SHORT": "This field value is too short.",
    "FIELD_TOO_SHORT_WITH_LENGTH": "Value is too short (min {{minLength]] characters).",
    "FIELD_TOO_LONG": "Value is exceeding max length.",
    "FIELD_TOO_LONG_WITH_LENGTH": "Value is too long (max {{maxLength}} characters).",
    "FIELD_MIN": "Minimum value: {{min}}",
    "FIELD_MAX": "Maximal value: {{max}}",
    "FIELD_ACCENT": "Commas and accent characters not allowed",
    "FIELD_NOT_NUMBER": "Value is not a number",
    "FIELD_NOT_INT": "Value is not an integer",
    "FIELD_NOT_EMAIL": "Email adress not valid",
    "PASSWORD_NOT_CONFIRMED": "Must match previous password.",
    "SALT_NOT_CONFIRMED": "Must match previous identifier.",
    "SEND_IDENTITY_FAILED": "Error while trying to register.",
    "SEND_CERTIFICATION_FAILED": "Could not certify identity.",
    "NEED_MEMBER_ACCOUNT_TO_CERTIFY": "You could not send certification, because your account is <b>not a member account</b>.",
    "NEED_MEMBER_ACCOUNT_TO_CERTIFY_HAS_SELF": "You could not send certification now, because your are <b>not a member</b> yet.<br/><br/>You still need certification to become a member.",
    "NOT_MEMBER_FOR_CERTIFICATION": "Your account is not a member account yet.",
    "IDENTITY_TO_CERTIFY_HAS_NO_SELF": "This account could not be certified. No registration found, or need to renew.",
    "LOGIN_FAILED": "Error while sign in.",
    "LOAD_IDENTITY_FAILED": "Could not load identity.",
    "LOAD_REQUIREMENTS_FAILED": "Could not load identity requirements.",
    "SEND_MEMBERSHIP_IN_FAILED": "Error while sending registration as member.",
    "SEND_MEMBERSHIP_OUT_FAILED": "Error while sending membership revocation.",
    "REFRESH_WALLET_DATA": "Could not refresh wallet.",
    "GET_CURRENCY_PARAMETER": "Could not get currency parameters.",
    "GET_CURRENCY_FAILED": "Could not load currency. Please retry later.",
    "SEND_TX_FAILED": "Could not send transaction.",
    "ALL_SOURCES_USED": "Please wait the next block computation (All transaction sources has been used).",
    "NOT_ENOUGH_SOURCES": "Not enough changes to send this amount in one time.<br/>Maximum amount: {{amount}} {{unit}}<sub>{{subUnit}}</sub>.",
    "ACCOUNT_CREATION_FAILED": "Error while creating your member account.",
    "RESTORE_WALLET_DATA_ERROR": "Error while reloading settings from local storage",
    "LOAD_WALLET_DATA_ERROR": "Error while loading wallet data.",
    "COPY_CLIPBOARD_FAILED": "Could not copy to clipboard",
    "TAKE_PICTURE_FAILED": "Could not get picture.",
    "SCAN_FAILED": "Could not scan QR code.",
    "SCAN_UNKNOWN_FORMAT": "Code not recognized.",
    "WOT_LOOKUP_FAILED": "Search failed.",
    "LOAD_PEER_DATA_FAILED": "Duniter peer not accessible. Please retry later.",
    "NEED_LOGIN_FIRST": "Please sign in first.",
    "AMOUNT_REQUIRED": "Amount is required.",
    "AMOUNT_NEGATIVE": "Negative amount not allowed.",
    "NOT_ENOUGH_CREDIT": "Not enough credit.",
    "INVALID_NODE_SUMMARY": "Unreachable peer or invalid address",
    "INVALID_USER_ID": "Field 'pseudonym' must not contains spaces or special characters.",
    "INVALID_COMMENT": "Field 'reference' has a bad format.",
    "INVALID_PUBKEY": "Public key has a bad format.",
    "INVALID_PUBKEY_CHECKSUM": "Invalid checksum.",
    "IDENTITY_REVOKED": "This identity <b>has been revoked {{revocationTime|formatFromNow}}</b> ({{revocationTime|formatDate}}). It can no longer become a member.",
    "IDENTITY_PENDING_REVOCATION": "The <b>revocation of this identity</b> has been requested and is awaiting processing. Certification is therefore disabled.",
    "IDENTITY_INVALID_BLOCK_HASH": "This membership application is no longer valid (because it references a block that network peers are cancelled): the person must renew its application for membership <b>before</b> being certified.",
    "IDENTITY_EXPIRED": "This identity has expired: this person must re-apply <b>before</b> being certified.",
    "IDENTITY_SANDBOX_FULL": "Could not register, because peer's sandbox is full.<br/><br/>Please retry later or choose another Duniter peer (in <b>Settings</b>).",
    "IDENTITY_NOT_FOUND": "Identity not found",
    "IDENTITY_TX_FAILED": "Error while getting identity's transactions",
    "WOT_PENDING_INVALID_BLOCK_HASH": "Membership not valid.",
    "WALLET_INVALID_BLOCK_HASH": "Your membership application is no longer valid (because it references a block that network peers are cancelled).<br/>You must <a ng-click=\"doQuickFix('renew')\">renew your application for membership</a> to fix this issue.",
    "WALLET_IDENTITY_EXPIRED": "The publication of your identity <b>has expired</b>.<br/>You must <a ng-click=\"doQuickFix('fixIdentity')\">re-issue your identity</a> to resolve this issue.",
    "WALLET_REVOKED": "Your identity has been <b>revoked</b>: neither your pseudonym nor your public key will be used in the future for a member account.",
    "WALLET_HAS_NO_SELF": "Your identity must first have been published, and not expired.",
    "AUTH_REQUIRED": "Authentication required.",
    "AUTH_INVALID_PUBKEY": "The public key does not match the connected account.",
    "AUTH_INVALID_SCRYPT": "Invalid username or password.",
    "AUTH_INVALID_FILE": "Invalid keychain file.",
    "AUTH_FILE_ERROR": "Failed to open keychain file",
    "IDENTITY_ALREADY_CERTIFY": "You have <b>already certified</b> that identity.<br/><br/>Your certificate is still valid (expires {{expiresIn|formatDuration}}).",
    "IDENTITY_ALREADY_CERTIFY_PENDING": "You have <b>already certified</b> that identity.<br/><br/>Your certification is still pending (Deadline for treatment {{expiresIn|formatDuration}}).",
    "UNABLE_TO_CERTIFY_TITLE": "Unable to certify",
    "LOAD_NEWCOMERS_FAILED": "Unable to load new members.",
    "LOAD_PENDING_FAILED": "Unable to load pending registrations.",
    "ONLY_MEMBER_CAN_EXECUTE_THIS_ACTION": "You must <b>be a member</b> in order to perform this action.",
    "ONLY_SELF_CAN_EXECUTE_THIS_ACTION": "You must have <b>published your identity</b> in order to perform this action.",
    "GET_BLOCK_FAILED": "Error while getting block",
    "INVALID_BLOCK_HASH": "Block not found (incorrect hash)",
    "DOWNLOAD_REVOCATION_FAILED": "Error while downloading revocation file.",
    "REVOCATION_FAILED": "Error while trying to revoke the identity.",
    "SALT_OR_PASSWORD_NOT_CONFIRMED": "Wrong secret identifier or password ",
    "RECOVER_ID_FAILED": "Could not recover password",
    "LOAD_FILE_FAILED" : "Unable to load file",
    "NOT_VALID_REVOCATION_FILE": "Invalid revocation file (wrong file format)",
    "NOT_VALID_SAVE_ID_FILE": "Invalid credentials backup file (wrong file format)",
    "NOT_VALID_KEY_FILE": "Invalid keychain file (unrecognized format)",
    "EXISTING_ACCOUNT": "Your identifiers correspond to an already existing account, whose <a ng-click=\"showHelpModal('pubkey')\">public key</a> is:",
    "EXISTING_ACCOUNT_REQUEST": "Please modify your credentials so that they correspond to an unused account.",
    "GET_LICENSE_FILE_FAILED": "Unable to get license file",
    "CHECK_NETWORK_CONNECTION": "No peer appears to be accessible.<br/><br/>Please <b>check your Internet connection</b>.",
    "ISSUE_524_TX_FAILED": "Failed to transfer.<br/><br/>A message has been sent to developers to help solve the problem.<b>Thank you for your help</b>.",
    "ADD_SECONDARY_WALLET_FAILED": "Unable to add secondary wallet.",
    "UPDATE_WALLET_LIST_FAILED": "Unable to refresh the list of wallets.",
    "LOAD_WALLET_LIST_FAILED": "Unable to load the list of wallets.",
    "COULD_NOT_ADD_MAIN_WALLET": "The wallet to add <b>must be different from the main account</b> with which you are connected.",
    "UNKNOWN_WALLET_ID": "Unknown secondary wallet."
  },
  "INFO": {
    "POPUP_TITLE": "Information",
    "CERTIFICATION_DONE": "Identity successfully signed",
    "NOT_ENOUGH_CREDIT": "Not enough credit",
    "TRANSFER_SENT": "Transfer request successfully sent",
    "COPY_TO_CLIPBOARD_DONE": "Copy succeeded",
    "MEMBERSHIP_OUT_SENT": "Membership revocation sent",
    "NOT_NEED_MEMBERSHIP": "Already a member.",
    "IDENTITY_WILL_MISSING_CERTIFICATIONS": "This identity will soon lack certification (at least {{willNeedCertificationCount}}).",
    "IDENTITY_NEED_MEMBERSHIP": "This identity did not send a membership request. She will have to if she wishes to become a member.",
    "REVOCATION_SENT": "Revocation sent successfully",
    "REVOCATION_SENT_WAITING_PROCESS": "Revocation <b>has been sent successfully</b>. It is awaiting processing.",
    "FEATURES_NOT_IMPLEMENTED": "This features is not implemented yet.<br/><br/>Why not to contribute to get it faster? ;)",
    "EMPTY_TX_HISTORY": "No operations to export"
  },
  "CONFIRM": {
    "POPUP_TITLE": "<b>Confirmation</b>",
    "POPUP_WARNING_TITLE": "<b>Warning</b>",
    "POPUP_SECURITY_WARNING_TITLE": "<i class=\"icon ion-alert-circled\"></i> <b>Security warning</b>",
    "CERTIFY_RULES_TITLE_UID": "Certify {{uid}}",
    "CERTIFY_RULES": "<b class=\"assertive\">Don't certify an account</b> if you believe that: <ul><li>1.) the issuers identity might be faked.<li>2.) the issuer already has another certified account.<li>3.) the issuer purposely or carelessly violates rule 1 or 2 (he certifies faked or double accounts).</ul></small><br/>Are you sure you want to certify this identity?",
    "TRANSFER": "<b>Transfer summary:</b><br/><br/><ul><li> - From: <b>{{from}}</b></li><li> - To: <b>{{to}}</b></li><li> - Amount: <b>{{amount}} {{unit}}</b></li><li> - Comment: <i>{{comment}}</i></li></ul><br/><b>Are-you sure you want to do this transfer?</b>",
    "TRANSFER_ALL": "<b>Transfer summary:</b><br/><br/><ul><li> - From: <b>{{from}}</b></li><li> - To: <b>{{to}}</b></li><li> - Amount: <b>{{amount}} {{unit}}</b></li><li> - Comment: <i>{{comment}}</i></li><br/><li> - Rest : <b>{{restAmount}} {{unit}}</b> to <b>{{restTo}}</b></li></ul><br/><b>Are-you sure you want to do this transfer?</b>",
    "MEMBERSHIP_OUT": "This operation is <b>irreversible</b>.<br/></br/><b>Are you sure you want to terminate your membership?</b>",
    "MEMBERSHIP_OUT_2": "This operation is <b>irreversible</b>!<br/><br/>Are you sure you want to <b>terminate your membership</b>?",
    "LOGIN_UNUSED_WALLET_TITLE": "Typing error?",
    "LOGIN_UNUSED_WALLET": "The account seems to be <b>inactive</b>.<br/><br/>It's probably a <b>typing error</b> when sign in. Please try again, checking that <b>public key is yours<b/>.",
    "FIX_IDENTITY": "The pseudonym <b>{{uid}}</b> will be published again, replacing the old publication that has expired.<br/></br/><b>Are you sure</b> you want to continue?",
    "FIX_MEMBERSHIP": "Your application for membership will be sent.<br/></br/><b>Are you sure?</b>",
    "MEMBERSHIP": "Your membership request will be sent. <br/></br/><b>Are you sure?</b>",
    "RENEW_MEMBERSHIP": "Your membership will be renewed.<br/></br/><b>Are you sure?</b>",
    "REVOKE_IDENTITY": "You will <b>definitely revoke this identity</b>.<br/><br/>The public key and the associated pseudonym <b>will never be used again</b> (for a member account).<br/></br/><b>Are you sure</b> you want to revoke this identity?",
    "REVOKE_IDENTITY_2": "This operation is <b>irreversible</b>!<br/><br/>Are you sure you want to <b>revoke this identity</b>?",
    "NOT_NEED_RENEW_MEMBERSHIP": "Your membership does not need to be renewed (it will only expire in {{membershipExpiresIn|formatDuration}}).<br/></br/><b>Are you sure you</b> want to renew your membership?",
    "SAVE_BEFORE_LEAVE": "Do you want to <b>save your changes</b> before leaving the page?",
    "SAVE_BEFORE_LEAVE_TITLE": "Changes not saved",
    "LOGOUT": "Are you sure you want to logout?",
    "USE_FALLBACK_NODE": "Peer <b>{{old}}</b> unreachable or invalid address.<br/><br/>Do you want to temporarily use the <b>{{new}}</b> node?",
    "ISSUE_524_SEND_LOG": "The transaction was rejected because of a known problem (issue #524) but not reproduced.<br/><br/>To help developers correct this error, do you accept <b>the transmission of your logs</b> per message?<br/><small>(No confidential data is sent)</small>"
  },
  "DOWNLOAD": {
    "POPUP_TITLE": "<b>Revocation file</b>",
    "POPUP_REVOKE_MESSAGE": "To safeguard your account, please download the <b>account revocation document</b>. It will allow you to cancel your account (in case of account theft, ID, an incorrectly created account, etc.).<br/><br/><b>Please store it in a safe place.</b>"
  },
  "HELP": {
    "TITLE": "Online help",
    "JOIN": {
      "SECTION": "Join",
      "SALT": "The secret identifier is very important. It is used to hash you password, which in turn is used to calculate your <span class=\"text-italic\">public account key</span> (its number) and the private key to access it.<br/><b>Please remeber this identifier well</b>, because there is no way to recover it when lost.<br/>Furthermore, it cannot be changed without having to create a new account.<br/><br/>A good secret identifier must be sufficiently long (8 characters at the very least) and as original as possible.",
      "PASSWORD": "The password is very important. Together with the secret identifier, it is use to calculate your account number (pblic key) and the private key to access it.<br/><b>Please remember it well</b>, because there is no way to recover it when lost.<br/>Furthermore, it cannot be changed without having to create a new account.<br/><br/>A good password is made (ideally) of at least 8 characters, with at least one capital and one number.",
      "PSEUDO": "A pseudonym is used only when joining as <span class=\"text-italic\">member</span>. It is always associated with a wallet (by its <span class=\"text-italic\">public key</span>).<br/>It is published on the network so that other users may identify it, certify or send money to the account.<br/>A pseudonym must be unique among all members (current and past)."
    },
    "LOGIN": {
      "SECTION": "Log in",
      "PUBKEY": "Account public key",
      "PUBKEY_DEF": "The public key of the keychain is generated from the entered identifiers (any), but does not correspond to an account already used.<br/><b>Make sure your public key is the same as your account</b>. Otherwise, you will be logged into an account that is probably never used, as the risk of collision with an existing account is very small.<br/><a href=\"https://en.wikipedia.org/wiki/Elliptic_curve_cryptography\" target=\"_ system\">Learn more about cryptography</a> by public key.",
      "METHOD": "Connection methods",
      "METHOD_DEF": "Several options are available to connect to a portfolios: <br/> - The connection <b>with salt (simple or advanced)</b> mixes your password with the secret identifier, to limit the attempts of piracy<br/> - The connection <b>using public key</b> prevents you from entering your credentials, which you will be asked only when an operation need it.<br/> - The connection <b>using keychain file</b> will read the public and private keys of the account from a file without the need to enter credentials. Several file formats are possible."
    },
    "GLOSSARY": {
      "SECTION": "Glossary",
      "PUBKEY_DEF": "A public key always identifies a wallet. It may identify a member. In Cesium it is calculated using the secret identifier and the password.",
      "MEMBER": "Member",
      "MEMBER_DEF": "A member is a real and living human, wishing to participate freely to the monitary community. The member will receive universal dividend, according to the period and amount as defined in the <span class=\"text-italic\">currency parameters</span>.",
      "CURRENCY_RULES": "Currency rules",
      "CURRENCY_RULES_DEF": "The currency rules are defined only once, and for all. They set the parameters under which the currency will perform: universal dividend calculation, the amount of certifications needed to become a member, the maximum amount of certifications a member can send, etc.<br/><br/>The parameters cannot be modified because of the use of a <span class=\"text-italic\">Blockchain</span> which carries and executes these rules, and constantly verifies their correct application. <a href=\"#/app/currency\">See current parameters</a>.",
      "BLOCKCHAIN": "Blockchain",
      "BLOCKCHAIN_DEF": "The Blockchain is a decentralised system which, in case of Duniter, serves to carry and execute the <span class=\"text-italic\">currency rules</span>.<br/><a href=\"http://en.duniter.org/presentation/\" target=\"_blank\">Read more about Duniter</a> and the working of its blockchain.",
      "UNIVERSAL_DIVIDEND_DEF": "The Universal Dividend (UD) is the quantity of money co-created by each member, according to the period and the calculation defined in the <span class=\"text-italic\">currency rules</span>.<br/>Every term, the members receive an equal amount of new money on their account.<br/><br/>The UD undergoes a steady growth, to remain fair under its members (current and future), calculated by an average life expectancy, as demonstrated in the Relative Theory of Money (RTM).<br/><a href=\"http://trm.creationmonetaire.info\" target=\"_system\">Read more about RTM</a> and open money."
    },
    "TIP": {
      "MENU_BTN_CURRENCY": "Menu <b>{{'MENU.CURRENCY'|translate}}</b> allows discovery of <b>currency parameters</b> and its state.",
      "CURRENCY_WOT": "The <b>member count</b> shows the <b>community's weight and evolution</b>.",
      "CURRENCY_MASS": "Shown here is the <b>total amount</b> currently in circulation and its <b>average distribution</b> per member.<br/><br/>This allows to estimate the <b>worth of any amount</b>, in respect to what <b>others own</b> on their account (on average).",
      "CURRENCY_UNIT_RELATIVE": "The unit used here (&ldquo;<b>{{'COMMON.UD'|translate}}<sub>{{currency|abbreviate}}</sub></b>&rdquo;) signifies that the amounts in {{currency|capitalize}} have been devided by the <b>Universal Dividend</b> (UD).<br/><br/><small>This relative unit is <b>relevant</b> because it is stable in contrast to the permanently growing monitary mass.</small>",
      "CURRENCY_CHANGE_UNIT": "The option <b>{{'COMMON.BTN_RELATIVE_UNIT'|translate}}</b> allows to <b>switch the unit</b> to show amounts in <b>{{currency|capitalize}}</b>, undevided by the Universal Dividend (instead of in &ldquo;<b>{{'COMMON.UD'|translate}}<sub>{{currency|abbreviate}}</sub></b>&rdquo;).",
      "CURRENCY_CHANGE_UNIT_TO_RELATIVE": "The option <b>{{'COMMON.BTN_RELATIVE_UNIT'|translate}}</b> allows to <b>switch the unit</b> to show amounts in &ldquo;<b>{{'COMMON.UD'|translate}}<sub>{{currency|abbreviate}}</sub></b>&rdquo;, which is relative to the Universal Dividend (the amount co-produced by each member).",
      "CURRENCY_RULES": "The <b>rules</b> of the currency determine its <b>exact and predictible</b> performance.<br/><br/>As a true DNA of the currency these rules make the monetary code <b>transparent and understandable</b>.",
      "MENU_BTN_NETWORK": "Menu <b>{{'MENU.NETWORK'|translate}}</b> allows discovery of <b>network's state<b>.",
      "NETWORK_BLOCKCHAIN": "All monetary transactions are recoded in a <b>public and tamper proof</b> ledger, generally referred to as the <b>blockchain</b>.",
      "NETWORK_PEERS": "The <b>peers</b> shown here correspond to <b>computers that update and check</b> the blockchain.<br/><br/>The more active peers there are, the more <b>decentralised</b> and therefore trustworhty the currency becomes.",
      "NETWORK_PEERS_BLOCK_NUMBER": "This <b>number</b> (in green) indicates the peer's <b>latest validated block</b> (last page written in the ledger).<br/><br/>Green indicates that the block was equally validated by the <b>majority of other peers</b>.",
      "NETWORK_PEERS_PARTICIPATE": "<b>Each member</b>, equiped with a computer with Internet, <b>can participate, adding a peer</b> simply by <b>installing the Duniter software</b> (free/libre). <a target=\"_new\" href=\"{{installDocUrl}}\" target=\"_system\">Read the installation manual &gt;&gt;</a>.",
      "MENU_BTN_ACCOUNT": "<b>{{'ACCOUNT.TITLE'|translate}}</b> allows access to your account balance and transaction history.",
      "MENU_BTN_ACCOUNT_MEMBER": "Here you can consult your account status, transaction history and your certifications.",
      "WALLET_CERTIFICATIONS": "Click here to reveiw the details of your certifications (given and received).",
      "WALLET_RECEIVED_CERTIFICATIONS": "Click here to review the details of your <b>received certifications</b>.",
      "WALLET_GIVEN_CERTIFICATIONS": "Click here to review the details of your <b>given certifications</b>.",
      "WALLET_BALANCE": "Your account <b>balance</b> is shown here.",
      "WALLET_BALANCE_RELATIVE": "{{'HELP.TIP.WALLET_BALANCE'|translate}}<br/><br/>The used unit (&ldquo;<b>{{'COMMON.UD'|translate}}<sub>{{currency|abbreviate}}</sub></b>&rdquo;) signifies that the amount in {{currency|capitalize}} has been divided by the <b>Universal Dividend</b> (UD) co-created by each member.<br/>At this moment, 1 UD equals {{currentUD}} {{currency|capitalize}}.",
      "WALLET_BALANCE_CHANGE_UNIT": "You can <b>change the unit</b> in which amounts are shown in <b><i class=\"icon ion-android-settings\"></i>&nbsp;{{'MENU.SETTINGS'|translate}}</b>.<br/><br/>For example, to display amounts <b>directly in {{currency|capitalize}}</b> instead of relative amounts.",
      "WALLET_PUBKEY": "This is your account public key. You can communicate it to a third party so that it more easily identifies your account.",
      "WALLET_SEND": "Issue a payment in just a few clicks.",
      "WALLET_SEND_NO_MONEY": "Issue a payment in just a few clicks.<br/>(Your balance does not allow this yet)",
      "WALLET_OPTIONS": "Please note that this button allows access to <b>other, less used actions</b>.<br/><br/>Don't forget to take a quick look, when you have a moment!",
      "WALLET_RECEIVED_CERTS": "This shows the list of persons that certified you.",
      "WALLET_CERTIFY": "The button <b>{{'WOT.BTN_SELECT_AND_CERTIFY'|translate}}</b> allows selecting an identity and certifying it.<br/><br/>Only users that are <b>already member</b> may certify others.",
      "WALLET_CERT_STOCK": "Your supply of certifications (to send) is limited to <b>{{sigStock}} certifications</b>.<br/><br/>This supply will replete itself over time, as and when earlier certifications expire.",
      "MENU_BTN_TX_MEMBER": "<b>{{'MENU.TRANSACTIONS'|translate}}</b> allow access to transactions history, and send new payments.",
      "MENU_BTN_TX": "View the history of <b>your transactions</b> here and send new payments.",
      "MENU_BTN_WOT": "The menu <b>{{'MENU.WOT'|translate}}</b> allows searching <b>users</b> of the currency (member or not).",
      "WOT_SEARCH_TEXT_XS": "To search in the registry, type the <b>first letters of a users pseudonym or public key</b>.<br/><br/>The search will start automatically.",
      "WOT_SEARCH_TEXT": "To search in the registry, type the <b>first letters of a users pseudonym or public key</b>.<br/><br/>Then hit <b>Enter</b> to start the search.",
      "WOT_SEARCH_RESULT": "Simply click a user row to view the details sheet.",
      "WOT_VIEW_CERTIFICATIONS": "The row <b>{{'ACCOUNT.CERTIFICATION_COUNT'|translate}}</b> shows how many members members validated this identity.<br/><br/>These certifications testify that the account belongs to <b>a living human</b> and this person has <b>no other member account</b>.",
      "WOT_VIEW_CERTIFICATIONS_COUNT": "There are at least <b>{{sigQty}} certifications</b> needed to become a member and receive the <b>Universal Dividend</b>.",
      "WOT_VIEW_CERTIFICATIONS_CLICK": "Click here to open <b>a list of all certifications</b> given to and by this identity.",
      "WOT_VIEW_CERTIFY": "The button <b>{{'WOT.BTN_CERTIFY'|translate}}</b> allows to add your certification to this identity.",
      "CERTIFY_RULES": "<b>Attention:</b> Only certify <b>real and living persons</b> that do not own any other certified account.<br/><br/>The trust carried by the currency depends on each member's vigilance!",
      "MENU_BTN_SETTINGS": "The <b>{{'MENU.SETTINGS'|translate}}</b> allow you to configure the Cesium application.<br/><br/>For example, you can <b>change the unit</b> in which the currency will be shown.",
      "HEADER_BAR_BTN_PROFILE": "Click here to access your <b>user profile</b>",
      "SETTINGS_CHANGE_UNIT": "You can <b>change the display unit</b> of amounts by clicking here.<br/><br/>- Deactivate the option to show amounts in {{currency|capitalize}}.<br/>- Activate the option for relative amounts in {{'COMMON.UD'|translate}}<sub>{{currency|abbreviate}}</sub> (<b>divided</b> by the current Universal Dividend).",
      "END_LOGIN": "This guided visit has <b>ended</b>.<br/><br/>Welcome to the <b>free economy</b>!",
      "END_NOT_LOGIN": "This guided visit has <b>ended</b>.<br/><br/>If you wish to join the currency {{currency|capitalize}}, simply click <b>{{'LOGIN.CREATE_ACCOUNT'|translate}}</b> below."
    }
  },
  "API" :{
    "COMMON": {
      "LINK_DOC": "API documentation",
      "LINK_DOC_HELP": "API documentation for developers",
      "LINK_STANDARD_APP": "Standard version",
      "LINK_STANDARD_APP_HELP": "Open standard version of {{'COMMON.APP_NAME'|translate}}"
    },
    "HOME": {
      "TITLE": "{{'COMMON.APP_NAME'|translate}} API Documentation",
      "MESSAGE": "Welcome to the {{'COMMON.APP_NAME'|translate}} <b>API documentation </b>.<br/>Connect your web site to <a href=\"http://duniter.org\" target=\"_system\">Duniter</a> very easily!",
      "MESSAGE_SHORT": "Connect your websites to <a href=\"http://duniter.org\" target=\"_system\">Duniter</a> very easily!",
      "DOC_HEADER": "Available services:"
    },
    "TRANSFER": {
      "TITLE": "{{'COMMON.APP_NAME'|translate}} - Online payment",
      "TITLE_SHORT": "Online payment",
      "SUMMARY": "Order summary:",
      "AMOUNT": "Amount:",
      "NAME": "Name:",
      "PUBKEY": "Public key of the recipient:",
      "COMMENT": "Order reference:",
      "DEMO": {
        "SALT": "demo",
        "PASSWORD": "demo",
        "PUBKEY": "3G28bL6deXQBYpPBpLFuECo46d3kfYMJwst7uhdVBnD1",
        "HELP": "<b>Demonstration mode</b>: No payment will actually be sent during this simulation.<br/>Please use credentials: <b>{{'API.TRANSFER.DEMO.SALT'|translate}} / {{'API.TRANSFER.DEMO.PASSWORD'|translate}}</b>",
        "BAD_CREDENTIALS": "Invalid credentials.<br/>In demonstration mode, credentials should be: {{'API.TRANSFER.DEMO.SALT'|translate}} / {{'API.TRANSFER.DEMO.PASSWORD'|translate}}"
      },
      "INFO": {
        "SUCCESS_REDIRECTING_WITH_NAME": "Payment sent.<br/>Redirect to <b>{{name}}</b>...",
        "SUCCESS_REDIRECTING": "Payment sent.<br/>Redirect to the seller's website...",
        "CANCEL_REDIRECTING_WITH_NAME": "Payment cancelled.<br/>Redirect to <b>{{name}}</b>...",
        "CANCEL_REDIRECTING": "Payment cancelled.<br/>Redirect to the seller's website..."
      },
      "ERROR": {
        "TRANSFER_FAILED": "Payment failed"
      }
    },
    "DOC": {
      "DESCRIPTION_DIVIDER": "Description",
      "URL_DIVIDER": "Calling address",
      "PARAMETERS_DIVIDER": "Parameters",
      "AVAILABLE_PARAMETERS": "Here is the list of al available parameters:",
      "DEMO_DIVIDER": "Try it !",
      "DEMO_HELP": "To test this service, click on this button. The result content will be display below.",
      "DEMO_RESULT": "Result returned by call:",
      "DEMO_SUCCEED": "<i class=\"icon ion-checkmark\"></i> Success!",
      "DEMO_CANCELLED": "<i class=\"icon ion-close\"></i> Canceled by user",
      "INTEGRATE_DIVIDER": "Website integration",
      "INTEGRATE_CODE": "Code:",
      "INTEGRATE_RESULT": "Result preview:",
      "INTEGRATE_PARAMETERS": "Parameters",
      "TRANSFER": {
        "TITLE": "Payments",
        "DESCRIPTION": "From a site (eg online marketplace) you can delegate payment in free currency to Cesium API. To do this, simply open a page at the following address:",
        "PARAM_PUBKEY": "Recipient's public key",
        "PARAM_PUBKEY_HELP": "Recipient's public key (required)",
        "PARAM_AMOUNT": "Amount",
        "PARAM_AMOUNT_HELP": "Transaction amount (required)",
        "PARAM_COMMENT": "Reference (or comment)",
        "PARAM_COMMENT_HELP": "Reference or comment. You will allow for example to identify the payment in the BlockChain.",
        "PARAM_NAME": "Name (of recipient or website)",
        "PARAM_NAME_HELP": "The name of your website. This can be a readable name (eg \"My online site\"), or a web address (eg \"www.MySite.com\").",
        "PARAM_REDIRECT_URL": "URL redirection",
        "PARAM_REDIRECT_URL_HELP": "URL redirection after sending payment, after the payment has been sent. Can contain the following strings, which will be replaced by the values of the transaction: \"{tx}\", \"{hash}\", \"{comment}\", \"{amount}\" and \"{pubkey}\".",
        "PARAM_CANCEL_URL": "URL if cancelled",
        "PARAM_CANCEL_URL_HELP": "URL in case of cancellation.  Can contain the following strings, which will be replaced: \"{comment}\", \"{amount}\" and \"{pubkey}\".",
        "EXAMPLES_HELP": "Examples of integration:",
        "EXAMPLE_BUTTON": "HTML Button",
        "EXAMPLE_BUTTON_DEFAULT_TEXT": "Pay in {{currency|abbreviate}}",
        "EXAMPLE_BUTTON_DEFAULT_STYLE": "Custom style",
        "EXAMPLE_BUTTON_TEXT_HELP": "Button text",
        "EXAMPLE_BUTTON_BG_COLOR": "Background color",
        "EXAMPLE_BUTTON_BG_COLOR_HELP": "eg: #fbc14c, yellow, lightgrey, rgb(180,180,180)",
        "EXAMPLE_BUTTON_FONT_COLOR": "Font color",
        "EXAMPLE_BUTTON_FONT_COLOR_HELP": "eg: black, orange, rgb(180,180,180)",
        "EXAMPLE_BUTTON_TEXT_ICON": "Icon",
        "EXAMPLE_BUTTON_TEXT_WIDTH": "Width",
        "EXAMPLE_BUTTON_TEXT_WIDTH_HELP": "eg: 200px, 50%",
        "EXAMPLE_BUTTON_ICON_NONE": "No icon",
        "EXAMPLE_BUTTON_ICON_DUNITER": "Duniter logo",
        "EXAMPLE_BUTTON_ICON_CESIUM": "Cesium logo",
        "EXAMPLE_BUTTON_ICON_G1_COLOR": "Ä1 logo",
        "EXAMPLE_BUTTON_ICON_G1_BLACK": "Ä1 logo (outline)"
      }
    }
  }
}
);

$translateProvider.translations("es-ES", {
  "COMMON": {
    "APP_NAME": "Cesium",
    "APP_VERSION": "v{{version}}",
    "APP_BUILD": "fecha: {{build}}",
    "PUBKEY": "Llave pÃºblica",
    "MEMBER": "Miembro",
    "BLOCK": "Bloque",
    "BTN_OK": "OK",
    "BTN_YES": "SÃ­",
    "BTN_NO": "No",
    "BTN_SEND": "Enviar",
    "BTN_SEND_MONEY": "Hacer una transferencia",
    "BTN_SEND_MONEY_SHORT": "Transferencia",
    "BTN_SAVE": "Guardar",
    "BTN_YES_SAVE": "SÃ­, guardar",
    "BTN_YES_CONTINUE": "SÃ­, continuar",
    "BTN_SHOW": "Ver",
    "BTN_SHOW_PUBKEY": "Ver la llave",
    "BTN_RELATIVE_UNIT": "Â¿Visualizar en unidad relativa?",
    "BTN_BACK": "Anterior",
    "BTN_NEXT": "Siguiente",
    "BTN_CANCEL": "Cancelar",
    "BTN_CLOSE": "Cerrar",
    "BTN_LATER": "MÃ¡s tarde",
    "BTN_LOGIN": "Connectarse",
    "BTN_LOGOUT": "DesconexiÃ³n",
    "BTN_ADD_ACCOUNT": "Nueva cuenta",
    "BTN_SHARE": "Compartir",
    "BTN_EDIT": "Modificar",
    "BTN_DELETE": "Suprimir",
    "BTN_ADD": "AÃ±adir",
    "BTN_SEARCH": "Buscar",
    "BTN_REFRESH": "Actualizar",
    "BTN_RETRY": "Empezar de nuevo",
    "BTN_START": "Empezar",
    "BTN_CONTINUE": "Continuar",
    "BTN_CREATE": "Crear",
    "BTN_UNDERSTOOD": "Entendido",
    "BTN_OPTIONS": "Opciones",
    "BTN_HELP_TOUR": "Visita guiada",
    "BTN_HELP_TOUR_SCREEN": "Descubrir esta pantalla",
    "BTN_DOWNLOAD": "Descargar",
    "BTN_DOWNLOAD_ACCOUNT_STATEMENT": "Descargar el estado de cuenta",
    "BTN_MODIFY": "Modificar",
    "CHOOSE_FILE": "Deposite archivo<br/>o clique para seleccionarlo",
    "DAYS": "DÃ­as",
    "NO_ACCOUNT_QUESTION": "Â¿TodavÃ­a no es miembro? Â¡Crear una cuenta!",
    "SEARCH_NO_RESULT": "NingÃºn resultado encontrado",
    "LOADING": "Espere por favor...",
    "SEARCHING": "BÃºsqueda en proceso...",
    "FROM": "De",
    "TO": "A",
    "COPY": "Copiar",
    "LANGUAGE": "Idioma",
    "UNIVERSAL_DIVIDEND": "Dividendo universal",
    "UD": "DU",
    "DATE_PATTERN": "DD/MM/YYYY HH:mm",
    "DATE_FILE_PATTERN": "YYYY-MM-DD",
    "DATE_SHORT_PATTERN": "DD/MM/YY",
    "DATE_MONTH_YEAR_PATTERN": "MM/YYYY",
    "EMPTY_PARENTHESIS": "(vacÃ­o)",
    "UID": "SeudÃ³nimo",
    "ENABLE": "Activado",
    "DISABLE": "Desactivado",
    "RESULTS_LIST": "Resultados:",
    "RESULTS_COUNT": "{{count}} resultados",
    "EXECUTION_TIME": "ejecutado en {{duration|formatDurationMs}}",
    "SHOW_VALUES": "Â¿Publicar los valores no codificados?",
    "POPOVER_ACTIONS_TITLE": "Opciones",
    "POPOVER_FILTER_TITLE": "Filtros",
    "SHOW_MORE": "Mostrar mÃ¡s",
    "SHOW_MORE_COUNT": "(lÃ­mite actual {{limit}})",
    "POPOVER_SHARE": {
      "TITLE": "Compartir",
      "SHARE_ON_TWITTER": "Compartir en Twitter",
      "SHARE_ON_FACEBOOK": "Compartir en Facebook",
      "SHARE_ON_DIASPORA": "Compartir en Diaspora*",
      "SHARE_ON_GOOGLEPLUS": "Compartir en Google+"
    }
  },
  "SYSTEM": {
    "PICTURE_CHOOSE_TYPE": "Elegir la fuente:",
    "BTN_PICTURE_GALLERY": "GalerÃ­a",
    "BTN_PICTURE_CAMERA": "<b>CÃ¡mara</b>"
  },
  "MENU": {
    "HOME": "RecepciÃ³n",
    "WOT": "Directorio",
    "CURRENCY": "Moneda",
    "ACCOUNT": "Mi cuenta",
    "WALLETS": "Mis monederos",
    "TRANSFER": "Transferencia",
    "SCAN": "EscÃ¡ner",
    "SETTINGS": "Configuraciones",
    "NETWORK": "Red",
    "TRANSACTIONS": "Mis operaciones"
  },
  "ABOUT": {
    "TITLE": "A propÃ³sito ",
    "LICENSE": "AplicaciÃ³n <b>libre</b> (licencia GNU GPLv3).",
    "LATEST_RELEASE": "Hay una <b>versiÃ³n mÃ¡s nueva</b> de {{'COMMON.APP_NAME' | translate}} (<b>v{{version}}</b>)",
    "PLEASE_UPDATE": "Por favor actualice {{'COMMON.APP_NAME' | translate}} (Ãºltima versiÃ³n: <b>v{{version}}</b>)",
    "CODE": "CÃ³digo fuente:",
    "DEVELOPERS": "Desarrollado por:",
    "FORUM": "Foro:",
    "PLEASE_REPORT_ISSUE": "No dude en informarnos de las anomalÃ­as encontradas",
    "REPORT_ISSUE": "Reportar un problema"
  },
  "HOME": {
    "TITLE": "Cesium",
    "WELCOME": "Bienvenido(a) a la aplicaciÃ³n Cesium !",
    "MESSAGE": "Seguir las cuentas de {{currency|abbreviate}} fÃ¡cilmente",
    "BTN_CURRENCY": "Explorar la moneda",
    "BTN_ABOUT": "Acerca de:",
    "BTN_HELP": "Ayuda en lÃ­nea",
    "REPORT_ISSUE": "anomalÃ­a",
    "NOT_YOUR_ACCOUNT_QUESTION": "Â¿Usted no es dueÃ±o de la cuenta <<b><i class=\"ion-key\"></i> {{pubkey|formatPubkey}}</b>?",
    "BTN_CHANGE_ACCOUNT": "Desconectar esta cuenta",
    "CONNECTION_ERROR": "Nodo <b>{{servidor}}</b> inalcanzable o direcciÃ³n invÃ¡lida.<br/><br/>Compruebe su conexiÃ³n a Internet, o nodo de conmutaciÃ³n <a class=\"positive\" ng-click=\"doQuickFix('settings')\">en la configuraciÃ³n</a>."
  },
  "SETTINGS": {
    "TITLE": "ConfiguraciÃ³n",
    "NETWORK_SETTINGS": "Red",
    "PEER": "DirecciÃ³n del nodo Duniter",
    "PEER_CHANGED_TEMPORARY": "DirecciÃ³n utilizada temporalmente",
    "USE_LOCAL_STORAGE": "Activar el almacenamiento local",
    "USE_LOCAL_STORAGE_HELP": "Permitir el ahorro de almacenamiento local",
    "ENABLE_HELPTIP": "Activar las ayudas contextuales",
    "ENABLE_UI_EFFECTS": "Activar los efectos visuales",
    "HISTORY_SETTINGS": "Operaciones de cuentas",
    "DISPLAY_UD_HISTORY": "Â¿Publicar los dividendos producidos?",
    "TX_HISTORY_AUTO_REFRESH": "Activar actualizaciÃ³n automÃ¡tica?",
    "TX_HISTORY_AUTO_REFRESH_HELP": "Actualice el saldo y las operaciones automÃ¡ticamente, en cada nuevo bloque.",
    "AUTHENTICATION_SETTINGS": "AutenticaciÃ³n",
    "KEEP_AUTH": "Caducidad de la autenticaciÃ³n",
    "KEEP_AUTH_HELP": "Definir cuÃ¡ndo limpiar la memoria de autenticaciÃ³n",
    "KEEP_AUTH_OPTION": {
      "NEVER": "DespuÃ©s de cada operaciÃ³n",
      "SECONDS": "DespuÃ©s de {{value}} segundos de inactividad",
      "MINUTE": "DespuÃ©s de {{value}}min de inactividad",
      "MINUTES": "DespuÃ©s de {{value}}mins de inactividad",
      "HOUR": "DespuÃ©s de {{value}}h de inactividad",
      "ALWAYS": "Al finalizar la sesiÃ³n"
    },
    "REMEMBER_ME": "Recordarme",
    "REMEMBER_ME_HELP": "Permite mantenerse siempre conectado (no recomendado), conservando localmente la llave pÃºblica.",
    "PLUGINS_SETTINGS": "Extensiones",
    "BTN_RESET": "Restaurar los valores por defecto"Â ,
    "EXPERT_MODE": "Activar el modo experto",
    "EXPERT_MODE_HELP": "Permite una visualizaciÃ³n mÃ¡s detallada",
    "POPUP_PEER": {
      "TITLE": "Nodo Duniter",
      "HOST": "DirecciÃ³n",
      "HOST_HELP": "DirecciÃ³n: servidor:puerto",
      "USE_SSL": "Â¿Segura?",
      "USE_SSL_HELP": "(Cifrado SSL)",
      "BTN_SHOW_LIST": "Lista de nodos"
    }
  },
  "BLOCKCHAIN": {
    "HASH": "Hash: {{hash}}",
    "VIEW": {
      "HEADER_TITLE": "Bloque #{{number}}-{{hash|formatHash}}",
      "TITLE_CURRENT": "Bloque corriente",
      "TITLE": "Bloque #{{number|formatInteger}}",
      "COMPUTED_BY": "Calculado por el nodo de",
      "SHOW_RAW": "Ver el fichero en bruto",
      "TECHNICAL_DIVIDER": "Informaciones tÃ©cnicas",
      "VERSION": "VersiÃ³n del formato",
      "HASH": "Hash calculado",
      "UNIVERSAL_DIVIDEND_HELP": "Moneda co-producida por cada uno de los {{membersCount}} miembros",
      "EMPTY": "NingÃºn dato en este bloque",
      "POW_MIN": "Dificultad mÃ­nima",
      "POW_MIN_HELP": "Dificultad impuesta por el cÃ¡lculo del hash",
      "DATA_DIVIDER": "Datos",
      "IDENTITIES_COUNT": "Nuevas identidades",
      "JOINERS_COUNT": "Nuevos miembros",
      "ACTIVES_COUNT": "Renovaciones",
      "ACTIVES_COUNT_HELP": "Miembros que han renovado sus adhesiones",
      "LEAVERS_COUNT": "Miembros salientes",
      "LEAVERS_COUNT_HELP": "Miembros salientes que ya no quieren estar certificados",
      "EXCLUDED_COUNT": "Miembros excluidos",
      "EXCLUDED_COUNT_HELP": "Antiguos miembros excluidos por no renovaciÃ³n o falta de certificaciones",
      "REVOKED_COUNT": "Identidades revocadas",
      "REVOKED_COUNT_HELP": "Estas cuentas no podrÃ¡n ser miembros",
      "TX_COUNT": "Transacciones",
      "CERT_COUNT": "Certificaciones",
      "TX_TO_HIMSELF": "OperaciÃ³n de cambio",
      "TX_OUTPUT_UNLOCK_CONDITIONS": "Condiciones de desbloqueo",
      "TX_OUTPUT_OPERATOR": {
        "AND": "y",
        "OR": "o"
      },
      "TX_OUTPUT_FUNCTION": {
        "SIG": "<b>Firma</b> de ",
        "XHX": "<b>ContraseÃ±a</b>, cuyo SHA256 =",
        "CSV": "Bloqueado durante",
        "CLTV": "Bloqueado hasta"
      }
    },
    "LOOKUP": {
      "TITLE": "Bloques",
      "NO_BLOCK": "NingÃºn bloque",
      "LAST_BLOCKS": "Ãºltimos bloques:",
      "BTN_COMPACT": "Compactar"
    }
  },
  "CURRENCY": {
    "VIEW": {
      "TITLE": "Moneda",
      "TAB_CURRENCY": "Moneda",
      "TAB_WOT": "Red de confianza",
      "TAB_NETWORK": "Red",
      "TAB_BLOCKS": "Bloques",
      "CURRENCY_SHORT_DESCRIPTION": "{{currency|capitalizar}} es una <b>moneda libre</b>, originada el {{firstBlockTime|formatFromNow}}. Ella cuenta actualmente <b>{{N}} miembros</b>, que producen y recibir un <a ng-click=\"showHelpModal('ud')\">Dividendo universal</a> (DU), cada {{dt|formatPeriod}}.",
      "NETWORK_RULES_DIVIDER": "Reglas de la red",
      "CURRENCY_NAME": "Nombre de la moneda",
      "MEMBERS": "Cantidad de miembros",
      "MEMBERS_VARIATION": "variaciones del Ãºltimo DU",
      "MONEY_DIVIDER": "Moneda",
      "MASS": "Masa monetaria",
      "SHARE": "Masa por miembro",
      "UD": "Dividendo universal",
      "C_ACTUAL": "Crecimiento actual",
      "MEDIAN_TIME": "Hora de la blockchain",
      "POW_MIN": "Nivel mÃ­nimo de dificultad de cÃ¡lculo",
      "MONEY_RULES_DIVIDER": "Reglas de la moneda",
      "C_RULE": "Crecimiento teÃ³rico objetivo",
      "UD_RULE": "CÃ¡lculo del dividendo universal",
      "DT_REEVAL": "Periodo de revalorizaciÃ³n del DU",
      "REEVAL_SYMBOL": "reval",
      "DT_REEVAL_VALUE": "Todos los <b>{{dtReeval|formatDuration}}</b> ({{dtReeval/86400}} {{'COMMON.DAYS'|translate}})",
      "UD_REEVAL_TIME0": "Fecha de la primera revalorizaciÃ³n",
      "SIG_QTY_RULE": "NÃºmero de certificaciones requeridas para ser miembro",
      "SIG_STOCK": "NÃºmero mÃ¡ximo de certificaciones emitidas por miembros",
      "SIG_PERIOD": "Plazo mÃ­nimo de espera entre 2 certificaciones sucesivas emitidas por la misma persona",
      "SIG_WINDOW": "Plazo lÃ­mite para tomar en cuenta una certificaciÃ³n",
      "SIG_VALIDITY": "DuraciÃ³n de una certificaciÃ³n que se ha tenido en cuenta.",
      "MS_WINDOW": "DuraciÃ³n lÃ­mite para toma en cuenta de una adhesiÃ³n",
      "MS_VALIDITY": "DuraciÃ³n de una certificaciÃ³n",
      "STEP_MAX": "Distancia mÃ¡xima entre un nuevo entrante y los miembros referentes",
      "WOT_RULES_DIVIDER": "Reglas de la red de confianza",
      "SENTRIES": "Cantidad de certificaciones necesarias para ser miembro referente",
      "SENTRIES_FORMULA": "Cantidad de certificaciones necesarias para ser miembro referente (fÃ³rmula)",
      "XPERCENT":"Porcentaje mÃ­nimo de miembros referentes necesario para respetar la regla de distancia",
      "AVG_GEN_TIME": "Tiempo medio entre dos bloques",
      "CURRENT": "actual",
      "MATH_CEILING": "TECHO",
      "DISPLAY_ALL_RULES": "Â¿Ver todas las reglas?",
      "BTN_SHOW_LICENSE": "Ver la licencia",
      "WOT_DIVIDER": "Red de confianza"
    },
    "LICENSE": {
      "TITLE": "Licencia de la moneda",
      "BTN_DOWNLOAD": "Descagar el fichero",
      "NO_LICENSE_FILE": "Fichero de licencia no encontrado."
    }
  },
  "NETWORK": {
    "VIEW": {
      "MEDIAN_TIME": "Hora de la blockchain",
      "LOADING_PEERS": "Cargando los nodos...",
      "NODE_ADDRESS": "DirecciÃ³n:",
      "SOFTWARE": "Software:",
      "WARN_PRE_RELEASE": "prelanzamiento (Ãºltima versiÃ³n estable: <b>{{version}}</b>)",
      "WARN_NEW_RELEASE": "VersiÃ³n <b>{{version}}</b> disponible",
      "WS2PID": "ID:",
      "PRIVATE_ACCESS": "Acceso privado",
      "POW_PREFIX": "Prefijo de la prueba de trabajo:",
      "ENDPOINTS": {
        "BMAS": "Interfaz segura (SSL)",
        "BMATOR": "Interfaz red TOR",
        "WS2P": "Interfaz WS2P",
        "ES_USER_API": "Nodo de datos Cesium+"
      }
    },
    "INFO": {
      "ONLY_SSL_PEERS": "La visualizaciÃ³n de los nodos sin SSL estÃ¡ deteriorada porque Cesium funciona en modo HTTPS."
    }
  },
  "PEER": {
    "PEERS": "Nodos",
    "SIGNED_ON_BLOCK": "Firmado sobre el bloque",
    "MIRROR": "espejo",
    "MIRRORS": "Nodos espejo",
    "PEER_LIST": "Lista de nodos",
    "MEMBERS": "Nodos miembro",
    "ALL_PEERS": "Todos los nodos",
    "DIFFICULTY": "Dificultad",
    "API": "API",
    "CURRENT_BLOCK": "Bloque #",
    "POPOVER_FILTER_TITLE": "Filtro",
    "OFFLINE": "Nodos fuera de lÃ­nea",
    "BTN_SHOW_PEER": "Ver nodo",
    "VIEW": {
      "TITLE": "Nodo",
      "OWNER": "Propiedad de",
      "SHOW_RAW_PEERING": "Ver la tarjeta de red",
      "SHOW_RAW_CURRENT_BLOCK": "Ver el Ãºltimo bloque (formato bruto)",
      "LAST_BLOCKS": "Bloques recientes",
      "KNOWN_PEERS": "Nodos conocidos:",
      "GENERAL_DIVIDER": "InformaciÃ³n general",
      "ERROR": {
        "LOADING_TOR_NODE_ERROR": "No se pudo obtener la informaciÃ³n del nodo usando la red TOR.",
        "LOADING_NODE_ERROR": "No se pudo obtener la informaciÃ³n del nodo"
      }
    }
  },
  "WOT": {
    "SEARCH_HELP": "Buscar (seudÃ³nimo o llave pÃºblica)",
    "SEARCH_INIT_PHASE_WARNING": "Durante la etapa de preinscripciÃ³n, el tiempo de bÃºsqueda de las inscripciones en espera <b>puede ser largo</b>. Gracias por su paciencia...",
    "REGISTERED_SINCE": "Registrado en",
    "REGISTERED_SINCE_BLOCK": "Registrado en el bloque #",
    "NO_CERTIFICATION": "Ninguna certificaciÃ³n validada",
    "NO_GIVEN_CERTIFICATION": "Ninguna certificaciÃ³n emitida",
    "NOT_MEMBER_PARENTHESIS": "(no miembro)",
    "IDENTITY_REVOKED_PARENTHESIS": "(identidad revocada)",
    "MEMBER_PENDING_REVOCATION_PARENTHESIS": "(revocaciÃ³n en proceso)",
    "EXPIRE_IN": "Expira el",
    "NOT_WRITTEN_EXPIRE_IN": "Fecha lÃ­mite<br/>de procesamiento",
    "EXPIRED": "Expirado",
    "PSEUDO": "SeudÃ³nimo",
    "SIGNED_ON_BLOCK": "Emitida en el bloque #{{block}}",
    "WRITTEN_ON_BLOCK": "Escrita en el bloque #{{block}}",
    "GENERAL_DIVIDER": "Informaciones generales",
    "NOT_MEMBER_ACCOUNT": "Cuenta no miembro",
    "NOT_MEMBER_ACCOUNT_HELP": "Se trata de un simple monedero, sin solicitud de adhesiÃ³n en espera.",
    "TECHNICAL_DIVIDER": "Informaciones tÃ©cnicas",
    "BTN_CERTIFY": "Certificar",
    "BTN_YES_CERTIFY": "SÃ­, certificar",
    "BTN_SELECT_AND_CERTIFY": "Nueva certificaciÃ³n",
    "ACCOUNT_OPERATIONS": "Operaciones de cuenta",
    "VIEW": {
      "POPOVER_SHARE_TITLE": "Identidad {{title}}"
    },
    "LOOKUP": {
      "TITLE": "Directorio",
      "NEWCOMERS": "Nuevos miembros:",
      "NEWCOMERS_COUNT": "{{count}} miembros",
      "PENDING": "Inscripciones en espera:",
      "PENDING_COUNT": "{{count}} inscripciones en espera",
      "REGISTERED": "Inscrito {{sigDate | formatFromNow}}",
      "MEMBER_FROM": "Miembro desde {{memberDate|formatFromNowShort}}",
      "BTN_NEWCOMERS": "Nuevos miembros",
      "BTN_PENDING": "Inscripciones en espera",
      "SHOW_MORE": "Mostrar mÃ¡s",
      "SHOW_MORE_COUNT": "(lÃ­mite actual a {{limit}})",
      "NO_PENDING": "Ninguna inscripciÃ³n en espera.",
      "NO_NEWCOMERS": "Ningun miembro."
    },
    "CONTACTS": {
      "TITLE": "Contactos"
    },
    "MODAL": {
      "TITLE": "Buscar"
    },
    "CERTIFICATIONS": {
      "TITLE": "{{uid}} - Certificaciones",
      "SUMMARY": "Certificaciones recibidas",
      "LIST": "Detalle de las certificaciones recibidas",
      "PENDING_LIST": "Certificaciones en espera de tratamiento",
      "RECEIVED": "Certificaciones recibidas",
      "RECEIVED_BY": "Certificaciones recibidas por {{uid}}",
      "ERROR": "Certificaciones recibidas por error",
      "SENTRY_MEMBER": "Miembro referente"
    },
    "OPERATIONS": {
      "TITLE": "{{uid}} - Operaciones"
    },
    "GIVEN_CERTIFICATIONS": {
      "TITLE": "{{uid}} - Certificaciones emitidas",
      "SUMMARY": "Certificaciones emitidas",
      "LIST": "Detalle de las certificaciones emitidas",
      "PENDING_LIST": "Certificaciones en espera a ser procesadas",
      "SENT": "Certificaciones emitidas",
      "SENT_BY": "Certificaciones emitidas por {{uid}}",
      "ERROR": "Certificaciones emitidas por error"
    }
  },
  "LOGIN": {
    "TITLE": "<i class=\"icon ion-locked\"></i> ConexiÃ³n",
    "SCRYPT_FORM_HELP": "Ingrese sus credenciales.<br>Recuerde verificar que la clave pÃºblica es su cuenta.",
    "PUBKEY_FORM_HELP": "Por favor ingrese una clave de cuenta pÃºblica:",
    "FILE_FORM_HELP": "Elija el archivo de llavero para usar:",
    "SCAN_FORM_HELP": "Escanee el cÃ³digo QR de la monedero.",
    "SALT": "Identificador secreto",
    "SALT_HELP": "Identificador secreto",
    "SHOW_SALT": "Â¿Visualizar el identificador secreto?",
    "PASSWORD": "Frase secreta",
    "PASSWORD_HELP": "Frase secreta",
    "PUBKEY_HELP": "llave pÃºblica",
    "NO_ACCOUNT_QUESTION": "Â¿AÃºn no tiene cuenta?",
    "CREATE_ACCOUNT": "Crear una cuenta",
    "FORGOTTEN_ID": "Â¿OlvidÃ³ su frase secreta?",
    "ASSOCIATED_PUBKEY": "Clave pÃºblica del llavero:",
    "BTN_METHODS": "Otros mÃ©todos",
    "BTN_METHODS_DOTS": "MÃ©todo de cambio...",
    "METHOD_POPOVER_TITLE": "MÃ©todos",
    "MEMORIZE_AUTH_FILE": "Recuerda este llavero al momento de la sesiÃ³n de navegaciÃ³n",
    "SCRYPT_PARAMETERS": "Configuraciones (Scrypt) :",
    "AUTO_LOGOUT": {
      "TITLE": "InformaciÃ³n",
      "MESSAGE": "<i class=\"ion-android-time\"></i> Se ha <b>desconectado</b> de forma automÃ¡tica, despuÃ©s de un periodo de inactividad prolongada.",
      "BTN_RELOGIN": "Volver a conectarme",
      "IDLE_WARNING": "Se desconectarÃ¡ en... {{countdown}}"
    },
    "METHOD": {
      "SCRYPT_DEFAULT": "IdentificaciÃ³n predeterminada",
      "SCRYPT_ADVANCED": "Sallaje avanzado",
      "FILE": "Archivo llavero",
      "PUBKEY": "Solo clave pÃºblica",
      "SCAN": "Escanear un cÃ³digo QR"
    },
    "SCRYPT": {
      "SIMPLE": "Ligero",
      "DEFAULT": "Predeterminado",
      "SECURE": "Seguro",
      "HARDEST": "El mÃ¡s seguro",
      "EXTREME": "Extremo",
      "USER": "Personalizado",
      "N": "N (Loop):",
      "r": "r (RAM):",
      "p": "p (CPU):"
    },
    "FILE": {
      "DATE" : "Fecha:",
      "TYPE" : "Tipo:",
      "SIZE": "TamaÃ±o:",
      "VALIDATING": "ValidaciÃ³n en progreso...",
      "HELP": "Formato de archivo esperado: <b>.yml</b> o <b>.dunikey</b> (tipo PubSec, WIF o EWIF)."
    }
  },
  "AUTH": {
    "TITLE": "<i class=\"icon ion-locked\"></i> AAutenticaciÃ³n",
    "BTN_AUTH": "Autenticar",
    "GENERAL_HELP": "Por favor, autentÃ­quese:",
    "EXPECTED_UID_HELP": "Por favor inicie sesiÃ³n en la cuenta de <i class=\"ion-person\"></i> {{uid}}:",
    "EXPECTED_PUBKEY_HELP": "Por favor, autentifÃ­quese en la monedero <i class=\"ion-key\"></i> {{pubkey|formatPubkey}} :",
    "SCAN_FORM_HELP": "Escanee el cÃ³digo QR de la <b>clave privada</b> de la monedero."
  },
  "ACCOUNT": {
    "TITLE": "Mi cuenta",
    "BALANCE": "Saldo",
    "LAST_TX": "Ãºltima transacciÃ³n",
    "BALANCE_ACCOUNT": "Saldo de la cuenta",
    "NO_TX": "Ninguna transacciÃ³n",
    "SHOW_MORE_TX": "Mostrar mÃ¡s",
    "SHOW_ALL_TX": "Mostrar todo",
    "TX_FROM_DATE": "(lÃ­mite actual a {{fromTime|formatFromNowShort}})",
    "PENDING_TX": "Transacciones en proceso de se procesadas",
    "VALIDATING_TX": "Transacciones validadas",
    "ERROR_TX": "Transacciones no ejecutadas",
    "ERROR_TX_SENT": "Transacciones ejecutadas fallidas",
    "PENDING_TX_RECEIVED": "Tansacciones en espera de recepciÃ³n",
    "EVENTS": "Eventos",
    "WAITING_MEMBERSHIP": "Solicitud de adhesiÃ³n emitida. En espera de aceptaciÃ³n.",
    "WAITING_CERTIFICATIONS": "Debe obtener {{needCertificationCount}} certificaciÃ³n(es) para ser miembro.",
    "WILL_MISSING_CERTIFICATIONS": "Pronto le van a <b>faltar certificaciones</b> (al menos {{willNeedCertificationCount}} son necesarias)",
    "WILL_NEED_RENEW_MEMBERSHIP": "Su adhesiÃ³n como miembro <b>va a expirar {{membershipExpiresIn|formatDurationTo}}</b>. Piense en <a ng-click=\"doQuickFix('renew')\">renovar su adhesiÃ³n</a> mientras tanto.",
    "NEED_RENEW_MEMBERSHIP": "No es miembro porque su adhesiÃ³n <b>ha expirado</b>. Piense en <a ng-click=\"doQuickFix('renew')\">renovar su adhesiÃ³n</a>.",
    "NO_WAITING_MEMBERSHIP": "No hay adhesiÃ³n miembro en espera. Si desea <b>convertirse en miembro</b>, por favor <a ng-click=\"doQuickFix('membership')\">envÃ­e su adhesiÃ³n como miembro</a>.",
    "CERTIFICATION_COUNT": "Certificaciones recibidas",
    "CERTIFICATION_COUNT_SHORT": "Certificaciones",
    "SIG_STOCK": "Certificaciones emitidas",
    "BTN_RECEIVE_MONEY": "Recibir",
    "BTN_SELECT_ALTERNATIVES_IDENTITIES": "Cambiar a otra identidad...",
    "BTN_FIX_MEMBERSHIP": "Volver a enviar la adhesiÃ³n...",
    "BTN_MEMBERSHIP_RENEW": "Renovar la adhesiÃ³n",
    "BTN_MEMBERSHIP_RENEW_DOTS": "Renovar la adhesiÃ³n...",
    "BTN_MEMBERSHIP_OUT_DOTS": "Cancelar la adhesiÃ³n...",
    "BTN_SECURITY_DOTS": "Cuenta y securidad...",
    "BTN_SHOW_DETAILS": "Publicar la informaciÃ³n tÃ©cnica",
    "LOCKED_OUTPUTS_POPOVER": {
      "TITLE": "Importe bloqueado",
      "DESCRIPTION": "AquÃ­ estÃ¡n las condiciones para desbloquear este importe:",
      "DESCRIPTION_MANY": "Esta transacciÃ³n esta compuesta de varias partes, cuyas condiciones de desbloqueo son:",
      "LOCKED_AMOUNT": "Condiciones del importe:"
    },
    "NEW": {
      "TITLE": "InscripciÃ³n",
      "INTRO_WARNING_TIME": "Crear una cuenta en {{name|capitalize}} es muy simple. Sin embargo, por favor tome el tiempo suficiente para dar correctamente este paso (no olvidar los identificadores, frase secreta, etc.).",
      "INTRO_WARNING_SECURITY": "AsegÃºrece de que el equipo que utiliza actualmente (ordenador, tableta, telÃ©fono) <b>es seguro y digno de confianza</b>.",
      "INTRO_WARNING_SECURITY_HELP": "Actualizaciones de antivirus, firewall activado, sesiÃ³n protegidos por contraseÃ±a o cÃ³digo PIN, etc.",
      "INTRO_HELP": "Haga clic en <b>{{'COMMON.BTN_START'|translate}}</b> para iniciar la creaciÃ³n de la cuenta. Se le guiarÃ¡ paso a paso.",
      "REGISTRATION_NODE": "Su registro serÃ¡ grabado a travÃ©s del nodo Duniter <b>{{server}}</b>, que luego se transmitirÃ¡ al resto del sistema de la moneda.",
      "REGISTRATION_NODE_HELP": "Si usted no confÃ­a en este nodo, <a ng-click=\"doQuickFix('settings')\">cambie la configuraciÃ³n</a> de Cesium.",
      "SELECT_ACCOUNT_TYPE": "Elegir el tipo de cuenta a crear:",
      "MEMBER_ACCOUNT": "Cuenta miembro",
      "MEMBER_ACCOUNT_TITLE": "Crear una cuenta miembro",
      "MEMBER_ACCOUNT_HELP": "Si aÃºn no estÃ¡ inscrito como un individuo (Solamente una cuenta posible por individuo).",
      "WALLET_ACCOUNT": "Simple monedero",
      "WALLET_ACCOUNT_TITLE": "Crear una cuenta simple",
      "WALLET_ACCOUNT_HELP": "Monedero simple para todos los otros casos, por ejemplo si necesita una cuenta suplementaria.<br/>El Dividendo Universal no serÃ¡ producido para esta cuenta.",
      "SALT_WARNING": "Elija su identificador secreto.<br/>Se solicitarÃ¡ cada vez que se conectarÃ¡ con esta cuenta.<br/><br/><b>Retenga bien este identificador secreto</b>.<br/>Â¡En caso de pÃ©rdida, nadie podrÃ¡ acceder a su cuenta!",
      "PASSWORD_WARNING": "Elija su frase secreta.<br/>Se solicitarÃ¡ cada vez que se conectarÃ¡ con esta cuenta.<br/><br/><b>Retenga bien esta frase secreta</b>.<br/>Â¡En caso de pÃ©rdida, nadie podrÃ¡ acceder su cuenta!",
      "PSEUDO_WARNING": "Elija un seudÃ³nimo.<br/>Sirve para que los otros miembros puedan encontrarlo mÃ¡s fÃ¡cilmente.<br/><br/>No debe contener <b>ni espacios ni caracteres acentuados</b>.<div class='hidden-xs'><br/>Ejemplo: <span class='gray'>SophieDupond, MarcelChemin, etc.</span>",
      "PSEUDO": "SeudÃ³nimo",
      "PSEUDO_HELP": "SeudÃ³nimo",
      "SALT_CONFIRM": "ConfirmaciÃ³n",
      "SALT_CONFIRM_HELP": "ConfirmaciÃ³n del identificador secreto",
      "PASSWORD_CONFIRM": "ConfirmaciÃ³n",
      "PASSWORD_CONFIRM_HELP": "ConfirmaciÃ³n de la frase secreta",
      "SLIDE_6_TITLE": "ConfirmaciÃ³n:",
      "COMPUTING_PUBKEY": "CÃ¡lculo en proceso...",
      "LAST_SLIDE_CONGRATULATION": "<b>Â¡Bien!</b> Ha introducido todas los datos necesarias.<br/><b>Puede solicitar</b> la creaciÃ³n de su cuenta.</b><br/><br/>Para su informaciÃ³n, la llave pÃºblica que se muestra mÃ¡s abajo identificarÃ¡ su futura cuenta.<br/>Esta podrÃ¡ ser comunicada a terceros para recibir sus pagos.<br/>Sin embargo, <b>no es Ãºtil</b> anotarla aquÃ­.",
      "CONFIRMATION_MEMBER_ACCOUNT": "<b class=\"assertive\">Advertencia:</b> el identificador secreto, la frase secreta y el seudÃ³nimo no podrÃ¡n estar modificados.<br/><b>Â¡AsegÃºrese siempre de recordarlos!</b><br/><br/><b>Â¿EstÃ¡ usted seguro</b> de querer solicitar la inscripciÃ³n?",
      "CONFIRMATION_WALLET_ACCOUNT": "<b class=\"assertive\">Advertencia:</b> el identificador secreto y la frase secreta no podrÃ¡n estar modificados.<br/><b>Â¡AsegÃºrese de recordarlos siempre!</b><br/><br/><b>Â¿EstÃ¡ usted seguro</b> de querer continuar con estos identificadores?",
      "CHECKING_PSEUDO": "Comprobar de disponibilidad...",
      "PSEUDO_AVAILABLE": "Este nombre estÃ¡ disponible",
      "PSEUDO_NOT_AVAILABLE": "Este nombre de usuario no estÃ¡ disponible",
      "INFO_LICENSE": "Para unirse a la moneda, le pedimos leer y aceptar esta licencia.",
      "BTN_ACCEPT": "Acepto",
      "BTN_ACCEPT_LICENSE": "Acepto la licencia"
    },
    "POPUP_REGISTER": {
      "TITLE": "Elija un seudÃ³nimo",
      "HELP": "Un seudÃ³nimo es obligatorio para ser miembro."
    },
    "SELECT_IDENTITY_MODAL": {
      "TITLE": "SelecciÃ³n de identidad",
      "HELP": "Se han enviado varias <b>identidades diferentes</b> para la clave pÃºblica <span class=\"gray\"><i class=\"ion-key\"></i>{{pubkey | formatPubkey}}</span>.<br/>Por favor, selecciona la carpeta para usar:"
    },
    "SELECT_WALLET_MODAL": {
      "TITLE": "SelecciÃ³n de monedero"
    },
    "WALLET_LIST": {
      "TITLE": "Mis monederos",
      "BTN_NEW": "AÃ±adir un monedero",
      "NO_WALLET": "Sin monedero secundaria",
      "BTN_DELETE": "Eliminar una monedero secundaria...",
      "BTN_RENAME": "Renombrar el monedero",
      "EDIT_POPOVER": {
        "TITLE": "Renombrar el monedero",
        "HELP": "Completa el nuevo nombre",
        "NAME_HELP": "Nombre de la monedero"
      }
    },
    "SECURITY": {
      "ADD_QUESTION": "AÃ±adir una pregunta personalizada",
      "BTN_CLEAN": "Limpiar",
      "BTN_RESET": "Reinicializar",
      "DOWNLOAD_REVOKE": "Grabar un fichero de revocaciÃ³n",
      "HELP_LEVEL": "Para generar un fichero de respaldo de sus identificadores, elija <strong> al menos {{nb}} preguntas:</strong>",
      "LEVEL": "Nivel de seguridad",
      "LOW_LEVEL": "Bajo <span class=\"hidden-xs\">(mÃ­nimo dos preguntas)</span>",
      "MEDIUM_LEVEL": "Medio <span class=\"hidden-xs\">(mÃ­nimo cuatro preguntas)</span>",
      "QUESTION_1": "Â¿CÃ³mo se llamaba su mejor amigo de la adolescencia?",
      "QUESTION_2": "Â¿CÃ³mo se llamaba su primer animal de compaÃ±Ã­a?",
      "QUESTION_3": "Â¿CuÃ¡l es el primer plato que aprendiÃ³ a cocinar?",
      "QUESTION_4": "Â¿CuÃ¡l es la primera pelÃ­cula que viÃ³ en un cine?",
      "QUESTION_5": "Â¿CuÃ¡l era el destino del primer aviÃ³n que cogiÃ³?",
      "QUESTION_6": "Â¿CÃ³mo se llamaba su maestro favorito en la escuela primaria?",
      "QUESTION_7": "Â¿CuÃ¡l serÃ­a para usted el mejor oficio?",
      "QUESTION_8": "Â¿CuÃ¡l es su libro para niÃ±os preferido?",
      "QUESTION_9": "Â¿CuÃ¡l fue el modelo de su primer vehÃ­culo?",
      "QUESTION_10": "Â¿CuÃ¡l fue su sobrenombre cuando era niÃ±a(o)?",
      "QUESTION_11": "Â¿CuÃ¡l fue su personaje o actor/actriz preferido/a cuando era estudiante?",
      "QUESTION_12": "Â¿CuÃ¡l fue su cantante o grupo preferido/a cuando era estudiante?",
      "QUESTION_13": "Â¿En quÃ© ciudad sus padres se encontraron?",
      "QUESTION_14": "Â¿CÃ³mo se llamaba su primer jefe?",
      "QUESTION_15": "Â¿CÃ³mo se llama la calle donde creciÃ³?",
      "QUESTION_16": "Â¿CÃ³mo se llama la primera playa donde se baÃ±Ã³?",
      "QUESTION_17": "Â¿CuÃ¡l es el primer Ã¡lbum que comprÃ³?",
      "QUESTION_18": "Â¿CuÃ¡l es el nombre de su equipo deportivo preferido?",
      "QUESTION_19": "Â¿CuÃ¡l fue el oficio de su abuelo?",
      "RECOVER_ID": "Recuperar sus identificadores",
      "REVOCATION_WITH_FILE": "Revocar una identidad a partir de un fichero",
      "REVOCATION_WITH_FILE_DESCRIPTION": "Si ha perdido las credenciales de su cuenta de miembro de forma permanente (o la seguridad de la cuenta se ve comprometida), puede usar <b>el archivo de revocaciÃ³n de la cuenta</b> para forzar publicaciÃ³n final de la web de confianza.",
      "REVOCATION_WITH_FILE_HELP": "Para <b>revocar permanentemente</b> una cuenta de miembro, arrastre el archivo de revocaciÃ³n en el cuadro siguiente o haga clic en el cuadro para buscar un archivo.",
      "REVOCATION_FILENAME": "revocation-{{uid}}-{{pubkey|formatPubkey}}-{{currency}}.txt",
      "REVOCATION_WALLET": "Revocar esta identidad",
      "SAVE_ID": "Grabar sus identificadores",
      "STRONG_LEVEL": "Alto <span class=\"hidden-xs \">(6 preguntas mÃ­nimo)</span>",
      "TITLE": "Cuenta y seguridad"
    },
    "FILE_NAME": "{{currency}} - Estado de cuenta {{pubkey|formatPubkey}} a {{currentTime|formatDateForFile}}.csv",
    "HEADERS": {
      "TIME": "Fecha",
      "AMOUNT": "Cantidad",
      "COMMENT": "Comentario"
    }
  },
  "TRANSFER": {
    "TITLE": "Transferencia",
    "SUB_TITLE": "Hacer una transferencia",
    "FROM": "De",
    "TO": "A",
    "AMOUNT": "Importe",
    "AMOUNT_HELP": "Importe",
    "COMMENT": "Comentario",
    "COMMENT_HELP": "Comentario",
    "BTN_SEND": "Enviar",
    "BTN_ADD_COMMENT": "AÃ±adir un comentario",
    "REST": "Resto de cuenta",
    "REST_TO": "a",
    "WARN_COMMENT_IS_PUBLIC": "Tenga en cuenta que los <b>comentarios son pÃºblicos</b> (sin encriptar).",
    "MODAL": {
      "TITLE": "Transferencia"
    }
  },
  "ERROR": {
    "UNKNOWN_URI_FORMAT": "Formato URI desconocido",
    "PUBKEY_INVALID_CHECKSUM": "Clave pÃºblica no vÃ¡lida (suma de comprobaciÃ³n incorrecta).",
    "POPUP_TITLE": "Error",
    "UNKNOWN_ERROR": "Error desconocido",
    "CRYPTO_UNKNOWN_ERROR": "Su navegador parece incompatible con las funcionalidades de cryptografÃ­a.",
    "DOWNLOAD_KEYFILE_FAILED": "Error al generar el archivo de llavero.",
    "EQUALS_TO_PSEUDO": "Debe ser diferente del seudÃ³nimo.",
    "EQUALS_TO_SALT": "Debe ser diferente del identificador secreto.",
    "FIELD_REQUIRED": "Campo obligatorio.",
    "FIELD_TOO_SHORT": "Valor demasiado corta.",
    "FIELD_TOO_SHORT_WITH_LENGTH": "Valor demasiado corta ({{minLength}} carÃ¡cteres mÃ­n)",
    "FIELD_TOO_LONG": "Valor demasiado largo",
    "FIELD_TOO_LONG_WITH_LENGTH": "Valor demasiado largo, ({{maxLength}} carÃ¡cteres mÃ¡x)",
    "FIELD_MIN": "Valor mÃ­nimo: {{min}}",
    "FIELD_MAX": "Valor mÃ¡ximo: {{max}}",
    "FIELD_ACCENT": "Caracteres acentuados y comas no autorizados",
    "FIELD_NOT_NUMBER": "Valor numÃ©rico esperado",
    "FIELD_NOT_INT": "Valor entero esperado",
    "FIELD_NOT_EMAIL": "Email no vÃ¡lido",
    "PASSWORD_NOT_CONFIRMED": "No corresponde a la frase secreta.",
    "SALT_NOT_CONFIRMED": "No corresponde al identificador secreto.",
    "SEND_IDENTITY_FAILED": "Error de la inscripciÃ³n.",
    "SEND_CERTIFICATION_FAILED": "Error de la certificaciÃ³n.",
    "NEED_MEMBER_ACCOUNT_TO_CERTIFY": "No se puede certificar, porque su cuenta no <b>es miembro</b>.",
    "NEED_MEMBER_ACCOUNT_TO_CERTIFY_HAS_SELF": "No se puede certificar, porque su cuenta ya no es miembro.<br/><br/>TodavÃ­a faltan certificaciones, o ahora no son validas.",
    "NOT_MEMBER_FOR_CERTIFICATION": "Su cuenta todavÃ­a no es miembro.",
    "IDENTITY_TO_CERTIFY_HAS_NO_SELF": "Cuenta no certificable. No se ha solicitado la adhesiÃ³n, o no fue renovada.",
    "LOGIN_FAILED": "Error durante la autentificaciÃ³n.",
    "LOAD_IDENTITY_FAILED": "Error de carga de la identidad.",
    "LOAD_REQUIREMENTS_FAILED": "Error de carga de las condiciones de la identidad.",
    "SEND_MEMBERSHIP_IN_FAILED": "Error en el intento de entrada en la comunidad.",
    "SEND_MEMBERSHIP_OUT_FAILED": "Error en la interrupciÃ³n de adhesiÃ³n.",
    "REFRESH_WALLET_DATA": "Error en la actualizaciÃ³n del monedero.",
    "GET_CURRENCY_PARAMETER": "Error en la recuperaciÃ³n de las reglas de moneda.",
    "GET_CURRENCY_FAILED": "Carga de la moneda imposible. Por favor, intente mÃ¡s tarde.",
    "SEND_TX_FAILED": "Error en la transferencia.",
    "ALL_SOURCES_USED": "Por favor, espera el cÃ¡lculo del bloque siguiente (Todas sus fuentes de moneda fueron utilizada).",
    "NOT_ENOUGH_SOURCES": "No lo bastante cambio para mandar este importe en una sola transacciÃ³n.<br/>Importe mÃ¡ximo: {{amount}} {{unit}}<sub>{{subUnit}}</sub>.",
    "ACCOUNT_CREATION_FAILED": "Error en la creaciÃ³n de la cuenta miembro.",
    "RESTORE_WALLET_DATA_ERROR": "Error en la recarga de las configuraciÃ³n desde el almacenamiento local",
    "LOAD_WALLET_DATA_ERROR": "Error en la carga de los datos del monedero.",
    "COPY_CLIPBOARD_FAILED": "Copia de la valor imposible.",
    "TAKE_PICTURE_FAILED": "Error en la recuperaciÃ³n de la foto.",
    "SCAN_FAILED": "Error en el escÃ¡n del Codigo QR",
    "SCAN_UNKNOWN_FORMAT": "Codigo no reconocido.",
    "WOT_LOOKUP_FAILED": "Error en la bÃºsqueda",
    "LOAD_PEER_DATA_FAILED": "Lectura del nodo Duniter imposible. Por favor, intente mÃ¡s tarde.",
    "NEED_LOGIN_FIRST": "Por favor, conÃ©ctese en primer lugar.",
    "AMOUNT_REQUIRED": "El importe es obligatorio.",
    "AMOUNT_NEGATIVE": "Importe negativo no autorizado.",
    "NOT_ENOUGH_CREDIT": "CrÃ©dito insuficiente.",
    "INVALID_NODE_SUMMARY": "Nodo ilocalizable o direcciÃ³n invÃ¡lida.",
    "INVALID_USER_ID": "El seudÃ³nimo no debe contener ni espacios ni caracteres especiales o acentuado.",
    "INVALID_COMMENT": "El campo 'referenciaâ no debe contener carÃ¡cteres acentuados.",
    "INVALID_PUBKEY": "La clave pÃºblica no tiene el formato esperado.",
    "INVALID_PUBKEY_CHECKSUM": "Suma de comprobaciÃ³n invÃ¡lida.",
    "IDENTITY_REVOKED": "Esta identidad <b>fue revocada {{revocationTime|formatFromNow}}</b> ({{revocationTime|formatDate}}). No puede estar miembro.",
    "IDENTITY_PENDING_REVOCATION": "La <b>revocaciÃ³n de esta identidad</b> fue solicitado y esta en espera de tratamiento. Por lo que, la certificaciÃ³n es desactivada.",
    "IDENTITY_INVALID_BLOCK_HASH": "Esta solicitud de adhesiÃ³n no es valida (porque denomina un bloque los nodos de la red han anulado): esta persona debe renovelar su solicitud de adhesiÃ³n <b>antes que</b> estar certificada.",
    "IDENTITY_EXPIRED": "La publicaciÃ³n de esta identidad ha caducada: esta persona debe realizar una nueva solicitud de adhesiÃ³n <b>antes que</b> estar certificada.",
    "IDENTITY_SANDBOX_FULL": "EL nodo Duniter utilizado por Cesium ya no puede recibir mÃ¡s nuevas identidades, porque la fila de espera es llena.<br/><br/>Por favor, intenta ulteriormente o cambia de nodo (vÃ­a el menÃº <b>ParamÃ¨tres</b>).",
    "IDENTITY_NOT_FOUND": "Identidad no encontrada",
    "IDENTITY_TX_FAILED": "Las operaciones de carga fallidos",
    "WOT_PENDING_INVALID_BLOCK_HASH": "AdhesiÃ³n no validada.",
    "WALLET_INVALID_BLOCK_HASH": "Su solicitud de adhesiÃ³n ya no estÃ¡ validada (porque denomina un bloque los nodos de la red han anulado).<br/>Debe <a ng-click=\"doQuickFix('fixMembership')\">mandar una nueva solicitud</a> para resolver este problema.",
    "WALLET_IDENTITY_EXPIRED": "La publicaciÃ³n de <b>su identidad ha caducada</b>.<br/>Debe <a ng-click=\"doQuickFix('fixIdentity')\">publicar une outra vez su identidad</a> para resolver este problema.",
    "WALLET_REVOKED": "Su identidad fue <b>revocada</b>: ni su seudÃ³nimo ni su llave pÃºblica podrÃ¡n estar utilizados en el futuro por una cuenta miembro.",
    "WALLET_HAS_NO_SELF": "Su identidad debe en primer lugar haber estado publicado, y no estar caducada.",
    "AUTH_REQUIRED": "AutenticaciÃ³n requerida.",
    "AUTH_INVALID_PUBKEY": "La llave pÃºblica no se corresponde con la cuenta conectada",
    "AUTH_INVALID_SCRYPT": "De usuario o contraseÃ±a no vÃ¡lidos.",
    "AUTH_INVALID_FILE": "archivo de llave no vÃ¡lido.",
    "AUTH_FILE_ERROR": "No se pudo abrir el archivo de llave",
    "IDENTITY_ALREADY_CERTIFY": "Ha <b>ya certificado</b> esta identidad.<br/><br/>Esta certificaciÃ³n todavÃ­a es valida (expiration {{expiresIn|formatDurationTo}}).",
    "IDENTITY_ALREADY_CERTIFY_PENDING": "Ha <b>ya certificado</b> esta identidad.<br/><br/>Esta certificaciÃ³n estÃ¡ en espera de tratamiento (fecha lÃ­mite de tratamiento {{expiresIn|formatDurationTo}}).",
    "UNABLE_TO_CERTIFY_TITLE": "CertificaciÃ³n imposible",
    "LOAD_NEWCOMERS_FAILED": "Error el la carga de los miembros nuevos.",
    "LOAD_PENDING_FAILED": "Error el la carga de las inscripciones en espera.",
    "ONLY_MEMBER_CAN_EXECUTE_THIS_ACTION": "Debe <b>estar miembro</b> para poder realizar esta acciÃ³n.",
    "ONLY_SELF_CAN_EXECUTE_THIS_ACTION": "Debe haber <b>publicado su identidad</b> para poder realizar esta acciÃ³n.",
    "GET_BLOCK_FAILED": "Error en la recuperaciÃ³n del bloque",
    "INVALID_BLOCK_HASH": "Bloque no encontrado (hash diferente)",
    "DOWNLOAD_REVOCATION_FAILED": "Debe seleccionar un fichero de texto",
    "REVOCATION_FAILED": "Error en la revocaciÃ³n.",
    "SALT_OR_PASSWORD_NOT_CONFIRMED": "Identificador secreto o contraseÃ±a incorrectos",
    "RECOVER_ID_FAILED": "Error en la recuperaciÃ³n de los identificadores",
    "LOAD_FILE_FAILED": "Error en la carga del fichero",
    "NOT_VALID_REVOCATION_FILE": "Archivo de revocaciÃ³n no vÃ¡lido (formato de archivo errÃ³neo)",
    "NOT_VALID_SAVE_ID_FILE": "Archivo no vÃ¡lido (formato de archivo errÃ³neo)",
    "NOT_VALID_KEY_FILE": "Archivo no vÃ¡lido (formato de archivo errÃ³neo)",
    "EXISTING_ACCOUNT": "Su frase secreta corresponde a una cuenta existente, la <a ng-click=\"showHelpModal('pubkey')\">clave pÃºblica</a> es:",
    "EXISTING_ACCOUNT_REQUEST": "Por favor, cambie su frase secreta para que coincida con una cuenta sin usar.",
    "GET_LICENSE_FILE_FAILED": "Error al obtener el archivo de licencia",
    "CHECK_NETWORK_CONNECTION": "NingÃºn nodo parece alcanzable.<br/><br/><b>Compruebe la conexiÃ³n a Internet</b>."
  },
  "INFO": {
    "POPUP_TITLE": "InformaciÃ³n",
    "CERTIFICATION_DONE": "CertificaciÃ³n enviada",
    "NOT_ENOUGH_CREDIT": "CrÃ©dito insuficiente",
    "TRANSFER_SENT": "Transferencia enviada",
    "COPY_TO_CLIPBOARD_DONE": "Copia realizada",
    "MEMBERSHIP_OUT_SENT": "AnulaciÃ³n enviada",
    "NOT_NEED_MEMBERSHIP": "Ya es miembro.",
    "IDENTITY_WILL_MISSING_CERTIFICATIONS": "Esta identidad pronto va a necesitar certificaciones (al menos {{willNeedCertificationCount}}).",
    "IDENTITY_NEED_MEMBERSHIP": "Esta identidad no enviÃ³ una solicitud de membresÃ­a. Ella tendrÃ¡ que hacerlo si desea hacerse miembro.",
    "REVOCATION_SENT": "RevocaciÃ³n enviada",
    "REVOCATION_SENT_WAITING_PROCESS": "La <b>revocaciÃ³n de esta identidad</b> fue solicitada y estÃ¡ en espera de ser procesada.",
    "FEATURES_NOT_IMPLEMENTED": "Esta funcionalidad todavÃ­a estÃ¡ en proceso de desarrollo.<br/><br/>Â¿Por quÃ© no <b>contribuir a Cesium</b>, para obtenerla mÃ¡s rÃ¡pido? ;)",
    "EMPTY_TX_HISTORY": "Ninguna operaciÃ³n a exportar"
  },
  "CONFIRM": {
    "POPUP_TITLE": "<b>ConfirmaciÃ³n</b>",
    "POPUP_WARNING_TITLE": "<b>Advertencia</b>",
    "POPUP_SECURITY_WARNING_TITLE": "<i class=\"icon ion-alert-circled\"></i> <b>Advertencia de seguridad</b>",
    "CERTIFY_RULES_TITLE_UID": "Certificar {{uid}}", "CERTIFY_RULES": "<b class=\"assertive\">NO CERTIFICAR</b> una cuenta si piense que :<br/><br/><ul><li>1.) no corresponde a una persona <b>fÃ­sica y viviente</b>.<li>2.) su propietario <b>posee una otra cuenta</b> ya certificada.<li>3.) su propietario viola (voluntariamente o no) la regla 1 o 2 (por ejemplo certificando cuentas falsas o duplicadas).</ul><br/><b>Â¿EstÃ¡ usted seguro</b> sin embargo querer certificar esta identidad?",
    "TRANSFER": "<b>Recapitulativo de la transferencia</b>:<br/><br/><ul><li> - De: {{from}}</li><li> - A: <b>{{to}}</b></li><li> - Importe: <b>{{amount}} {{unit}}</b></li><li> - Comentario: <i>{{comment}}</i></li></ul><br/><b>Â¿EstÃ¡ usted seguro de querer realizar esta transferencia?</b>",
    "TRANSFER_ALL": "<b>Recapitulativo de la transferencia</b>:<br/><br/><ul><li> - De: {{from}}</li><li> - A: <b>{{to}}</b></li><li> - Importe: <b>{{amount}} {{unit}}</b></li><li> - Comentario: <i>{{comment}}</i></li><br/><li> - Resto: <b>{{restAmount}} {{unit}}</b> para <b>{{restTo}}</b></li></ul><br/><b>Â¿EstÃ¡ usted seguro de querer realizar esta transferencia?</b>",
    "MEMBERSHIP_OUT": "Esta operaciÃ³n es <b>irreversible</b>.<br/></br/>Â¿EstÃ¡ usted seguro querer <b>anular su cuenta miembro</b>?",
    "MEMBERSHIP_OUT_2": "Â¡Esta operaciÃ³n es <b>irreversible</b>!<br/><br/>Â¿EstÃ¡ usted seguro querer <b>anular su adhesiÃ³n</b> como miembro?",
    "LOGIN_UNUSED_WALLET_TITLE": "Â¿Error de introducciÃ³n de datos?",
    "LOGIN_UNUSED_WALLET": "EstÃ¡ usted conectado a une cuenta que parece <b>inactiva</b>.<br/><br/>Si esta cuenta no corresponde a la suya, se trata probablemente de un <b>error al introducir los datos</b> de sus identificadores de conexiÃ³n.<br/></br/><b>Â¿Quiere usted sin embargo continuar con esta cuenta?</b>",
    "FIX_IDENTITY": "El seudÃ³nimo <b>{{uid}}</b> va a ser publicado de nuevo, en reemplazo del antiguo que caducÃ³.<br/></br/><b>Â¿EstÃ¡ usted seguro</b> de querer continuar?",
    "FIX_MEMBERSHIP": "Su solicitud de adhesiÃ³n como miembro va a ser enviada de nuevo.<br/></br/><b>Â¿EstÃ¡ usted seguro</b>de querer continuar?",
    "MEMBERSHIP": "Se enviarÃ¡ su solicitud de membresÃ­a como miembro.<br/></br/><b>Â¿EstÃ¡ usted seguro</b>de querer continuar?",
    "RENEW_MEMBERSHIP": "Su adhesiÃ³n como miembro va a estar renovada.<br/></br/><b>Â¿EstÃ¡ usted seguro</b>de querer continuar?",
    "REVOKE_IDENTITY": "Va a <b>revocar definitivamente esta identidad</b>.<br/><br/>La llave pÃºblica y el seudÃ³nimo asociados <b>jamÃ¡s podrÃ¡n ser utilizados</b> (para una cuenta miembro). <br/></br/><b>Â¿EstÃ¡ usted seguro</b> de querer revocar definitivamente esta cuenta?",
    "REVOKE_IDENTITY_2": "Â¡Esta operaciÃ³n es <b>irreversible</b>!<br/><br/>Â¿EstÃ¡ usted seguro de querer <b>revocar definitivamente</b> esta cuenta?",
    "NOT_NEED_RENEW_MEMBERSHIP": "Su adhesiÃ³n no necesita ser renovada (solo va a caducar en {{membershipExpiresIn|formatDuration}}).<br/></br/><b>Â¿EstÃ¡ usted segura(o)</b> de querer renovar su adhesiÃ³n?",
    "SAVE_BEFORE_LEAVE": "Â¿Quiere usted <b>guardar sus cambios</b> antes dejar la pÃ¡gina?",
    "SAVE_BEFORE_LEAVE_TITLE": "Cambios no registrados",
    "LOGOUT": "Â¿EstÃ¡ usted segura(o) de querer desconectarse?",
    "USE_FALLBACK_NODE": "Nodo <b>{{edad}}</ b> inalcanzable o no vÃ¡lido.<br/><br/>Â¿Desea utilizar temporalmente el nodo <b>{{nuevo}}</b>?"
  },
  "DOWNLOAD": {
    "POPUP_TITLE": "<b>RevocaciÃ³n del archivo</b>",
    "POPUP_REVOKE_MESSAGE": "Para proteger su cuenta, descargar el <b>documento de revocaciÃ³n de cuenta</b>. Si se necesita cancelar su cuenta (en caso de robo, cambio de identificador, una cuenta falsa creada, etc.).<br/><br/><b>Por favor, almacÃ©nelo en un lugar seguro.</b>"
  },
  "HELP": {
    "TITLE": "Ayuda en lÃ­nea",
    "JOIN": {
      "SECTION": "InscripciÃ³n",
      "SALT": "El identificador secreto es muy importante. Sirve para mezclar la frase secreta, antes de calcular la <span class=\"text-italic\">llave pÃºblica</span> de su cuenta (su nÃºmero) y la llave secreta para acceder a esta.<br/><b>Por favor, memorÃ­celo muy bien</b> porque actualmente no existe ninguna manera para encontrarlo en caso de pÃ©rdida.<br/>Por otra parte, no puede ser modificado sin tener que crear una nueva cuenta.<br/><br/>Un buen identificador secreto debe ser suficientemente largo (al menos 8 carÃ¡cteres) y lo mÃ¡s original posible.",
      "PASSWORD": "La frase secreta es muy importante. Junto al identificador secreto, sirve a calcular el nÃºmero (la llave pÃºblica) de su cuenta, y la llave secreta para acceder a ella.<br/><b>Por favor, memorÃ­cela muy bien</b> porque actualmente no existe ninguna manera para encontrarla en caso de pÃ©rdida (excepto el generar un fichero de respaldo).<br/>Por otra parte, no puede ser modificado sin deber creer una nueva cuenta.<br/><br/>Una buena frase secreta contiene (idealmente) al menos 8 carÃ¡cteres, del que al menos una mayÃºscula y un nÃºmero.",
      "PSEUDO": "El seudÃ³nimo es solamente utilizado en caso de inscripciÃ³n como <span class=\"text-italic\">miembro</span>. Siempre es asociado a un monedero (vÃ­a su <span class=\"text-italic\">llave pÃºblica</span>).<br/>El seudÃ³nimo se publica en la red para que los otros usuarios puedan identificarlo, certificarlo o enviar dinero a la cuenta.<br/>Un seudÃ³nimo debe ser Ãºnico dentro de los miembros (<u>actuales</u> y antiguos)."
    },
    "GLOSSARY": {
      "SECTION": "Glosario",
      "PUBKEY_DEF": "Una llave pÃºblica identifica un monedero. Puede identificar un miembro. En Cesium se calcula con el identificador y la frase secreta.",
      "MEMBER": "Miembro",
      "MEMBER_DEF": "Un miembro es una persona humana fÃ­sica y viviente, deseosa de participar libremente a la comunidad monetaria. Percibe un dividendo universal, dependiendo de un perÃ­odo y un importe definido en las <span class=\"text-italic\">reglas de la moneda</span>",
      "CURRENCY_RULES": "Reglas de la moneda",
      "CURRENCY_RULES_DEF": "Las reglas de la moneda son definidas una sola vez por todas. Establecen el funcionamiento de la moneda: el cÃ¡lculo del dividendo universal, la cantidad de certificaciones necesarias para ser miembro, la cantidad mÃ¡xima de certificaciones que un miembro puede emitir, etc. <a href=\"#/app/currency\">Ver las reglas actuales</a>.<br/> Una <span class=\"text-italic\">BlockChain</span> que soporta y ejecuta estas reglas, y verifica continuamente su buena aplicaciÃ³n, hace posible que ellas no se modifiquen en el tiempo.",
      "BLOCKCHAIN": "Cadena de bloques (<span class=\"text-italic\">Blockchain</span>)",
      "BLOCKCHAIN_DEF": "La BlockChain es un sistema descentralizado, que, para el caso de Duniter, sirve a mantener y ejecutar las <span class=\"text-italic\">reglas de la moneda</span>.<br/><a href=\"http://duniter.org\" target=\"_system\">Saber mÃ¡s a proposito de Duniter</a> y el funcionamiento de su blockchain.",
      "UNIVERSAL_DIVIDEND_DEF": "El Dividendo Universal (DU) es la cantidad de moneda co-creada por cada miembro, dependiendo del periodo y del cÃ¡lculo definidos en las <span class=\"text-italic\">reglas de la moneda</span>.<br/>En cada periodo, los miembros reciben en sus cuentas la misma cantidad de dinero.<br/><br/>El DU crece regularmente, para ser justo entre los miembros (actuales y futuros), calculado en funciÃ³n de la esperanza de vida media, como demostrado en la ThÃ©orie Relative de la Monnaie (TRM) = TeorÃ­a Relativa de la Moneda, aÃºn no estÃ¡ traducida en espaÃ±ol, contÃ¡ctenos para contribuir a su traducciÃ³n.<br/><a href=\"http://trm.creationmonetaire.info\">Saber mÃ¡s a propÃ³sito de la TRM</a> y las monedas libres."
    },
    "TIP": {
      "MENU_BTN_CURRENCY": "El menÃº <b>{{'MENU.CURRENCY'|translate}}</b> permite consultar las <b>reglas de la moneda</b> y su estado.",
      "CURRENCY_WOT": "El <b>nÃºmero de miembros</b> demuestra la importancia de la comunidad y permite <b>seguir su evoluciÃ³n</b>.",
      "CURRENCY_MASS": "Siga aquÃ­ la <b>cantidad total de moneda</b> existente y su <b>distribuciÃ³n media</b> por miembro.<br/><br/>Esto permite juzgar la <b>importancia de un importe</b>, en relaciÃ³n con lo que <b>poseen los otros</b> en sus cuentas (como media).",
      "CURRENCY_UNIT_RELATIVE": "La unidad utilizada (&ldquo;<b>{{'COMMON.UD'|translate}}<sub>{{currency|abbreviate}}</sub></b>&rdquo;) significa que los importes en {{currency|capitalize}} han sido divididos entre el valor del <b>Dividendo Universal</b> (DU).<br/><br/><small> Esta unidad relativa es <b>pertinente</b>, porque permanece estable, independiente de la cantidad de moneda que aumenta constantemente.</small>",
      "CURRENCY_CHANGE_UNIT": "Este botÃ³n permite <b>cambiar la unidad</b>, para visualizar los importes <b>directamente en {{currency|capitalize}}</b> (en lugar de &ldquo;<b>{{'COMMON.UD'|translate}}<sub>{{currency|abbreviate}}</sub></b>&rdquo;).",
      "CURRENCY_CHANGE_UNIT_TO_RELATIVE": "Este botÃ³n permite <b>cambiar la unidad</b>, para visualizar los importes en &ldquo;<b>{{'COMMON.UD'|translate}}<sub>{{currency|abbreviate}}</sub></b>&rdquo;, es decir, relativo al Dividendo Universal (el monto co-producido por cada miembro).",
      "CURRENCY_RULES": "Las <b>reglas</b> de la moneda fijan su funcionamiento <b>exacto y previsible</b>.<br/><br/>Es el propio ADN de la moneda, que hace que su cÃ³digo monetario sea <b>legible y transparente</b>.", "MENU_BTN_NETWORK": "El menÃº <b>{{'MENU.NETWORK'|translate}}</b> permite consultar el estado de la red.",
      "NETWORK_BLOCKCHAIN": "Todas las operaciones de la moneda estÃ¡n registradas dentro de un grand libro de cuenta <b>pÃºblico e infalsificable</b>, tambiÃ©n llamado <b>cadena de bloques</b> (<em>BlockChain</em> en inglÃ©s).",
      "NETWORK_PEERS": "Los <b>nodos</b> visibles aquÃ­ corresponden a los <b>ordenadores que actualizan y controlan</b> la cadena de bloques.<br/><br/>Entre mÃ¡s nodos estÃ©n conectados, la moneda tendrÃ¡ una gestiÃ³n mÃ¡s <b>descentralizada</b> y digna de confianza.",
      "NETWORK_PEERS_BLOCK_NUMBER": "Este <b>nÃºmero</b> (en verde) indica el <b>Ãºltimo bloque validado</b> por este nodo (Ãºltima pagina escrita dentro del grand libro de cuentas).<br/><br/>El color verde indica que este bloque ha sido tambiÃ©n validado por <b>la mayorÃ­a de los otros nodos</b>.",
      "NETWORK_PEERS_PARTICIPATE": "<b>Cada miembro</b>, equipado de un ordenador conectador a Internet, <b>puede participar aÃ±adiendo un nodo</b>.  Necesita <b>instalar el programa Duniter</b> (libre y gratis). <a href=\"{{installDocUrl}}\" target=\"_system\">Ver el manual de uso &gt;&gt;</a>.",
      "MENU_BTN_ACCOUNT": "El menÃº <b>{{'ACCOUNT.TITLE'|translate}}</b> permite acceder a la gestiÃ³n de su cuenta.",
      "MENU_BTN_ACCOUNT_MEMBER": "Consulte aquÃ­ el estado de su cuenta y la informaciÃ³n sobre sus certificaciones.",
      "WALLET_CERTIFICATIONS": "Haga clic aquÃ­ para consultar el detalle de sus certificaciones (recibidas y emitidas).",
      "WALLET_RECEIVED_CERTIFICATIONS": "Haga clic aquÃ­ para consultar el detalle de sus <b>certificaciones recibidas</b>.",
      "WALLET_GIVEN_CERTIFICATIONS": "Haga clic aquÃ­ para consultar el detalle de sus <b>certificaciones emitidas</b>.",
      "WALLET_BALANCE": "El <b>saldo</b> de su cuenta se visualiza aquÃ­.",
      "WALLET_BALANCE_RELATIVE":
      "{{'HELP.TIP.WALLET_BALANCE'|translate}}<br/><br/>La unidad utilizada (&ldquo;<b>{{'COMMON.UD'|translate}}<sub>{{currency|abbreviate}}</sub></b>&rdquo;) significa que el importe en {{currency|capitalize}} fue dividido entre el <b>Dividendo Universal</b> (DU) co-producido por cada miembro.<br/><br/>Actualmente un DU vale {{currentUD|formatInteger}} {{currency|capitalize}}s.",
      "WALLET_BALANCE_CHANGE_UNIT": "PodrÃ¡ <b>cambiar la unidad</b> de visualizaciÃ³n de los importes en los <b><i class=\"icon ion-android-settings\"></i>&nbsp;{{'MENU.SETTINGS'|translate}}</b>.<br/><br/>Por ejemplo, para visualizar los importes <b>directamente en {{currency|capitalize}}</b>, en lugar de unidad relativa.",
      "WALLET_PUBKEY": "Esta es la llave pÃºblica de su cuenta. Puede comunicarla a un tercero para que pueda identificar su cuenta de forma simple.",
      "WALLET_SEND": "Realizar un pago en algunos clics",
      "WALLET_SEND_NO_MONEY": "Realizar un pago en algunos clics.<br/>(Su saldo ya no lo permite)",
      "WALLET_OPTIONS": "Este botÃ³n permite acceder a las <b>acciones de adhesiÃ³n</b> y de seguridad.<br/><br/>Â¡No olvide echar un vistazo!",
      "WALLET_RECEIVED_CERTS": "Se exhibirÃ¡ aquÃ­ la lista de las personas que le han certificado.",
      "WALLET_CERTIFY": "El botÃ³n <b>{{'WOT.BTN_SELECT_AND_CERTIFY'|translate}}</b> permite seleccionar una identidad y certificarla.<br/><br/>SÃ³lo usuarios <b>miembros</b> pueden certificar a otros.",
      "WALLET_CERT_STOCK": "Su stock de certificaciones (emitidas) es limitado a <b>{{sigStock}} certificaciones</b>.<br/><br/>Este stock se renueva con el tiempo, a medida que las certificaciones caducan.",
      "MENU_BTN_TX_MEMBER": "El menÃº <b>{{'MENU.TRANSACTIONS'|translate}}</b> permite consultar su saldo, el historial de sus transacciones y mandar un pago.",
      "MENU_BTN_TX": "Consulte aquÃ­ <b>el historial de sus transacciones</b> y efectÃºe nuevas operaciones.",
      "MENU_BTN_WOT": "El menÃº <b>{{'MENU.WOT'|translate}}</b> permite buscar <b>usuarios</b> de la moneda (miembro o no).",
      "WOT_SEARCH_TEXT_XS": "Para buscar en el directorio, escribe las <b>primeras letras de un seudÃ³nimo</b> (o de una llave pÃºblica).<br/><br/>La bÃºsqueda se iniciarÃ¡ automÃ¡ticamente.",
      "WOT_SEARCH_TEXT": "Para buscar en el directorio, escribe las <b>primeras letras de un seudÃ³nimo</b> (o de una llave pÃºblica). <br/><br/>Luego, pulsa en la tecla <b>Entrada</b> para iniciar la bÃºsqueda.",
      "WOT_SEARCH_RESULT": "Visualiza la ficha detallada simplemente <b>haciendo un clic</b> sobre una lÃ­nea.",
      "WOT_VIEW_CERTIFICATIONS": "La lÃ­nea <b>{{'ACCOUNT.CERTIFICATION_COUNT'|translate}}</b> muestra cuÃ¡ntos miembros han validado esta identidad.<br/><br/>Estas certificaciones atestiguan que la cuenta pertenece a <b>una persona humana viviente</b> y que no tenga <b>ninguna otra cuenta miembro</b>.",
      "WOT_VIEW_CERTIFICATIONS_COUNT": "Necesita al menos <b>{{sigQty}} certificaciones</b> para ser miembro y recibir el <b>Dividendo Universal</b>.",
      "WOT_VIEW_CERTIFICATIONS_CLICK": "Un clic aquÃ­ permite abrir <b>la lista de todas las certificaciones</b> de la identidad (recibidas y emitidas).",
      "WOT_VIEW_CERTIFY": "El botÃ³n <b>{{'WOT.BTN_CERTIFY'|translate}}</b> permite aÃ±adir su certificaciÃ³n a esta identidad.",
      "CERTIFY_RULES": "<b>AtenciÃ³n:</b> Certificar solamente <b>personas fÃ­sicas vivas</b>, que no posean ninguna otra cuenta miembro.<br/><br/>Â¡La seguridad de la moneda depende de la vigilancia de cada uno!",
      "MENU_BTN_SETTINGS": "Los <b>{{'MENU.SETTINGS'|translate}}</b> le permitirÃ¡n configurar la aplicaciÃ³n.",
      "HEADER_BAR_BTN_PROFILE": "Haga un clic aquÃ­ para acceder a su <b>perfil de usuario</b>",
      "SETTINGS_CHANGE_UNIT": "PodrÃ¡ <b>cambiar la unidad de visualizaciÃ³n</b> de los importes haciendo un clic mÃ¡s arriba.<br/><br/>- Desactive la opciÃ³n para visualizar los importes en {{currency|capitalize}}.<br/>- Active la opciÃ³n para visualizar los importes relativos al {{'COMMON.UD'|translate}}<sub>{{currency|abbreviate}}</sub> (todos los importes serÃ¡n <b>dividido</b> entre el Dividendo Universal actual).",
      "END_LOGIN": "Â¡La visita guiada ha <b>terminado</b>!<br/><br/>Â¡Buena suerte en este nuevo mundo de la <b>economÃ­a libre</b> !",
      "END_NOT_LOGIN": "Â¡La visita guiada ha <b>terminado</b>!<br/><br/>Si quiere utilizar la moneda {{currency|capitalize}}, tiene que hacer un clic en <b>{{'LOGIN.CREATE_ACCOUNT'|translate}}</b> mÃ¡s abajo."
    }
  }
}
);

$translateProvider.translations("fr-FR", {
  "COMMON": {
    "APP_NAME": "Cesium",
    "APP_VERSION": "v{{version}}",
    "APP_BUILD": "date : {{build}}",
    "PUBKEY": "ClÃ© publique",
    "MEMBER": "Membre",
    "BLOCK" : "Bloc",
    "BTN_OK": "OK",
    "BTN_YES": "Oui",
    "BTN_NO": "Non",
    "BTN_SEND": "Envoyer",
    "BTN_SEND_MONEY": "Faire un virement",
    "BTN_SEND_MONEY_SHORT": "Virement",
    "BTN_SAVE": "Enregistrer",
    "BTN_YES_SAVE": "Oui, Enregistrer",
    "BTN_YES_CONTINUE": "Oui, Continuer",
    "BTN_SHOW": "Voir",
    "BTN_SHOW_PUBKEY": "Afficher la clÃ© publique",
    "BTN_RELATIVE_UNIT": "Afficher en unitÃ© relative ?",
    "BTN_BACK": "Retour",
    "BTN_NEXT": "Suivant",
    "BTN_CANCEL": "Annuler",
    "BTN_CLOSE": "Fermer",
    "BTN_LATER": "Plus tard",
    "BTN_LOGIN": "Se connecter",
    "BTN_LOGOUT": "DÃ©connexion",
    "BTN_ADD_ACCOUNT": "Nouveau compte",
    "BTN_SHARE": "Partager",
    "BTN_EDIT": "Modifier",
    "BTN_DELETE": "Supprimer",
    "BTN_ADD": "Ajouter",
    "BTN_SEARCH": "Rechercher",
    "BTN_REFRESH": "Actualiser",
    "BTN_RETRY": "Recommencer",
    "BTN_START": "Commencer",
    "BTN_CONTINUE": "Continuer",
    "BTN_CREATE": "CrÃ©er",
    "BTN_UNDERSTOOD": "J'ai compris",
    "BTN_OPTIONS": "Options",
    "BTN_HELP_TOUR": "Visite guidÃ©e",
    "BTN_HELP_TOUR_SCREEN": "DÃ©couvrir cet Ã©cran",
    "BTN_DOWNLOAD": "TÃ©lÃ©charger",
    "BTN_DOWNLOAD_ACCOUNT_STATEMENT": "TÃ©lÃ©charger le relevÃ© du compte",
    "BTN_MODIFY": "Modifier",
    "CHOOSE_FILE": "DÃ©posez votre fichier <br/>ou cliquez pour le sÃ©lectionner",
    "DAYS": "jours",
    "NO_ACCOUNT_QUESTION": "Pas de encore membre ? CrÃ©er un compte !",
    "SEARCH_NO_RESULT": "Aucun rÃ©sultat trouvÃ©",
    "LOADING": "Veuillez patienter...",
    "SEARCHING": "Recherche en cours...",
    "FROM": "De",
    "TO": "Ã",
    "COPY": "Copier",
    "LANGUAGE": "Langue",
    "UNIVERSAL_DIVIDEND": "Dividende universel",
    "UD": "DU",
    "DATE_PATTERN": "DD/MM/YY HH:mm",
    "DATE_FILE_PATTERN": "YYYY-MM-DD",
    "DATE_SHORT_PATTERN": "DD/MM/YY",
    "DATE_MONTH_YEAR_PATTERN": "MM/YYYY",
    "EMPTY_PARENTHESIS": "(vide)",
    "UID": "Pseudonyme",
    "ENABLE": "ActivÃ©",
    "DISABLE": "DÃ©sactivÃ©",
    "RESULTS_LIST": "RÃ©sultats",
    "RESULTS_COUNT": "{{count}} rÃ©sultats",
    "EXECUTION_TIME": "executÃ© en {{duration|formatDurationMs}}",
    "SHOW_VALUES": "Afficher les valeurs en clair ?",
    "POPOVER_ACTIONS_TITLE": "Options",
    "POPOVER_FILTER_TITLE": "Filtres",
    "SHOW_MORE": "Afficher plus",
    "SHOW_MORE_COUNT": "(limite actuelle Ã  {{limit}})",
    "POPOVER_SHARE": {
      "TITLE": "Partager",
      "SHARE_ON_TWITTER": "Partager sur Twitter",
      "SHARE_ON_FACEBOOK": "Partager sur Facebook",
      "SHARE_ON_DIASPORA": "Partager sur Diaspora*",
      "SHARE_ON_GOOGLEPLUS": "Partager sur Google+"
    }
  },
  "SYSTEM": {
    "PICTURE_CHOOSE_TYPE": "Choisir la source :",
    "BTN_PICTURE_GALLERY": "Galerie",
    "BTN_PICTURE_CAMERA": "<b>CamÃ©ra</b>"
  },
  "MENU": {
    "HOME": "Accueil",
    "WOT": "Annuaire",
    "CURRENCY": "Monnaie",
    "ACCOUNT": "Mon compte",
    "WALLETS": "Mes portefeuilles",
    "TRANSFER": "Virement",
    "SCAN": "Scanner",
    "SETTINGS": "ParamÃ¨tres",
    "NETWORK": "RÃ©seau",
    "TRANSACTIONS": "Mes opÃ©rations"
  },
  "ABOUT": {
    "TITLE": "Ã propos",
    "LICENSE": "Application <b>libre</b> (Licence GNU GPLv3).",
    "LATEST_RELEASE": "Il existe une <b>version plus rÃ©cente</b> de {{'COMMON.APP_NAME'|translate}} (<b>v{{version}}</b>)",
    "PLEASE_UPDATE": "Veuillez mettre Ã  jour {{'COMMON.APP_NAME'|translate}} (derniÃ¨re version : <b>v{{version}}</b>)",
    "CODE": "Code source :",
    "DEVELOPERS": "DÃ©veloppÃ© par :",
    "FORUM": "Forum :",
    "PLEASE_REPORT_ISSUE": "N'hÃ©sitez pas Ã  nous remonter les anomalies rencontrÃ©es",
    "REPORT_ISSUE": "Remonter un problÃ¨me"
  },
  "HOME": {
    "TITLE": "Cesium",
    "WELCOME": "Bienvenue dans l'application Cesium !",
    "MESSAGE": "Suivez vos comptes {{currency|abbreviate}} en toute simplicitÃ©",
    "BTN_CURRENCY": "Explorer la monnaie {{name|abbreviate}}",
    "BTN_ABOUT": "Ã  propos",
    "BTN_HELP": "Aide en ligne",
    "REPORT_ISSUE": "anomalie",
    "NOT_YOUR_ACCOUNT_QUESTION" : "Vous n'Ãªtes pas propriÃ©taire du compte <b><i class=\"ion-key\"></i> {{pubkey|formatPubkey}}</b> ?",
    "BTN_CHANGE_ACCOUNT": "DÃ©connecter ce compte",
    "CONNECTION_ERROR": "NÅud <b>{{server}}</b> injoignable ou adresse invalide.<br/><br/>VÃ©rifiez votre connection Internet, ou changer de nÅud <a class=\"positive\" ng-click=\"doQuickFix('settings')\">dans les paramÃ¨tres</a>."
  },
  "SETTINGS": {
    "TITLE": "ParamÃ¨tres",
    "NETWORK_SETTINGS": "RÃ©seau",
    "PEER": "Adresse du nÅud Duniter",
    "PEER_CHANGED_TEMPORARY": "Adresse utilisÃ©e temporairement",
    "USE_LOCAL_STORAGE": "Activer le stockage local",
    "USE_LOCAL_STORAGE_HELP": "Permet de sauvegarder vos paramÃ¨tres",
    "ENABLE_HELPTIP": "Activer les bulles d'aide contextuelles",
    "ENABLE_UI_EFFECTS": "Activer les effets visuels",
    "HISTORY_SETTINGS": "Liste des opÃ©rations",
    "DISPLAY_UD_HISTORY": "Afficher les dividendes produits ?",
    "TX_HISTORY_AUTO_REFRESH": "Activer le rafraichissement automatique ?",
    "TX_HISTORY_AUTO_REFRESH_HELP": "RafraÃ®chi le solde et les opÃ©rations automatiquement, Ã  chaque nouveau bloc du rÃ©seau.",
    "AUTHENTICATION_SETTINGS": "Authentification",
    "KEEP_AUTH": "Expiration de l'authentification",
    "KEEP_AUTH_HELP": "DÃ©fini le moment oÃ¹ l'authentification est nettoyÃ©e de la mÃ©moire",
    "KEEP_AUTH_OPTION": {
      "NEVER": "AprÃ¨s chaque opÃ©ration",
      "SECONDS": "AprÃ¨s {{value}}s d'inactivitÃ©",
      "MINUTE": "AprÃ¨s {{value}}min d'inactivitÃ©",
      "MINUTES": "AprÃ¨s {{value}}min d'inactivitÃ©",
      "HOUR": "AprÃ¨s {{value}}h d'inactivitÃ©",
      "ALWAYS": "A la fin de la session"
    },
    "REMEMBER_ME": "Se souvenir de moi ?",
    "REMEMBER_ME_HELP": "Permet de rester identifiÃ© d'une session Ã  l'autre, en conservant localement la clÃ© publique.",
    "PLUGINS_SETTINGS": "Extensions",
    "BTN_RESET": "Restaurer les valeurs par dÃ©faut",
    "EXPERT_MODE": "Activer le mode expert",
    "EXPERT_MODE_HELP": "Permet un affichage plus dÃ©taillÃ©",
    "BLOCK_VALIDITY_WINDOW": "DÃ©lai d'incertitude des blocs",
    "BLOCK_VALIDITY_WINDOW_SHORT": "DÃ©lai d'incertitude",
    "BLOCK_VALIDITY_WINDOW_HELP": "DÃ©lai avant de considÃ©rer qu'une information est validÃ©e",
    "BLOCK_VALIDITY_OPTION": {
      "NONE": "Aucun dÃ©lai",
      "N": "{{time | formatDuration}} ({{count}} blocs)"
    },
    "POPUP_PEER": {
      "TITLE" : "NÅud Duniter",
      "HOST" : "Adresse",
      "HOST_HELP": "Adresse : serveur:port",
      "USE_SSL" : "SÃ©curisÃ© ?",
      "USE_SSL_HELP" : "(Chiffrement SSL)",
      "BTN_SHOW_LIST" : "Liste des noeuds"
    }
  },
  "BLOCKCHAIN": {
    "HASH": "Hash : {{hash}}",
    "VIEW": {
      "HEADER_TITLE": "Bloc #{{number}}-{{hash|formatHash}}",
      "TITLE_CURRENT": "Bloc courant",
      "TITLE": "Bloc #{{number|formatInteger}}",
      "COMPUTED_BY": "CalculÃ© par le noeud de",
      "SHOW_RAW": "Voir le fichier brut",
      "TECHNICAL_DIVIDER": "Informations techniques",
      "VERSION": "Version du format",
      "HASH": "Hash calculÃ©",
      "UNIVERSAL_DIVIDEND_HELP": "Monnaie co-produite par chacun des {{membersCount}} membres",
      "EMPTY": "Aucune donnÃ©e dans ce bloc",
      "POW_MIN": "DifficultÃ© minimale",
      "POW_MIN_HELP": "DifficultÃ© imposÃ©e pour le calcul du hash",
      "DATA_DIVIDER": "DonnÃ©es",
      "IDENTITIES_COUNT": "Nouvelles identitÃ©s",
      "JOINERS_COUNT": "Nouveaux membres",
      "ACTIVES_COUNT": "Renouvellements",
      "ACTIVES_COUNT_HELP": "Membres ayant renouvellÃ©s leur adhÃ©sion",
      "LEAVERS_COUNT": "Membres sortants",
      "LEAVERS_COUNT_HELP": "Membres ne souhaitant plus de certification",
      "EXCLUDED_COUNT": "Membres exclus",
      "EXCLUDED_COUNT_HELP": "Anciens membres exclus par non renouvellement ou manque de certifications",
      "REVOKED_COUNT": "IdentitÃ©s revoquÃ©es",
      "REVOKED_COUNT_HELP": "Ces comptes ne pourront plus Ãªtre membres",
      "TX_COUNT": "Transactions",
      "CERT_COUNT": "Certifications",
      "TX_TO_HIMSELF": "OpÃ©ration de change",
      "TX_OUTPUT_UNLOCK_CONDITIONS": "Conditions de dÃ©blocage",
      "TX_OUTPUT_OPERATOR": {
        "AND": "et",
        "OR": "ou"
      },
      "TX_OUTPUT_FUNCTION": {
        "SIG": "<b>Signature</b> de ",
        "XHX": "<b>Mot de passe</b>, dont SHA256 =",
        "CSV": "BloquÃ© pendant",
        "CLTV": "BloquÃ© jusqu'Ã "
      }
    },
    "LOOKUP": {
      "TITLE": "Blocs",
      "NO_BLOCK": "Aucun bloc",
      "LAST_BLOCKS": "Derniers blocs :",
      "BTN_COMPACT": "Compacter"
    }
  },
  "CURRENCY": {
    "VIEW": {
      "TITLE": "Monnaie",
      "TAB_CURRENCY": "Monnaie",
      "TAB_WOT": "Toile de confiance",
      "TAB_NETWORK": "RÃ©seau",
      "TAB_BLOCKS": "Blocs",
      "CURRENCY_SHORT_DESCRIPTION": "{{currency|abbreviate}} est une <b>monnaie libre</b>, dÃ©marrÃ©e {{firstBlockTime|formatFromNow}}. Elle compte actuellement <b>{{N}} membres</b>, qui produisent et perÃ§oivent un <a ng-click=\"showHelpModal('ud')\">Dividende Universel</a> (DU), chaque {{dt|formatPeriod}}.",
      "NETWORK_RULES_DIVIDER": "RÃ¨gles du rÃ©seau",
      "CURRENCY_NAME": "Nom de la monnaie",
      "MEMBERS": "Nombre de membres",
      "MEMBERS_VARIATION": "Variation depuis le dernier DU",
      "MONEY_DIVIDER": "Monnaie",
      "MASS": "Masse monÃ©taire",
      "SHARE": "Masse par membre",
      "UD": "Dividende universel",
      "C_ACTUAL": "Croissance actuelle",
      "MEDIAN_TIME": "Heure de la blockchain",
      "POW_MIN": "Niveau minimal de difficultÃ© de calcul",
      "MONEY_RULES_DIVIDER": "RÃ¨gles de la monnaie",
      "C_RULE": "Croissance thÃ©orique cible",
      "UD_RULE": "Calcul du dividende universel",
      "DT_REEVAL": "PÃ©riode de revalorisation du DU",
      "REEVAL_SYMBOL": "reval",
      "DT_REEVAL_VALUE": "Tous les <b>{{dtReeval|formatDuration}}</b> ({{dtReeval/86400}} {{'COMMON.DAYS'|translate}})",
      "UD_REEVAL_TIME0": "Date de la 1Ã¨re revalorisation",
      "SIG_QTY_RULE": "Nombre de certifications requises pour devenir membre",
      "SIG_STOCK": "Nombre maximal de certifications Ã©mises par membre",
      "SIG_PERIOD": "DÃ©lai minimal d'attente entre 2 certifications successives Ã©mises par une mÃªme personne",
      "SIG_WINDOW": "DÃ©lai limite de prise en compte d'une certification",
      "SIG_VALIDITY": "DurÃ©e de vie d'une certification qui a Ã©tÃ© prise en compte",
      "MS_WINDOW": "DÃ©lai limite de prise en compte d'une demande d'adhÃ©sion comme membre",
      "MS_VALIDITY": "DurÃ©e de vie d'une adhÃ©sion qui a Ã©tÃ© prise en compte",
      "STEP_MAX": "Distance maximale, par les certifications, entre un nouvel entrant et les membres rÃ©fÃ©rents",
      "WOT_RULES_DIVIDER": "RÃ¨gles de la toile de confiance",
      "SENTRIES": "Nombre de certifications (Ã©mises <b>et</b> reÃ§ues) pour devenir membre rÃ©fÃ©rent",
      "SENTRIES_FORMULA": "Nombre de certification (Ã©mises <b>et</b> reÃ§ues) pour devenir membre rÃ©fÃ©rent (formule)",
      "XPERCENT":"Pourcentage minimum de membres rÃ©fÃ©rents Ã  atteindre pour respecter la rÃ¨gle de distance",
      "AVG_GEN_TIME": "Temps moyen entre deux blocs",
      "CURRENT": "actuel",
      "MATH_CEILING": "PLAFOND",
      "DISPLAY_ALL_RULES": "Afficher toutes les rÃ¨gles ?",
      "BTN_SHOW_LICENSE": "Voir la licence",
      "WOT_DIVIDER": "Toile de confiance"
    },
    "LICENSE": {
      "TITLE": "Licence de la monnaie",
      "BTN_DOWNLOAD": "TÃ©lÃ©charger le fichier",
      "NO_LICENSE_FILE": "Fichier de licence non trouvÃ©."
    }
  },
  "NETWORK": {
    "VIEW": {
      "MEDIAN_TIME": "Heure de la blockchain",
      "LOADING_PEERS": "Chargement des noeuds...",
      "NODE_ADDRESS": "Adresse :",
      "SOFTWARE": "Logiciel",
      "WARN_PRE_RELEASE": "PrÃ©-version (derniÃ¨re version stable : <b>{{version}}</b>)",
      "WARN_NEW_RELEASE": "Version <b>{{version}}</b> disponible",
      "WS2PID": "Identifiant :",
      "PRIVATE_ACCESS": "AccÃ¨s privÃ©",
      "POW_PREFIX": "PrÃ©fixe de preuve de travail :",
      "ENDPOINTS": {
        "BMAS": "Interface sÃ©curisÃ©e (SSL)",
        "BMATOR": "Interface rÃ©seau TOR",
        "WS2P": "Interface WS2P",
        "ES_USER_API": "Noeud de donnÃ©es Cesium+"
      }
    },
    "INFO": {
      "ONLY_SSL_PEERS": "Les noeuds non SSL ont un affichage dÃ©gradÃ©, car Cesium fonctionne en mode HTTPS."
    }
  },
  "PEER": {
    "PEERS": "NÅuds",
    "SIGNED_ON_BLOCK": "SignÃ© sur le bloc",
    "MIRROR": "miroir",
    "MIRRORS": "NÅuds miroirs",
    "PEER_LIST" : "Liste des nÅuds",
    "MEMBERS" : "NÅuds membres",
    "ALL_PEERS" : "Tous les nÅuds",
    "DIFFICULTY" : "DifficultÃ©",
    "API" : "API",
    "CURRENT_BLOCK" : "Bloc #",
    "POPOVER_FILTER_TITLE": "Filtre",
    "OFFLINE": "NÅuds hors ligne",
    "BTN_SHOW_PEER": "Voir le nÅud",
    "VIEW": {
      "TITLE": "NÅud",
      "OWNER": "Appartient Ã ",
      "SHOW_RAW_PEERING": "Voir la fiche de pair",
      "SHOW_RAW_CURRENT_BLOCK": "Voir le dernier bloc (format brut)",
      "LAST_BLOCKS": "Derniers blocs connus",
      "KNOWN_PEERS": "NÅuds connus :",
      "GENERAL_DIVIDER": "Informations gÃ©nÃ©rales",
      "ERROR": {
        "LOADING_TOR_NODE_ERROR": "RÃ©cupÃ©ration des informations du noeud impossible. Le dÃ©lai d'attente est dÃ©passÃ©.",
        "LOADING_NODE_ERROR": "RÃ©cupÃ©ration des informations du noeud impossible"
      }
    }
  },
  "WOT": {
    "SEARCH_HELP": "Recherche (pseudo ou clÃ© publique)",
    "SEARCH_INIT_PHASE_WARNING": "Durant la phase de prÃ©-inscription, la recherche des inscriptions en attente <b>peut-Ãªtre longue</b>. Merci de patienter...",
    "REGISTERED_SINCE": "Inscrit le",
    "REGISTERED_SINCE_BLOCK": "Inscrit au block #",
    "NO_CERTIFICATION": "Aucune certification validÃ©e",
    "NO_GIVEN_CERTIFICATION": "Aucune certification Ã©mise",
    "NOT_MEMBER_PARENTHESIS": "(non membre)",
    "IDENTITY_REVOKED_PARENTHESIS": "(identitÃ© revoquÃ©e)",
    "MEMBER_PENDING_REVOCATION_PARENTHESIS": "(en cours de rÃ©vocation)",
    "EXPIRE_IN": "Expiration",
    "NOT_WRITTEN_EXPIRE_IN": "Date limite<br/>de traitement",
    "EXPIRED": "ExpirÃ©",
    "PSEUDO": "Pseudonyme",
    "SIGNED_ON_BLOCK": "Emise au bloc #{{block}}",
    "WRITTEN_ON_BLOCK": "Ecrite au bloc #{{block}}",
    "GENERAL_DIVIDER": "Informations gÃ©nÃ©rales",
    "NOT_MEMBER_ACCOUNT": "Compte simple (non membre)",
    "NOT_MEMBER_ACCOUNT_HELP": "Il s'agit d'un simple portefeuille, sans demande d'adhÃ©sion en attente.",
    "TECHNICAL_DIVIDER": "Informations techniques",
    "BTN_CERTIFY": "Certifier",
    "BTN_YES_CERTIFY": "Oui, certifier",
    "BTN_SELECT_AND_CERTIFY": "Nouvelle certification",
    "ACCOUNT_OPERATIONS": "OpÃ©rations sur le compte",
    "VIEW": {
      "POPOVER_SHARE_TITLE": "IdentitÃ© {{title}}"
    },
    "LOOKUP": {
      "TITLE": "Toile de confiance",
      "NEWCOMERS": "Nouveaux membres",
      "NEWCOMERS_COUNT": "{{count}} membres",
      "PENDING": "Inscriptions en attente",
      "PENDING_COUNT": "{{count}} inscriptions en attente",
      "REGISTERED": "Inscrit {{sigDate | formatFromNow}}",
      "MEMBER_FROM": "Membre depuis {{memberDate|formatFromNowShort}}",
      "BTN_NEWCOMERS": "Nouveaux membres",
      "BTN_PENDING": "Inscriptions en attente",
      "SHOW_MORE": "Afficher plus",
      "SHOW_MORE_COUNT": "(limite actuelle Ã  {{limit}})",
      "NO_PENDING": "Aucune inscription en attente.",
      "NO_NEWCOMERS": "Aucun membre."
    },
    "CONTACTS": {
      "TITLE": "Contacts"
    },
    "MODAL": {
      "TITLE": "Recherche"
    },
    "CERTIFICATIONS": {
      "TITLE": "{{uid}} - Certifications",
      "SUMMARY": "Certifications reÃ§ues",
      "LIST": "DÃ©tail des certifications reÃ§ues",
      "PENDING_LIST": "Certifications en attente de traitement",
      "RECEIVED": "Certifications reÃ§ues",
      "RECEIVED_BY": "Certifications reÃ§ues par {{uid}}",
      "ERROR": "Certifications reÃ§ues en erreur",
      "SENTRY_MEMBER": "Membre rÃ©fÃ©rent"
    },
    "OPERATIONS": {
      "TITLE": "{{uid}} - OpÃ©rations"
    },
    "GIVEN_CERTIFICATIONS": {
      "TITLE": "{{uid}} - Certifications Ã©mises",
      "SUMMARY": "Certifications Ã©mises",
      "LIST": "DÃ©tail des certifications Ã©mises",
      "PENDING_LIST": "Certifications en attente de traitement",
      "SENT": "Certifications Ã©mises",
      "SENT_BY": "Certifications Ã©mises par {{uid}}",
      "ERROR": "Certifications Ã©mises en erreur"
    }
  },
  "LOGIN": {
    "TITLE": "<i class=\"icon ion-log-in\"></i> Connexion",
    "SCRYPT_FORM_HELP": "Veuillez saisir vos identifiants.<br>Pensez Ã  vÃ©rifier que la clÃ© publique est celle de votre compte.",
    "PUBKEY_FORM_HELP": "Veuillez saisir une clÃ© publique de compte :",
    "FILE_FORM_HELP": "Choisissez le fichier de trousseau Ã  utiliser :",
    "SCAN_FORM_HELP": "Scanner le QR code d'un portefeuille.",
    "SALT": "Identifiant secret",
    "SALT_HELP": "Identifiant secret",
    "SHOW_SALT": "Afficher l'identifiant secret ?",
    "PASSWORD": "Mot de passe",
    "PASSWORD_HELP": "Mot de passe",
    "PUBKEY_HELP": "ClÃ© publique ou pseudonyme",
    "NO_ACCOUNT_QUESTION": "Vous n'avez pas encore de compte ?",
    "CREATE_ACCOUNT": "CrÃ©er un compte...",
    "FORGOTTEN_ID": "Mot de passe oubliÃ© ?",
    "ASSOCIATED_PUBKEY": "ClÃ© publique du trousseau :",
    "BTN_METHODS": "Autres mÃ©thodes",
    "BTN_METHODS_DOTS": "Changer de mÃ©thode...",
    "METHOD_POPOVER_TITLE": "MÃ©thodes",
    "MEMORIZE_AUTH_FILE": "MÃ©moriser ce trousseau le temps de la session de navigation",
    "SCRYPT_PARAMETERS": "ParamÃ¨tres (Scrypt) :",
    "AUTO_LOGOUT": {
      "TITLE": "Information",
      "MESSAGE": "<i class=\"ion-android-time\"></i> Vous avez Ã©tÃ© <b>dÃ©connectÃ©</b> automatiquement, suite Ã  une inactivitÃ© prolongÃ©e.",
      "BTN_RELOGIN": "Me reconnecter",
      "IDLE_WARNING": "Vous allez Ãªtre dÃ©connectÃ©... {{countdown}}"
    },
    "METHOD": {
      "SCRYPT_DEFAULT": "Sallage standard (par dÃ©faut)",
      "SCRYPT_ADVANCED": "Sallage avancÃ©",
      "FILE": "Fichier de trousseau",
      "PUBKEY": "ClÃ© publique seule",
      "SCAN": "Scanner un QR code"
    },
    "SCRYPT": {
      "SIMPLE": "Sallage lÃ©ger",
      "DEFAULT": "Sallage standard",
      "SECURE": "Sallage sÃ»r",
      "HARDEST": "Sallage le plus sÃ»r",
      "EXTREME": "Sallage extrÃ¨me",
      "USER": "Sallage personnalisÃ©",
      "N": "N (Loop):",
      "r": "r (RAM):",
      "p": "p (CPU):"
    },
    "FILE": {
      "DATE" : "Date :",
      "TYPE" : "Type :",
      "SIZE": "Taille :",
      "VALIDATING": "Validation en cours...",
      "HELP": "Format de fichier attendu : <b>.yml</b> ou <b>.dunikey</b> (type PubSec, WIF ou EWIF)."
    }
  },
  "AUTH": {
    "TITLE": "<i class=\"icon ion-locked\"></i> Authentification",
    "BTN_AUTH": "S'authentifier",
    "GENERAL_HELP": "Veuillez vous authentifier :",
    "EXPECTED_UID_HELP": "Veuillez vous authentifier sur le compte <i class=\"ion-person\"></i> {{uid}} :",
    "EXPECTED_PUBKEY_HELP": "Veuillez vous authentifier sur le portefeuille <i class=\"ion-key\"></i> {{pubkey|formatPubkey}} :",
    "SCAN_FORM_HELP": "Scanner le QR code de la <b>clef privÃ©e</b> du portefeuille."
  },
  "ACCOUNT": {
    "TITLE": "Mon compte",
    "BALANCE": "Solde",
    "LAST_TX": "DerniÃ¨res transactions",
    "BALANCE_ACCOUNT": "Solde du compte",
    "NO_TX": "Aucune transaction",
    "SHOW_MORE_TX": "Afficher plus",
    "SHOW_ALL_TX": "Afficher tout",
    "TX_FROM_DATE": "(limite actuelle Ã  {{fromTime|formatFromNowShort}})",
    "PENDING_TX": "Transactions en cours de traitement",
    "VALIDATING_TX": "Transactions en cours de validation",
    "ERROR_TX": "Transactions non executÃ©es",
    "ERROR_TX_SENT": "Transactions envoyÃ©es en Ã©chec",
    "PENDING_TX_RECEIVED": "Transactions en attente de rÃ©ception",
    "EVENTS": "EvÃ©nements",
    "WAITING_MEMBERSHIP": "Demande d'adhÃ©sion envoyÃ©e. En attente d'acceptation.",
    "WAITING_CERTIFICATIONS": "Vous devez obtenir {{needCertificationCount}} certification(s) pour devenir membre.",
    "WILL_MISSING_CERTIFICATIONS": "Vous allez bientÃ´t <b>manquer de certification</b> (au moins {{willNeedCertificationCount}} sont requises)",
    "WILL_NEED_RENEW_MEMBERSHIP": "Votre adhÃ©sion comme membre <b>va expirer {{membershipExpiresIn|formatDurationTo}}</b>. Pensez Ã  <a ng-click=\"doQuickFix('renew')\">renouveler votre adhÃ©sion</a> d'ici lÃ .",
    "NEED_RENEW_MEMBERSHIP": "Vous n'Ãªtes plus membre, car votre adhÃ©sion <b>a expirÃ©</b>. Pensez Ã  <a ng-click=\"doQuickFix('renew')\">renouveler votre adhÃ©sion</a>.",
    "NO_WAITING_MEMBERSHIP": "Aucune demande d'adhÃ©sion en attente. Si vous souhaitez <b>devenir membre</b>, pensez Ã  <a ng-click=\"doQuickFix('membership')\">envoyer la demande d'adhÃ©sion</a>.",
    "CERTIFICATION_COUNT": "Certifications reÃ§ues",
    "CERTIFICATION_COUNT_SHORT": "Certifications",
    "SIG_STOCK": "Certifications envoyÃ©es",
    "BTN_RECEIVE_MONEY": "Encaisser",
    "BTN_SELECT_ALTERNATIVES_IDENTITIES": "Basculer vers une autre identitÃ©...",
    "BTN_FIX_MEMBERSHIP": "Renvoyer la demande d'adhÃ©sion...",
    "BTN_MEMBERSHIP_RENEW": "Renouveler l'adhÃ©sion",
    "BTN_MEMBERSHIP_RENEW_DOTS": "Renouveler l'adhÃ©sion...",
    "BTN_MEMBERSHIP_OUT_DOTS": "ArrÃªter l'adhÃ©sion...",
    "BTN_SECURITY_DOTS": "Compte et sÃ©curitÃ©...",
    "BTN_SHOW_DETAILS": "Afficher les infos techniques",
    "LOCKED_OUTPUTS_POPOVER": {
      "TITLE": "Montant verrouillÃ©",
      "DESCRIPTION": "Voici les conditions de dÃ©verrouillage de ce montant :",
      "DESCRIPTION_MANY": "Cette transaction est composÃ© de plusieurs parties, dont voici les conditions de dÃ©verrouillage :",
      "LOCKED_AMOUNT": "Conditions pour le montant :"
    },
    "NEW": {
      "TITLE": "CrÃ©ation de compte",
      "INTRO_WARNING_TIME": "La crÃ©ation d'un compte sur {{name|capitalize}} est trÃ¨s simple. Veuillez nÃ©anmoins prendre suffisament de temps pour faire correctement cette formalitÃ© (pour ne pas oublier les identifiants, mots de passe, etc.).",
      "INTRO_WARNING_SECURITY": "VÃ©rifier que le matÃ©riel que vous utilisez actuellement (ordinateur, tablette, tÃ©lÃ©phone) <b>est sÃ©curisÃ© et digne de confiance</b>.",
      "INTRO_WARNING_SECURITY_HELP": "Anti-virus Ã  jour, pare-feu activÃ©, session protÃ©gÃ©e par mot de passe ou code pin, etc.",
      "INTRO_HELP": "Cliquez sur <b>{{'COMMON.BTN_START'|translate}}</b> pour dÃ©buter la crÃ©ation de compte. Vous serez guidÃ© Ã©tape par Ã©tape.",
      "REGISTRATION_NODE": "Votre inscription sera enregistrÃ©e via le noeud Duniter <b>{{server}}</b>, qui le diffusera ensuite au reste du rÃ©seau de la monnaie.",
      "REGISTRATION_NODE_HELP": "Si vous ne faites pas confiance en ce noeud, veuillez en changer <a ng-click=\"doQuickFix('settings')\">dans les paramÃ¨tres</a> de Cesium.",
      "SELECT_ACCOUNT_TYPE": "Choisissez le type de compte Ã  crÃ©er :",
      "MEMBER_ACCOUNT": "Compte membre",
      "MEMBER_ACCOUNT_TITLE": "CrÃ©ation d'un compte membre",
      "MEMBER_ACCOUNT_HELP": "Si vous n'Ãªtes pas encore inscrit en tant qu'individu (un seul compte possible par individu). Ce compte permet de co-produire la monnaie, en recevant un <b>dividende universel</b> chaque {{parameters.dt|formatPeriod}}.",
      "WALLET_ACCOUNT": "Simple portefeuille",
      "WALLET_ACCOUNT_TITLE": "CrÃ©ation d'un portefeuille",
      "WALLET_ACCOUNT_HELP": "Pour tous les autres cas, par exemple si vous avez besoin d'un compte supplÃ©mentaire.<br/>Aucun dividende universel ne sera crÃ©Ã© par ce compte.",
      "SALT_WARNING": "Choisissez votre identifiant secret.<br/>Il vous sera demandÃ© Ã  chaque connexion sur ce compte.<br/><br/><b>Retenez le bien</b> : en cas de perte, plus personne ne pourra accÃ©der Ã  votre compte !",
      "PASSWORD_WARNING": "Choisissez un mot de passe.<br/>Il vous sera demandÃ© Ã  chaque connexion sur ce compte.<br/><br/><b>Retenez bien ce mot de passe</b : en cas de perte, plus personne ne pourra accÃ©der Ã  votre compte !",
      "PSEUDO_WARNING": "Choisissez un pseudonyme.<br/>Il sert aux autres membres, pour vous identifier plus facilement.<div class='hidden-xs'><br/>Il <b>ne pourra pas Ãªtre modifiÃ©</b>, sans refaire un compte.</div><br/><br/>Il ne doit contenir <b>ni espace, ni de caractÃ¨re accentuÃ©</b>.<div class='hidden-xs'><br/>Exemple : <span class='gray'>SophieDupond, MarcelChemin, etc.</span>",
      "PSEUDO": "Pseudonyme",
      "PSEUDO_HELP": "Pseudonyme",
      "SALT_CONFIRM": "Confirmation",
      "SALT_CONFIRM_HELP": "Confirmation de l'identifiant secret",
      "PASSWORD_CONFIRM": "Confirmation",
      "PASSWORD_CONFIRM_HELP": "Confirmation du mot de passe",
      "SLIDE_6_TITLE": "Confirmation :",
      "COMPUTING_PUBKEY": "Calcul en cours...",
      "LAST_SLIDE_CONGRATULATION": "Vous avez saisi toutes les informations nÃ©cessaires : Bravo !<br/>Vous pouvez maintenant <b>envoyer la demande de crÃ©ation</b> de compte.</b><br/><br/>Pour information, la clÃ© publique ci-dessous identifiera votre futur compte.<br/>Elle pourra Ãªtre communiquÃ©e Ã  des tiers pour recevoir leur paiement.<br/><b>Il n'est pas obligatoire</b> de la noter ici, vous pourrez Ã©galement le faire plus tard.",
      "CONFIRMATION_MEMBER_ACCOUNT": "<b class=\"assertive\">Avertissement :</b> l'identifiant secret, le mot de passe et le pseudonyme ne pourront plus Ãªtre modifiÃ©s.<br/><br/><b>Assurez-vous de toujours vous en rappeller !</b><br/><br/><b>Etes-vous sÃ»r</b> de vouloir envoyer cette demande d'inscription ?",
      "CONFIRMATION_WALLET_ACCOUNT": "<b class=\"assertive\">Avertissement :</b> l'identifiant secret et le mot de passe ne pourront plus Ãªtre modifiÃ©s.<br/><br/><b>Assurez-vous de toujours vous en rappeller !</b><br/><br/><b>Etes-vous sÃ»r</b> de vouloir continuer avec ces identifiants ?",
      "CHECKING_PSEUDO": "VÃ©rification...",
      "PSEUDO_AVAILABLE": "Pseudonyme disponible",
      "PSEUDO_NOT_AVAILABLE": "Pseudonyme non disponible",
      "INFO_LICENSE": "Avant de crÃ©er un compte membre, <b>veuillez lire et accepter la licence</b> d'usage de la monnaie :",
      "BTN_ACCEPT": "J'accepte",
      "BTN_ACCEPT_LICENSE": "J'accepte la licence"
    },
    "POPUP_REGISTER": {
      "TITLE": "Choisissez un pseudonyme",
      "HELP": "Un pseudonyme est obligatoire pour devenir membre."
    },
    "SELECT_IDENTITY_MODAL": {
      "TITLE": "SÃ©lection de l'identitÃ©",
      "HELP": "Plusieurs <b>identitÃ©s diffÃ©rentes</b> ont Ã©tÃ© envoyÃ©es, pour la clÃ© publique <span class=\"gray\"><i class=\"ion-key\"></i> {{pubkey|formatPubkey}}</span>.<br/>Veuillez sÃ©lectionner le dossier Ã  utiliser :"
    },
    "SELECT_WALLET_MODAL": {
      "TITLE": "SÃ©lection du portefeuille"
    },
    "WALLET_LIST": {
      "TITLE": "Mes portefeuilles",
      "BTN_NEW": "Ajouter un portefeuille",
      "NO_WALLET": "Aucun portefeuille secondaire",
      "BTN_DELETE": "Retirer un portefeuille secondaire...",
      "BTN_RENAME": "Renommer le portefeuille",
      "EDIT_POPOVER": {
        "TITLE": "Renommer le portefeuille",
        "HELP": "Renseignez le nouveau nom",
        "NAME_HELP": "Nom du portefeuille"
      }
    },
    "SECURITY": {
      "ADD_QUESTION": "Ajouter une question personnalisÃ©e ",
      "BTN_CLEAN": "Vider",
      "BTN_RESET": "RÃ©initialiser",
      "DOWNLOAD_REVOKE": "Sauvegarder mon fichier de rÃ©vocation",
      "DOWNLOAD_REVOKE_HELP": "Disposer d'un fichier de rÃ©vocation est important, par exemple en cas de perte de vos identifiants. Il vous permet de <b>sortir ce compte de la toile de confiance</b>, en redevenant ainsi un simple portefeuille.",
      "GENERATE_KEYFILE": "GÃ©nÃ©rer mon fichier de trousseau...",
      "GENERATE_KEYFILE_HELP": "GÃ©nÃ¨re un fichier permettant de vous authentifier sans saisir vos identifiants.<br/><b>Attention :</b> ce fichier contiendra votre trousseau de compte (clefs publique et secrÃ¨te) ; Il est donc trÃ¨s important de le mettre en lieu sÃ»r !",
      "KEYFILE_FILENAME": "trousseau-{{pubkey|formatPubkey}}-{{currency}}-{{format}}.dunikey",
      "MEMBERSHIP_IN": "Transformer en compte membre...",
      "MEMBERSHIP_IN_HELP": "Permet de <b>transformer</b> un compte simple portefeuille <b>en compte membre</b>, en envoyant une demande d'adhÃ©sion. Utile uniquement si vous n'avez pas dÃ©jÃ  un autre compte membre.",
      "SEND_IDENTITY": "Publier son identitÃ©...",
      "SEND_IDENTITY_HELP": "Permet d'associer un pseudonyme Ã  ce compte, mais <b>sans faire de demande d'adhÃ©sion</b> pour devenir membre. Cette association n'est gÃ©nÃ©ralement pas utile, car la validitÃ© de cette association de pseudonyme est limitÃ©e dans le temps.",
      "HELP_LEVEL": "Pour gÃ©nÃ©rer un fichier de sauvegarde de vos identifiants, choisissez <strong> au moins {{nb}} questions :</strong>",
      "LEVEL": "Niveau de sÃ©curitÃ©",
      "LOW_LEVEL": "Faible <span class=\"hidden-xs\">(2 questions minimum)</span>",
      "MEDIUM_LEVEL": "Moyen <span class=\"hidden-xs\">(4 questions minimum)</span>",
      "QUESTION_1": "Comment s'appelait votre meilleur ami lorsque vous Ã©tiez adolescent ?",
      "QUESTION_2": "Comment s'appelait votre premier animal de compagnie ?",
      "QUESTION_3": "Quel est le premier plat que vous avez appris Ã  cuisiner ?",
      "QUESTION_4": "Quel est le premier film que vous avez vu au cinÃ©ma ?",
      "QUESTION_5": "OÃ¹ Ãªtes-vous allÃ© la premiÃ¨re fois que vous avez pris l'avion ?",
      "QUESTION_6": "Comment s'appelait votre instituteur prÃ©fÃ©rÃ© Ã  l'Ã©cole primaire ?",
      "QUESTION_7": "Quel serait selon vous le mÃ©tier idÃ©al ?",
      "QUESTION_8": "Quel est le livre pour enfants que vous prÃ©fÃ©rez ?",
      "QUESTION_9": "Quel Ã©tait le modÃ¨le de votre premier vÃ©hicule ?",
      "QUESTION_10": "Quel Ã©tait votre surnom lorsque vous Ã©tiez enfant ?",
      "QUESTION_11": "Quel Ã©tait votre personnage ou acteur de cinÃ©ma prÃ©fÃ©rÃ© lorsque vous Ã©tiez Ã©tudiant ?",
      "QUESTION_12": "Quel Ã©tait votre chanteur ou groupe prÃ©fÃ©rÃ© lorsque vous Ã©tiez Ã©tudiant ?",
      "QUESTION_13": "Dans quelle ville vos parents se sont-ils rencontrÃ©s ?",
      "QUESTION_14": "Comment s'appelait votre premier patron ?",
      "QUESTION_15": "Quel est le nom de la rue oÃ¹ vous avez grandi ?",
      "QUESTION_16": "Quel est le nom de la premiÃ¨re plage oÃ¹ vous vous Ãªtes baignÃ© ?",
      "QUESTION_17": "Quel est le premier album que vous avez achetÃ© ?",
      "QUESTION_18": "Quel est le nom de votre Ã©quipe de sport prÃ©fÃ©rÃ©e ?",
      "QUESTION_19": "Quel Ã©tait le mÃ©tier de votre grand-pÃ¨re ?",
      "RECOVER_ID": "Retrouver mon mot de passe...",
      "RECOVER_ID_HELP": "Si vous disposez d'un <b>fichier de sauvegarde de vos identifiants</b>, vous pouvez les retrouver en rÃ©pondant correctement Ã  vos questions personnelles.",
      "REVOCATION_WITH_FILE": "RÃ©voquer mon compte membre...",
      "REVOCATION_WITH_FILE_DESCRIPTION": "Si vous avez <b>dÃ©finitivement perdus vos identifiants</b> de compte membre (ou que la sÃ©curitÃ© du compte est compromise), vous pouvez utiliser <b>le fichier de rÃ©vocation</b> du compte pour <b>forcer sa sortie dÃ©finitive de la toile de confiance</b>.",
      "REVOCATION_WITH_FILE_HELP": "Pour <b>rÃ©voquer dÃ©finitivement</b> un compte membre, veuillez glisser dans la zone ci-dessous votre fichier de rÃ©vocation, ou bien cliquer dans la zone pour rechercher un fichier.",
      "REVOCATION_WALLET": "RÃ©voquer immÃ©diatement ce compte",
      "REVOCATION_WALLET_HELP": "Demander la rÃ©vocation de votre identitÃ© entraine la <b>sortie de la toile de confiance</b> (dÃ©finitive pour le pseudonyme et la clÃ© publique associÃ©s). Le compte ne pourra plus produire de Dividende Universel.<br/>Vous pourrez toutefois encore vous y connecter, comme Ã  un simple portefeuille.",
      "REVOCATION_FILENAME": "revocation-{{uid}}-{{pubkey|formatPubkey}}-{{currency}}.txt",
      "SAVE_ID": "Sauvegarder mes identifiants...",
      "SAVE_ID_HELP": "CrÃ©ation d'un fichier de sauvegarde, pour <b>retrouver votre mot de passe</b> (et l'identifiant secret) <b>en cas de d'oubli</b>. Le fichier est <b>sÃ©curisÃ©</b> (chiffrÃ©) Ã  l'aide de questions personnelles.",
      "STRONG_LEVEL": "Fort <span class=\"hidden-xs \">(6 questions minimum)</span>",
      "TITLE": "Compte et sÃ©curitÃ©",
      "KEYFILE": {
        "PUBSEC_FORMAT": "Format PubSec.",
        "PUBSEC_FORMAT_HELP": "Ce format votre stocke votre trousseau de maniÃ¨re trÃ¨s simple. Il est compatible notamment avec Cesium, Äannonce et Duniter.<br/><b>Attention:</b>Le fichier <b>n'est pas chiffrÃ©</b> (la clef secrÃ¨te y apparait en clair); Veuillez donc le stocker en lieu sÃ»r !",
        "WIF_FORMAT": "Format WIF (Wallet Import Format) - v1",
        "WIF_FORMAT_HELP": "Ce format stocke votre votre trousseau, en y intÃ©grant une somme de contrÃ´le pour vÃ©rifier l'intÃ©gritÃ© du fichier. Il est compatible notamment avec les portefeuilles papier (Duniter paper wallet).<br/><b>Attention:</b>Le fichier <b>n'est pas chiffrÃ©</b> (la clef secrÃ¨te y apparait en clair); Veuillez donc le stocker en lieu sÃ»r !",
        "EWIF_FORMAT": "Format EWIF (Encrypted Wallet Import Format) - v1",
        "EWIF_FORMAT_HELP": "Ce format stocke votre trouseau <b>de maniÃ¨re chiffrÃ©</b> Ã  partir d'une phrase secrÃ¨te de votre choix. Il intÃ¨gre aussi une somme de contrÃ´le pour vÃ©rifier l'intÃ©gritÃ© du fichier.<br/><b>Attention:</b> Veuillez Ã  toujours vous rappeller de votre phrase secrÃ¨te !",
        "PASSWORD_POPUP": {
          "TITLE": "Fichier de trousseau chiffrÃ©",
          "HELP": "Veuillez indiquer la phrase secrÃ¨te:",
          "PASSWORD_HELP": "Phrase secrÃ¨te"
        },
        "ERROR": {
          "BAD_PASSWORD": "Phrase secrÃ¨te incorrecte"
        }
      }
    },
    "FILE_NAME": "{{currency}} - RelevÃ© du compte {{pubkey|formatPubkey}} au {{currentTime|formatDateForFile}}.csv",
    "HEADERS": {
      "TIME": "Date",
      "AMOUNT": "Montant",
      "COMMENT": "Commentaire"
    }
  },
  "TRANSFER": {
    "TITLE": "Virement",
    "SUB_TITLE": "Faire un virement",
    "SUB_TITLE_ALL": "Vider le compte",
    "FROM": "De",
    "TO": "Ã",
    "AMOUNT": "Montant",
    "AMOUNT_HELP": "Montant",
    "COMMENT": "Commentaire",
    "COMMENT_HELP": "Commentaire",
    "BTN_SEND": "Envoyer",
    "BTN_ADD_COMMENT": "Ajouter un commentaire",
    "REST": "Reste du compte",
    "REST_TO": "Ã ",
    "WARN_COMMENT_IS_PUBLIC": "Veuillez noter que <b>les commentaires sont publics</b> (non chiffrÃ©s).",
    "MODAL": {
      "TITLE": "Virement"
    }
  },
  "ERROR": {
    "UNKNOWN_URI_FORMAT": "Format d'URI inconnu",
    "PUBKEY_INVALID_CHECKSUM": "ClÃ© publique invalide (bad checksum).",
    "POPUP_TITLE": "Erreur",
    "UNKNOWN_ERROR": "Erreur inconnue",
    "CRYPTO_UNKNOWN_ERROR": "Votre navigateur ne semble pas compatible avec les fonctionnalitÃ©s de cryptographie.",
    "DOWNLOAD_KEYFILE_FAILED": "Echec de le gÃ©nÃ©ration du fichier de trousseau.",
    "EQUALS_TO_PSEUDO": "Doit Ãªtre diffÃ©rent du pseudonyme",
    "EQUALS_TO_SALT": "Doit Ãªtre diffÃ©rent de l'identifiant secret",
    "FIELD_REQUIRED": "Champ obligatoire.",
    "FIELD_TOO_SHORT": "Valeur trop courte.",
    "FIELD_TOO_SHORT_WITH_LENGTH": "Valeur trop courte ({{minLength}} caractÃ¨res min)",
    "FIELD_TOO_LONG": "Valeur trop longue",
    "FIELD_TOO_LONG_WITH_LENGTH": "Valeur trop longue ({{maxLength}} caractÃ¨res max)",
    "FIELD_MIN": "Valeur minimale : {{min}}",
    "FIELD_MAX": "Valeur maximale : {{max}}",
    "FIELD_ACCENT": "CaractÃ¨res accentuÃ©s et virgules non autorisÃ©s",
    "FIELD_NOT_NUMBER": "Valeur numÃ©rique attendue",
    "FIELD_NOT_INT": "Valeur entiÃ¨re attendue",
    "FIELD_NOT_EMAIL": "Adresse email non valide",
    "PASSWORD_NOT_CONFIRMED": "Ne correspond pas au mot de passe.",
    "SALT_NOT_CONFIRMED": "Ne correspond pas Ã  l'identifiant secret.",
    "SEND_IDENTITY_FAILED": "Echec de l'inscription.",
    "SEND_CERTIFICATION_FAILED": "Echec de la certification.",
    "NEED_MEMBER_ACCOUNT_TO_CERTIFY": "Vous ne pouvez pas effectuer de certification, car votre compte n'est <b>pas membre</b>.",
    "NEED_MEMBER_ACCOUNT_TO_CERTIFY_HAS_SELF": "Vous ne pouvez pas effectuer de certification, car votre compte n'est pas encore membre.<br/><br/>Il vous manque encore des certifications, ou bien celles-ci n'ont pas encore Ã©tÃ© validÃ©es.",
    "NOT_MEMBER_FOR_CERTIFICATION": "Votre compte n'est pas encore membre.",
    "IDENTITY_TO_CERTIFY_HAS_NO_SELF": "Compte non certifiable. Aucune demande d'adhÃ©sion n'a Ã©tÃ© faite, ou bien elle n'a pas Ã©tÃ© renouvellÃ©e.",
    "LOGIN_FAILED": "Erreur lors de la connexion.",
    "LOAD_IDENTITY_FAILED": "Erreur de chargement de l'identitÃ©.",
    "LOAD_REQUIREMENTS_FAILED": "Erreur de chargement des prÃ©requis de l'identitÃ©.",
    "SEND_MEMBERSHIP_IN_FAILED": "Echec de la tentative d'entrÃ©e dans la communautÃ©.",
    "SEND_MEMBERSHIP_OUT_FAILED": "Echec de l'arret de l'adhÃ©sion.",
    "REFRESH_WALLET_DATA": "Echec du rafraichissement du portefeuille.",
    "GET_CURRENCY_PARAMETER": "Echec de la rÃ©cupÃ©ration des rÃ¨gles de la monnaie.",
    "GET_CURRENCY_FAILED": "Chargement de la monnaie impossible. Veuillez ressayer plus tard.",
    "SEND_TX_FAILED": "Echec du virement.",
    "ALL_SOURCES_USED": "Veuillez attendre le calcul du prochain bloc (Toutes vos sources de monnaie ont Ã©tÃ© utilisÃ©es).",
    "NOT_ENOUGH_SOURCES": "Pas assez de change pour envoyer ce montant en une seule transaction.<br/>Montant maximum : {{amount}} {{unit}}<sub>{{subUnit}}</sub>.",
    "ACCOUNT_CREATION_FAILED": "Echec de la crÃ©ation du compte membre.",
    "RESTORE_WALLET_DATA_ERROR": "Echec du rechargement des paramÃ¨tres depuis le stockage local",
    "LOAD_WALLET_DATA_ERROR": "Echec du chargement des donnÃ©es du portefeuille.",
    "COPY_CLIPBOARD_FAILED": "Copie de la valeur impossible.",
    "TAKE_PICTURE_FAILED": "Echec de la rÃ©cupÃ©ration de la photo.",
    "SCAN_FAILED": "Echec du scan de QR code",
    "SCAN_UNKNOWN_FORMAT": "Code non reconnu.",
    "WOT_LOOKUP_FAILED": "Echec de la recherche",
    "LOAD_PEER_DATA_FAILED": "Lecture du nÅud Duniter impossible. Veuillez rÃ©essayer ultÃ©rieurement.",
    "NEED_LOGIN_FIRST": "Veuillez d'abord vous connecter.",
    "AMOUNT_REQUIRED": "Le montant est obligatoire.",
    "AMOUNT_NEGATIVE": "Montant nÃ©gatif non autorisÃ©.",
    "NOT_ENOUGH_CREDIT": "CrÃ©dit insufisant.",
    "INVALID_NODE_SUMMARY": "NÅud injoignable ou adresse invalide.",
    "INVALID_USER_ID": "Le pseudonyme ne doit contenir ni espace ni caractÃ¨re spÃ©cial ou accentuÃ©.",
    "INVALID_COMMENT": "Le champ 'rÃ©fÃ©rence' ne doit pas contenir de caractÃ¨res accentuÃ©s.",
    "INVALID_PUBKEY": "La clÃ© publique n'a pas le format attendu.",
    "INVALID_PUBKEY_CHECKSUM": "Somme de contrÃ´le invalide.",
    "IDENTITY_REVOKED": "Cette identitÃ© <b>a Ã©tÃ© rÃ©voquÃ©e {{revocationTime|formatFromNow}}</b> ({{revocationTime|formatDate}}). Elle ne peut plus devenir membre.",
    "IDENTITY_PENDING_REVOCATION": "La <b>rÃ©vocation de cette identitÃ©</b> a Ã©tÃ© demandÃ©e et est en attente de traitement. La certification est donc dÃ©sactivÃ©e.",
    "IDENTITY_INVALID_BLOCK_HASH": "Cette demande d'adhÃ©sion n'est plus valide (car elle rÃ©fÃ©rence un bloc que les nÅuds du rÃ©seau ont annulÃ©) : cette personne doit renouveler sa demande d'adhÃ©sion <b>avant</b> d'Ãªtre certifiÃ©e.",
    "IDENTITY_EXPIRED": "La publication de cette identitÃ© a expirÃ©e : cette personne doit effectuer une nouvelle demande d'adhÃ©sion <b>avant</b> d'Ãªtre certifiÃ©e.",
    "IDENTITY_SANDBOX_FULL": "Le nÅud Duniter utilisÃ© par Cesium ne peut plus recevoir de nouvelles identitÃ©s, car sa file d'attente est pleine.<br/><br/>Veuillez rÃ©essayer ultÃ©rieurement ou changer de nÅud (via le menu <b>ParamÃ¨tres</b>).",
    "IDENTITY_NOT_FOUND": "IdentitÃ© non trouvÃ©e",
    "IDENTITY_TX_FAILED": "Echec du chargement des opÃ©rations",
    "WOT_PENDING_INVALID_BLOCK_HASH": "AdhÃ©sion non valide.",
    "WALLET_INVALID_BLOCK_HASH": "Votre demande d'adhÃ©sion n'est plus valide (car elle rÃ©fÃ©rence un bloc que les nÅuds du rÃ©seau ont annulÃ©).<br/>Vous devez <a ng-click=\"doQuickFix('fixMembership')\">envoyer une nouvelle demande</a> pour rÃ©soudre ce problÃ¨me.",
    "WALLET_IDENTITY_EXPIRED": "La publication de <b>votre identitÃ© a expirÃ©e</b>.<br/>Vous devez <a ng-click=\"doQuickFix('fixIdentity')\">publier Ã  nouveau votre identitÃ©</a> pour rÃ©soudre ce problÃ¨me.",
    "WALLET_REVOKED": "Votre identitÃ© a Ã©tÃ© <b>rÃ©voquÃ©e</b> : ni votre pseudonyme ni votre clef publique ne pourront Ãªtre utilisÃ©s Ã  l'avenir pour un compte membre.",
    "WALLET_HAS_NO_SELF": "Votre identitÃ© doit d'abord avoir Ã©tÃ© publiÃ©e, et ne pas Ãªtre expirÃ©e.",
    "AUTH_REQUIRED": "Authentification requise.",
    "AUTH_INVALID_PUBKEY": "La clef attendue est <i class=\"ion-key\"></i> {{pubkey|formatPubkey}}...",
    "AUTH_INVALID_SCRYPT": "Identifiant ou mot de passe invalide.",
    "AUTH_INVALID_FILE": "Fichier de trousseau invalide.",
    "AUTH_FILE_ERROR": "Echec de l'ouverture du fichier de trousseau",
    "IDENTITY_ALREADY_CERTIFY": "Vous avez <b>dÃ©jÃ  certifiÃ©</b> cette identitÃ©.<br/><br/>Cette certification est encore valide (expiration {{expiresIn|formatDurationTo}}).",
    "IDENTITY_ALREADY_CERTIFY_PENDING": "Vous avez <b>dÃ©jÃ  certifiÃ©</b> cette identitÃ©.<br/><br/>Cette certification est en attente de traitement (date limite de traitement {{expiresIn|formatDurationTo}}).",
    "UNABLE_TO_CERTIFY_TITLE": "Certification impossible",
    "LOAD_NEWCOMERS_FAILED": "Echec du chargement des nouveaux membres.",
    "LOAD_PENDING_FAILED": "Echec du chargement des inscriptions en attente.",
    "ONLY_MEMBER_CAN_EXECUTE_THIS_ACTION": "Vous devez <b>Ãªtre membre</b> pour pouvoir effectuer cette action.",
    "ONLY_SELF_CAN_EXECUTE_THIS_ACTION": "Vous devez avoir <b>publiÃ© votre identitÃ©</b> pour pouvoir effectuer cette action.",
    "GET_BLOCK_FAILED": "Echec de la rÃ©cupÃ©ration du bloc",
    "INVALID_BLOCK_HASH": "Bloc non trouvÃ© (hash diffÃ©rent)",
    "DOWNLOAD_REVOCATION_FAILED": "Echec du tÃ©lÃ©chargement du fichier de rÃ©vocation.",
    "REVOCATION_FAILED": "Echec de la rÃ©vocation.",
    "SALT_OR_PASSWORD_NOT_CONFIRMED": "Identifiant secret ou mot de passe incorrects",
    "RECOVER_ID_FAILED": "Echec de la rÃ©cupÃ©ration des identifiants",
    "LOAD_FILE_FAILED" : "Echec du chargement du fichier",
    "NOT_VALID_REVOCATION_FILE": "Fichier de revocation non valide (mauvais format de fichier)",
    "NOT_VALID_SAVE_ID_FILE": "Fichier de rÃ©cupÃ©ration non valide (mauvais format de fichier)",
    "NOT_VALID_KEY_FILE": "Fichier de trousseau non valide (format non reconnu)",
    "EXISTING_ACCOUNT": "Vos identifiants correspondent Ã  un compte dÃ©jÃ  existant, dont la <a ng-click=\"showHelpModal('pubkey')\">clef publique</a> est :",
    "EXISTING_ACCOUNT_REQUEST": "Veuillez modifier vos identifiants afin qu'ils correspondent Ã  un compte non utilisÃ©.",
    "GET_LICENSE_FILE_FAILED": "RÃ©cupÃ©rer du fichier de licence impossible",
    "CHECK_NETWORK_CONNECTION": "Aucun nÅud ne semble accessible.<br/><br/>Veuillez <b>vÃ©rifier votre connection Internet</b>.",
    "ISSUE_524_TX_FAILED": "Echec du virement.<br/><br/>Un message a Ã©tÃ© envoyÃ© aux dÃ©veloppeurs pour faciliter la rÃ©solution du problÃ¨me. <b>Merci de votre aide</b>.",
    "ADD_SECONDARY_WALLET_FAILED": "Echec de l'ajout du portefeuille secondaire.",
    "UPDATE_WALLET_LIST_FAILED": "Echec du rafraichissement des portefeuilles secondaires.",
    "LOAD_WALLET_LIST_FAILED": "Echec du chargement des portefeuilles secondaires.",
    "SAVE_WALLET_LIST_FAILED": "Echec de la sauvegarde des portefeuilles secondaires.",
    "COULD_NOT_ADD_MAIN_WALLET": "Le portefeuille Ã  ajouter <b>doit Ãªtre diffÃ©rent du compte principal</b> avec lequel vous Ãªtes connectÃ©.",
    "UNKNOWN_WALLET_ID": "Portefeuille secondaire inconnu."
  },
  "INFO": {
    "POPUP_TITLE": "Information",
    "CERTIFICATION_DONE": "Certification envoyÃ©e",
    "NOT_ENOUGH_CREDIT": "CrÃ©dit insuffisant",
    "TRANSFER_SENT": "Virement envoyÃ©",
    "COPY_TO_CLIPBOARD_DONE": "CopiÃ© dans le presse-papier",
    "MEMBERSHIP_OUT_SENT": "RÃ©siliation envoyÃ©e",
    "NOT_NEED_MEMBERSHIP": "Vous Ãªtes dÃ©jÃ  membre.",
    "IDENTITY_WILL_MISSING_CERTIFICATIONS": "Cette identitÃ© va bientÃ´t manquer de certification (au moins {{willNeedCertificationCount}}).",
    "IDENTITY_NEED_MEMBERSHIP": "Cette identitÃ© n'a pas envoyÃ©e de demande d'adhÃ©sion. Elle devra si elle souhaite devenir membre.",
    "REVOCATION_SENT": "Revocation envoyÃ©e",
    "REVOCATION_SENT_WAITING_PROCESS": "La <b>rÃ©vocation de cette identitÃ©</b> a Ã©tÃ© demandÃ©e et est en attente de traitement.",
    "FEATURES_NOT_IMPLEMENTED": "Cette fonctionnalitÃ© est encore en cours de dÃ©veloppement.<br/>Pourquoi ne pas <b>contribuer Ã  Cesium</b>, pour l'obtenir plus rapidement ? ;)",
    "EMPTY_TX_HISTORY": "Aucune opÃ©ration Ã  exporter"
  },
  "CONFIRM": {
    "POPUP_TITLE": "<b>Confirmation</b>",
    "POPUP_WARNING_TITLE": "<b>Avertissement</b>",
    "POPUP_SECURITY_WARNING_TITLE": "<i class=\"icon ion-alert-circled\"></i> <b>Avertissement de sÃ©curitÃ©</b>",
    "CERTIFY_RULES_TITLE_UID": "Certifier {{uid}}",
    "CERTIFY_RULES": "<b class=\"assertive\">Ne PAS certifier</b> un compte si vous pensez que :<br/><br/><ul><li>1.) il ne correspond pas Ã  une personne <b>physique et vivante</b>.<li>2.) son propriÃ©taire <b>possÃ¨de un autre compte</b> dÃ©jÃ  certifiÃ©.<li>3.) son propriÃ©taire viole (volontairement ou non) la rÃ¨gle 1 ou 2 (par exemple en certifiant des comptes factices ou en double).</ul><br/><b>Etes-vous sÃ»r</b> de vouloir nÃ©anmoins certifier cette identitÃ© ?",
    "TRANSFER": "<b>RÃ©capitulatif du virement</b> :<br/><br/><ul><li> - De : {{from}}</li><li> - A : <b>{{to}}</b></li><li> - Montant : <b>{{amount}} {{unit}}</b></li><li> - Commentaire : <i>{{comment}}</i></li></ul><br/><b>Etes-vous sÃ»r de vouloir effectuer ce virement ?</b>",
    "TRANSFER_ALL": "<b>RÃ©capitulatif du virement</b> :<br/><br/><ul><li> - De : {{from}}</li><li> - A : <b>{{to}}</b></li><li> - Montant : <b>{{amount}} {{unit}}</b></li><li> - Commentaire : <i>{{comment}}</i></li><br/><li> - Reste : <b>{{restAmount}} {{unit}}</b> Ã  <b>{{restTo}}</b></li></ul><br/><b>Etes-vous sÃ»r de vouloir effectuer ce virement ?</b>",
    "MEMBERSHIP_OUT": "Cette opÃ©ration est <b>irrÃ©versible</b>.<br/></br/>Etes-vous sÃ»r de vouloir <b>rÃ©silier votre compte membre</b> ?",
    "MEMBERSHIP_OUT_2": "Cette opÃ©ration est <b>irreversible</b> !<br/><br/>Etes-vous vraiment sÃ»r de vouloir <b>rÃ©silier votre adhÃ©sion</b> comme membre ?",
    "LOGIN_UNUSED_WALLET_TITLE": "Erreur de saisie ?",
    "LOGIN_UNUSED_WALLET": "Le compte connectÃ© semble <b>inactif</b>.<br/><br/>Il s'agit probablement d'une <b>erreur de saisie</b> dans vos identifiants de connexion. Veuillez recommencer, en vÃ©rifiant que <b>la clÃ© publique est celle de votre compte</b>.",
    "FIX_IDENTITY": "Le pseudonyme <b>{{uid}}</b> va Ãªtre publiÃ©e Ã  nouveau, en remplacement de l'ancienne publication qui a expirÃ©e.<br/></br/><b>Etes-vous sÃ»r</b> de vouloir continuer ?",
    "FIX_MEMBERSHIP": "Votre demande d'adhÃ©sion comme membre va Ãªtre renvoyÃ©e.<br/></br/><b>Etes-vous sÃ»r</b> de vouloir continuer ?",
    "MEMBERSHIP": "Votre demande d'adhÃ©sion comme membre va Ãªtre envoyÃ©e.<br/></br/><b>Etes-vous sÃ»r</b> de vouloir continuer ?",
    "RENEW_MEMBERSHIP": "Votre adhÃ©sion comme membre va Ãªtre renouvellÃ©e.<br/></br/><b>Etes-vous sÃ»r</b> de vouloir continuer ?",
    "REVOKE_IDENTITY": "Vous allez <b>revoquer dÃ©finitivement cette identitÃ©</b>.<br/><br/>La clÃ© publique et le pseudonyme associÃ©s <b>ne pourront plus jamais Ãªtre utilisÃ©s</b> (pour un compte membre). <br/></br/><b>Etes-vous sÃ»r</b> de vouloir rÃ©voquer dÃ©finitivement ce compte ?",
    "REVOKE_IDENTITY_2": "Cette opÃ©ration est <b>irreversible</b> !<br/><br/>Etes-vous vraiment sÃ»r de vouloir <b>rÃ©voquer dÃ©finitivement</b> ce compte ?",
    "NOT_NEED_RENEW_MEMBERSHIP": "Votre adhÃ©sion n'a pas besoin d'Ãªtre renouvellÃ©e (elle n'expirera que dans {{membershipExpiresIn|formatDuration}}).<br/></br/><b>Etes-vous sÃ»r</b> de vouloir renouveler votre adhÃ©sion ?",
    "SAVE_BEFORE_LEAVE": "Voulez-vous <b>sauvegarder vos modifications</b> avant de quitter la page ?",
    "SAVE_BEFORE_LEAVE_TITLE": "Modifications non enregistrÃ©es",
    "LOGOUT": "Etes-vous sÃ»r de vouloir vous dÃ©connecter ?",
    "USE_FALLBACK_NODE": "NÅud <b>{{old}}</b> injoignable ou adresse invalide.<br/><br/>Voulez-vous temporairement utiliser le nÅud <b>{{new}}</b> ?",
    "ISSUE_524_SEND_LOG": "La transaction a Ã©tÃ© rejettÃ©e, Ã  cause d'une anomalie connue (ticket #524) mais <b>non reproduite</b>.<br/><br/>Pour nous aider les dÃ©veloppeurs Ã  corriger cette erreur, <b>acceptez-vous la transmission de vos logs</b> par message ?<br/><small>(Aucune donnÃ©e confidentielle n'est envoyÃ©e)</small>."
  },
  "DOWNLOAD": {
    "POPUP_TITLE": "<b>Fichier de rÃ©vocation</b>",
    "POPUP_REVOKE_MESSAGE": "Pour sÃ©curiser votre compte, veuillez tÃ©lÃ©charger le <b>document de rÃ©vocation de compte</b>. Il vous permettra le cas Ã©chÃ©ant d'annuler votre compte (en cas d'un vol de compte, d'un changement d'identifiant, d'un compte crÃ©Ã© Ã  tort, etc.).<br/><br/><b>Veuillez le stocker en lieu sÃ»r.</b>"
  },
  "HELP": {
    "TITLE": "Aide en ligne",
    "JOIN": {
      "SECTION": "Inscription",
      "SALT": "L'identifiant secret est trÃ¨s important. Il sert Ã  mÃ©langer le mot de passe, avant qu'il ne servent Ã  calculer la <span class=\"text-italic\">clÃ© publique</span> de votre compte (son numÃ©ro) et la clÃ© secrÃ¨te pour y accÃ©der.<br/><b>Veuillez Ã  bien la mÃ©moriser</b>, car aucun moyen n'est actuellement prÃ©vu pour la retrouver en cas de perte.<br/>Par ailleurs, il ne peut pas Ãªtre modifiÃ© sans devoir crÃ©er un nouveau compte.<br/><br/>Un bon identifiant secret doit Ãªtre suffisamment long (au moins 8 caractÃ¨res) et le plus original possible.",
      "PASSWORD": "Le mot de passe est trÃ¨s important. Avec l'identifiant secret, il sert Ã  Ã  calculer le numÃ©ro (la clÃ© publique) de votre compte, et la clÃ© secrÃ¨te pour y accÃ©der.<br/><b>Veuillez Ã  bien le mÃ©moriser</b>, car aucun moyen n'est de le retrouver en cas de perte (sauf Ã  gÃ©nÃ©rer un fichier de sauvegarde).<br/>Par ailleurs, il ne peut pas Ãªtre modifiÃ© sans devoir crÃ©er un nouveau compte.<br/><br/>Un bon mot de passe contient (idÃ©alement) au moins 8 caractÃ¨res, dont au moins une majuscule et un chiffre.",
      "PSEUDO": "Le pseudonyme utilisÃ© uniquement dans le cas d'inscription comme <span class=\"text-italic\">membre</span>. Il est toujours associÃ© Ã  un portefeuille (via sa <span class=\"text-italic\">clÃ© publique</span>).<br/>Il est publiÃ© sur le rÃ©seau, afin que les autres utilisateurs puisse l'identifier, le certifier ou envoyer de la monnaie sur le compte.<br/>Un pseudonyme doit Ãªtre unique au sein des membres (<u>actuels</u> et anciens)."
    },
    "LOGIN": {
      "SECTION": "Connexion",
      "PUBKEY": "ClÃ© publique du trousseau",
      "PUBKEY_DEF": "La clef publique du trousseau est gÃ©nÃ©rÃ©e Ã  partir des identifiants saisis (n'importe lesquels), sans pour autant qu'ils correspondent Ã  un compte dÃ©jÃ  utilisÃ©.<br/><b>VÃ©rifiez attentivement que la clÃ© publique est celle de votre compte</b>. Dans le cas contraire, vous serez connectÃ© Ã  un compte probablement jamais utilisÃ©, le risque de collision avec un compte existant Ã©tant infime.<br/><a href=\"https://fr.wikipedia.org/wiki/Cryptographie_asym%C3%A9trique\" target=\"_system\">En savoir plus sur la cryptographie</a> par clÃ© publique.",
      "METHOD": "MÃ©thodes de connexion",
      "METHOD_DEF": "Plusieurs options sont disponibles pour vous connecter Ã  un portfeuille :<br/> - La connexion <b>par sallage (simple ou avancÃ©)</b> mÃ©lange votre mot de passe grÃ¢ce Ã  l'identifiant secret, pour limiter les tentatives de <a href=\"https://fr.wikipedia.org/wiki/Attaque_par_force_brute\" target=\"_system\">piratage par force brute</a> (par exemple Ã  partir de mots connus).<br/> - La connexion <b>par clÃ© publique</b> Ã©vite de saisir vos identifiants, qui vous seront demandÃ© seulement le moment venu lors d'une opÃ©ration sur le compte.<br/> - La connexion <b>par fichier de trousseau</b> va lire les clÃ©s (publique et privÃ©e) du compte, depuis un fichier, sans besoin de saisir d'identifiants. Plusieurs formats de fichier sont possibles."
    },
    "GLOSSARY": {
      "SECTION": "Glossaire",
      "PUBKEY_DEF": "Une clÃ© publique identifie un portefeuille de monnaie, qui peut identifier un membre ou correspondre Ã  un portefeuille anonyme. Dans Cesium la clÃ© publique est calculÃ©e (par dÃ©faut) grÃ¢ce Ã  l'identifiant secret et au mot de passe.<br/><a href=\"https://fr.wikipedia.org/wiki/Cryptographie_asym%C3%A9trique\" target=\"_system\">En savoir plus sur la cryptographie</a> par clÃ© publique.",
      "MEMBER": "Membre",
      "MEMBER_DEF": "Un membre est une personne humaine physique et vivante, dÃ©sireuse de participer librement Ã  la communautÃ© monÃ©taire. Elle percoit un dividende universel, suivant une pÃ©riode et un montant tels que dÃ©finis dans les <span class=\"text-italic\">rÃ¨gles de la monnaie</span>",
      "CURRENCY_RULES": "RÃ¨gles de la monnaie",
      "CURRENCY_RULES_DEF": "Les rÃ¨gles de la monnaie sont dÃ©finies une fois pour toute. Elle fixe le fonctionnement de la monnaie : le calcul du dividend universel, le nombre de certifications nÃ©cessaire pour Ãªtre membre, le nombre de certification maximum qu'un membre peut donner, etc. <a href=\"#/app/currency\">Voir les rÃ¨gles actuelles</a>.<br/>La non modification des rÃ¨gles dans le temps est possible par l'utilisation d'une <span class=\"text-italic\">BlockChain</span> qui porte et execute ces rÃ¨gles, et en vÃ©rifie constamment la bonne application.",
      "BLOCKCHAIN": "ChaÃ®ne de blocs (<span class=\"text-italic\">Blockchain</span>)",
      "BLOCKCHAIN_DEF": "La BlockChain est un systÃ¨me dÃ©centralisÃ©, qui, dans le cas de Duniter, sert Ã  porter et executer les <span class=\"text-italic\">rÃ¨gles de la monnaie</span>.<br/><a href=\"https://duniter.org/fr/comprendre/\" target=\"_system\">En savoir plus sur Duniter</a> et le fonctionnement de sa blockchain.",
      "UNIVERSAL_DIVIDEND_DEF": "Le Dividende Universel (DU) est la quantitÃ© de monnaie co-crÃ©Ã©e par chaque membre, suivant la pÃ©riode et le calcul dÃ©finie dans les <span class=\"text-italic\">rÃ¨gles de la monnaie</span>.<br/>A chaque Ã©chÃ©ance, les membres recoivent sur leur compte la meme quantitÃ© de nouvelle monnaie.<br/><br/>Le DU subit une croissance rÃ©guliÃ¨re, pour rester juste entre les membres (actuels et Ã  venir), calculÃ©e en fonction de l'espÃ©rance de vie moyenne, telle que dÃ©montrÃ© dans la ThÃ©rorie Relative de la Monnaie (TRM).<br/><a href=\"http://trm.creationmonetaire.info\" target=\"_system\">En savoir plus sur la TRM</a> et les monnaies libres."
    },
    "TIP": {
      "MENU_BTN_CURRENCY": "Le menu <b>{{'MENU.CURRENCY'|translate}}</b> permet la consultation des <b>rÃ¨gles de la monnaie</b> et de son Ã©tat.",
      "CURRENCY_WOT": "Le <b>nombre de membres</b> montre l'importance de la communautÃ© et permet de <b>suivre son Ã©volution</b>.",
      "CURRENCY_MASS": "Suivez ici la <b>quantitÃ© totale de monnaie</b> existante et sa <b>rÃ©partition moyenne</b> par membre.<br/><br/>Ceci permet de juger de l'<b>importance d'un montant</b>, vis Ã  vis de ce que <b>possÃ¨de les autres</b> sur leur compte (en moyenne).",
      "CURRENCY_UNIT_RELATIVE": "L'unitÃ© utilisÃ©e (&ldquo;<b>{{'COMMON.UD'|translate}}<sub>{{currency|abbreviate}}</sub></b>&rdquo;) signifie que les montants en {{currency|capitalize}} ont Ã©tÃ© divisÃ©s par le <b>Dividende Universel</b> (DU).<br/><br/><small>Cette unitÃ© relative est <b>pertinente</b>, car stable malgrÃ© la quantitiÃ© de monnaie qui augmente en permanence.</small>",
      "CURRENCY_CHANGE_UNIT": "L'option <b>{{'COMMON.BTN_RELATIVE_UNIT'|translate}}</b> permet de <b>changer d'unitÃ©</b>, pour visualiser les montants <b>directement en {{currency|capitalize}}</b> (plutÃ´t qu'en &ldquo;<b>{{'COMMON.UD'|translate}}<sub>{{currency|abbreviate}}</sub></b>&rdquo;).",
      "CURRENCY_CHANGE_UNIT_TO_RELATIVE": "L'option <b>{{'COMMON.BTN_RELATIVE_UNIT'|translate}}</b> permet de <b>changer d'unitÃ©</b>, pour visualiser les montants en &ldquo;<b>{{'COMMON.UD'|translate}}<sub>{{currency|abbreviate}}</sub></b>&rdquo;, c'est Ã  dire relativement au Dividende Universel (le montant co-produit par chaque membre).",
      "CURRENCY_RULES": "Les <b>rÃ¨gles</b> de la monnaie fixent son fonctionnement <b>exact et prÃ©visible</b>.<br/><br/>VÃ©ritable ADN de la monnaie, elles rendent son code monÃ©taire <b>lisible et transparent</b>.",
      "MENU_BTN_NETWORK": "Le menu <b>{{'MENU.NETWORK'|translate}}</b> permet la consultation de l'Ã©tat du rÃ©seau.",
      "NETWORK_BLOCKCHAIN": "Toutes les opÃ©rations de la monnaie sont enregistrÃ©es dans un grand livre de compte <b>public et infalsifiable</b>, appellÃ© aussi <b>chaine de blocs</b> (<em>BlockChain</em> en anglais).",
      "NETWORK_PEERS": "Les <b>nÅuds</b> visibles ici correspondent aux <b>ordinateurs qui actualisent et contrÃ´lent</b> la chaine de blocs.<br/><br/>Plus il y a de nÅuds, plus la monnaie Ã  une gestion <b>dÃ©centralisÃ©e</b> et digne de confiance.",
      "NETWORK_PEERS_BLOCK_NUMBER": "Ce <b>numÃ©ro</b> (en vert) indique le <b>dernier bloc validÃ©</b> pour ce nÅud (derniÃ¨re page Ã©crite dans le grand livre de comptes).<br/><br/>La couleur verte indique que ce bloc est Ã©galement validÃ© par <b>la plupart des autres nÅuds</b>.",
      "NETWORK_PEERS_PARTICIPATE": "<b>Chaque membre</b>, Ã©quipÃ© d'un ordinateur avec Internet, <b>peut participer en ajoutant un nÅud</b>. Il suffit d'<b>installer le logiciel Duniter</b> (libre et gratuit). <a href=\"{{installDocUrl}}\" target=\"_system\">Voir le manuel d'installation &gt;&gt;</a>.",
      "MENU_BTN_ACCOUNT": "Le menu <b>{{'ACCOUNT.TITLE'|translate}}</b> permet d'accÃ©der Ã  la gestion de votre compte.",
      "MENU_BTN_ACCOUNT_MEMBER": "Consultez ici l'Ã©tat de votre compte et les informations sur vos certifications.",
      "WALLET_CERTIFICATIONS": "Cliquez ici pour consulter le dÃ©tail de vos certifications (reÃ§ues et Ã©mises).",
      "WALLET_RECEIVED_CERTIFICATIONS": "Cliquez ici pour consulter le dÃ©tail de vos <b>certifications reÃ§ues</b>.",
      "WALLET_GIVEN_CERTIFICATIONS": "Cliquez ici pour consulter le dÃ©tail de vos <b>certifications Ã©mises</b>.",
      "WALLET_BALANCE": "Le <b>solde</b> de votre compte s'affiche ici.",
      "WALLET_BALANCE_RELATIVE": "{{'HELP.TIP.WALLET_BALANCE'|translate}}<br/><br/>L'unitÃ© utilisÃ©e (&ldquo;<b>{{'COMMON.UD'|translate}}<sub>{{currency|abbreviate}}</sub></b>&rdquo;) signifie que le montant en {{currency|capitalize}} a Ã©tÃ© divisÃ© par le <b>Dividende Universel</b> (DU) co-crÃ©Ã© par chaque membre.<br/><br/>Actuellement 1 DU vaut {{currentUD|formatInteger}} {{currency|capitalize}}s.",
      "WALLET_BALANCE_CHANGE_UNIT": "Vous pourrez <b>changer l'unitÃ©</b> d'affichage des montants dans les <b><i class=\"icon ion-android-settings\"></i>&nbsp;{{'MENU.SETTINGS'|translate}}</b>.<br/><br/>Par exemple pour visualiser les montants <b>directement en {{currency|capitalize}}</b>, plutÃ´t qu'en unitÃ© relative.",
      "WALLET_PUBKEY": "Voici la clÃ© publique de votre compte. Vous pouvez la communiquer Ã  un tiers afin qu'il identifie plus simplement votre compte.",
      "WALLET_SEND": "Effectuer un paiement en quelques clics",
      "WALLET_SEND_NO_MONEY": "Effectuer un paiement en quelques clics.<br/>(Votre solde ne le permet pas encore)",
      "WALLET_OPTIONS": "Ce bouton permet l'accÃ¨s aux <b>actions d'adhÃ©sion</b> et de sÃ©curitÃ©.<br/><br/>N'oubliez pas d'y jeter un oeil !",
      "WALLET_RECEIVED_CERTS": "S'affichera ici la liste des personnes qui vous ont certifiÃ©.",
      "WALLET_CERTIFY": "Le bouton <b>{{'WOT.BTN_SELECT_AND_CERTIFY'|translate}}</b> permet de sÃ©lectionner une identitiÃ© et de la certifier.<br/><br/>Seuls des utilisateurs <b>dÃ©jÃ  membre</b> peuvent en certifier d'autres.",
      "WALLET_CERT_STOCK": "Votre stock de certification (Ã©mises) est limitÃ© Ã  <b>{{sigStock}} certifications</b>.<br/><br/>Ce stock se renouvelle avec le temps, au fur et Ã  mesure que les certifications s'invalident.",
      "MENU_BTN_TX_MEMBER": "Le menu <b>{{'MENU.TRANSACTIONS'|translate}}</b> permet de consulter votre solde, l'historique vos transactions et d'envoyer un paiement.",
      "MENU_BTN_TX": "Consultez ici <b>l'historique de vos transactions</b> et effectuer de nouvelles opÃ©rations.",
      "MENU_BTN_WOT": "Le menu <b>{{'MENU.WOT'|translate}}</b> permet de rechercher parmi les <b>utilisateurs</b> de la monnaie (membre ou non).",
      "WOT_SEARCH_TEXT_XS": "Pour rechercher dans l'annuaire, tapez les <b>premiÃ¨res lettres d'un pseudonyme</b> (ou d'une clÃ© publique).<br/><br/>La recherche se lancera automatiquement.",
      "WOT_SEARCH_TEXT": "Pour rechercher dans l'annuaire, tapez les <b>premiÃ¨res lettres d'un pseudonyme</b> (ou d'une clÃ© publique). <br/><br/>Appuyer ensuite sur <b>EntrÃ©e</b> pour lancer la recherche.",
      "WOT_SEARCH_RESULT": "Visualisez la fiche dÃ©taillÃ©e simplement en <b>cliquant</b> sur une ligne.",
      "WOT_VIEW_CERTIFICATIONS": "La ligne <b>{{'ACCOUNT.CERTIFICATION_COUNT'|translate}}</b> montre combien de membres ont validÃ©s cette identitÃ©.<br/><br/>Ces certifications attestent que le compte appartient Ã  <b>une personne humaine vivante</b> n'ayant <b>aucun autre compte membre</b>.",
      "WOT_VIEW_CERTIFICATIONS_COUNT": "Il faut au moins <b>{{sigQty}} certifications</b> pour devenir membre et recevoir le <b>Dividende Universel</b>.",
      "WOT_VIEW_CERTIFICATIONS_CLICK": "Un clic ici permet d'ouvrir <b>la liste de toutes les certifications</b> de l'identitÃ© (reÃ§ues et Ã©mises).",
      "WOT_VIEW_CERTIFY": "Le bouton <b>{{'WOT.BTN_CERTIFY'|translate}}</b> permet d'ajouter votre certification Ã  cette identitÃ©.",
      "CERTIFY_RULES": "<b>Attention :</b> Ne certifier que des <b>personnes physiques vivantes</b>, ne possÃ¨dant aucun autre compte membre.<br/><br/>La sÃ©curitÃ© de la monnaie dÃ©pend de la vigilance de chacun !",
      "MENU_BTN_SETTINGS": "Les <b>{{'MENU.SETTINGS'|translate}}</b> vous permettront de configurer l'application.",
      "HEADER_BAR_BTN_PROFILE": "Cliquez ici pour accÃ©der Ã  votre <b>profil utilisateur</b>",
      "SETTINGS_CHANGE_UNIT": "Vous pourrez <b>changer d'unitÃ© d'affichage</b> des montants en cliquant ci-dessus.<br/><br/>- DÃ©sactivez l'option pour un affichage des montants en {{currency|capitalize}}.<br/>- Activez l'option pour un affichage relatif en {{'COMMON.UD'|translate}}<sub>{{currency|abbreviate}}</sub> (tous les montants seront <b>divisÃ©s</b> par le Dividende Universel courant).",
      "END_LOGIN": "Cette visite guidÃ©e est <b>terminÃ©e</b> !<br/><br/>Bonne continuation Ã  vous, dans le nouveau monde de l'<b>Ã©conomie libre</b> !",
      "END_NOT_LOGIN": "Cette visite guidÃ©e est <b>terminÃ©e</b> !<br/><br/>Si vous souhaitez rejoindre la monnaie {{currency|capitalize}}, il vous suffira de cliquer sur <b>{{'LOGIN.CREATE_ACCOUNT'|translate}}</b> ci-dessous."
    }
  },
  "API" :{
    "COMMON": {
      "LINK_DOC": "documentation API",
      "LINK_DOC_HELP": "Documentation pour les dÃ©veloppeurs",
      "LINK_STANDARD_APP": "version classique",
      "LINK_STANDARD_APP_HELP": "Ouvrir la version classique de {{'COMMON.APP_NAME'|translate}}"
    },
    "HOME": {
      "TITLE": "Documentation API {{'COMMON.APP_NAME'|translate}}",
      "MESSAGE": "Bienvenue dans la <b>documentation de l'API</b> {{'COMMON.APP_NAME'|translate}}.<br/>Connecter vos sites web Ã  <a href=\"http://duniter.org\" target=\"_system\">Duniter</a> trÃ¨s simplement !",
      "MESSAGE_SHORT": "Connecter vos sites Ã  <a href=\"http://duniter.org\" target=\"_system\">Duniter</a> trÃ¨s simplement !",
      "DOC_HEADER": "Services disponibles :"
    },
    "TRANSFER": {
      "TITLE": "{{'COMMON.APP_NAME'|translate}} - Paiement en ligne",
      "TITLE_SHORT": "Paiement en ligne",
      "SUMMARY": "RÃ©capitulatif de la commande :",
      "AMOUNT": "Montant :",
      "NAME": "Nom :",
      "PUBKEY": "ClÃ© publique du destinaire :",
      "COMMENT": "RÃ©fÃ©rence de la commande :",
      "DEMO": {
        "SALT": "demo",
        "PASSWORD": "demo",
        "PUBKEY": "3G28bL6deXQBYpPBpLFuECo46d3kfYMJwst7uhdVBnD1",
        "HELP": "<b>Mode dÃ©monstration</b> : Aucun paiement ne sera rÃ©ellement envoyÃ© pendant cette simulation.<br/>Veuillez utiliser les identifiants : <b>{{'API.TRANSFER.DEMO.SALT'|translate}} / {{'API.TRANSFER.DEMO.PASSWORD'|translate}}</b>",
        "BAD_CREDENTIALS": "VÃ©rifiez votre saisie.<br/>En mode dÃ©monstration, les identifiants sont : {{'API.TRANSFER.DEMO.SALT'|translate}} / {{'API.TRANSFER.DEMO.PASSWORD'|translate}}"
      },
      "INFO": {
        "SUCCESS_REDIRECTING_WITH_NAME": "Paiement envoyÃ©.<br/>Redirection vers <b>{{name}}</b>...",
        "SUCCESS_REDIRECTING": "Paiement envoyÃ©.<br/>Redirection vers le site du vendeur...",
        "CANCEL_REDIRECTING_WITH_NAME": "Paiement annulÃ©.<br/>Redirection vers <b>{{name}}</b>...",
        "CANCEL_REDIRECTING": "Paiement annulÃ©.<br/>Redirection vers le site du vendeur..."
      },
      "ERROR": {
        "TRANSFER_FAILED": "Echec du paiement"
      }
    },
    "DOC": {
      "DESCRIPTION_DIVIDER": "Description",
      "URL_DIVIDER": "Adresse d'appel",
      "PARAMETERS_DIVIDER": "ParamÃ¨tres",
      "AVAILABLE_PARAMETERS": "Voici la liste des paramÃ¨tres possibles :",
      "DEMO_DIVIDER": "Tester",
      "DEMO_HELP": "Pour tester ce service, cliquez sur le bouton ci-contre. Le rÃ©sultat s'affichera en dessous.",
      "DEMO_RESULT": "RÃ©sultat retournÃ© par l'appel :",
      "DEMO_SUCCEED": "<i class=\"icon ion-checkmark\"></i> SuccÃ¨s !",
      "DEMO_CANCELLED": "<i class=\"icon ion-close\"></i> AnnulÃ© par l'utilisateur",
      "INTEGRATE_DIVIDER": "IntÃ©grer",
      "INTEGRATE_CODE": "Code :",
      "INTEGRATE_RESULT": "PrÃ©visualisation du rÃ©sultat :",
      "INTEGRATE_PARAMETERS": "ParamÃ¨tres",
      "TRANSFER": {
        "TITLE": "Paiements",
        "DESCRIPTION": "Depuis un site (ex: vente en ligne) vous pouvez dÃ©lÃ©guer le paiement en monnaie libre Ã  Cesium API. Pour cela, il vous suffit de dÃ©clencher l'ouveture d'un page sur l'adresse suivante :",
        "PARAM_PUBKEY": "ClÃ© publique du destinataire",
        "PARAM_PUBKEY_HELP": "ClÃ© publique du destinataire (obligatoire)",
        "PARAM_AMOUNT": "Montant",
        "PARAM_AMOUNT_HELP": "Montant de la transaction (obligatoire)",
        "PARAM_COMMENT": "RÃ©fÃ©rence (ou commentaire)",
        "PARAM_COMMENT_HELP": "RÃ©fÃ©rence ou commentaire. Vous permettra par exemple d'identifier le paiement dans la BlockChain.",
        "PARAM_NAME": "Nom (du destinataire ou du site web)",
        "PARAM_NAME_HELP": "Le nom du destinataire, ou du site web appellant. Cela peut-etre un nom lisible (\"Mon site en ligne\"), ou encore une pseudo-adresse web (\"MonSite.com\").",
        "PARAM_REDIRECT_URL": "Adresse web de redirection",
        "PARAM_REDIRECT_URL_HELP": "Adresse web (URL) de redirection, appellÃ© quand le paiement a Ã©tÃ© envoyÃ©. Peut contenir les chaines suivantes, qui seront remplacÃ©e par les valeurs de la transaction : \"{tx}\", \"{hash}\", \"{comment}\", \"{amount}\" et {pubkey}.",
        "PARAM_CANCEL_URL": "Adresse web d'annulation",
        "PARAM_CANCEL_URL_HELP": "Adresse web (URL) en cas d'annulation du paiement, par l'utilisateur. Peut contenir les chaines suivantes, qui seront remplacÃ©e dynamiquement: \"{comment}\", \"{amount}\" et {pubkey}.",
        "EXAMPLES_HELP": "Voici des exemples d'intÃ©gration :",
        "EXAMPLE_BUTTON": "Bouton HTML",
        "EXAMPLE_BUTTON_DEFAULT_TEXT": "Payer en {{currency|currencySymbol}}",
        "EXAMPLE_BUTTON_DEFAULT_STYLE": "Style personnalisÃ©",
        "EXAMPLE_BUTTON_TEXT_HELP": "Texte du bouton",
        "EXAMPLE_BUTTON_BG_COLOR": "Couleur du fond",
        "EXAMPLE_BUTTON_BG_COLOR_HELP": "Exemple: #fbc14c, black, lightgrey, rgb(180,180,180)",
        "EXAMPLE_BUTTON_FONT_COLOR": "Couleur du texte",
        "EXAMPLE_BUTTON_FONT_COLOR_HELP": "Exemple: black, orange, rgb(180,180,180)",
        "EXAMPLE_BUTTON_TEXT_ICON": "IcÃ´ne",
        "EXAMPLE_BUTTON_TEXT_WIDTH": "Largeur",
        "EXAMPLE_BUTTON_TEXT_WIDTH_HELP": "Exemple: 200px, 50%",
        "EXAMPLE_BUTTON_ICON_NONE": "Aucune",
        "EXAMPLE_BUTTON_ICON_DUNITER": "Logo Duniter",
        "EXAMPLE_BUTTON_ICON_CESIUM": "Logo Cesium",
        "EXAMPLE_BUTTON_ICON_G1_COLOR": "Logo Ä1",
        "EXAMPLE_BUTTON_ICON_G1_BLACK": "Logo Ä1 (noir)"
      }
    }
  }
}
);

$translateProvider.translations("it-IT", {
   "COMMON": {
     "APP_NAME": "Cesium",
     "APP_VERSION": "v{{version}}",
     "APP_BUILD": "build {{build}}",
     "PUBKEY": "Chiave privata",
     "MEMBER": "Membro",
     "BLOCK" : "Blocco",
     "BTN_OK": "OK",
     "BTN_YES": "Si",
     "BTN_NO": "No",
     "BTN_SEND": "Inviare",
     "BTN_SEND_MONEY": "Trasferire soldi",
     "BTN_SEND_MONEY_SHORT": "Trasferire",
     "BTN_SAVE": "Salvare",
     "BTN_YES_SAVE": "Si, salvare",
     "BTN_YES_CONTINUE": "Si, continuare",
     "BTN_SHOW": "Mostrare",
     "BTN_SHOW_PUBKEY": "Mostrare chiave pubblica",
     "BTN_RELATIVE_UNIT": "Usare unitÃ  relativa",
     "BTN_BACK": "Indietro",
     "BTN_NEXT": "Avanti",
     "BTN_CANCEL": "Cancellare",
     "BTN_CLOSE": "Chiudere",
     "BTN_LATER": "PiÃ¹ tardi",
     "BTN_LOGIN": "Accedi",
     "BTN_LOGOUT": "Log out",
     "BTN_ADD_ACCOUNT": "Nuovo conto",
     "BTN_SHARE": "Condividere",
     "BTN_EDIT": "Modificare",
     "BTN_DELETE": "Eliminare",
     "BTN_ADD": "Aggiungere",
     "BTN_SEARCH": "Cercare",
     "BTN_REFRESH": "Aggiornare",
     "BTN_RETRY": "Riprovare",
     "BTN_START": "Iniziare",
     "BTN_CONTINUE": "Continuare",
     "BTN_CREATE": "Creare",
     "BTN_UNDERSTOOD": "Ho capito",
     "BTN_OPTIONS": "Opzioni",
     "BTN_HELP_TOUR": "Mostrami le funzionalitÃ ",
     "BTN_HELP_TOUR_SCREEN": "Scoprire questo schermo",
     "BTN_DOWNLOAD": "Scaricare",
     "BTN_DOWNLOAD_ACCOUNT_STATEMENT": "Scaricare estratto conto",
     "BTN_MODIFY": "Modificare",
     "CHOOSE_FILE": "Trascini un file <br/>o cliccare per selezionare",
     "DAYS": "giorni",
     "NO_ACCOUNT_QUESTION": "Non sei ancora membro? Registrati subito!",
     "SEARCH_NO_RESULT": "Nessun risultato trovato",
     "LOADING": "Caricando...",
     "SEARCHING": "Cercando...",
     "FROM": "Da",
     "TO": "A",
     "COPY": "Copiare",
     "LANGUAGE": "Lingua",
     "UNIVERSAL_DIVIDEND": "Dividendo universale",
     "UD": "UD",
     "DATE_PATTERN": "DD/MM/YYYY HH:mm",
     "DATE_FILE_PATTERN": "YYYY-MM-DD",
     "DATE_SHORT_PATTERN": "DD/MM/YY",
     "DATE_MONTH_YEAR_PATTERN": "MM/YYYY",
     "EMPTY_PARENTHESIS": "(empty)",
     "UID": "Pseudonimo",
     "ENABLE": "Attivato",
     "DISABLE": "Disattivato",
     "RESULTS_LIST": "Risultati:",
     "RESULTS_COUNT": "{{count}} risultati",
     "EXECUTION_TIME": "eeseguit in {{duration|formatDurationMs}}",
     "SHOW_VALUES": "Mostrare valori in modo trasparente?",
     "POPOVER_ACTIONS_TITLE": "Opzioni",
     "POPOVER_FILTER_TITLE": "Filtri",
     "SHOW_MORE": "Mostrare di piÃ¹",
     "SHOW_MORE_COUNT": "(limite attuale di {{limit}})",
     "POPOVER_SHARE": {
       "TITLE": "Condividere",
       "SHARE_ON_TWITTER": "Condividere su Twitter",
       "SHARE_ON_FACEBOOK": "Condividere su Facebook",
       "SHARE_ON_DIASPORA": "Condividere su Diaspora*",
       "SHARE_ON_GOOGLEPLUS":"Condividere su Google+"
     }
   },
   "SYSTEM": {
     "PICTURE_CHOOSE_TYPE": "Scegliere un file:",
     "BTN_PICTURE_GALLERY": "Galleria",
     "BTN_PICTURE_CAMERA": "<b>Camera</b>"
   },
   "MENU": {
     "HOME": "Home",
     "WOT": "Annuario",
     "CURRENCY": "Moneta",
     "CURRENCIES": "Monete",
     "ACCOUNT": "Mio conto",
     "TRANSFER": "Trasferire",
     "SCAN": "Scansionare",
     "SETTINGS": "Impostazioni",
     "NETWORK": "Rete",
     "TRANSACTIONS": "Miei pagamenti"
   },
   "ABOUT": {
     "TITLE": "A proposito",
     "LICENSE": "<b>Free/libre software</b> (License GNU GPLv3).",
     "CODE": "Codice sorgente:",
     "DEVELOPERS": "Sviluppatori:",
     "FORUM": "Forum:",
     "DEV_WARNING": "Attenzione!",
     "DEV_WARNING_MESSAGE": "Questa app Ã¨ ancora in sviluppo attivo.<br/>Facci sapere se trovi dei bugs!",
     "DEV_WARNING_MESSAGE_SHORT": "Questa app Ã¨ tutt'ora instabile (in sviluppo)",
     "REPORT_ISSUE": "Segnalare un bug"
   },
   "HOME": {
     "TITLE": "Cesium",
     "MESSAGE": "Benvenuti nell'{{'COMMON.APP_NAME'|translate}} App!",
     "MESSAGE_CURRENCY": "Scambiate in moneta libera. {{currency|abbreviate}}!",
     "BTN_CURRENCY": "Esplorare la moneta",
     "BTN_ABOUT": "a proposito",
     "BTN_HELP": "Aiuto",
     "REPORT_ISSUE": "Segnalare un bug",
     "NOT_YOUR_ACCOUNT_QUESTION" : "Non sei proprietario del conto <b><i class=\"ion-key\"></i> {{pubkey|formatPubkey}}</b>?",
     "BTN_CHANGE_ACCOUNT": "Disconettere questo conto",
     "CONNECTION_ERROR": "Peer <b>{{server}}</b> irraggiungibile o indirizzo invalido. <br/><br/> Verifica tua connessione or cambia nodo. <a class=\"positive\" ng-click=\"doQuickFix('settings')\">nell impostazioni. </a>."
   },
   "SETTINGS": {
     "TITLE": "Impostazioni",
     "NETWORK_SETTINGS": "Rete",
     "PEER": "Indirizzo peer Duniter",
     "PEER_CHANGED_TEMPORARY": "Indirizzo usato per un tempo determinato",
     "USE_LOCAL_STORAGE": "Abilitare local storage",
     "USE_LOCAL_STORAGE_HELP": "Permette di salvare tue impostazioni",
     "ENABLE_HELPTIP": "Abilitare consigli dinamici",
     "ENABLE_UI_EFFECTS": "Abilitare effetti visivi",
     "HISTORY_SETTINGS": "Mio conto",
     "DISPLAY_UD_HISTORY": "Mostrare dividendi prodotti?",
     "AUTHENTICATION_SETTINGS": "Autenticazione",
     "KEEP_AUTH": "Scadenza dell'autenticazione",
     "KEEP_AUTH_HELP": "Definire quando l'autenticazione verrÃ  eliminata dalla memoria",
     "KEEP_AUTH_OPTION": {
       "NEVER": "Dopo ogni operazione",
       "SECONDS": "Dopo {{value}}s d'inattivitÃ ",
       "MINUTE": "Dopo{{value}}min d'inattivitÃ ",
       "MINUTES": "Dopo {{value}}min d'inattivitÃ ",
       "HOUR": "Dopo {{value}}h d'inattivitÃ ",
       "ALWAYS": "Alla fine della sessione"
     },
     "REMEMBER_ME": "Ricordarsi di me?",
     "REMEMBER_ME_HELP": "Rimanere identificato/a da una sessione all'altra, conservando la chiave localmente.",
     "PLUGINS_SETTINGS": "Estensioni",
     "BTN_RESET": "Ripristini valori predefiniti",
     "EXPERT_MODE": "Abilitare modlitÃ  eseperto",
     "EXPERT_MODE_HELP": "Permette di vedere piÃ¹ dettagli",
     "POPUP_PEER": {
       "TITLE" : "Peer Duniter",
       "HOST" : "Indirizzo",
       "HOST_HELP": "Indirizzo: server:port",
       "USE_SSL" : "Securizzato?",
       "USE_SSL_HELP" : "(SSL Encryption)",
       "BTN_SHOW_LIST" : "Lista dei peers"
     }
   },
   "BLOCKCHAIN": {
     "HASH": "Hash: {{hash}}",
     "VIEW": {
       "HEADER_TITLE": "Blocco #{{number}}-{{hash|formatHash}}",
       "TITLE_CURRENT": "Blocco attuale",
       "TITLE": "Blocco #{{number|formatInteger}}",
       "COMPUTED_BY": "Calcolato da",
       "SHOW_RAW": "Mostrare dati grezzi",
       "TECHNICAL_DIVIDER": "Informazioni tecniche",
       "VERSION": "Versione di formatto",
       "HASH": "Hash calcolato",
       "UNIVERSAL_DIVIDEND_HELP": "Moneta co-prodotta da ciasciun dei {{membersCount}} membri",
       "EMPTY": "Nessun dati in questo blocco",
       "POW_MIN": "DifficoltÃ  minimale",
       "POW_MIN_HELP": "DifficoltÃ  imposta nel calcolo del hash",
       "DATA_DIVIDER": "Dati",
       "IDENTITIES_COUNT": "Nuove identitÃ ",
       "JOINERS_COUNT": "Nuovi membri",
       "ACTIVES_COUNT": "Rinnovi",
       "ACTIVES_COUNT_HELP": "Membri che hanno rinnovato la loro presenza nella rete",
       "LEAVERS_COUNT": "",
       "LEAVERS_COUNT_HELP": "Membri che si sono fatti escludere dalla rete",
       "EXCLUDED_COUNT": "Membri esclusi",
       "EXCLUDED_COUNT_HELP": "Vecchi membri, esclusi per certificazione non rinnovata o soglia di certificazioni non raggiunta.",
       "REVOKED_COUNT": "IdentitÃ  revocate",
       "REVOKED_COUNT_HELP": "PuÃ² essere che questi conti non siano piÃ¹ attivi",
       "TX_COUNT": "Transazioni",
       "CERT_COUNT": "Certificazioni",
       "TX_TO_HIMSELF": "Cambio",
       "TX_OUTPUT_UNLOCK_CONDITIONS": "Sbloccare condizioni",
       "TX_OUTPUT_OPERATOR": {
         "AND": "e",
         "OR": "o"
       },
       "TX_OUTPUT_FUNCTION": {
         "SIG": "<b>Firma</b> della chive pubblica",
         "XHX": "<b>Password</b>, incluso SHA256 =",
         "CSV": "Bloccato per",
         "CLTV": "Bloccato fino a"
       }
     },
     "LOOKUP": {
       "TITLE": "Blocchi",
       "NO_BLOCK": "Nessun blocco",
       "LAST_BLOCKS": "Ultimi blocchi:",
       "BTN_COMPACT": "Compact"
     }
   },
   "CURRENCY": {
     "VIEW": {
       "TITLE": "Moneta",
       "TAB_CURRENCY": "Moneta",
       "TAB_WOT": "Web of trust",
       "TAB_NETWORK": "Rete",
       "TAB_BLOCKS": "Blocchi",
       "CURRENCY_SHORT_DESCRIPTION": "{{currency|capitalize}} Ã¨ <b>una moneta libera</b>, {{firstBlockTime | formatFromNow}}. La rete comprende <b>{{N}} membri </b>, che produccono e ricevono un <a ng-click=\"showHelpModal('ud')\">Dividendo Universale</a> (DU), ogni {{dt | formatPeriod}}.",
       "NETWORK_RULES_DIVIDER": "Regole della rete",
       "CURRENCY_NAME": "Nome della moneta",
       "MEMBERS": "Numero di membri",
       "MEMBERS_VARIATION": "Variazione da {{duration|formatDuration}} (dall' ultimo UD)",
       "MONEY_DIVIDER": "Moneta",
       "MASS": "Massa monetaria",
       "SHARE": "QuantitÃ  a testa",
       "UD": "Dividendo universale",
       "C_ACTUAL": "Crescita attuale",
       "MEDIAN_TIME": "Current blockchain time",
       "POW_MIN": "DifficoltÃ  commune",
       "MONEY_RULES_DIVIDER": "Regole della moneta",
       "C_RULE": "Obbietivo teorico di crescitÃ ",
       "UD_RULE": "Dividendo universale (formula)",
       "DT_REEVAL": "Periodo tra due re-evaluazioni del UD",
       "REEVAL_SYMBOL": "reeval",
       "DT_REEVAL_VALUE": "Ogni <b>{{dtReeval|formatDuration}}</b> ({{dtReeval/86400}} {{'COMMON.DAYS'|translate}})",
       "UD_REEVAL_TIME0": "Data della prima re-evaluzione del UD",
       "SIG_QTY_RULE": "Numero di certificazioni requisiti per diventare membro",
       "SIG_STOCK": "Numero massimo di certificazioni inviate da un membro",
       "SIG_PERIOD": "Tempo minimo tra 2 certificazioni inviate da un unico membro.",
       "SIG_WINDOW": "Periodo massimo prima che una certificazione venga studiata",
       "SIG_VALIDITY": "Durata di vita di una certificazione che Ã¨ state presa in conto",
       "MS_WINDOW": "Periodo massimo prima che una certificazione pendente sia validata",
       "MS_VALIDITY": "Durata di vita di un'adesione che Ã¨ state presa in conto",
       "STEP_MAX": "Distanza massima tra un nuovo membro e ogni membro referente.",
       "WOT_RULES_DIVIDER": "Regole della Web of Trust",
       "SENTRIES": "Numero di certificazioni (date <b>e</b> ricevute) per diventare membro referente ",
       "SENTRIES_FORMULA": "Numero di certificazioni necessarie per diventare membro (formula)",
       "XPERCENT":"Percentaggio minimino di membri referenti per rispettare la regola di distanza tra i membri",
       "AVG_GEN_TIME": "Tempo medio tra due blocchi",
       "CURRENT": "attuale",
       "MATH_CEILING": "CEILING",
       "DISPLAY_ALL_RULES": "Mostrare tutte le regole?",
       "BTN_SHOW_LICENSE": "Mostrare licenza",
       "WOT_DIVIDER": "Web of trust"
     },
     "LICENSE": {
       "TITLE": "Licensa attuale",
       "BTN_DOWNLOAD": "Scaricare il file",
       "NO_LICENSE_FILE": "File di licenza non trovato ."
     }
   },
   "NETWORK": {
     "VIEW": {
       "MEDIAN_TIME": "Blockchain time",
       "LOADING_PEERS": "Caricando peers...",
       "NODE_ADDRESS": "Indirizzo del peer",
       "SOFTWARE": "Software",
       "WARN_PRE_RELEASE": "Pre-versione (ultima versione stabile: <b>{{version}}</b>)",
       "WARN_NEW_RELEASE": "Versione <b>{{version}}</b> disponibile",
       "WS2PID": "Identificativo :",
       "PRIVATE_ACCESS": "Accesso privato",
       "POW_PREFIX": "Prefisso Prova di Lavoro :",
       "ENDPOINTS": {
         "BMAS": "Endpoint sicuro (SSL)",
         "BMATOR": "Interfaccia rete TOR",
         "WS2P": "Interfaccia WS2P",
         "ES_USER_API": "Cesium+ data node"
       }
     },
     "INFO": {
       "ONLY_SSL_PEERS": "I nodi non-SSL hanno un display semplificato perche Cesium funziona in modalitÃ  HTTPS."
     }
   },
   "PEER": {
     "PEERS": "Peers-Nodi",
     "SIGNED_ON_BLOCK": "Firmato nel blocco",
     "MIRROR": "Specchio",
     "MIRRORS": "Peers specchio",
     "PEER_LIST" : "Lista dei peers",
     "MEMBERS" : "Peers membri",
     "ALL_PEERS" : "Tutti i peers",
     "DIFFICULTY" : "DifficoltÃ ",
     "API" : "API",
     "CURRENT_BLOCK" : "Blocco #",
     "POPOVER_FILTER_TITLE": "Filtro",
     "OFFLINE": "Peers sconessi",
     "BTN_SHOW_PEER": "Mostrare peer",
     "VIEW": {
       "TITLE": "Peer",
       "OWNER": "ProprietÃ  di ",
       "SHOW_RAW_PEERING": "Vedere il documento di peering",
      "SHOW_RAW_CURRENT_BLOCK": "Vedere l'utimo blocco (formatto grezzo)",
       "LAST_BLOCKS": "Ultimi blocchi",
       "KNOWN_PEERS": "Peers conosciuti :",
       "GENERAL_DIVIDER": "Informazioni generali",
       "ERROR": {
         "LOADING_TOR_NODE_ERROR": "Impossibile ottenere i dati del peer, periodo di attesa scaduto.",
         "LOADING_NODE_ERROR": "Impossibile ottenere i dati del peer"
       }
     }
   },
   "WOT": {
     "SEARCH_HELP": "Cercare (membro o chiave pubblica)",
     "SEARCH_INIT_PHASE_WARNING": "La ricerca per le certificazioni pendenti <b>puÃ² essere lunga</b> durante la fase di pre-certificazione. La preghiamo di attendere...",
     "REGISTERED_SINCE": "Certificato/a dal",
     "REGISTERED_SINCE_BLOCK": "Certificato/a dal blocco #",
     "NO_CERTIFICATION": "Nessuna certificazione valida",
     "NO_GIVEN_CERTIFICATION": "Nessuna certificazione data",
     "NOT_MEMBER_PARENTHESIS": "(non-membro)",
     "IDENTITY_REVOKED_PARENTHESIS": "(identitÃ  revocata)",
     "MEMBER_PENDING_REVOCATION_PARENTHESIS": "(Cancellazione dell'identitÃ  pendente)",
     "EXPIRE_IN": "Scade",
     "NOT_WRITTEN_EXPIRE_IN": "Scadenza <br/> ",
     "EXPIRED": "Scaduto",
     "PSEUDO": "Pseudonimo",
     "SIGNED_ON_BLOCK": "Emessa nel blocco #{{block}}",
     "WRITTEN_ON_BLOCK": "Scritta nel blocco #{{block}}",
     "GENERAL_DIVIDER": "Informazioni generali",
     "NOT_MEMBER_ACCOUNT": "Conto non-membro",
     "NOT_MEMBER_ACCOUNT_HELP": "Questo Ã¨ un semplice portafoglio osservatore, senza richiesta di certificazione emessa.",
     "TECHNICAL_DIVIDER": "Dati tecnici",
     "BTN_CERTIFY": "Certificare",
     "BTN_YES_CERTIFY": "Si, certificare",
     "BTN_SELECT_AND_CERTIFY": "Nuova certificazione",
     "ACCOUNT_OPERATIONS": "Operazioni sul conto",
     "VIEW": {
       "POPOVER_SHARE_TITLE": "IdentitÃ  {{title}}"
     },
     "LOOKUP": {
       "TITLE": "Annuario",
       "NEWCOMERS": "Nuovi membri:",
       "NEWCOMERS_COUNT": "{{count}} membri",
       "PENDING": "Registrazioni pendenti",
       "PENDING_COUNT": "{{count}} inscrizioni pendenti",
       "REGISTERED": "Registrato {{sigDate | formatFromNow}}",
       "MEMBER_FROM": "Membro dal {{memberDate|formatFromNowShort}}",
       "BTN_NEWCOMERS": "Ultimi membri",
       "BTN_PENDING": "Registrazioni pendenti",
       "SHOW_MORE": "Vedere di piÃ¹",
       "SHOW_MORE_COUNT": "(limite attuale di {{limit}})",
       "NO_PENDING": "Nessuna certificazione pendente.",
       "NO_NEWCOMERS": "Nessun membro."
     },
     "CONTACTS": {
      "TITLE": "Contatti"
    },
     "MODAL": {
       "TITLE": "Ricerca"
     },
     "CERTIFICATIONS": {
       "TITLE": "{{uid}} - Certificazioni",
       "SUMMARY": "Certificazioni ricevute",
       "LIST": "Dettagli delle certificazioni ricevute",
       "PENDING_LIST": "Certificazioni pendenti",
       "RECEIVED": "Certificazioni ricevute",
       "RECEIVED_BY": "Certifications ricevute da {{uid}}",
       "ERROR": "Certificazioni ricevute per errore",
       "SENTRY_MEMBER": "Membro referente"
     },
     "OPERATIONS": {
       "TITLE": "{{uid}} - Operazioni"
     },
     "GIVEN_CERTIFICATIONS": {
       "TITLE": "{{uid}} - Certificazioni inviate",
       "SUMMARY": "Certificazioni inviate",
       "LIST": "Dettagli delle certificazioni inviate",
       "PENDING_LIST": "Certificazioni ",
       "SENT": "Certificazioni inviate",
       "SENT_BY": "Certificazioni inviate da {{uid}}",
       "ERROR": "Certificazioni inviate per errore"
     }
   },
   "LOGIN": {
     "TITLE": "<i class=\"icon ion-log-in\"></i> Accedi",
     "SCRYPT_FORM_HELP": "Accedi con tuoi dati <br> Ricordati di verificare che stai utilizzando la chiave del tuo conto.",
     "PUBKEY_FORM_HELP": "Scrivi qui la tua chiave privata:",
     "FILE_FORM_HELP": "Scegliere un portachiavi da utilizzare:",
     "SCAN_FORM_HELP": "Scansiona il codice QR di un portafoglio.",
     "SALT": "Identificativo segreto",
     "SALT_HELP": "Identificativo segreto",
     "SHOW_SALT": "Mostrare identificativo segreto?",
     "PASSWORD": "Passsord",
     "PASSWORD_HELP": "Password",
     "PUBKEY_HELP": "Chiave pubblica, pseudonimo",
     "NO_ACCOUNT_QUESTION": "Ancora non hai un conto?",
     "CREATE_ACCOUNT": "Creare un conto",
     "FORGOTTEN_ID": "Non ricordi la password?",
     "ASSOCIATED_PUBKEY": "Chiave pubblica:",
     "BTN_METHODS": "Altri metodi",
     "BTN_METHODS_DOTS": "Cambiare metodo...",
     "METHOD_POPOVER_TITLE": "Metodi",
     "MEMORIZE_AUTH_FILE": "Memorizzare questo portachiavi per la durata di questa sessione",
     "SCRYPT_PARAMETERS": "Parametri (Scrypt) :",
     "AUTO_LOGOUT": {
       "TITLE": "Informazioni",
       "MESSAGE": "<i class=\"ion-android-time\"></i> Sei stato <b>sconesso/ b> automaticamente, per un periodo di inattivitÃ  prolongata",
       "BTN_RELOGIN": "Accedi",
       "IDLE_WARNING": "Sarai disconesso in... {{countdown}}"
     },
     "METHOD": {
       "SCRYPT_DEFAULT": "Salatura standard (imp. predefinita)",
       "SCRYPT_ADVANCED": "Salatura avanzata",
       "FILE": "File del portachiavi",
       "PUBKEY": "Chiave pubblica soltanto",
       "SCAN": "Scansiona un codice QR"
     },
     "SCRYPT": {
       "SIMPLE": "Salatura leggera",
       "DEFAULT": "Salatura standard",
       "SECURE": "Salatura sicura",
       "HARDEST": "Salatura piÃ¹ sicura",
       "EXTREME": "Salatura estrema",
       "USER": "Salatura personalizzata",
       "N": "N (Loop):",
       "r": "r (RAM):",
       "p": "p (CPU):"
     },
     "FILE": {
       "DATE" : "Data:",
       "TYPE" : "Tipo:",
       "SIZE": "Dimensioni del file:",
       "VALIDATING": "Validazione in corso...",
       "HELP": "Format del file atteso: <b>.dunikey</b> (type PubSec). Altri formati in sviluppo (EWIF, WIF)."
     }
   },
   "AUTH": {
     "TITLE": "<i class=\"icon ion-locked\"></i> Autenticazione",
     "BTN_AUTH": "Autenticarsi",
     "GENERAL_HELP": "Autenticati :",
     "EXPECTED_UID_HELP": "Effettua il login nell'account <i class=\"ion-person\"></i> {{uid}}:",
     "EXPECTED_PUBKEY_HELP": "Si prega di autenticarsi sul portafoglio <i class=\"ion-key\"></i> {{pubkey|formatPubkey}}:",
     "SCAN_FORM_HELP": "Scansiona il codice QR della <b>chiave privata</b> del portafoglio."
   },
   "ACCOUNT": {
     "TITLE": "Mio conto",
     "BALANCE": "Saldo",
     "LAST_TX": "Ultime transazioni",
     "BALANCE_ACCOUNT": "Saldo del conto",
     "NO_TX": "Nessuna transazione",
     "SHOW_MORE_TX": "Mostrare di piÃ¹",
     "SHOW_ALL_TX": "Mostrare tutte",
     "TX_FROM_DATE": "(limite attuale del {{fromTime|formatFromNowShort}})",
     "PENDING_TX": "Transazioni pendenti",
     "VALIDATING_TX": "Transazioni in corso di convalida",
     "ERROR_TX": "Transaction non eseguite",
     "ERROR_TX_SENT": "Transazioni inviate",
     "PENDING_TX_RECEIVED": "Transazioni in attesa di recezione",
     "EVENTS": "Eventi",
     "WAITING_MEMBERSHIP": "Richiesta di certificazione inviata. In attesa di validazione.",
     "WAITING_CERTIFICATIONS": "Hai bisogno di {{needCertificationCount}} certificazione(i) per diventare membro.",
     "WILL_MISSING_CERTIFICATIONS": "Mancherai a breve <b>di certificazioni</b> (occorrono almeno {{willNeedCertificationCount}} altre certificazioni)",
     "WILL_NEED_RENEW_MEMBERSHIP": "Tua certificazione <b>scaderÃ {{membershipExpiresIn|formatDurationTo}}</b>. Ricordati di <a ng-click=\"doQuickFix('renew')\">rinnovarla</a> prima.",
     "NEED_RENEW_MEMBERSHIP": "You are no longer a member because your membership <b>has expired</b>. Remember to <a ng-click=\"doQuickFix('renew')\">renew your membership</a>.",
     "NO_WAITING_MEMBERSHIP": "Nessuna domanda di adesione pendente. Se desideri <b>diventare membro</b>, ricordati di <a ng-click=\"doQuickFix('membership')\">inviare tua domanda di adesione</a>.",
     "CERTIFICATION_COUNT": "Certificazioni ricevute",
     "CERTIFICATION_COUNT_SHORT": "Certificazioni",
     "SIG_STOCK": "Stock di certificazioni da inviare",
     "BTN_RECEIVE_MONEY": "Ricevere",
     "BTN_SELECT_ALTERNATIVES_IDENTITIES": "Usare un'altra identitÃ ..",
     "BTN_FIX_MEMBERSHIP": "Invia nuovamente di adesione...",
     "BTN_MEMBERSHIP_RENEW": "Rinnovare adesione",
     "BTN_MEMBERSHIP_RENEW_DOTS": "Rinnovare adesione ...",
     "BTN_MEMBERSHIP_OUT_DOTS": "Revocare adesione...",
     "BTN_SECURITY_DOTS": "Login e securitÃ ...",
     "BTN_SHOW_DETAILS": "Visualizzare dati tecnici",
     "LOCKED_OUTPUTS_POPOVER": {
       "TITLE": "Importo bloccata",
       "DESCRIPTION": "Ecco le condizioni per sbloccare questo importo:",
       "DESCRIPTION_MANY": "Questa transazione Ã¨ fatta da diverse parti, di cui queste sono le condizioni di sblocco:",
       "LOCKED_AMOUNT": "Condizioni per l'importo:"
     },
     "NEW": {
       "TITLE": "Registrazione",
       "INTRO_WARNING_TIME": "Crearsi un conto su {{name|capitalize}} Ã¨ molto semplice. E consigliato prendere il giusto tempo per farlo correttamente (per evitare di dimenticare passwords, pseudonimi etc.).",
       "INTRO_WARNING_SECURITY": "Occorre verificare che il hardware che stai utilizzando (computer, tablet, cellulare) <b>Ã¨ sicuro e affidabile</b>.",
       "INTRO_WARNING_SECURITY_HELP": "Anti-virus aggiornato, firewall abilitato, session protteta da un password o codice PIN...",
       "INTRO_HELP": "Cliccare <b> {{'COMMON.BTN_START'|translate}}</b> per avviare la creazione del conto. Ti accompagniamo passo alla volta.",
       "REGISTRATION_NODE": "Tua iscrizione verrÃ  salvata dal nodo peer Duniter <b>{{server}}</b>, Ã¨ verrÃ  poi condivisa nella rete della moneta.",
       "REGISTRATION_NODE_HELP": "Se non ti fidi di questo peer, per favore cambialo <a ng-click=\"doQuickFix('settings')\">nelle impostazioni/a> di Cesium.",
       "SELECT_ACCOUNT_TYPE": "Scegliere un tipo di conto:",
       "MEMBER_ACCOUNT": "Conto membro",
       "MEMBER_ACCOUNT_TITLE": "Creare un conto membro",
       "MEMBER_ACCOUNT_HELP": "Se non sei ancora registrato come individuo (un conto a persona soltanto).",
       "WALLET_ACCOUNT": "Semplice portafoglio",
       "WALLET_ACCOUNT_TITLE": "Creare un portafoglio",
       "WALLET_ACCOUNT_HELP": "Se rappresenti un'azienda, associazione, altra ente o hai necessita di un altro portafoglio. Nessun Dividendo Universale sarÃ  prodotto da questo conto.",
       "SALT_WARNING": "Scegliere un identificativo segreto.<br/>E necessario per ogni connessione a questo conto.<br/><br/><b>Accertati di ricordarlo!</b>.<br/>Se lo dimentichi non ti potrÃ  aiutare nessuno!",
       "PASSWORD_WARNING": "Scegliere una password.<br/>E necessario per ogni connessione a questo conto.<br/><br/><b>Accertati di ricordarla!</b>.<br/>Se la dimentichi non ti potrÃ  aiutare nessuno!",
       "PSEUDO_WARNING": "Segliere uno pseudonimo.<br/>Puo essere utile per chi ti cerca nella rete.<br/><br/>.L'utilizzo delle<b>virgole, spazi e accenti</b> Ã¨ vietato.<br/><div class='hidden-xs'><br/>Esempio: <span class='gray'>JohnDalton, JackieChan, etc.</span>",
       "PSEUDO": "Pseudonimo",
       "PSEUDO_HELP": "joe123",
       "SALT_CONFIRM": "Confermare",
       "SALT_CONFIRM_HELP": "Confermare l'identificativo segreto",
       "PASSWORD_CONFIRM": "Confermare",
       "PASSWORD_CONFIRM_HELP": "Confermare la password",
       "SLIDE_6_TITLE": "Conferma:",
       "COMPUTING_PUBKEY": "Calcolando...",
       "LAST_SLIDE_CONGRATULATION": "Hai riempito tutti i campi richiesti.<br/><b>Puoi inviare la richiesta di creazione del conto</b>.<br/><br/>Per tua informazione, la chiave pubblica qui sotto identifica il tuo futuro conto.<br/>Puo essere communicata a chi ti deve pagare per esempio.<br/>Quando tuo conto verrÃ  approvato potrai trovare la chiave qui <b>{{'ACCOUNT.TITLE'|translate}}</b>.",
       "CONFIRMATION_MEMBER_ACCOUNT": "<b class=\"assertive\">Warning:</b> tuo identificare segreto, tua password e tuo pseudonimo non si possono cambiare.<br/><b>Ricordali per sempre!</b><br/><b>Sei sicuro/a</b>di voler inviare questa richiesta di creazione di conto?",
       "CONFIRMATION_WALLET_ACCOUNT": "<b class=\"assertive\">Warning:</b> tuo identificare segreto, tua password e tuo pseudonimo non si possono cambiare..<br/><b>Ricordali per sempre!</b><br/><b>Sei sicuro/a</b> di voler continuare?",
       "CHECKING_PSEUDO": "Verificazione in corso...",
       "PSEUDO_AVAILABLE": "Pseudonimo disponibile",
       "PSEUDO_NOT_AVAILABLE": "Pseudonimo indisponibile",
       "INFO_LICENSE": "TPer aderire alla moneta, ti chiediamo di leggere e accetare le condizioni della licenza.",
       "BTN_ACCEPT": "Accetto",
       "BTN_ACCEPT_LICENSE": "Accetto la licenza"
     },
     "POPUP_REGISTER": {
       "TITLE": "Pseudonimo",
       "HELP": "Un pseudonimo Ã¨ necessario per che gli altri ti possino trovare."
     },
     "SELECT_IDENTITY_MODAL": {
      "TITLE": "Selezionare una identitÃ ",
      "HELP": "PiÃ¹ <b>identitÃ  diverse</b> sono state inviate per la chiave pubblica <span class=\"gray\"><i class=\"ion-key\"></i> {{pubkey|formatPubkey}}</span>.<br/>Seleziona un dossier da usare :"
    },
     "SELECT_WALLET_MODAL": {
       "TITLE": "Selezione del portafoglio"
     },
     "WALLET_LIST": {
       "TITLE": "Portafoglio secondario",
       "BTN_NEW": "Aggiungi un portfolio",
       "NO_WALLET": "Nessun portafoglio secondario",
       "BTN_DELETE": "Rimuovi un portafoglio secondario ...",
       "BTN_RENAME": "Rinominare il portafoglio",
       "EDIT_POPOVER": {
         "TITLE": "Rinominare il portafoglio",
         "HELP": "Compila il nuovo nome",
         "NAME_HELP": "Nome del portafoglio"
       }
     },
     "SECURITY":{
       "ADD_QUESTION" : "Aggiungere domanda personalizzata",
       "BTN_CLEAN" : "Svuotare",
       "BTN_RESET" : "Reset",
       "DOWNLOAD_REVOKE": "Salvare un file di revoca",
       "DOWNLOAD_REVOKE_HELP" : "Avere une file di revoca Ã¨ necessario in caso di smarrimento dei tuoi credenziali. Ti permette <b> di rimuovere tuo conto dalla Web Of Trust</b>, per farlo tornare ad essere un semplice portafoglio.",
       "HELP_LEVEL": "Scegliere <strong> almeno{{nb}} domande </strong> :",
       "LEVEL": "Livello di sicurezza",
       "LOW_LEVEL": "Basso <span class=\"hidden-xs\">(minimo di 2 domande)</span>",
       "MEDIUM_LEVEL": "Medio <span class=\"hidden-xs\">(minimo di 4 domande)</span>",
       "QUESTION_1": "Qual'era il nome del tuo miglior amico quando eri adolescente ?",
       "QUESTION_2": "Qual'era il nome del tuo primo animale domestico?",
       "QUESTION_3": "Qual'Ã¨ il primo piatto che imparasti a cucinare?",
       "QUESTION_4": "Qual'Ã¨ il primo film che hai visto al cinema?",
       "QUESTION_5": "Qual'era la destinazione del tuo primo volo?",
       "QUESTION_6": "Qual'era il nome del tuo professore preferito in scuola ?",
       "QUESTION_7": "Quale sarebbe il tuo lavoro preferito?",
       "QUESTION_8": "Qual'Ã¨ il tuo libro per bimbi preferito?",
       "QUESTION_9": "Qual'era il marchio della tua prima macchina?",
       "QUESTION_10": "Qual'era il tuo nomignolo da ragazzino/a ?",
       "QUESTION_11": "Qual'era il tuo personaggio di film o attore preferito quand eri studente?",
       "QUESTION_12": "Qual'era il tuo musicista/cantante/grupo preferito quand eri studente ?",
       "QUESTION_13": "In che cittÃ  si sono conosciuti tuoi genitori ?",
       "QUESTION_14": "Qual'era il nome del tuo primo capo ?",
       "QUESTION_15": "Qual'Ã¨ il nome della strada dove sei cresciuto/a ?",
       "QUESTION_16": "Qual'Ã¨ il nome della tua spiaggia preferita ?",
       "QUESTION_17": "Qual'Ã¨ il primo album che ti sei comprato ?",
       "QUESTION_18": "Qual'Ã¨ il nome della squadra di sport preferita ?",
       "QUESTION_19": "Cosa faceva tuo nonno ?",
       "RECOVER_ID": "Ricuperare mia password...",
       "RECOVER_ID_HELP": "Se hai un<b<file di backup dei tuoi credenziali</b>, li puoi trovare rispondendo correttamente alle tue domande personalizzate.",
       "REVOCATION_WITH_FILE" : "Revocare il mio conto membro...",
      "REVOCATION_WITH_FILE_DESCRIPTION": "Se pensi di aver perso <b>definitivamente tuoi credenziali</b> di conto membro (o che la sicurezza del tuo conto Ã¨ compromessa), puoi usare <b>il file di revoca</b> del conto <b>per forzare la sua uscita permanente dalla Tela di Fiducia</b>.",
       "REVOCATION_WITH_FILE_HELP": "Se hai <b>definitivamente perso tuoi credenziali (o se la sicurezza del tuo conto Ã¨ compromessa), puoi usare <b>il file di revoca</b> del conto <b>per uscire dalla Web Of Trust</b>.",
       "REVOCATION_WALLET": "Revocare questo conto subito",
       "REVOCATION_WALLET_HELP": "Richiedere la cancellazione dell'identitÃ  <b>revocherÃ  la tua adesione alla tua rete</ b> (con certezza per il pseudonimo e la chiave pubblica associata). Il conto non potrÃ  piÃ¹ produrre il Dividendo Universale.<br/>Nonostante ciÃ², puoi ancora usare il conto come semplice portafoglio.",
       "REVOCATION_FILENAME": "revocation-{{uid}}-{{pubkey|formatPubkey}}-{{currency}}.txt",
       "SAVE_ID": "Salvare miei credenziali...",
       "SAVE_ID_HELP": "Creare un file di backup, per <b>ricuperare vostra password</b> (e l'identificativo segreto) <b> in caso di smarrimento</b>. Il file Ã¨ <b>sicuro</ b> (cryptato) utilizzando le domande personalizzate.",
       "STRONG_LEVEL": "Alto <span class=\"hidden-xs \">(minimo di 6 domande)</span>",
       "TITLE": "Conto e sicurezza"
     },
     "FILE_NAME": "{{currency}} - Account statement {{pubkey|formatPubkey}} to {{currentTime|formatDateForFile}}.csv",
     "HEADERS": {
       "TIME": "Date",
       "AMOUNT": "Amount",
       "COMMENT": "Comment"
     }
   },
   "TRANSFER": {
     "TITLE": "Bonifico",
     "SUB_TITLE": "Fare un bonifico",
     "FROM": "Da",
     "TO": "A",
     "AMOUNT": "Importo",
     "AMOUNT_HELP": "Importo",
     "COMMENT": "Commenti",
     "COMMENT_HELP": "Commenti",
     "BTN_SEND": "Inviare",
     "BTN_ADD_COMMENT": "Scrivere un comento ?",
     "WARN_COMMENT_IS_PUBLIC": "Ti avvertiamo <b>che i commenti sono pubblici</b> (non cifrati).",
     "MODAL": {
       "TITLE": "Bonifico"
     }
   },
   "ERROR": {
     "POPUP_TITLE": "Errore",
     "UNKNOWN_ERROR": "Errore",
     "CRYPTO_UNKNOWN_ERROR": "Suo navigatore non sembra compatibile con le funzionalitÃ  di cryptografia.",
     "EQUALS_TO_PSEUDO": "Deve essere diverso dal pseudonimo",
     "EQUALS_TO_SALT": "Deve essere diverso dal identificativo segreto",
     "FIELD_REQUIRED": "Campo obbligatorio.",
     "FIELD_TOO_SHORT": "Valore troppo corto.",
     "FIELD_TOO_SHORT_WITH_LENGTH": "Valore troppo corto ({{minLength}} caratteri min)",
     "FIELD_TOO_LONG": "Valore troppo lungo",
     "FIELD_TOO_LONG_WITH_LENGTH": "Valore troppo lungo ({{maxLength}} caractteri max)",
     "FIELD_MIN": "Valore minimo : {{min}}",
     "FIELD_MAX": "Valore massimo : {{max}}",
     "FIELD_ACCENT": "Virgole e caratteri accentati vietati",
     "FIELD_NOT_NUMBER": "Valore numerico atteso",
     "FIELD_NOT_INT": "Valore intero atteso",
     "FIELD_NOT_EMAIL": "Indirizzo mail non valido",
     "PASSWORD_NOT_CONFIRMED": "Non corrisponde alla password.",
     "SALT_NOT_CONFIRMED": "Non corrisponde al identificativo segreto.",
     "SEND_IDENTITY_FAILED": "Iscrizione fallita.",
     "SEND_CERTIFICATION_FAILED": "Certificazione fallita.",
     "NEED_MEMBER_ACCOUNT_TO_CERTIFY": "Non puoi inviare certificazioni perche tuo conto <b>non Ã¨ ancora un conto membro</b>.",
     "NEED_MEMBER_ACCOUNT_TO_CERTIFY_HAS_SELF": "Non puoi inviare certificazioni adesso perche <b>non sei ancora membro</b>.<br/><br/>Devi ancora entrare nella WOT.",
     "NOT_MEMBER_FOR_CERTIFICATION": "Tuo conto non Ã¨ ancora un conto membro.",
     "IDENTITY_TO_CERTIFY_HAS_NO_SELF": "Impossibile certificare questo conto. Nessuna richiesta di certificazione trovata o bisogna rinnovarla.",
     "LOGIN_FAILED": "Errore di login.",
     "LOAD_IDENTITY_FAILED": "Impossibile caricare la tua identitÃ .",
     "LOAD_REQUIREMENTS_FAILED": "Impossibile caricare i prerequisiti dell'identitÃ .",
     "SEND_MEMBERSHIP_IN_FAILED": "Ingresso nella WOT fallito.",
     "SEND_MEMBERSHIP_OUT_FAILED": "Errore nel invio della revocazione.",
     "REFRESH_WALLET_DATA": "Impossibile aggiornare il portafoglio.",
     "GET_CURRENCY_PARAMETER": "Impossibile ricuperare i parametri della moneta.",
     "GET_CURRENCY_FAILED": "Impossibile caricare la moneta. Riprovare piÃ¹ tardi.",
     "SEND_TX_FAILED": "Impossibile eseguire la transazione.",
     "ALL_SOURCES_USED": "Per favore aspetta il calcolo del prossimo blocco (Tutte le tue fonti di moneta sono state utilizzate).",
     "NOT_ENOUGH_SOURCES": "Non hai abbastanza cambio per inviare questo importo in una sola transazione.<br/>Importo massimo: {{amount}} {{unit}}<sub>{{subUnit}}</sub>.",
     "ACCOUNT_CREATION_FAILED": "Errore nella creazione del tuo conto membro.",
     "RESTORE_WALLET_DATA_ERROR": "Errore nel aggiornamento delle impostazioni definite in local storage.",
     "LOAD_WALLET_DATA_ERROR": "Errore nel caricamento dei dati del portafoglio.",
     "COPY_CLIPBOARD_FAILED": "Impossibile copiare al clipboard",
     "TAKE_PICTURE_FAILED": "Impossibile ricuperare foto.",
     "SCAN_FAILED": "Impossibile scansionare il codice QR.",
     "SCAN_UNKNOWN_FORMAT": "Codice non riconosciuto.",
     "WOT_LOOKUP_FAILED": "Ricerca fallita.",
     "LOAD_PEER_DATA_FAILED": "Peer Duniter non accessibile. Riprovare piÃ¹ tardi.",
     "NEED_LOGIN_FIRST": "Accedi al tuo conto prima.",
     "AMOUNT_REQUIRED": "Importo necessario.",
     "AMOUNT_NEGATIVE": "Importo negativo non consentito.",
     "NOT_ENOUGH_CREDIT": "Saldo insufficiente",
     "INVALID_NODE_SUMMARY": "Impossibile comunicare col peer o indirizzo non valido",
     "INVALID_USER_ID": "Il campo del 'pseudonimo' non deve avere spazi vuoti o caratteri speciali.",
     "INVALID_COMMENT": "Il formato del campo 'reference' Ã¨ errato.",
     "INVALID_PUBKEY": "If formato della chiave pubblica Ã¨ errato.",
     "IDENTITY_REVOKED": "Questa identitÃ  <b>Ã¨ stata revocata {{revocationTime|formatFromNow}}</b> ({{revocationTime|formatDate}}). Non puo piÃ¹ diventare membro.",
     "IDENTITY_PENDING_REVOCATION": "L'<b>annulamento di questa identitÃ </b> Ã¨ stata richiesta ed Ã¨ in corso di evaluazione. CapacitÃ  ad inviare certificazioni disabilitata",
     "IDENTITY_INVALID_BLOCK_HASH": "Questa richiesta di certificazione non Ã¨ piÃ¹ valida (perche si riferisce ad un blocco che Ã¨ stato eliminato dai peers): la persona deve rinnovare la sua domanda di certificazione <b>prima</b> di essere certificata.",
     "IDENTITY_EXPIRED": "Questa identitÃ  Ã¨ scaduta: la persona deve fare una nuova domanda di certificazione <b>prima di</b> essere certificata.",
     "IDENTITY_SANDBOX_FULL": "Il nodo Duniter utilizzato da Cesium non puo ricevere altre domande di certificazione per ora, la lista d'attesa Ã¨ piena.<br/><br/>Riprova piÃ¹ tardi o scegli un'altro peer Duniter (nelle <b>Impostazioni</b>).",
     "IDENTITY_NOT_FOUND": "IdentitÃ  non trovata",
     "IDENTITY_TX_FAILED": "Impossibile caricare le operazioni",
     "WOT_PENDING_INVALID_BLOCK_HASH": "Adesione non valida.",
     "WALLET_INVALID_BLOCK_HASH": "Tua domanda di certificazione non Ã¨ piÃ¹ valida (perche si riferisce ad un blocco che Ã¨ stato eliminato dai peers).<br/>Devi <a ng-click=\"doQuickFix('renew')\">rinnvoare la tua richiesta di adesione alla WOT</a> per risolvere il problema.",
     "WALLET_IDENTITY_EXPIRED": "La pubblicazione della tua identitÃ  <b>Ã¨ scaduta</b>.<br/>Devi <a ng-click=\"doQuickFix('fixIdentity')\">ripubblicare la tua identitÃ </a> per risolvere il problema.",
     "WALLET_REVOKED": "La tua identitÃ  Ã¨ stata <b>revocata</b>: ne tuo pseudonimo ne tua chiave pubblica sarano utilizzati in futuro.",
     "WALLET_HAS_NO_SELF": "La tua identitÃ  deve prima essere stata pubblicata e non essere ancora scaduta.",
     "AUTH_REQUIRED": "Autenticazione necessaria.",
     "AUTH_INVALID_PUBKEY": "La chiave pubblica non corrisponde al conto conesso.",
     "AUTH_INVALID_SCRYPT": "Password o nome di utente non valido.",
     "AUTH_INVALID_FILE": "File di portachiavi non valido.",
     "AUTH_FILE_ERROR": "Impossibile aprire il file di portachiavi",
     "IDENTITY_ALREADY_CERTIFY": "Hai <b>giÃ  certificato</b> questa identitÃ .<br/><br/>Tuo certificato Ã¨ ancora valido (scade {{expiresIn|formatDuration}}).",
     "IDENTITY_ALREADY_CERTIFY_PENDING": "Hai <b>giÃ  certificato</b> questa identitÃ .<br/><br/>Tua certificazione Ã¨ ancora pendente (Scadenza del periodo di  treatment {{expiresIn|formatDuration}}).",
     "UNABLE_TO_CERTIFY_TITLE": "Impossibile certificare",
     "LOAD_NEWCOMERS_FAILED": "Impossibile caricare i nuovi membri.",
     "LOAD_PENDING_FAILED": "Impossibile caricare le certificazioni pendenti.",
     "ONLY_MEMBER_CAN_EXECUTE_THIS_ACTION": "Devi <b>essere membro</b> per poter fare questo.",
     "ONLY_SELF_CAN_EXECUTE_THIS_ACTION": "Devi aver <b>publiccato tua identitÃ </b> per poter fare questo.",
     "GET_BLOCK_FAILED": "Impossibile caricare il blocco",
     "INVALID_BLOCK_HASH": "Blocco non trovato (hash errato)",
     "DOWNLOAD_REVOCATION_FAILED": "Errore avvenuto nel download del file di cancellazione d'identitÃ .",
     "REVOCATION_FAILED": "Errore avvenuto durante la richiesta di cancellazione dell'identitÃ .",
     "SALT_OR_PASSWORD_NOT_CONFIRMED": "identificativo segreto o password sbagliati",
     "RECOVER_ID_FAILED": "Impossibile ricuperare la password",
     "LOAD_FILE_FAILED" : "Impossibile caricare il file",
     "NOT_VALID_REVOCATION_FILE": "File di cancellazione dell'identitÃ  errato (formato di file incorreto)",
     "NOT_VALID_SAVE_ID_FILE": "File di backup dei credenziali errato (formato di file incorreto)",
     "NOT_VALID_KEY_FILE": "File di portachiavi non valido (formato non riconosciuto)",
     "EXISTING_ACCOUNT": "Tuoi credenziali corrispondono a quelli di un conto giÃ  esistente,di cui <a ng-click=\"showHelpModal('pubkey')\">la chiave pubblica</a> Ã¨:",
     "EXISTING_ACCOUNT_REQUEST": "Per favore cambi tuoi credenziali in modo che corrispondino ad un conto non utilizzato.",
     "GET_LICENSE_FILE_FAILED": "Impossibile caricare il file della licenza",
     "CHECK_NETWORK_CONNECTION": "Nessun peer sembra disponibile.<br/><br/>Per favore <b>verifica la tua connessione Internet</b>.",
     "ISSUE_524_TX_FAILED": "Bonifico .<br/><br/>Un message a Ã©tÃ© envoyÃ© aux dÃ©veloppeurs pour faciliter la rÃ©solution du problÃ¨me. <b>Merci de votre aide</b>."
    },
   "INFO": {
     "POPUP_TITLE": "Informazioni",
     "CERTIFICATION_DONE": "IdentitÃ  firmata con successo",
     "NOT_ENOUGH_CREDIT": "Saldo insufficiente",
     "TRANSFER_SENT": "Transazione inviata con successo",
     "COPY_TO_CLIPBOARD_DONE": "Copiato con successo",
     "MEMBERSHIP_OUT_SENT": "Revoca dell'identitÃ  inviata",
     "NOT_NEED_MEMBERSHIP": "GiÃ  un membro.",
     "IDENTITY_WILL_MISSING_CERTIFICATIONS": "Questa identitÃ  mancherÃ  a breve di certificazioni (almeno {{willNeedCertificationCount}}).",
     "REVOCATION_SENT": "Revoca dell'identitÃ  inviata",
     "REVOCATION_SENT_WAITING_PROCESS": "Cancellazione dell'identitÃ  <b>inviata con successo</b>. In attesa di validazione.",
     "FEATURES_NOT_IMPLEMENTED": "Questa funzionalitÃ  non Ã¨ ancora disponibile.<br/><br/>Vuoi contribuire per velocizzarne la disponibilitÃ ? ;)",
     "EMPTY_TX_HISTORY": "Nessuna operazione da esportare"
   },
   "CONFIRM": {
     "POPUP_TITLE": "<b>Conferma</b>",
     "POPUP_WARNING_TITLE": "<b>Avviso</b>",
     "POPUP_SECURITY_WARNING_TITLE": "<i class=\"icon ion-alert-circled\"></i> <b>Avvertimento di sicurezza</b>",
     "CERTIFY_RULES_TITLE_UID": "Certificare {{uid}}",
     "CERTIFY_RULES": "<b class=\"assertive\">Non certificare un conto</b> se credi che: <ul><li>1.) l'identitÃ  della persona potrebbe essere finta.<li>2.) la oersona ha giÃ  un conto certicato.<li>3.) la persona trasgredisce la regola 1 o 2 o entrambe. (Certifica conti finti o gemelli).</ul></small><br/>Sei sicuro/a di voler certificare questa identitÃ ?",
     "TRANSFER": "<b>Resoconto del bonifico:</b><br/><br/><ul><li> - Inviato da: <b>{{from}}</b></li><li> - A: <b>{{to}}</b></li><li> - Importo: <b>{{amount}} {{unit}}</b></li><li> - Comento: <i>{{comment}}</i></li></ul><br/><b>Sei sicuro di voler procedere con questo bonifico?</b>",
     "MEMBERSHIP_OUT": "Questa operazione Ã¨ <b>irreversibile</b>.<br/></br/><b>Sei sicuro/a di voler cancellare la tua presenza nella WOT?</b>",
     "MEMBERSHIP_OUT_2": "Questa operazione Ã¨ <b>irreversibile</b>!<br/><br/>Sei sicuro/a <b>di voler revocare la tua identitÃ </b>?",
     "LOGIN_UNUSED_WALLET_TITLE": "Errore di battitura?",
     "LOGIN_UNUSED_WALLET": "Il conto sembra <b>inattivo</b>.<br/><br/>Probabilmente Ã¨ un<b>errore di battitura</b> mientre digitavi i tuoi credenziali. Per favore riprova, verificando che la <b>chiave pubblica sia tua<b/>.",
     "FIX_IDENTITY": "Lo pseudonimo <b>{{uid}}</b> verrÃ  pubblicato nuovamente. Si sostituirÃ  alla precedente pubblicazione che Ã¨ scaduta.<br/></br/><b>Sei sicuro/a</b> di voler procedere?",
     "FIX_MEMBERSHIP": "Tua domanda di certificazione sarÃ  inviata alla rete.<br/></br/><b>Sei sicuro/a?</b>",
     "MEMBERSHIP": "Tua domanda per diventare membro sta per essere inviata alla rete.<br/></br/><b>Sei sicuro/a/b> di voler continuare ?",
     "RENEW_MEMBERSHIP": "Tua adesione verrÃ  rinnovata.<br/></br/><b>Sei sicuro/a?</b>",
     "REVOKE_IDENTITY": "Stai per <b>revocare definitivamente questa identitÃ </b>.<br/><br/>La chiave pubblica e lo pseudonimo associato <b>non saranno mai piÃ¹ utilizzati</b> (per un conto membro).<br/></br/><b>Sei sicuro/a</b> di voler revocare questa identitÃ ?",
     "REVOKE_IDENTITY_2": "Questa operazione Ã¨ <b>irreversibile</b>!<br/><br/>Sei sicuro/a di volern<b>revocare questa identitÃ </b>?",
     "NOT_NEED_RENEW_MEMBERSHIP": "Tua presenza nella rete non deve ancora essere rinnovata (scaderÃ  tra {{membershipExpiresIn|formatDuration}}).<br/></br/><b>Sei sicuro/a</b> di voler rinnovare la tua presenza?",
     "SAVE_BEFORE_LEAVE": "Vuoi <b>salvare tue modifiche</b> prima di uscira dalla pagina?",
     "SAVE_BEFORE_LEAVE_TITLE": "Modifiche non salvate",
     "LOGOUT": "Sei sicuro/a di voler chiudere la sessione?",
     "USE_FALLBACK_NODE": "Peer <b>{{old}}</b> indisponibile o indirizzo errato.<br/><br/>Vuoi utilizzare temporanemante il <b>{{new}}</b> nodo?",
     "ISSUE_524_SEND_LOG": "La transaction a Ã©tÃ© rejettÃ©e, Ã  cause d'une anomalie connue (ticket #524) mais <b>non reproduite</b>.<br/><br/>Pour nous aider les dÃ©veloppeurs Ã  corriger cette erreur, <b>acceptez-vous la transmission de vos logs</b> par message ?<br/><small>(Aucune donnÃ©e confidentielle n'est envoyÃ©e)</small>."
    },
   "DOWNLOAD": {
     "POPUP_TITLE": "<b>File di cancellazione dell'identitÃ /b>",
     "POPUP_REVOKE_MESSAGE": "Per migliorare la sicurezza del tuo conto, scarica <b>il documento di revoca del conto</b>. Ti consentirÃ  di revocare tuo conto (nel caso di violazione del conto, della tua identitÃ , conto creato con errori, etc.).<br/><br/><b>Tiene questo document al sicuro.</b>"
   },
   "HELP": {
     "TITLE": "Aiuto online",
     "JOIN": {
       "SECTION": "Entrare nella rete",
       "SALT": "Il tuo identificativo segreto Ã¨ molto importante. E utilizzato per cryptare tua password che permette poi di calcolare tua <span class=\"text-italic\">chiave pubblica</span> (suo numero) Ã¨ la chiave privata che ne consenta l'accesso.<br/><b>Ricordati bene di questo identificativo</b>, perche non ti potrÃ  aiutare nessuno se lo perdi.<br/>Tra l'altro, non puo essere cambiato senza dover creare un conto nuovo.<br/><br/>Raccomandiamo che sia abbastanza lungo (8 caratteri almeno) Ã¨ il piÃ¹ originale possibile. (buona entropia)",
       "PASSWORD": "La password Ã¨ molto importante, Ã¨ utilizzata per calcolare tuo numero di conto (tua chiave pubblica) e la chiave privata che ne consento l'accesso.<br/><b>Ricordatila bene</b>, perche non ti potrÃ  aiutare nessuno se lo perdi.<br/>Tra l'altro, non puo essere cambiata senza dover creare un conto nuovo.<br/><br/>Una buona password (preferibilmente) Ã¨ composta da almeno 8 caratteri, con almeno una maiuscola e un numero.",
       "PSEUDO": "Un pseudonimo Ã¨ utilizzato quando ti iscrivi come <span class=\"text-italic\">membro</span>. E sempre associato ad un portafoglio (con sua <span class=\"text-italic\">chiave pubblica</span>).<br/>E pubblicato sulla rete perche gli altri membri possino identificarla, certificarla o invarle soldi. <br/> Lo pseudonimo deve essere unico nella rete (tra quelli utilizzati adesso e in passato)."
     },
     "LOGIN": {
       "SECTION": "Accedi",
       "PUBKEY": "Chiave pubblica del conto",
       "PUBKEY_DEF": "La chiave pubblica del portachiavi Ã¨ generata dai credenziali, ma non corrispode ad un conto giÃ  utilizzato.<br/><b>Accertati che tua chiave pubblica corrisponda al tuo conto</b>. Nel caso contrario, sarai conesso/a ad un conto probabilmente mai usato, datto che il rischio di collisione con un conto esistente Ã¨ molto ridotto.<br/><a href=\"https://en.wikipedia.org/wiki/Elliptic_curve_cryptography\" target=\"_ system\">Saperne di piÃ¹ sulla cryptografia </a> con chiave pubblica.",
       "METHOD": "Metodi di connessione",
       "METHOD_DEF": "Hai diverse opzioni per accedere ad un portafoglio:<br/> - Accedendo con <b>salatura (leggera o sicura)</b> tua password sarÃ  cryptata dal tuo identificativo segreto per scoraggiare tentativi di attachi di 'brute force' (per esempio con passwords conosciute).<br/> - Accedendo con la <b>chiave pubblica</b> ti evita di dover digitare tuoi credenziali che ti saranno chiesti solo quando vorrai fare una operazione col conto.<br/> - Accedendo <b>con un portachiavi</b> che leggerÃ  tue chiave pubbliche e private da un file esterno, senza che tu li debba entrare."
     },
     "GLOSSARY": {
       "SECTION": "Glossario",
       "PUBKEY_DEF": "Una chiave pubblica permette di identificare un portafoglio. Puo anche identificare un membro. In Cesium  Ã¨ calcolata con la password e lo pseudonimo.",
       "MEMBER": "Membro",
       "MEMBER_DEF": "Un membro Ã¨ una persona reale e viva, che desidera participare liberamente alla communitÃ  monetaria. Questo membro riceverÃ  un Dividendo Universale, a secondo delle regole definite <span class=\"text-italic\">nei parametri della moneta</span>.",
       "CURRENCY_RULES": "Regole della moneta",
       "CURRENCY_RULES_DEF": "I parametri delle moneta sono state definite per sempre e per tutti. I parametri con i quali la moneta si comporta: il calcolo del Dividendo Universale, il numero di certificazioni necessarie per diventare membro, il numero massimo di certificazioni che un membro puo inviare, etc.<br/><br/>I parametri non possono essere modificati perche c'Ã¨ una<span class=\"text-italic\">Blockchain</span> che implementa e esegue queste regole e verifica costantemente la loro applicazione. <a href=\"#/app/currency\">Vedere i parametri </a>.",
       "BLOCKCHAIN": "Blockchain",
       "BLOCKCHAIN_DEF": "La Blockchain Ã¨ un sistema decentralizzato che, nel caso di Duniter, permette di rispettare e implementare <span class=\"text-italic\">le regole della moneta</span>.<br/><a href=\"http://en.duniter.org/presentation/\" target=\"_blank\">Saperne di piÃ¹ su Duniter</a> e il funzionamento della blockchain.",
       "UNIVERSAL_DIVIDEND_DEF": "Il Dividendo Universale (UD) Ã¨ la quantitÃ  di moneta co-creata da ogni membro, seguendo le formule mathematiche definite nelle <span class=\"text-italic\">regole della moneta</span>.<br/>Al inizio di ogni periodo, il conto di ogni membro riceve una quantitÃ  uguale della nuova moneta creata. <br/><br/>Il DU conosce una crescita costante per rimanere equo nei confronti dei membri (attuali e passati). Viene calcolato tenendo in conto la speranza di vitÃ  media, cosi come dimostrato nella Teoria Relativa della Moneta (TRM).<br/><a href=\"http://trm.creationmonetaire.info\" target=\"_system\">Saperne di piÃ¹ sulla TRM</a> e la moneta libera."
     },
     "TIP": {
       "MENU_BTN_CURRENCY": "Menu <b>{{'MENU.CURRENCY'|translate}}</b> permette la scoperta dei <b>parametri della moneta</b> e la sua condizione presente.",
       "CURRENCY_WOT": "Il <b>numero di membri</b> mostra <b>le dimensioni della WoT e la sua evoluzione </b>.",
       "CURRENCY_MASS": "In evidenza qui Ã¨ <b>l'importo totale</b> attualmente in circolazione e la sua <b> ripartizione media </b> a testa.<br/><br/>Questa cifra permette di avere un'idea <b>del valore di qualsiasi importo</b>, in base a quello <b>hanno gli altri</b> sul loro conto (in media).",
       "CURRENCY_UNIT_RELATIVE": "L'unitÃ  usata qui (&ldquo;<b>{{'COMMON.UD'|translate}}<sub>{{currency|abbreviate}}</sub></b>&rdquo;) significa che gli importi in {{currency|capitalize}} sono stati divisi dal <b>Dividendo Universale</b> (DU).<br/><br/><small>Questa unitÃ  relativa <b>ha senso</b> perche Ã¨ stabile in contrasto con la massa monetaria che cresce costantemente.</small>",
       "CURRENCY_CHANGE_UNIT": "Questa opzione <b>{{'COMMON.BTN_RELATIVE_UNIT'|translate}}</b> permette di <b>permutare unitÃ </b> per vedere gli importi in <b>{{currency|capitalize}}</b>, non divisi dal Dividendo Universale (piuttosto che in &ldquo;<b>{{'COMMON.UD'|translate}}<sub>{{currency|abbreviate}}</sub></b>&rdquo;).",
       "CURRENCY_CHANGE_UNIT_TO_RELATIVE": "Questa opzione <b>{{'COMMON.BTN_RELATIVE_UNIT'|translate}}</b> permette <b>di permutare unitÃ </b> per vedere gli importi in &ldquo;<b>{{'COMMON.UD'|translate}}<sub>{{currency|abbreviate}}</sub></b>&rdquo;, che Ã¨ relativo al Dividendo Universale (l'importo co-prodotto da ogni membro).",
       "CURRENCY_RULES": "Le<b>regole</b> della moneta determinano il suo <b>esatto e previdibile</b> comportamento.<br/><br/> Considerate come il proprio DNA della moneta, queste regole rendono il codice monetario <b>trasparente e comprensibile</b>.",
       "MENU_BTN_NETWORK": "Menu <b>{{'MENU.NETWORK'|translate}}</b> permette la scopertÃ  dello <b>stato della rete<b>.",
       "NETWORK_BLOCKCHAIN": "Tutte le transazioni monetarie sono registrate in <b>registro sicuro e a prova di manomissione</b>, spesso chiamato <b>blockchain</b>.",
       "NETWORK_PEERS": "I<b>peers</b> mostrati qui corrispondono a <b>dei computers che aggiornano e monitorano</b> la blockchain.<br/><br/>PiÃ¹ peers ci sono, piÃ¹ <b>decentralizzata</b> e piÃ¹ affidabile diventa la moneta.",
       "NETWORK_PEERS_BLOCK_NUMBER": "Questo <b>numero</b> (in verda) indica <b>l'ultimo blocco validato</b> dal peer (ultima pagina scritta nel regitro).<br/><br/>Il verda indica che il blocco Ã¨ stato validato anche dalla <b>maggioranza degli altri peers</b>.",
       "NETWORK_PEERS_PARTICIPATE": "<b>Ogni membro</b>, che dispone di un computer connesso a Internet <b>puo partecipare, aggiungendosi come peer installando il software Duniter</b> (free/libre). <a target=\"_new\" href=\"{{installDocUrl}}\" target=\"_system\">Leggi il manuale d'installazione &gt;&gt;</a>.",
       "MENU_BTN_ACCOUNT": "<b>{{'ACCOUNT.TITLE'|translate}}</b> permette l'accesso al saldo del conto e la cronologia delle transazioni.",
       "MENU_BTN_ACCOUNT_MEMBER": "Qui puoi consultare lo stato del tuo conto, la cronologia delle transazioni e le tue certificazioni.",
       "WALLET_CERTIFICATIONS": "Clicca qui per vedere i dettagli delle tue certificazioni (date o ricevute).",
       "WALLET_RECEIVED_CERTIFICATIONS": "Clicca qui per vedere i dettagli delle <b>certificazioni che hai ricevuto</b>.",
       "WALLET_GIVEN_CERTIFICATIONS": "Clicca qui per vedere i dettagli delle <b>certificazioni che hai date</b>.",
       "WALLET_BALANCE": "Il <b>soldo</b> del tuo conto Ã¨ visibile qui.",
       "WALLET_BALANCE_RELATIVE": "{{'HELP.TIP.WALLET_BALANCE'|translate}}<br/><br/>L'unitÃ  utilizzata (&ldquo;<b>{{'COMMON.UD'|translate}}<sub>{{currency|abbreviate}}</sub></b>&rdquo;) significa che questo importo in {{currency|capitalize}} Ã¨ stato diviso dal <b>Dividendo Universale</b> (DU) co-creato da ogni membro.<br/>Ad oggi, 1 DU equivale a {{currentUD}} {{currency|capitalize}}.",
       "WALLET_BALANCE_CHANGE_UNIT": "Puoi <b>cambiare l'unitÃ </b> in cui sono mostrati gli importi in <b><i class=\"icon ion-android-settings\"></i>&nbsp;{{'MENU.SETTINGS'|translate}}</b>.<br/><br/>Per esempio, per mostrare gli importi <b>direttamente in {{currency|capitalize}}</b> piuttosto che in unitÃ  relativa.",
       "WALLET_PUBKEY": "Questa Ã¨ la chiave pubblica del tuo conto. La puoi dare ad un terzo perche possa identificare tuo conto.",
       "WALLET_SEND": "Paghi in pochi clics.",
       "WALLET_SEND_NO_MONEY": "Paghi in pochi clics.<br/>(Tuo saldo ancora non lo permette)",
       "WALLET_OPTIONS": "Questo bottone permette di fare <b>altre, meno frequenti azioni</b>.<br/><br/> Non dimenticarti di fare il tour guidato di Cesium quando hai un attimo!",
       "WALLET_RECEIVED_CERTS": "Questo mostra l'elenco delle persone che ti hanno fatto entrare nella WoT.",
       "WALLET_CERTIFY": "Questo bottone <b>{{'WOT.BTN_SELECT_AND_CERTIFY'|translate}}</b> permette di selezionare e certificare una identitÃ .<br/><br/>Solo gli utenti <b>che sono giÃ  membri</b> possono certificare gli altri.",
       "WALLET_CERT_STOCK": "Tuo stock di certificazioni da dare Ã¨ limitato a <b>{{sigStock}} certificazioni</b>.<br/><br/>Questo stock si rifornisce col tempo, man mano che le certificazioni inviate scadono.",
       "MENU_BTN_TX_MEMBER": "<b>{{'MENU.TRANSACTIONS'|translate}}</b> permette l'accesso alla cronologia delle transazioni, e permette di fare nuovi bonifici.",
       "MENU_BTN_TX": "Visualizza la cronologia <b>delle tue transazioni</b> qui e fai nuovi bonifici.",
       "MENU_BTN_WOT": "Il menu<b>{{'MENU.WOT'|translate}}</b> permette di cercare <b>utenti</b> della moneta (membri o non).",
       "WOT_SEARCH_TEXT_XS": "Per fare una ricerca nel annuario, digita <b>le prime lettere dello pseudonimo o della chiave pubblica di un utente</b>.<br/><br/>La ricerca inizierÃ  automaticamente.",
       "WOT_SEARCH_TEXT": "Per cercare nel annuario, digita <b>le prime lettere dello pseudonimo o della chiave pubblica di un utente</b>.<br/><br/>DopodichÃ¨ calca <b>Enter</b> per avviare la ricerca.",
       "WOT_SEARCH_RESULT": "Visualizza la scheda dettagliata di un utente con un semplice click sulla linea.",
       "WOT_VIEW_CERTIFICATIONS": "La linea <b>{{'ACCOUNT.CERTIFICATION_COUNT'|translate}}</b> mostra quanti membri hanno certificato questa identitÃ .<br/><br/>Queste certificazioni dimostrano che il conto appartiene ad <b>una persona viva</b> e che questa persona non ha <b>nessun altro conto membro</b>.",
       "WOT_VIEW_CERTIFICATIONS_COUNT": "Ci vogliono almeno <b>{{sigQty}} certificazioni</b> per diventare membro e co-produrre il <b>Dividendo Universale</b>.",
       "WOT_VIEW_CERTIFICATIONS_CLICK": "Clicca qui per aprire <b>una lista di tutte le certificazioni</b> ricevute e date da questa identitÃ .",
       "WOT_VIEW_CERTIFY": "Il bottone <b>{{'WOT.BTN_CERTIFY'|translate}}</b> permette di aggiungere tua certificazione a questa identitÃ .",
       "CERTIFY_RULES": "<b>Attenzione:</b> Certifichi <b> solo persone reali e vive</b> che non hanno nessun altro conto membro.<br/><br/>L'affidabilitÃ  della moneta dipende della vigilanza di ciascuno.",
       "MENU_BTN_SETTINGS": "Les <b>{{'MENU.SETTINGS'|translate}}</b> ti permettono di configurare Cesium.<br/><br/>Per esempio, puoi <b>cambiare l'unitÃ </b> in cui visualizzi la moneta.",
       "HEADER_BAR_BTN_PROFILE": "Clicca qui per entrare nel <b>tuo profilo utente</b>",
       "SETTINGS_CHANGE_UNIT": "Puoi cambiare <b>l'unitÃ </b> della moneta cliccando qui.<br/><br/>- Disabilita questa opzione per vedere gli importi in {{currency|capitalize}}.<br/>- Abilita l'opzione per importi relativi in {{'COMMON.UD'|translate}}<sub>{{currency|abbreviate}}</sub> (<b>divisi</b> dal attuale Dividendo Universale).",
       "END_LOGIN": "Il tour guidato <b>Ã¨ finito</b>.<br/><br/>Benvenuto nel <b>economia libera</b>!",
       "END_NOT_LOGIN": "Il tour guidato <b>Ã¨ finito</b>.<br/><br/>Se desideri entrare nella Web of Trust {{currency|capitalize}}, basta cliccare <b>{{'LOGIN.CREATE_ACCOUNT'|translate}}</b> qui sotto."
     }
   },
  "API" :{
    "COMMON": {
      "LINK_DOC": "documentation API",
      "LINK_DOC_HELP": "Documentation pour les dÃ©veloppeurs",
      "LINK_STANDARD_APP": "version classique",
      "LINK_STANDARD_APP_HELP": "Ouvrir la version classique de {{'COMMON.APP_NAME'|translate}}"
    },
    "HOME": {
      "TITLE": "Documentation API {{'COMMON.APP_NAME'|translate}}",
      "MESSAGE": "Bienvenue dans la <b>documentation de l'API</b> {{'COMMON.APP_NAME'|translate}}.<br/>Connecter vos sites web Ã  <a href=\"http://duniter.org\" target=\"_system\">Duniter</a> trÃ¨s simplement !",
      "MESSAGE_SHORT": "Connecter vos sites Ã  <a href=\"http://duniter.org\" target=\"_system\">Duniter</a> trÃ¨s simplement !",
      "DOC_HEADER": "Services disponibles :"
    },
    "TRANSFER": {
      "TITLE": "{{'COMMON.APP_NAME'|translate}} - Paiement en ligne",
      "TITLE_SHORT": "Paiement en ligne",
      "SUMMARY": "RÃ©capitulatif de la commande :",
      "AMOUNT": "Montant :",
      "NAME": "Nom :",
      "PUBKEY": "ClÃ© publique du destinaire :",
      "COMMENT": "RÃ©fÃ©rence de la commande :",
      "DEMO": {
        "SALT": "demo",
        "PASSWORD": "demo",
        "PUBKEY": "3G28bL6deXQBYpPBpLFuECo46d3kfYMJwst7uhdVBnD1",
        "HELP": "<b>Mode dÃ©monstration</b> : Aucun paiement ne sera rÃ©ellement envoyÃ© pendant cette simulation.<br/>Veuillez utiliser les identifiants : <b>{{'API.TRANSFER.DEMO.SALT'|translate}} / {{'API.TRANSFER.DEMO.PASSWORD'|translate}}</b>",
        "BAD_CREDENTIALS": "VÃ©rifiez votre saisie.<br/>En mode dÃ©monstration, les identifiants sont : {{'API.TRANSFER.DEMO.SALT'|translate}} / {{'API.TRANSFER.DEMO.PASSWORD'|translate}}"
      },
      "INFO": {
        "SUCCESS_REDIRECTING_WITH_NAME": "Paiement envoyÃ©.<br/>Redirection vers <b>{{name}}</b>...",
        "SUCCESS_REDIRECTING": "Paiement envoyÃ©.<br/>Redirection vers le site du vendeur...",
        "CANCEL_REDIRECTING_WITH_NAME": "Paiement annulÃ©.<br/>Redirection vers <b>{{name}}</b>...",
        "CANCEL_REDIRECTING": "Paiement annulÃ©.<br/>Redirection vers le site du vendeur..."
      },
      "ERROR": {
        "TRANSFER_FAILED": "Echec du paiement"
      }
    },
    "DOC": {
      "DESCRIPTION_DIVIDER": "Descrizione",
      "URL_DIVIDER": "Indirizzo chiamata",
      "PARAMETERS_DIVIDER": "Impostazioni",
      "AVAILABLE_PARAMETERS": "Ecco l'elenco dei parametri disponibili :",
      "DEMO_DIVIDER": "Provare",
      "DEMO_HELP": "Per provare questo servizio, clicca sul bottone qui a fianco. Il risultato apparirÃ  qui sotto .",
      "DEMO_RESULT": "Risultato della chiamata :",
      "DEMO_SUCCEED": "<i class=\"icon ion-checkmark\"></i> Successo !",
      "DEMO_CANCELLED": "<i class=\"icon ion-close\"></i> Annulato dal utente",
      "INTEGRATE_DIVIDER": "Integrare",
      "INTEGRATE_CODE": "Codice :",
      "INTEGRATE_RESULT": "Previsualizzare il risultato :",
      "INTEGRATE_PARAMETERS": "Parametri",
      "TRANSFER": {
        "TITLE": "Pagamenti",
        "DESCRIPTION": "Da un sito (per es. : un sito e-commerce) si puÃ² delegare il pagamento in moneta libera a Cesium API. Per invocare l'API, basta innescare l'apertura di una pagina con questo indirizzo:",
        "PARAM_PUBKEY": "Chiave pubblica del destinatario",
        "PARAM_PUBKEY_HELP": "Chiave pubblica del destinatario (obliggatoria)",
        "PARAM_AMOUNT": "Importo",
        "PARAM_AMOUNT_HELP": "Importo della transazione (obligatorio)",
        "PARAM_COMMENT": "Riferimento (o commento)",
        "PARAM_COMMENT_HELP": "Riferimento o commento. Ti puÃ² aiutare per esempio a trovare tuo pagamento nella blockchain.",
        "PARAM_NAME": "Nome (de destinatario o del sito web)",
        "PARAM_NAME_HELP": "Nom del sito web o del destinatario chiamando l'API. PuÃ² essere un nome leggibile (\"Mio sito\"), oppure l'indirizzo http del sito (\"MioSito.com\").",
        "PARAM_REDIRECT_URL": "Indirizzo web di redirezione",
        "PARAM_REDIRECT_URL_HELP": "Indirizzo web (URL) di redirezione, chiamato dopo aver inviato il pagamento. PuÃ² includere le seguenti stringe, che saranno sostituite con i valori della transazione : \"{tx}\", \"{hash}\", \"{comment}\", \"{amount}\" e {pubkey}.",
        "PARAM_CANCEL_URL": "Indirizzo web della cancellazione",
        "PARAM_CANCEL_URL_HELP": "Indirizzo web (URL) in caso dell'annullamento del pagamento dall'utente. PuÃ² includere le seguenti stringe, che saranno sostituite dinamicamente : \"{comment}\", \"{amount}\" e {pubkey}.",
        "EXAMPLES_HELP": "Ecco esempi di integrazione :",
        "EXAMPLE_BUTTON": "Bottone HTML",
        "EXAMPLE_BUTTON_DEFAULT_TEXT": "Pagare in {{currency|currencySymbol}}",
        "EXAMPLE_BUTTON_DEFAULT_STYLE": "Stile personnalizzato",
        "EXAMPLE_BUTTON_TEXT_HELP": "Testo del bottone",
        "EXAMPLE_BUTTON_BG_COLOR": "Colore del fondo",
        "EXAMPLE_BUTTON_BG_COLOR_HELP": "Per esempio: #fbc14c, black, lightgrey, rgb(180,180,180)",
        "EXAMPLE_BUTTON_FONT_COLOR": "Colore del testo",
        "EXAMPLE_BUTTON_FONT_COLOR_HELP": "Esempio: black, orange, rgb(180,180,180)",
        "EXAMPLE_BUTTON_TEXT_ICON": "Icona",
        "EXAMPLE_BUTTON_TEXT_WIDTH": "Larghezza",
        "EXAMPLE_BUTTON_TEXT_WIDTH_HELP": "Esempio: 200px, 50%",
        "EXAMPLE_BUTTON_ICON_NONE": "Nessuna",
        "EXAMPLE_BUTTON_ICON_DUNITER": "Logo Duniter",
        "EXAMPLE_BUTTON_ICON_CESIUM": "Logo Cesium",
        "EXAMPLE_BUTTON_ICON_G1_COLOR": "Logo Ä1",
        "EXAMPLE_BUTTON_ICON_G1_BLACK": "Logo Ä1 (nero)"
      }
    }
  }
}
);

$translateProvider.translations("nl-NL", {
  "COMMON": {
    "APP_NAME": "Cesium",
    "APP_VERSION": "v{{version}}",
    "APP_BUILD": "build {{build}}",
    "PUBKEY": "Publieke sleutel",
    "MEMBER": "Lid",
    "BLOCK": "Blok",
    "BTN_OK": "OK",
    "BTN_YES": "Ja",
    "BTN_NO": "Nee",
    "BTN_SEND": "Verzenden",
    "BTN_SEND_MONEY": "Verstuur geld",
    "BTN_SEND_MONEY_SHORT": "Versturen",
    "BTN_SAVE": "Opslaan",
    "BTN_YES_SAVE": "Ja, opslaan",
    "BTN_YES_CONTINUE": "Ja, doorgaan",
    "BTN_SHOW": "Tonen",
    "BTN_SHOW_PUBKEY": "Toon sleutel",
    "BTN_RELATIVE_UNIT": "Gebruik relatieve eenheid",
    "BTN_BACK": "Terug",
    "BTN_NEXT": "Volgende",
    "BTN_CANCEL": "Annuleer",
    "BTN_CLOSE": "Sluit",
    "BTN_LATER": "Later",
    "BTN_LOGIN": "Aanmelden",
    "BTN_LOGOUT": "Uitloggen",
    "BTN_ADD_ACCOUNT": "Nieuwe Rekening",
    "BTN_SHARE": "Delen",
    "BTN_EDIT": "Bewerken",
    "BTN_DELETE": "Wissen",
    "BTN_ADD": "Toevoegen",
    "BTN_SEARCH": "Zoeken",
    "BTN_REFRESH": "Verwezenlijken",
    "BTN_START": "Beginnen",
    "BTN_CONTINUE": "Doorgaan",
    "BTN_UNDERSTOOD": "Ik heb het begrepen",
    "BTN_OPTIONS": "Opties",
    "BTN_HELP_TOUR": "Rondleiding",
    "BTN_HELP_TOUR_SCREEN": "Ontdek dit scherm",
    "BTN_DOWNLOAD": "Downloaden",
    "BTN_DOWNLOAD_ACCOUNT_STATEMENT": "Downloaden het rekeningoverzicht",
    "BTN_MODIFY": "Bewerken",
    "DAYS": "dagen",
    "NO_ACCOUNT_QUESTION": "Nog geen lid? Registreer nu!",
    "SEARCH_NO_RESULT": "Geen resultaten",
    "LOADING": "Even geduld...",
    "SEARCHING": "Zoeken...",
    "FROM": "Van",
    "TO": "Aan",
    "COPY": "Kopieren",
    "LANGUAGE": "Taal",
    "UNIVERSAL_DIVIDEND": "Universeel dividend",
    "UD": "UD",
    "DATE_PATTERN": "DD-MM-YYYY HH:mm",
    "DATE_FILE_PATTERN": "YYYY-MM-DD",
    "DATE_SHORT_PATTERN": "DD-MM-YY",
    "DATE_MONTH_YEAR_PATTERN": "MM-YYYY",
    "EMPTY_PARENTHESIS": "(leeg)",
    "UID": "Pseudoniem",
    "ENABLE": "Geactiveerd",
    "DISABLE": "Gedeactiveerd",
    "RESULTS_LIST": "Resultaten:",
    "RESULTS_COUNT": "{{count}} uitslagen",
    "EXECUTION_TIME": "uitgevoerd in {{duration|formatDurationMs}}",
    "SHOW_VALUES": "Toon waarden openlijk?",
    "POPOVER_ACTIONS_TITLE": "Opties",
    "POPOVER_FILTER_TITLE": "Filters",
    "SHOW_MORE": "Toon meer",
    "SHOW_MORE_COUNT": "(huidig limiet op {{limit}})",
    "POPOVER_SHARE": {
      "TITLE": "Delen",
      "SHARE_ON_TWITTER": "Deel op Twitter",
      "SHARE_ON_FACEBOOK": "Deel op Facebook",
      "SHARE_ON_DIASPORA": "Deel op Diaspora*",
      "SHARE_ON_GOOGLEPLUS": "Deel op Google+"
    }
  },
  "SYSTEM": {
    "PICTURE_CHOOSE_TYPE": "Selecteer bron:",
    "BTN_PICTURE_GALLERY": "Gallerij",
    "BTN_PICTURE_CAMERA": "<b>Camera</b>"
  },
  "MENU": {
    "HOME": "Welkom",
    "WOT": "Register",
    "CURRENCY": "Valuta",
    "CURRENCIES": "Valuta's",
    "ACCOUNT": "Mijn rekening",
    "TRANSFER": "Overmaken",
    "SCAN": "Scannen",
    "SETTINGS": "Instellingen",
    "NETWORK": "Netwerk",
    "TRANSACTIONS": "Mijn transacties"
  },
  "ABOUT": {
    "TITLE": "Over",
    "LICENSE": "<b>Vrije</b> software (GNU GPLv3 licentie).",
    "CODE": "Broncode:",
    "DEVELOPERS": "Ontwikkelaars:",
    "FORUM": "Forum:",
    "DEV_WARNING": "Waarschuwing",
    "DEV_WARNING_MESSAGE": "Deze applicatie is nog in actieve onwikkeling.<br/>Meld ons elk pobleem!",
    "DEV_WARNING_MESSAGE_SHORT": "Deze App is nog instabiel (in ontwikkeling).",
    "REPORT_ISSUE": "Meld een probleem"
  },
  "HOME": {
    "TITLE": "Cesium",
    "WELCOME": "Welkom bij de Cesium Applicatie!",
    "MESSAGE": "Bekijk je {{currency|abbreviate}} portefeilles in real time.",
    "BTN_REGISTRY": "Register",
    "BTN_CURRENCY": "Verken valuta",
    "BTN_ABOUT": "over",
    "BTN_HELP": "Help",
    "REPORT_ISSUE": "Meld een probleem",
    "NOT_YOUR_ACCOUNT_QUESTION" : "Je hoeft niet de rekening <b><i class=\"ion-key\"></i> {{pubkey|formatPubkey}}</b> in uw bezit?",
    "BTN_CHANGE_ACCOUNT": "Dit account ontkoppelen",
    "CONNECTION_ERROR": "Node <b>{{server}}</b> onbereikbaar of ongeldig adres.<br/><br/>Controleer de internetverbinding, of schakel knooppunt <a class=\"positive\" ng-click=\"doQuickFix('settings')\">in parameters</a>."
  },
  "SETTINGS": {
    "TITLE": "Instellingen",
    "NETWORK_SETTINGS": "Netwerk",
    "PEER": "Duniter knooppunt adres",
    "PEER_CHANGED_TEMPORARY": "Adres tijdelijk worden gebruikt",
    "USE_LOCAL_STORAGE": "Lokale opslag inschakelen",
    "USE_LOCAL_STORAGE_HELP": "Slaat uw instellingen",
    "ENABLE_HELPTIP": "Contextgebonden hulp inschakelen",
    "ENABLE_UI_EFFECTS": "Schakel visuele effecten",
    "HISTORY_SETTINGS": "Mijn rekening",
    "DISPLAY_UD_HISTORY": "Toon geproduceerde dividenden?",
    "AUTHENTICATION_SETTINGS": "Authentificatie",
    "REMEMBER_ME": "Onthoud mij",
    "REMEMBER_ME_HELP": "Hiermee kunt u blijven altijd aangesloten (niet aanbevolen).",
    "PLUGINS_SETTINGS": "Uitbreidingen",
    "BTN_RESET": "Herstel standaardinstellingen",
    "EXPERT_MODE": "Geavanceerde modus inschakelen",
    "EXPERT_MODE_HELP": "Toon meer details",
    "POPUP_PEER": {
      "TITLE" : "Duniter Knooppunt",
      "HOST" : "Adres",
      "HOST_HELP": "Aadres: server:poort",
      "USE_SSL" : "Secure?",
      "USE_SSL_HELP" : "(SSL-encryptie)",
      "BTN_SHOW_LIST" : "Lijst van knooppunten"
    }
  },
  "BLOCKCHAIN": {
    "HASH": "Hachee : {{hash}}",
    "VIEW": {
      "HEADER_TITLE": "Blok #{{number}}-{{hash|formatHash}}",
      "TITLE_CURRENT": "Huidige blok",
      "TITLE": "Blok #{{number|formatInteger}}",
      "COMPUTED_BY": "Berekend door het knooppunt",
      "SHOW_RAW": "Bekijk RAW-bestand",
      "TECHNICAL_DIVIDER": "Technische informatie",
      "VERSION": "Format versie",
      "HASH": "Hash berekend",
      "UNIVERSAL_DIVIDEND_HELP": "Munt gecoproduceerd door elk van de {{membersCount}} ledental",
      "EMPTY": "Er zijn geen gegevens in dit blok",
      "POW_MIN": "Mminimum moeilijkheid",
      "POW_MIN_HELP": "Moeilijkheid opgelegd hash te berekenen",
      "DATA_DIVIDER": "Gegevens",
      "IDENTITIES_COUNT": "Nieuwe identiteiten",
      "JOINERS_COUNT": "Nieuwe leden",
      "ACTIVES_COUNT": "Verlengingen",
      "ACTIVES_COUNT_HELP": "Leden die hun lidmaatschap te vernieuwen",
      "LEAVERS_COUNT": "Verlaters",
      "LEAVERS_COUNT_HELP": "Leden die niet langer wenst certificering",
      "EXCLUDED_COUNT": "Uitgesloten leden",
      "EXCLUDED_COUNT_HELP": "Oud-leden uitgesloten door niet-verlenging of gebrek aan certificeringen",
      "REVOKED_COUNT": "Identiteiten ingetrokken",
      "REVOKED_COUNT_HELP": "Deze rekeningen zullen niet langer leden",
      "TX_COUNT": "Transacties",
      "CERT_COUNT": "Certificeringen",
      "TX_TO_HIMSELF": "Ruil deal",
      "TX_OUTPUT_UNLOCK_CONDITIONS": "Omstandigheden van de introductie",
      "TX_OUTPUT_OPERATOR": {
        "AND": "en",
        "OR": "of"
      },
      "TX_OUTPUT_FUNCTION": {
        "SIG": "<b>handtekening</b> ",
        "XHX": "<b>Wachtwoord</b>, wiens SHA256 =",
        "CSV": "Geblokkeerd",
        "CLTV": "Opgesloten"
      }
    },
    "LOOKUP": {
      "TITLE": "Blokken",
      "NO_BLOCK": "Geen blok",
      "LAST_BLOCKS": "Recente blokken :",
      "BTN_COMPACT": "Compact"
    }
  },
  "CURRENCY": {
    "SELECT": {
      "TITLE": "Valuta's",
      "CURRENCIES": "Bekende valuta's",
      "MEMBERS_COUNT": "{{membersCount}} leden"
    },
    "VIEW": {
      "TITLE": "Valuta",
      "TAB_CURRENCY": "Valuta",
      "TAB_WOT": "Gemeenschap",
      "TAB_NETWORK": "Netwerk",
      "CURRENCY_NAME": "Valuta naam",
      "MEMBERS": "Ledental",
      "MEMBERS_VARIATION": "Variatie since {{duration | formatDuration}}",
      "MONEY_DIVIDER": "Geld",
      "MASS": "Monetaire massa",
      "SHARE": "Aandeel per lid",
      "UD": "Universeel Dividend",
      "C_ACTUAL": "Huidige toename",
      "MEDIAN_TIME": "Blockchain tijd",
      "POW_MIN": "Algemene moeilijkheidsgraad",
      "MONEY_RULES_DIVIDER": "Monetaire regels",
      "C_RULE": "Toename",
      "UD_RULE": "Universeel dividend (formule)",
      "SIG_QTY_RULE": "Benodigd aantal certificaties om lid te worden",
      "SIG_STOCK": "Maximum aantal certificaties te versturen per lid",
      "SIG_PERIOD": "Minimum vertraging tussen 2 certificaties verzonden door Ã©Ã©n en dezelfde persoon.",
      "SIG_WINDOW": "Maximum vertraging voor een certificatie in behandeling wordt genomen",
      "STEP_MAX": "Maximum afstand tussen elk WoT lid en een nieuw lid.",
      "WOT_RULES_DIVIDER": "Lidmaatschapseisen",
      "XPERCENT":"Minimum percentage schildwachten te bereiken om de afstandsregel te respecteren"
    }
  },
  "NETWORK": {
    "VIEW": {
      "MEDIAN_TIME": "Blockchain tijd",
      "LOADING_PEERS": "Even geduld...",
      "NODE_ADDRESS": "Adres :",
      "ENDPOINTS": {
        "BMAS": "Endpoint (SSL)",
        "BMATOR": "Endpoint TOR",
        "ES_USER_API": "Knoop Cesium+"
      }
    },
    "INFO": {
      "ONLY_SSL_PEERS": "Les noeuds non SSL ont un affichage dÃ©gradÃ©, car Cesium fonctionne en mode HTTPS."
    }
  },
  "PEER": {
    "PEERS": "Knopen",
    "SIGNED_ON_BLOCK": "Getekend op blok",
    "MIRROR": "spiegel",
    "CURRENT_BLOCK": "Blok #",
    "VIEW": {
      "TITLE": "Knoop",
      "OWNER": "Maakt deel uit van",
      "SHOW_RAW_PEERING": "Zie netwerkdocument",
      "KNOWN_PEERS": "Bekende knopen :",
      "GENERAL_DIVIDER": "Algemene informatie",
      "ERROR": {
        "LOADING_TOR_NODE_ERROR": "Kan knooppunt niet worden opgehaald. De wachttijd wordt overschreden.",
        "LOADING_NODE_ERROR": "Kan knooppunt niet worden opgehaald"
      }
    }
  },
  "WOT": {
    "SEARCH_HELP": "Zoeken (lid of publieke sleutel)",
    "SEARCH_INIT_PHASE_WARNING": "Tijdens de pre-registratiefase, het zoeken van lopende registraties <b>kan lang</b> zijn. Dank je wel geduld...",
    "REGISTERED_SINCE": "Registratie",
    "REGISTERED_SINCE_BLOCK": "Geregistreerd op blok #",
    "NO_CERTIFICATION": "Geen gevalideerde certificaties",
    "NO_GIVEN_CERTIFICATION": "Geen uitgegeven certificaties",
    "NOT_MEMBER_PARENTHESIS": "(niet-lid)",
    "IDENTITY_REVOKED_PARENTHESIS": "(ingetrokken identiteit)",
    "MEMBER_PENDING_REVOCATION_PARENTHESIS": "(en cours de rÃ©vocation)",
    "EXPIRE_IN": "Verloopt",
    "NOT_WRITTEN_EXPIRE_IN": "Uiterlijke<br/>behandeling",
    "EXPIRED": "Verlopen",
    "PSEUDO": "Pseudoniem",
    "SIGNED_ON_BLOCK": "Uitgegeven op block #{{block}}",
    "WRITTEN_ON_BLOCK": "Geschreven op block #{{block}}",
    "GENERAL_DIVIDER": "Algemene informatie",
    "NOT_MEMBER_ACCOUNT": "Geen lidaccount",
    "NOT_MEMBER_ACCOUNT_HELP": "Dit is een eenvoudige account zonder te wachten lidmaatschap aanvragen.",
    "TECHNICAL_DIVIDER": "Technishe informatie",
    "BTN_CERTIFY": "Certificeren",
    "BTN_YES_CERTIFY": "Ja, Certificeren",
    "BTN_SELECT_AND_CERTIFY": "Nieuwe certificatie",
    "ACCOUNT_OPERATIONS": "Operaties op de rekening",
    "VIEW": {
      "POPOVER_SHARE_TITLE": "Identiteit {{title}}"
    },
    "LOOKUP": {
      "TITLE": "Register",
      "NEWCOMERS": "Nieuwe leden:",
      "PENDING": "Aspirant leden:",
      "REGISTERED": "Geregistreerd {{sigDate | formatFromNow}}",
      "MEMBER_FROM": "Lid sinds {{memberDate|formatFromNowShort}}",
      "BTN_NEWCOMERS": "Nieuwste leden",
      "BTN_PENDING": "Registraties in afwachting",
      "SHOW_MORE": "Toon meer",
      "SHOW_MORE_COUNT": "(huidige limiet op {{limit}})",
      "NO_PENDING": "Er zijn geen registraties in afwachting gevonden.",
      "NO_NEWCOMERS": "Er zijn geen nieuwe leden gevonden."
    },
    "MODAL": {
      "TITLE": "Zoeken"
    },
    "CERTIFICATIONS": {
      "TITLE": "{{uid}} - Certificaties",
      "SUMMARY": "Ontvangen certificaties",
      "LIST": "Details van ontvangen certificaties",
      "PENDING_LIST": "Certificaties in afwachting",
      "RECEIVED": "Ontvangen certificaties",
      "RECEIVED_BY": "Certificaties ontvanged door {{uid}}",
      "ERROR": "Ontvangen vertificaties met fout",
      "SENTRY_MEMBER": "Referent lid"
    },
    "GIVEN_CERTIFICATIONS": {
      "TITLE": "{{uid}} - Verzonden certificaties",
      "SUMMARY": "Verzonden certificaties",
      "LIST": "Details van verzonden certificaties",
      "PENDING_LIST": "Certificaties in afwachting",
      "SENT": "Verzonden certificaties",
      "SENT_BY": "Certificaties verzonden door {{uid}}",
      "ERROR": "Verzonden certificaties met fout"
    }
  },
  "LOGIN": {
    "TITLE": "<i class=\"icon ion-locked\"></i> Inloggen",
    "SALT": "Beveiligingszin",
    "SALT_HELP": "Zin ter beveiliging van uw rekening",
    "SHOW_SALT": "Toon de beveiligingszin",
    "PASSWORD": "Wachtwoord",
    "PASSWORD_HELP": "Wachtwoord ter beveiliging van uw rekening",
    "NO_ACCOUNT_QUESTION": "Nog geen rekening?",
    "CREATE_ACCOUNT": "Open een rekening",
    "FORGOTTEN_ID": "Wachtwoord vergeten?"
  },
  "ACCOUNT": {
    "TITLE": "Mijn rekening",
    "BALANCE": "Saldo",
    "LAST_TX": "Recente transacties",
    "BALANCE_ACCOUNT": "Rekeningsaldo",
    "NO_TX": "Geen transacties",
    "SHOW_MORE_TX": "Show more",
    "SHOW_ALL_TX": "Show all",
    "TX_FROM_DATE": "(huidige limiet op {{fromTime|formatFromNowShort}})",
    "PENDING_TX": "Transacties in afwachting",
    "ERROR_TX": "Niet uitgevoerde transacties",
    "ERROR_TX_SENT": "Verzonden transacties",
    "ERROR_TX_RECEIVED": "Ontvangen transacties",
    "EVENTS": "Gebeurtenissen",
    "WAITING_MEMBERSHIP": "Lidmaatschapsverzoek verzonden. In afwachting van validatie.",
    "WAITING_CERTIFICATIONS": "Je hebt {{needCertificationCount}} certificatie(s) nodig om lid te worden",
    "WILL_MISSING_CERTIFICATIONS": "Je heeft binnenkort <b>onvoldoende certificaties</b> (ten minste {{willNeedCertificationCount}} benodigd)",
    "WILL_NEED_RENEW_MEMBERSHIP": "Je lidmaatschap <b>gaat verlopen op {{membershipExpiresIn|formatDurationTo}}</b>. Vergeet niet <a ng-click=\"doQuickFix('renew')\">je lidmaatschap te vernieuwen</a> voor die tijd.",
    "CERTIFICATION_COUNT": "Aantal certificaties",
    "CERTIFICATION_COUNT_SHORT": "Certificaties",
    "SIG_STOCK": "Voorraad uit te geven certificaties",
    "BTN_RECEIVE_MONEY": "Ontvangen",
    "BTN_MEMBERSHIP_IN_DOTS": "Lidmaatschap aanvragen...",
    "BTN_MEMBERSHIP_RENEW": "Lidmaatschap verlengen",
    "BTN_MEMBERSHIP_RENEW_DOTS": "Lidmaatschap verlengen...",
    "BTN_MEMBERSHIP_OUT_DOTS": "Lidmaatschap opzeggen...",
    "BTN_SEND_IDENTITY_DOTS": "Identiteit publiceren...",
    "BTN_SECURITY_DOTS": "Account en veiligheid...",
    "BTN_SHOW_DETAILS": "Tonen technische informatie",
    "BTN_REVOKE": "Deze identiteit<span class='hidden-xs hidden-sm'> definitief</span> opzeggen...",
    "NEW": {
      "TITLE": "Registratie",
      "SLIDE_1_TITLE": "Selecteer een valuta:",
      "SLIDE_2_TITLE": "Soort rekening:",
      "MEMBER_ACCOUNT": "Persoonlijke rekening (lidmaatschap)",
      "MEMBER_ACCOUNT_HELP": "Als je nog niet als individu geregistreerd bent (Ã©Ã©n rekening per individu mogelijk).",
      "WALLET_ACCOUNT": "Eenvoudige portefeille",
      "WALLET_ACCOUNT_HELP": "Als je een onderneming, stichting etc. vertegenwoordigd of eenvoudigweg een additionele portefeille nodig hebt. Geen individueel universeel dividend zal door deze rekening gecrÃ©eerd worden.",
      "SALT_WARNING": "Kies een beveiligingszin.<br/>Deze heb je nodig voor ieder verbinding met je account.<br/><br/><b>Zorg dat je deze zin goed onthoud</b>.<br/>Eenmaal verloren, is er geen mogelijkheid om hem te achterhalen!",
      "PASSWORD_WARNING": "Kies een wachtwoord.<br/>Deze heb je nodig voor ieder verbinding met je account.<br/><br/><b>Zorg dat je dit woord goed onthoud</b>.<br/>Eenmaal verloren, is er geen mogelijkheid om hem te achterhalen!",
      "PSEUDO_WARNING": "Kies een pseudoniem.<br/>Het dient om makkelijker gevonden te worden door anderen.<br/><br/>.Gebruik van spaties, komma's en accenten is niet toegestaan.<br/><div class='hidden-xs'><br/>Voorbeeld: <span class='gray'>JulesDeelder, JohanVermeer, etc.</span>",
      "PSEUDO": "Pseudoniem",
      "PSEUDO_HELP": "joe123",
      "SALT_CONFIRM": "Bevestig",
      "SALT_CONFIRM_HELP": "Bevestig de beveiligingszin",
      "PASSWORD_CONFIRM": "Bevestig",
      "PASSWORD_CONFIRM_HELP": "Bevestig het wachtwoord",
      "SLIDE_6_TITLE": "Bevestiging:",
      "COMPUTING_PUBKEY": "Berekening...",
      "LAST_SLIDE_CONGRATULATION": "Bravo! Je hebt alle verplichte velden ingevuld.<br/>Je kunt je <b>rekeningaanvraag verzenden</b>.<br/><br/>Ter informatie, de publieke sleutel hieronder identificeert je toekomstige rekening.<br/>Je kunt deze aan derde partijen communiceren om geld te ontvangen. Zodra je rekening geopend is, kun je de sleutel terugvinden onder <b>{{'ACCOUNT.TITLE'|translate}}</b>.",
      "CONFIRMATION_MEMBER_ACCOUNT": "<b class=\"assertive\">Waarschuwing:</b> je beveiligingszin, wachtwoord en pseudoniem kunnen hierna niet gewijzigd worden.<br/><b>Zorg dat ze goed onthoudt!</b><br/><b>Weet je zeker</b> dat je je persoonlijke rekeningaanvraag wil verzenden?",
      "CONFIRMATION_WALLET_ACCOUNT": "<b class=\"assertive\">Waarschuwing:</b> je wachtwoord en pseudoniem kunnen hierna niet gewijzigd worden.<br/><b>Zorg dat ze goed onthoudt!</b><br/><b>Weet je zeker</b> dat je deze portefeilleaanvraag wil verzenden?",
      "PSEUDO_AVAILABLE": "Deze naam is beschikbaar",
      "PSEUDO_NOT_AVAILABLE": "Deze gebruikersnaam is niet beschikbaar",
      "INFO_LICENSE": "Om de valuta te sluiten, vragen wij u om te lezen en deze licentie te accepteren.",
      "BTN_ACCEPT": "Ik accepteer",
      "BTN_ACCEPT_LICENSE": "Ik ga akkoord met de licentie"
    },
    "POPUP_REGISTER": {
      "TITLE": "Voer een pseudoniem in",
      "HELP": "Een pseudoniem is nodig voor anderen om je te kunnen vinden."
    },
    "FILE_NAME": "{{currency}} - Rekeningafschrift {{pubkey|formatPubkey}} {{currentTime|formatDateForFile}}.csv",
    "HEADERS": {
      "TIME": "Datum",
      "AMOUNT": "Bedrag",
      "COMMENT": "Commentaar"
    }
  },
  "TRANSFER": {
    "TITLE": "Overboeken",
    "SUB_TITLE": "Geld overboeken",
    "FROM": "Van",
    "TO": "Aan",
    "AMOUNT": "Bedrag",
    "AMOUNT_HELP": "Bedrag",
    "COMMENT": "Opmerking",
    "COMMENT_HELP": "Opmerking (optioneel)",
    "BTN_SEND": "Verzenden",
    "BTN_ADD_COMMENT": "Opmerking toevoegen",
    "WARN_COMMENT_IS_PUBLIC": "Houd er rekening mee dat <b>reacties openbaar zijn </b> (niet-versleuteld).",
    "MODAL": {
      "TITLE": "Overboeking"
    }
  },
  "ERROR": {
    "POPUP_TITLE": "Error",
    "UNKNOWN_ERROR": "Unknown error",
    "CRYPTO_UNKNOWN_ERROR": "Your browser is not compatible with cryptographic features.",
    "FIELD_REQUIRED": "This field is required.",
    "FIELD_TOO_SHORT": "Value is too short (min {{minLength]] characters).",
    "FIELD_TOO_SHORT_WITH_LENGTH": "This field value is too short.",
    "FIELD_TOO_LONG": "Value is exceeding max length.",
    "FIELD_TOO_LONG_WITH_LENGTH": "Value is too long (max {{maxLength}} characters).",
    "FIELD_ACCENT": "Commas and accent characters not allowed",
    "FIELD_NOT_NUMBER": "Value is not a number",
    "FIELD_NOT_INT": "Value is not an integer",
    "PASSWORD_NOT_CONFIRMED": "Must match previous password.",
    "SALT_NOT_CONFIRMED": "Must match previous phrase.",
    "SEND_IDENTITY_FAILED": "Error while trying to register.",
    "SEND_CERTIFICATION_FAILED": "Could not certify identity.",
    "NEED_MEMBER_ACCOUNT_TO_CERTIFY": "You could not send certification, because your account is <b>not a member account</b>.",
    "NEED_MEMBER_ACCOUNT_TO_CERTIFY_HAS_SELF": "You could not send certification now, because your are <b>not a member</b> yet.<br/><br/>You still need certification to become a member.",
    "NOT_MEMBER_FOR_CERTIFICATION": "Your account is not a member account yet.",
    "IDENTITY_TO_CERTIFY_HAS_NO_SELF": "This account could not be certified. No registration found, or need to renew.",
    "LOGIN_FAILED": "Error while sign in.",
    "LOAD_IDENTITY_FAILED": "Could not load identity.",
    "LOAD_REQUIREMENTS_FAILED": "Could not load identity requirements.",
    "SEND_MEMBERSHIP_IN_FAILED": "Error while sending registration as member.",
    "SEND_MEMBERSHIP_OUT_FAILED": "Error while sending membership revocation.",
    "REFRESH_WALLET_DATA": "Could not refresh wallet.",
    "GET_CURRENCY_PARAMETER": "Could not get currency parameters.",
    "GET_CURRENCY_FAILED": "Could not load currency.",
    "SEND_TX_FAILED": "Could not send transaction.",
    "ALL_SOURCES_USED": "Please wait the next block computation (All transaction sources has been used).",
    "NOT_ENOUGH_SOURCES": "Not enough changes to send this amount in one time.<br/>Maximum amount: {{amount}} {{unit}}<sub>{{subUnit}}</sub>.",
    "ACCOUNT_CREATION_FAILED": "Error while creating your member account.",
    "RESTORE_WALLET_DATA_ERROR": "Error while reloading settings from local storage",
    "LOAD_WALLET_DATA_ERROR": "Error while loading wallet data.",
    "COPY_CLIPBOARD_FAILED": "Could not copy to clipboard",
    "TAKE_PICTURE_FAILED": "Could not get picture.",
    "SCAN_FAILED": "Could not scan QR code.",
    "SCAN_UNKNOWN_FORMAT": "Code not recognized.",
    "WOT_LOOKUP_FAILED": "Search failed.",
    "LOAD_PEER_DATA_FAILED": "Duniter peer not accessible. Please retry later.",
    "NEED_LOGIN_FIRST": "Please sign in first.",
    "AMOUNT_REQUIRED": "Amount is required.",
    "AMOUNT_NEGATIVE": "Negative amount not allowed.",
    "NOT_ENOUGH_CREDIT": "Not enough credit.",
    "INVALID_NODE_SUMMARY": "Unreachable peer or invalid address",
    "INVALID_USER_ID": "Field 'pseudonym' must not contains spaces or special characters.",
    "INVALID_COMMENT": "Field 'reference' has a bad format.",
    "INVALID_PUBKEY": "Public key has a bad format.",
    "IDENTITY_INVALID_BLOCK_HASH": "This membership application is no longer valid (because it references a block that network peers are cancelled): the person must renew its application for membership <b>before</b> being certified.",
    "IDENTITY_EXPIRED": "This identity has expired: this person must re-apply <b>before</b> being certified.",
    "IDENTITY_SANDBOX_FULL": "Could not register, because peer's sandbox is full.<br/><br/>Please retry later or choose another Duniter peer (in <b>Settings</b>).",
    "WOT_PENDING_INVALID_BLOCK_HASH": "Membership not valid.",
    "WALLET_INVALID_BLOCK_HASH": "Your membership application is no longer valid (because it references a block that network peers are cancelled).<br/>You must <a ng-click=\"doQuickFix('renew')\">renew your application for membership</a> to fix this issue.",
    "WALLET_IDENTITY_EXPIRED": "The publication of your identity <b>has expired</b>.<br/>You must <a ng-click=\"doQuickFix('fixIdentity')\">re-issue your identity</a> to resolve this issue.",
    "WALLET_HAS_NO_SELF": "Your identity must first have been published, and not expired.",
    "IDENTITY_ALREADY_CERTIFY": "You have <b>already certified</b> that identity.<br/><br/>Your certificate is still valid (expires {{expiresIn|formatDuration}}).",
    "IDENTITY_ALREADY_CERTIFY_PENDING": "You have <b>already certified</b> that identity.<br/><br/>Your certification is still pending (Deadline for treatment {{expiresIn|formatDuration}}).",
    "UNABLE_TO_CERTIFY_TITLE": "Unable to certify",
    "LOAD_NEWCOMERS_FAILED": "Unable to load new members.",
    "LOAD_PENDING_FAILED": "Unable to load pending registrations.",
    "ONLY_MEMBER_CAN_EXECUTE_THIS_ACTION": "You must <b>be a member</b> in order to perform this action.",
    "ONLY_SELF_CAN_EXECUTE_THIS_ACTION": "You must have <b>published your identity</b> in order to perform this action.",
    "EXISTING_ACCOUNT": "Uw wachtwoord overeenkomen met een bestaande account, de <a ng-click=\"showHelpModal('pubkey')\">publieke sleutel</a> is:",
    "EXISTING_ACCOUNT_REQUEST": "Gelieve uw wachtwoord wijzigen om een ongebruikte account."
  },
  "INFO": {
    "POPUP_TITLE": "Informatie",
    "CERTIFICATION_DONE": "Identiteit succesvol getekend",
    "NOT_ENOUGH_CREDIT": "Niet genoeg krediet",
    "TRANSFER_SENT": "Verzoek tot overboeken succesvol verzonden",
    "COPY_TO_CLIPBOARD_DONE": "Kopie geslaagd",
    "MEMBERSHIP_OUT_SENT": "Opzegging lidmaatschap succesvol verzonden",
    "NOT_NEED_MEMBERSHIP": "Je bent al lid.",
    "IDENTITY_WILL_MISSING_CERTIFICATIONS": "Deze identiteit heeft binnenkort onvoldoende certificaties (ten minste {{willNeedCertificationCount}} nodig)."
  },
  "CONFIRM": {
    "POPUP_TITLE": "<b>Bevestiging</b>",
    "POPUP_WARNING_TITLE": "<b>Waarschuwing</b>",
    "CERTIFY_RULES_TITLE_UID": "Certificeer {{uid}}",
    "CERTIFY_RULES": "<b>Beveiligingswaarschuwing:</b><br/><br/><b class=\"assertive\">Certificeer een rekening niet</b> als je gelooft dat: <ul><li>1.) de aanvrager niet echt is.<li>2.) de aanvrager al een andere gecertificeerde rekening heeft.<li>3.) de aanvrager opzettelijk of door onzorgvuldigheid regel 1 of 2 overtreedt bij het verzenden van certificaten.</ul></small><br/>Weet je zeker dat je deze identieit wilt certificeren?",
    "TRANSFER": "<b>Samenvatting van de overboeking:</b><br/><br/><ul><li> - Van: <b>{{from}}</b></li><li> - Aan: <b>{{to}}</b></li><li> - Bedrag: <b>{{amount}} {{unit}}</b></li><li> - Opmerking: <i>{{comment}}</i></li></ul><br/><b>Weet je zeker dat je deze overboeking wil doen?</b>",
    "MEMBERSHIP_OUT": "<b>Waarschuwing</b>:<br/>Je staat op het punt je lidmaatschap te beÃ«indigen. Dit kan <b>niet ongedaan</b> worden gemaakt.<br/></br/><b>Weet je zeker dat je door wil gaan?</b>",
    "LOGIN_UNUSED_WALLET_TITLE": "Typefout?",
    "LOGIN_UNUSED_WALLET": "Je bent ingelogged op een rekening die <b>inactief</b> lijkt te zijn.<br/><br/>Als deze rekening niet met de uwe overeenkomt, komt dat waarschijnlijk door een <b>typefout</b> bij het inloggen.<br/><br/><b>Wilt u toch doorgaan met deze rekening?</b>",
    "FIX_IDENTITY": "De pseudoniem <b>{{uid}}</b> zal opnieuw gepubliceerd worden, waarmee de oude verlopen publicatie wordt vervangen.<br/></br/><bWeet je zeker</b> dat je door wil gaan?",
    "FIX_MEMBERSHIP": "Je verzoek to lidmaatschap zal verstuurd worden.<br/></br/><b>Weet je het zeker?</b>",
    "RENEW_MEMBERSHIP": "Je lidmaatschap zal verlengd worden.<br/></br/><b>Weet je het zeker?</b>",
    "REVOKE_IDENTITY": "<b>Beveiligingswaarschuwing:</b><br/>You will <b>definitely revoke this identity</b>.<br/><br/>The public key and the associated nickname <b>will never be used again</b> (for a member account).<br/></br/><b>Are you sure</b> you want to continue?",
    "REVOKE_IDENTITY_2": "Deze handeling is <b>niet terug te draaien</b>!<br/><br/><b>Weet je zeker</b> dat je door wil gaan?",
    "NOT_NEED_RENEW_MEMBERSHIP": "Je lidmaatschap hoeft niet verlengd te worden (het zal pas verlopen na {{membershipExpiresIn|formatDuration}}).<br/></br/><b>Weet je zeker</b> dat je een verlengingsaanvraag wil versturen?",
    "SAVE_BEFORE_LEAVE": "Wil je <b>je wijzigingen opslaan</b> voor je de pagina verlaat?",
    "SAVE_BEFORE_LEAVE_TITLE": "Wijzigingen niet opgeslagen",
    "LICENCE": "Ik heb gelezen en geaccepteerd de voorwaarden van de vergunning G1"
  },
  "DOWNLOAD": {
    "POPUP_TITLE": "<b>Intrekking File</b>",
    "POPUP_REVOKE_MESSAGE": "Om uw account te beveiligen, het downloaden van de <b>Account intrekking document</b>. U zult indien nodig om uw account (annuleren in het geval van de rekening van diefstal, een verandering van de identifier, een ten onrechte gemaakte account, etc.).<br/><br/><b>Bewaar deze op een veilige plaats.</b>"
  },
  "HELP": {
    "TITLE": "Online help",
    "JOIN": {
      "SECTION": "Join",
      "SALT": "The protection phrase is very important. It is used to hash you password, which in turn is used to calculate your <span class=\"text-italic\">public account key</span> (its number) and the private key to access it. <b>Please remeber this phrase well</b>, because there is no way to recover it when lost. What's more, it cannot be changed without having to create a new account.<br/><br/>A good protection phrase must be sufficiently long (8 characters at the very least) and as original as possible.",
      "PASSWORD": "The password is very important. Together with the protection phrase, it is use to calculate your account number (public key) and the private key to access it. <b>Please remember it well</b>, because there is no way to recover it when lost. What's more, it cannot be changed without having to create a new account.<br/><br/>A good password is made (ideally) of at least 8 characters, with at least one capital and one number.",
      "PSEUDO": "A pseudonym is used only when joining as <span class=\"text-italic\">member</span>. It is always associated with a wallet (by its <span class=\"text-italic\">public key</span>). It is published on the network so that other users may identify it, certify or send money to the account. A pseudonym must be unique among all members (current and past)."
    },
    "GLOSSARY": {
      "SECTION": "Glossary",
      "PUBKEY_DEF": "Een publieke sleutel identificeert altijd een portemonnee. Het kan een lid identificeren. In Cesium wordt berekend met de geheime ID en wachtwoord.",
      "MEMBER": "Member",
      "MEMBER_DEF": "A member is a real and living human, wishing to participate freely to the monitary community. The member will receive universal dividend, according to the period and amount as defined in the <span class=\"text-italic\">currency parameters</span>.",
      "CURRENCY_RULES": "Currency rules",
      "CURRENCY_RULES_DEF": "The currency rules are defined only once, and for all. They set the parameters under which the currency will perform: universal dividend calculation, the amount of certifications needed to become a member, the maximum amount of certifications a member can send, etc.<br/><br/>The parameters cannot be modified because of the use of a <span class=\"text-italic\">Blockchain</span> which carries and executes these rules, and constantly verifies their correct application. <a href=\"#/app/currency\">See current parameters</a>.",
      "BLOCKCHAIN": "Blockchain",
      "BLOCKCHAIN_DEF": "The Blockchain is a decentralised system which, in case of Duniter, serves to carry and execute the <span class=\"text-italic\">currency rules</span>.<br/><a href=\"http://en.duniter.org/presentation/\" target=\"_blank\">Read more about Duniter</a> and the working of its blockchain.",
      "UNIVERSAL_DIVIDEND_DEF": "The Universal Dividend (UD) is the quantity of money co-created by each member, according to the period and the calculation defined in the <span class=\"text-italic\">currency rules</span>.<br/>Every term, the members receive an equal amount of new money on their account.<br/><br/>The UD undergoes a steady growth, to remain fair under its members (current and future), calculated by an average life expectancy, as demonstrated in the Relative Theory of Money (RTM).<br/><a href=\"http://trm.creationmonetaire.info\" target=\"_system\">Read more about RTM</a> and open money."
    },
    "TIP": {
      "MENU_BTN_CURRENCY": "Menu <b>{{'MENU.CURRENCY'|translate}}</b> allows discovery of <b>currency parameters</b> and its state.",
      "CURRENCY_WOT": "The <b>member count</b> shows the <b>community's weight and evolution</b>.",
      "CURRENCY_MASS": "Shown here is the <b>total amount</b> currently in circulation and its <b>average distribution</b> per member.<br/><br/>This allows to estimate the <b>worth of any amount</b>, in respect to what <b>others own</b> on their account (on average).",
      "CURRENCY_UNIT_RELATIVE": "The unit used here (&ldquo;<b>{{'COMMON.UD'|translate}}<sub>{{currency|abbreviate}}</sub></b>&rdquo;) signifies that the amounts in {{currency|capitalize}} have been devided by the <b>Universal Dividend</b> (UD).<br/><br/><small>This relative unit is <b>relevant</b> because it is stable in contrast to the permanently growing monitary mass.</small>",
      "CURRENCY_CHANGE_UNIT": "This button allows to <b>switch the unit</b> to show amounts in <b>{{currency|capitalize}}</b>, undevided by the Universal Dividend (instead of in &ldquo;<b>{{'COMMON.UD'|translate}}<sub>{{currency|abbreviate}}</sub></b>&rdquo;).",
      "CURRENCY_CHANGE_UNIT_TO_RELATIVE": "This button allows to <b>switch the unit</b> to show amounts in &ldquo;<b>{{'COMMON.UD'|translate}}<sub>{{currency|abbreviate}}</sub></b>&rdquo;, which is relative to the Universal Dividend (the amount co-produced by each member).",
      "CURRENCY_RULES": "The <b>rules</b> of the currency determine its <b>exact and predictible</b> performance.<br/><br/>As a true DNA of the currency these rules make the monetary code <b>transparent and understandable</b>.",
      "NETWORK_BLOCKCHAIN": "All monetary transactions are recoded in a <b>public and tamper proof</b> ledger, generally referred to as the <b>blockchain</b>.",
      "NETWORK_PEERS": "The <b>peers</b> shown here correspond to <b>computers that update and check</b> the blockchain.<br/><br/>The more active peers there are, the more <b>decentralised</b> and therefore trustworhty the currency becomes.",
      "NETWORK_PEERS_BLOCK_NUMBER": "This <b>number</b> indicates the peer's <b>latest validated block</b> (last page written in the ledger).<br/><br/>Green indicates that the block was equally validated by the <b>majority of other peers</b>.",
      "NETWORK_PEERS_PARTICIPATE": "<b>Each member</b>, equiped with a computer with Internet, <b>can participate, adding a peer</b> simply by <b>installing the Duniter software</b> (free/libre and open source). <a href=\"{{installDocUrl}}\" target=\"_system\">Read the installation manual &gt;&gt;</a>.",
      "MENU_BTN_ACCOUNT": "<b>{{'ACCOUNT.TITLE'|translate}}</b> allows access to your account balance and transaction history.",
      "MENU_BTN_ACCOUNT_MEMBER": "Here you can consult your account status, transaction history and your certifications.",
      "WALLET_CERTIFICATIONS": "Click here to reveiw the details of your certifications (given and received).",
      "WALLET_BALANCE": "Your account <b>balance</b> is shown here.",
      "WALLET_BALANCE_RELATIVE": "{{'HELP.TIP.WALLET_BALANCE'|translate}}<br/><br/>The used unit (&ldquo;<b>{{'COMMON.UD'|translate}}<sub>{{currency|abbreviate}}</sub></b>&rdquo;) signifies that the amount in {{currency|capitalize}} has been divided by the <b>Universal Dividend</b> (UD) co-created by each member.<br/>At this moment, 1 UD equals {{currentUD}} {{currency|capitalize}}.",
      "WALLET_BALANCE_CHANGE_UNIT": "You can <b>change the unit</b> in which amounts are shown in <b><i class=\"icon ion-android-settings\"></i>&nbsp;{{'MENU.SETTINGS'|translate}}</b>.<br/><br/>For example, to display amounts <b>directly in {{currency|capitalize}}</b> instead of relative amounts.",
      "WALLET_SEND": "Issue a payment in just a few clicks.",
      "WALLET_SEND_NO_MONEY": "Issue a payment in just a few clicks.<br/>(Your balance does not allow this yet)",
      "WALLET_OPTIONS": "Please note that this button allows access to <b>other, less used actions</b>.<br/><br/>Don't forget to take a quick look, when you have a moment!",
      "WALLET_RECEIVED_CERTS": "This shows the list of persons that certified you.",
      "WALLET_CERTIFY": "The button <b>{{'WOT.BTN_SELECT_AND_CERTIFY'|translate}}</b> allows selecting an identity and certifying it.<br/><br/>Only users that are <b>already member</b> may certify others.",
      "WALLET_CERT_STOCK": "Your supply of certifications (to send) is limited to <b>{{sigStock}} certifications</b>.<br/><br/>This supply will replete itself over time, as and when earlier certifications expire.",
      "MENU_BTN_WOT": "The menu <b>{{'MENU.WOT'|translate}}</b> allows searching <b>users</b> of the currency (member or not).",
      "WOT_SEARCH_TEXT_XS": "To search in the registry, type the <b>first letters of a users pseudonym or public key</b>.<br/><br/>The search will start automatically.",
      "WOT_SEARCH_TEXT": "To search in the registry, type the <b>first letters of a users pseudonym or public key</b>.<br/><br/>Then hit <b>Enter</b> to start the search.",
      "WOT_SEARCH_RESULT": "Simply click a user row to view the details sheet.",
      "WOT_VIEW_CERTIFICATIONS": "The row <b>{{'ACCOUNT.CERTIFICATION_COUNT'|translate}}</b> shows how many members members validated this identity.<br/><br/>These certifications testify that the account belongs to <b>a living human</b> and this person has <b>no other member account</b>.",
      "WOT_VIEW_CERTIFICATIONS_COUNT": "There are at least <b>{{sigQty}} certifications</b> needed to become a member and receive the <b>Universal Dividend</b>.",
      "WOT_VIEW_CERTIFICATIONS_CLICK": "Click here to open <b>a list of all certifications</b> given to and by this identity.",
      "WOT_VIEW_CERTIFY": "The button <b>{{'WOT.BTN_CERTIFY'|translate}}</b> allows to add your certification to this identity.",
      "CERTIFY_RULES": "<b>Attention:</b> Only certify <b>real and living persons</b> that do not own any other certified account.<br/><br/>The trust carried by the currency depends on each member's vigilance!",
      "MENU_BTN_SETTINGS": "The <b>{{'MENU.SETTINGS'|translate}}</b> allow you to configure the Cesium application.<br/><br/>For example, you can <b>change the unit</b> in which the currency will be shown.",
      "HEADER_BAR_BTN_PROFILE": "Click here to access your <b>user profile</b>",
      "SETTINGS_CHANGE_UNIT": "You can <b>change the display unit</b> of amounts by clicking here.<br/><br/>- Deactivate the option to show amounts in {{currency|capitalize}}.<br/>- Activate the option for relative amounts in {{'COMMON.UD'|translate}}<sub>{{currency|abbreviate}}</sub> (<b>divided</b> by the current Universal Dividend).",
      "END_LOGIN": "This guided visit has <b>ended</b>.<br/><br/>Welcome to the <b>free economy</b>!",
      "END_NOT_LOGIN": "This guided visit has <b>ended</b>.<br/><br/>If you wish to join the currency {{currency|capitalize}}, simply click <b>{{'LOGIN.CREATE_ACCOUNT'|translate}}</b> below."
    }
  }
}
);
}]);


angular.module('cesium.plugins', [
  /* --  Generated plugin's modules -- */

  'cesium.plugins.translations',
  'cesium.plugins.templates',

  /* --  Plugins  -- */

  // Graph plugin:
  // removeIf(ubuntu)
  // Graph should be disable for Ubuntu build - see issue #463
  'cesium.graph.plugin',
  // endRemoveIf(ubuntu)

  // RML9 plugin:
  //'cesium.rml9.plugin',

  // ES plugin (Cesium+):
  'cesium.es.plugin',

  // Map plugin (Cesium+):
  'cesium.map.plugin'
  ])
;

angular.module("cesium.plugins.translations", []).config(["$translateProvider", function($translateProvider) {
$translateProvider.translations("en-GB", {
  "COMMON": {
    "CATEGORY": "Category",
    "CATEGORIES": "Categories",
    "CATEGORY_SEARCH_HELP": "Search",
    "LAST_MODIFICATION_DATE": "Updated on ",
    "SUBMIT_BY": "Submitted by",
    "BTN_PUBLISH": "Publish",
    "BTN_PICTURE_DELETE": "Delete",
    "BTN_PICTURE_FAVORISE": "Default",
    "BTN_PICTURE_ROTATE": "Rotate",
    "BTN_ADD_PICTURE": "Add picture",
    "NOTIFICATIONS": {
      "TITLE": "Notifications",
      "MARK_ALL_AS_READ": "Mark all as read",
      "NO_RESULT": "No notification",
      "SHOW_ALL": "Show all",
      "LOAD_NOTIFICATIONS_FAILED": "Could not load notifications"
    }
  },
  "MENU": {
    "REGISTRY": "Pages",
    "USER_PROFILE": "My Profile",
    "MESSAGES": "Messages",
    "NOTIFICATIONS": "Notifications",
    "INVITATIONS": "Invitations"
  },
  "ACCOUNT": {
    "NEW": {
      "ORGANIZATION_ACCOUNT": "Account for an organization",
      "ORGANIZATION_ACCOUNT_HELP": "If you represent a company, association, etc.<br/>No universal dividend will be created by this account."
    },
    "EVENT": {
      "MEMBER_WITHOUT_PROFILE": "To obtain your certification more quickly, fill in <a ui-sref=\"app.user_edit_profile\">your user profile</a>. Members will more easily put their trust in a verifiable identity."
    },
    "ERROR": {
      "WS_CONNECTION_FAILED": "Cesium can not receive notifications because of a technical error (connection to the Cesium + data node).<br/><br/>If the problem persists, please <b>choose another data node</b> in Cesium+ settings."
    }
  },
  "WOT": {
    "BTN_SUGGEST_CERTIFICATIONS_DOTS": "Suggest identities to certify...",
    "BTN_ASK_CERTIFICATIONS_DOTS": "Ask members to certify me...",
    "BTN_ASK_CERTIFICATION": "Ask a certification",
    "SUGGEST_CERTIFICATIONS_MODAL": {
      "TITLE": "Suggest certifications",
      "HELP": "Select your suggestions"
    },
    "ASK_CERTIFICATIONS_MODAL": {
      "TITLE": "Ask certifications",
      "HELP": "Select recipients"
    },
    "SEARCH": {
      "DIVIDER_PROFILE": "Accounts",
      "DIVIDER_PAGE": "Pages",
      "DIVIDER_GROUP": "Groups"
    },
    "CONFIRM": {
      "SUGGEST_CERTIFICATIONS": "Are you sure you want <b>to send these certification suggestions</b>?",
      "ASK_CERTIFICATION": "Are you sure you want to <b>send a certification request</b>?",
      "ASK_CERTIFICATIONS": "Are you sure you want to <b>send a certification request</b> to these people?"
    }
  },
  "INVITATION": {
    "TITLE": "Invitations",
    "NO_RESULT": "No invitation received",
    "BTN_DELETE_ALL": "Delete all invitations",
    "BTN_DELETE": "Delete invitation",
    "BTN_NEW_INVITATION": "New invitation",
    "ASK_CERTIFICATION": "<a href=\"#/app/wot/{{pubkey}}/{{::uid}}\">{{::name||uid}}</a> asks for your certification",
    "SUGGESTION_CERTIFICATION": "<a href=\"#/app/wot/{{::pubkey}}/{{::uid}}\">{{::name||uid}}</a> is suggested for certification",
    "SUGGESTED_BY": "Suggestion sent by <a class=\"positive\" href=\"#/app/wot/{{::issuer.pubkey}}/{{::issuer.uid}}\">{{::issuer.name||issuer.uid}}</a>",
    "NOTIFICATIONS": {
      "TITLE": "Invitations"
    },
    "LIST": {
      "TITLE": "Invitations"
    },
    "NEW": {
      "TITLE": "New invitation",
      "RECIPIENTS": "A",
      "RECIPIENTS_HELP": "Recipients of the invitation",
      "RECIPIENTS_MODAL_TITLE": "Recipients",
      "RECIPIENTS_MODAL_HELP": "Please choose recipients:",
      "SUGGESTION_IDENTITIES": "Suggestions for certification",
      "SUGGESTION_IDENTITIES_HELP": "Certifications to suggest",
      "SUGGESTION_IDENTITIES_MODAL_TITLE": "Suggestions",
      "SUGGESTION_IDENTITIES_MODAL_HELP": "Please choose your suggestions:"
    },
    "CONFIRM": {
      "DELETE_ALL_CONFIRMATION": "Removing invitations is <b>an irreversible operation</b>.<br/><br/><b>Are you sure</b> you want to continue",
      "SEND_INVITATIONS_TO_CERTIFY": "<b>Are you sure</b> you want <b>to sent this invitation to certify</b> ?"
    },
    "INFO": {
      "INVITATION_SENT": "Invitation sent"
    },
    "ERROR": {
      "LOAD_INVITATIONS_FAILED": "Error while loading invitations",
      "REMOVE_INVITATION_FAILED": "Error while deleting the invitation",
      "REMOVE_ALL_INVITATIONS_FAILED": "Error while deleting invitations",
      "SEND_INVITATION_FAILED": "Error while sending invitation",
      "BAD_INVITATION_FORMAT": "<span class=\"assertive\"><i class=\"ion-close-circled\"></i> Invitation unreadable (format unknown)</span> - sent by <a ui-sref=\"app.wot_identity({pubkey: '{{::pubkey}}', uid: '{{::uid}}' })\">{{::name||uid}}</a>"
    }
  },
  "COMMENTS": {
    "DIVIDER": "Comments",
    "SHOW_MORE_COMMENTS": "Show previous comments",
    "COMMENT_HELP": "Your comment, question...",
    "COMMENT_HELP_REPLY_TO": "Your answer...",
    "BTN_SEND": "Send",
    "POPOVER_SHARE_TITLE": "Message #{{number}}",
    "REPLY": "Reply",
    "REPLY_TO": "Respond to:",
    "REPLY_TO_LINK": "In response to ",
    "REPLY_TO_DELETED_COMMENT": "In response to a deleted comment",
    "REPLY_COUNT": "{{replyCount}} responses",
    "DELETED_COMMENT": "Comment deleted",
    "ERROR": {
      "FAILED_SAVE_COMMENT": "Saving comment failed",
      "FAILED_REMOVE_COMMENT": "Deleting comment failed"
    }
  },
  "MESSAGE": {
    "REPLY_TITLE_PREFIX": "Re: ",
    "FORWARD_TITLE_PREFIX": "Fw: ",
    "BTN_REPLY": "Reply",
    "BTN_COMPOSE": "New message",
    "BTN_WRITE": "Write",
    "NO_MESSAGE_INBOX": "No message received",
    "NO_MESSAGE_OUTBOX": "No message sent",
    "NOTIFICATIONS": {
      "TITLE": "Messages",
      "MESSAGE_RECEIVED": "You <b>received a message</b><br/>from"
    },
    "LIST": {
      "INBOX": "Inbox",
      "OUTBOX": "Outbox",
      "LAST_INBOX": "New messages",
      "LAST_OUTBOX": "Sent messages",
      "BTN_LAST_MESSAGES": "Recent messages",
      "TITLE": "Private messages",
      "SEARCH_HELP": "Search in messages",
      "POPOVER_ACTIONS": {
        "TITLE": "Options",
        "DELETE_ALL": "Delete all messages"
      }
    },
    "COMPOSE": {
      "TITLE": "New message",
      "TITLE_REPLY": "Reply",
      "SUB_TITLE": "New message",
      "TO": "To",
      "OBJECT": "Object",
      "OBJECT_HELP": "Object",
      "ENCRYPTED_HELP": "Please note this message will be encrypted before sending so that only the recipient can read it and be sure you are the author.",
      "MESSAGE": "Message",
      "MESSAGE_HELP": "Message content",
      "CONTENT_CONFIRMATION": "No message content.<br/><br/>Are your sure you want to send this message?"
    },
    "VIEW": {
      "TITLE": "Message",
      "SENDER": "Sent by",
      "RECIPIENT": "Sent to",
      "NO_CONTENT": "Empty message",
      "DELETE": "Delete the message"
    },
    "CONFIRM": {
      "REMOVE": "Are you sure you want to <b>delete this message</b>?<br/><br/> This operation is irreversible.",
      "REMOVE_ALL": "Are you sure you want to <b>delete all messages</b>?<br/><br/> This operation is irreversible.",
      "MARK_ALL_AS_READ": "Are you sure you want to <b>mark all message as read</b>?",
      "USER_HAS_NO_PROFILE": "This identity has no Cesium + profile. It may not use the Cesium + extension, so it <b>will not read your message</b>.<br/><br/>Are you sure you want <b>to continue</b>?"
    },
    "INFO": {
      "MESSAGE_REMOVED": "Message successfully deleted",
      "All_MESSAGE_REMOVED": "Messages successfully deleted",
      "MESSAGE_SENT": "Message sent"
    },
    "ERROR": {
      "SEND_MSG_FAILED": "Error while sending message.",
      "LOAD_MESSAGES_FAILED": "Error while loading messages.",
      "LOAD_MESSAGE_FAILED": "Error while loading message.",
      "MESSAGE_NOT_READABLE": "Unable to read message.",
      "USER_NOT_RECIPIENT": "You are not the recipient of this message: unable to read it.",
      "NOT_AUTHENTICATED_MESSAGE": "The authenticity of the message is not certain or its content is corrupted.",
      "REMOVE_MESSAGE_FAILED": "Error while deleting message",
      "MESSAGE_CONTENT_TOO_LONG": "Value too long ({{maxLength}} characters max).",
      "MARK_AS_READ_FAILED": "Unable to mark the message as 'read'.",
      "LOAD_NOTIFICATIONS_FAILED": "Error while loading messages notifications.",
      "REMOVE_All_MESSAGES_FAILED": "Error while removing all messages.",
      "MARK_ALL_AS_READ_FAILED": "Error while marking messages as read.",
      "RECIPIENT_IS_MANDATORY": "Recipient is mandatory."
    }
  },
  "BLOCKCHAIN": {
    "LOOKUP": {
      "SEARCH_HELP": "Block number, hash...",
      "POPOVER_FILTER_TITLE": "Filter",
      "HEADER_MEDIAN_TIME": "Date / Time",
      "HEADER_BLOCK": "Block #",
      "HEADER_ISSUER": "Peer owner",
      "BTN_LAST": "Last blocks",
      "DISPLAY_QUERY": "View query",
      "HIDE_QUERY": "Hide query",
      "TX_SEARCH_FILTER": {
        "MEMBER_FLOWS": "<b class=\"ion-person\"></b> Members input/output",
        "EXISTING_TRANSACTION": "<b class=\"ion-card\"></b> Having transactions",
        "PERIOD": "<b class=\"ion-clock\"></b> Between <b class=\"gray\">{{params[1]|formatDateShort}}</b> ({{params[1]|formatTime}}) and <b class=\"gray\">{{params[2]|formatDateShort}}</b> ({{params[2]|formatTime}})",
        "ISSUER": "<b class=\"ion-android-desktop\"></b> Computed by {{params[1]|formatPubkey}}",
        "TX_PUBKEY": "<b class=\"ion-card\"></b> Transactions concerning <b class=\"ion-key\"></b> {{params[1]|formatPubkey}}"
      }
    },
    "ERROR": {
      "SEARCH_BLOCKS_FAILED": "Error while searching blocks."
    }
  },
  "REGISTRY": {
    "CATEGORY": "Main activity",
    "GENERAL_DIVIDER": "Basic information",
    "LOCATION_DIVIDER": "Address",
    "SOCIAL_NETWORKS_DIVIDER": "Social networks, web sites",
    "TECHNICAL_DIVIDER": "Technical data",
    "BTN_SHOW_WOT": "People",
    "BTN_SHOW_WOT_HELP": "Search for people",
    "BTN_SHOW_PAGES": "Pages",
    "BTN_SHOW_PAGES_HELP": "Search for pages",
    "BTN_NEW": "New page",
    "MY_PAGES": "My pages",
    "NO_PAGE": "No page",
    "SEARCH": {
      "TITLE": "Professional Directory",
      "SEARCH_HELP": "What, Who: hairdresser, Lili's restaurant, ...",
      "BTN_ADD": "New",
      "BTN_LAST_RECORDS": "Recent pages",
      "BTN_ADVANCED_SEARCH": "Advanced search",
      "BTN_OPTIONS": "Advanced search",
      "TYPE": "Kind of organization",
      "LOCATION_HELP": "Where: City, Country",
      "RESULTS": "Results",
      "RESULT_COUNT_LOCATION": "{{count}} result{{count>0?'s':''}}, near {{location}}",
      "RESULT_COUNT": "{{count}} result{{count>0?'s':''}}",
      "LAST_RECORDS": "Recent pages",
      "LAST_RECORD_COUNT_LOCATION": "{{count}} recent page{{count>0?'s':''}}, near {{location}}",
      "LAST_RECORD_COUNT": "{{count}} recent page{{count>0?'s':''}}",
      "POPOVER_FILTERS": {
        "BTN_ADVANCED_SEARCH": "Advanced options?"
      }
    },
    "VIEW": {
      "TITLE": "Registry",
      "CATEGORY": "Main activity:",
      "LOCATION": "Address:",
      "MENU_TITLE": "Options",
      "POPOVER_SHARE_TITLE": "{{title}}",
      "REMOVE_CONFIRMATION" : "Are you sure you want to delete this reference?<br/><br/>This is irreversible."
    },
    "TYPE": {
      "TITLE": "New reference",
      "SELECT_TYPE": "Kind of organization:",
      "ENUM": {
        "SHOP": "Local shops",
        "COMPANY": "Company",
        "ASSOCIATION": "Association",
        "INSTITUTION": "Institution"
      }
    },
    "EDIT": {
      "TITLE": "Edit",
      "TITLE_NEW": "New reference",
      "RECORD_TYPE":"Kind of organization",
      "RECORD_TITLE": "Name",
      "RECORD_TITLE_HELP": "Name",
      "RECORD_DESCRIPTION": "Description",
      "RECORD_DESCRIPTION_HELP": "Describe activity",
      "RECORD_ADDRESS": "Street",
      "RECORD_ADDRESS_HELP": "Street, building...",
      "RECORD_CITY": "City",
      "RECORD_CITY_HELP": "City, Country",
      "RECORD_SOCIAL_NETWORKS": "Social networks and web site",
      "RECORD_PUBKEY": "Public key",
      "RECORD_PUBKEY_HELP": "Public key to receive payments"
    },
    "WALLET": {
      "REGISTRY_DIVIDER": "Pages",
      "REGISTRY_HELP": "Pages refer to activities accepting money or promoting it: local shops, companies, associations, institutions."
    },
    "ERROR": {
      "LOAD_CATEGORY_FAILED": "Loading main activities failed",
      "LOAD_RECORD_FAILED": "Loading failed",
      "LOOKUP_RECORDS_FAILED": "Error while loading records.",
      "REMOVE_RECORD_FAILED": "Deleting failed",
      "SAVE_RECORD_FAILED": "Saving failed",
      "RECORD_NOT_EXISTS": "Record not found",
      "GEO_LOCATION_NOT_FOUND": "City or zip code not found"
    },
    "INFO": {
      "RECORD_REMOVED" : "Page successfully deleted",
      "RECORD_SAVED": "Page successfully saved"
    }
  },
  "PROFILE": {
    "PROFILE_DIVIDER": "Cesium+ profile",
    "PROFILE_DIVIDER_HELP": "These are ancillary data, stored outside the currency network.",
    "NO_PROFILE_DEFINED": "No Cesium+ profile",
    "BTN_ADD": "Create my profile",
    "BTN_EDIT": "Edit my profile",
    "BTN_DELETE": "Delete my profile",
    "BTN_REORDER": "Reorder",
    "UID": "Pseudonym",
    "TITLE": "Lastname, FirstName",
    "TITLE_HELP": "Name",
    "DESCRIPTION": "About me",
    "DESCRIPTION_HELP": "About me...",
    "SOCIAL_HELP": "http://...",
    "GENERAL_DIVIDER": "General data",
    "SOCIAL_NETWORKS_DIVIDER": "Social networks and web site",
    "TECHNICAL_DIVIDER": "Technical data",
    "MODAL_AVATAR": {
      "TITLE": "Avatar",
      "SELECT_FILE_HELP": "<b>Choose an image file</b>, by clicking on the button below:",
      "BTN_SELECT_FILE": "Choose an image",
      "RESIZE_HELP": "<b>Re-crop the image</b> if necessary. A click on the image allows to move it. Click on the area at the bottom left to zoom in.",
      "RESULT_HELP": "<b>Here is the result</b> as seen on your profile:"
    },
    "CONFIRM": {
      "DELETE": "Are you sure you want to <b>delete your Cesium+ profile ?</b><br/><br/>This operation is irreversible."
    },
    "ERROR": {
      "REMOVE_PROFILE_FAILED": "Deleting profile failed",
      "LOAD_PROFILE_FAILED": "Could not load user profile.",
      "SAVE_PROFILE_FAILED": "Saving profile failed",
      "INVALID_SOCIAL_NETWORK_FORMAT": "Invalid format: please fill a valid Internet address.<br/><br/>Examples :<ul><li>- A Facebook page (https://www.facebook.com/user)</li><li>- A web page (http://www.domain.com)</li><li>- An email address (joe@dalton.com)</li></ul>",
      "IMAGE_RESIZE_FAILED": "Error while resizing picture"
    },
    "INFO": {
      "PROFILE_REMOVED": "Profile deleted",
      "PROFILE_SAVED": "Profile saved"
    },
    "HELP": {
      "WARNING_PUBLIC_DATA": "Please note that the information published here <b>is public</b>: visible including by <b>not logged in people</b>.<br/>{{'PROFILE.PROFILE_DIVIDER_HELP'|translate}}"
    }
  },
  "LOCATION": {
    "BTN_GEOLOC_ADDRESS": "Find my address on the map",
    "USE_GEO_POINT": "Appear on {{'COMMON.APP_NAME'|translate}} maps?",
    "LOADING_LOCATION": "Searching address...",
    "LOCATION_DIVIDER": "Localisation",
    "ADDRESS": "Address",
    "ADDRESS_HELP": "Address (optional)",
    "CITY": "City",
    "CITY_HELP": "City, Country",
    "DISTANCE": "Maximum distance around the city",
    "DISTANCE_UNIT": "mi",
    "DISTANCE_OPTION": "{{value}} {{'LOCATION.DISTANCE_UNIT'|translate}}",
    "SEARCH_HELP": "Ville, Country",
    "MODAL": {
      "TITLE": "Search address",
      "SEARCH_HELP": "City, Country",
      "ALTERNATIVE_RESULT_DIVIDER": "Alternative results for <b>{{address}}</b>:",
      "POSITION": "lat/lon : {{lat}} / {{lon}}"
    },
    "ERROR": {
      "REQUIRED_FOR_LOCATION": "Required field to appear on the map",
      "INVALID_FOR_LOCATION": "Unknown address",
      "GEO_LOCATION_FAILED": "Unable to retrieve your current position. Please use the search button.",
      "ADDRESS_LOCATION_FAILED": "Unable to retrieve the address position"
    }
  },
  "SUBSCRIPTION": {
    "SUBSCRIPTION_DIVIDER": "Online services",
    "SUBSCRIPTION_DIVIDER_HELP": "Online services offer optional additional services, delegated to a third party.",
    "BTN_ADD": "Add a service",
    "BTN_EDIT": "Manage my services",
    "NO_SUBSCRIPTION": "No service defined",
    "SUBSCRIPTION_COUNT": "Services / Subscription",
    "EDIT": {
      "TITLE": "Online services",
      "HELP_TEXT": "Manage your subscriptions and other online services here",
      "PROVIDER": "Provider:"
    },
    "TYPE": {
      "ENUM": {
        "EMAIL": "Receive email notifications"
      }
    },
    "CONFIRM": {
      "DELETE_SUBSCRIPTION": "Are you sur you want to <b>delete this subscription</b>?"
    },
    "ERROR": {
      "LOAD_SUBSCRIPTIONS_FAILED": "Error while loading online services",
      "ADD_SUBSCRIPTION_FAILED": "Error while adding subscription",
      "UPDATE_SUBSCRIPTION_FAILED": "Error during subscription update",
      "DELETE_SUBSCRIPTION_FAILED": "Error while deleting subscription"
    },
    "MODAL_EMAIL": {
      "TITLE" : "Notification by email",
      "HELP" : "Fill out this form to <b>be notified by email</ b> of your account's events. <br/>Your email address will be encrypted only to be visible to the service provider.",
      "EMAIL_LABEL" : "Your email:",
      "EMAIL_HELP": "john@domain.com",
      "FREQUENCY_LABEL": "Frequency of notifications:",
      "FREQUENCY_DAILY": "Daily",
      "FREQUENCY_WEEKLY": "Weekly",
      "PROVIDER": "Service Provider:"
    }
  },
  "DOCUMENT": {
    "HASH": "Hash: ",
    "LOOKUP": {
      "TITLE": "Document search",
      "BTN_ACTIONS": "Actions",
      "SEARCH_HELP": "issuer:AAA*, time:1508406169",
      "LAST_DOCUMENTS": "Last documents",
      "SHOW_QUERY": "Show query",
      "HIDE_QUERY": "Hide query",
      "HEADER_TIME": "Time/Hour",
      "HEADER_ISSUER": "Issuer",
      "HEADER_RECIPIENT": "Recipient",
      "READ": "Read",
      "BTN_REMOVE": "Delete this document",
      "POPOVER_ACTIONS": {
        "TITLE": "Actions",
        "REMOVE_ALL": "Delete these documents..."
      }
    },
    "INFO": {
      "REMOVED": "Deleted document"
    },
    "CONFIRM": {
      "REMOVE": "Are you sure you want to <b>delete this document</b>?",
      "REMOVE_ALL": "Are you sure you want to <b>delete these documents</b>?"
    },
    "ERROR": {
      "LOAD_DOCUMENTS_FAILED": "Error searching documents",
      "REMOVE_FAILED": "Error deleting the document",
      "REMOVE_ALL_FAILED": "Error deleting documents"
    }
  },
  "ES_SETTINGS": {
    "PLUGIN_NAME": "Cesium+",
    "PLUGIN_NAME_HELP": "User profiles, notifications, private messages",
    "ENABLE_TOGGLE": "Enable extension?",
    "ENABLE_MESSAGE_TOGGLE": "Enable messages?",
    "ENABLE_SETTINGS_TOGGLE": "Enable remote storage for settings?",
    "PEER": "Data peer address",
    "POPUP_PEER": {
      "TITLE" : "Data peer",
      "HELP" : "Set the address of the peer to use:",
      "PEER_HELP": "server.domain.com:port"
    },
    "NOTIFICATIONS": {
      "DIVIDER": "Notifications",
      "HELP_TEXT": "Enable the types of notifications you want to receive:",
      "ENABLE_TX_SENT": "Notify the validation of <b>sent payments</b>?",
      "ENABLE_TX_RECEIVED": "Notify the validation of <b>received payments</b>?",
      "ENABLE_CERT_SENT": "Notify the validation of <b>sent certifications</b>?",
      "ENABLE_CERT_RECEIVED": "Notify the validation of <b>received certifications</b>?"
    },
    "CONFIRM": {
      "ASK_ENABLE_TITLE": "Optional features",
      "ASK_ENABLE": "Cesium+ extension is <b>disabled</b> in your settings, making some features inactive: <ul><li>&nbsp;&nbsp;<b><i class=\"icon ion-person\"></i> user profiles</b>;<li>&nbsp;&nbsp;<b><i class=\"icon ion-android-notifications\"></i> Notifications</b>;<li>&nbsp;&nbsp;<b><i class=\"icon ion-email\"></i> Private messages</b>.</ul><br/><br/><b>Do you want to enable</b> the extension?"
    }
  },
  "ES_WALLET": {
    "ERROR": {
      "RECIPIENT_IS_MANDATORY": "A recipient is required for encryption."
    }
  },
  "EVENT": {
    "NODE_STARTED": "Your node ES API <b>{{params[0]}}</b> is UP",
    "NODE_BMA_DOWN": "Node <b>{{params[0]}}:{{params[1]}}</b> (used by your ES API) is <b>unreachable</b>.",
    "NODE_BMA_UP": "Node <b>{{params[0]}}:{{params[1]}}</b> is reachable again.",
    "MEMBER_JOIN": "You are now a <b>member</b> of currency <b>{{params[0]}}</b>!",
    "MEMBER_LEAVE": "You are <b>not a member anymore</b> of currency <b>{{params[0]}}</b>!",
    "MEMBER_EXCLUDE": "You are <b>not more member</b> of the currency <b>{{params[0]}}</b>, for lack of renewal or lack of certifications.",
    "MEMBER_REVOKE": "Your account has been revoked. It will no longer be a member of the currency <b>{{params[0]}}</b>.",
    "MEMBER_ACTIVE": "Your membership to <b>{{params[0]}}</b> has been <b>renewed successfully</b>.",
    "TX_SENT": "Your payment to <span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid}\" ><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span> was executed.",
    "TX_SENT_MULTI": "Your payment to <b>{{params[1]}}</b> was executed.",
    "TX_RECEIVED": "You received a payment from <span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid}\"><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span>.",
    "TX_RECEIVED_MULTI": "You received a payment from <b>{{params[1]}}</b>.",
    "CERT_SENT": "Your <b>certification</b> to <span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid}\" ><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span> was executed.",
    "CERT_RECEIVED": "You  have <b>received a certification</b> from <span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid}\"><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span>.",
    "REGISTRY": {
      "NEW_COMMENT": "<span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid }\"><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span> has commented on your referencing: <b>{{params[2]}}</b>",
      "UPDATE_COMMENT": "<span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid }\"><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span> has modified his comment on your referencing: <b>{{params[2]}}</b>",
      "NEW_REPLY_COMMENT": "<span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid }\"><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span> has replied to your comment on the referencing: <b>{{params[2]}}</b>",
      "UPDATE_REPLY_COMMENT": "<span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid }\"><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span> has modified his answer to your comment, on the referencing: <b>{{params[2]}}</b>"
    }
  },
  "CONFIRM": {
    "ES_USE_FALLBACK_NODE": "Data node <b>{{old}}</b> unreachable or invalid address.<br/><br/>Do you want to temporarily use the data node <b>{{new}}</b>?"
  },
  "ERROR": {
    "ES_CONNECTION_ERROR": "Data node <b>{{server}}</b> unreachable or invalid address.<br/><br/>Cesium will continue to work, <b>without the Cesium+</b> extension (user profiles, private messages, maps and graphics).<br/><br/>Check your Internet connection, or change data node in <a class=\"positive\" ng-click=\"doQuickFix('settings')\">extension settings</a>.",
    "ES_MAX_UPLOAD_BODY_SIZE": "The volume of data to be sent exceeds the limit set by the server.<br/><br/>Please try again after, for example, deleting photos."
  }
}
);

$translateProvider.translations("en", {
  "COMMON": {
    "CATEGORY": "Category",
    "CATEGORIES": "Categories",
    "CATEGORY_SEARCH_HELP": "Search",
    "LAST_MODIFICATION_DATE": "Updated on ",
    "SUBMIT_BY": "Submitted by",
    "BTN_PUBLISH": "Publish",
    "BTN_PICTURE_DELETE": "Delete",
    "BTN_PICTURE_FAVORISE": "Default",
    "BTN_PICTURE_ROTATE": "Rotate",
    "BTN_ADD_PICTURE": "Add picture",
    "NOTIFICATIONS": {
      "TITLE": "Notifications",
      "MARK_ALL_AS_READ": "Mark all as read",
      "NO_RESULT": "No notification",
      "SHOW_ALL": "Show all",
      "LOAD_NOTIFICATIONS_FAILED": "Could not load notifications"
    }
  },
  "MENU": {
    "REGISTRY": "Pages",
    "USER_PROFILE": "My Profile",
    "MESSAGES": "Messages",
    "NOTIFICATIONS": "Notifications",
    "INVITATIONS": "Invitations"
  },
  "ACCOUNT": {
    "NEW": {
      "ORGANIZATION_ACCOUNT": "Account for an organization",
      "ORGANIZATION_ACCOUNT_HELP": "If you represent a company, association, etc.<br/>No universal dividend will be created by this account."
    },
    "EVENT": {
      "MEMBER_WITHOUT_PROFILE": "To obtain your certification more quickly, fill in <a ui-sref=\"app.user_edit_profile\">your user profile</a>. Members will more easily put their trust in a verifiable identity."
    },
    "ERROR": {
      "WS_CONNECTION_FAILED": "Cesium can not receive notifications because of a technical error (connection to the Cesium + data node).<br/><br/>If the problem persists, please <b>choose another data node</b> in Cesium+ settings."
    }
  },
  "WOT": {
    "BTN_SUGGEST_CERTIFICATIONS_DOTS": "Suggest identities to certify...",
    "BTN_ASK_CERTIFICATIONS_DOTS": "Ask members to certify me...",
    "BTN_ASK_CERTIFICATION": "Ask a certification",
    "SUGGEST_CERTIFICATIONS_MODAL": {
      "TITLE": "Suggest certifications",
      "HELP": "Select your suggestions"
    },
    "ASK_CERTIFICATIONS_MODAL": {
      "TITLE": "Ask certifications",
      "HELP": "Select recipients"
    },
    "SEARCH": {
      "DIVIDER_PROFILE": "Accounts",
      "DIVIDER_PAGE": "Pages",
      "DIVIDER_GROUP": "Groups"
    },
    "CONFIRM": {
      "SUGGEST_CERTIFICATIONS": "Are you sure you want <b>to send these certification suggestions</b>?",
      "ASK_CERTIFICATION": "Are you sure you want to <b>send a certification request</b>?",
      "ASK_CERTIFICATIONS": "Are you sure you want to <b>send a certification request</b> to these people?"
    }
  },
  "INVITATION": {
    "TITLE": "Invitations",
    "NO_RESULT": "No invitation received",
    "BTN_DELETE_ALL": "Delete all invitations",
    "BTN_DELETE": "Delete invitation",
    "BTN_NEW_INVITATION": "New invitation",
    "ASK_CERTIFICATION": "<a href=\"#/app/wot/{{pubkey}}/{{::uid}}\">{{::name||uid}}</a> asks for your certification",
    "SUGGESTION_CERTIFICATION": "<a href=\"#/app/wot/{{::pubkey}}/{{::uid}}\">{{::name||uid}}</a> is suggested for certification",
    "SUGGESTED_BY": "Suggestion sent by <a class=\"positive\" href=\"#/app/wot/{{::issuer.pubkey}}/{{::issuer.uid}}\">{{::issuer.name||issuer.uid}}</a>",
    "NOTIFICATIONS": {
      "TITLE": "Invitations"
    },
    "LIST": {
      "TITLE": "Invitations"
    },
    "NEW": {
      "TITLE": "New invitation",
      "RECIPIENTS": "A",
      "RECIPIENTS_HELP": "Recipients of the invitation",
      "RECIPIENTS_MODAL_TITLE": "Recipients",
      "RECIPIENTS_MODAL_HELP": "Please choose recipients:",
      "SUGGESTION_IDENTITIES": "Suggestions for certification",
      "SUGGESTION_IDENTITIES_HELP": "Certifications to suggest",
      "SUGGESTION_IDENTITIES_MODAL_TITLE": "Suggestions",
      "SUGGESTION_IDENTITIES_MODAL_HELP": "Please choose your suggestions:"
    },
    "CONFIRM": {
      "DELETE_ALL_CONFIRMATION": "Removing invitations is <b>an irreversible operation</b>.<br/><br/><b>Are you sure</b> you want to continue",
      "SEND_INVITATIONS_TO_CERTIFY": "<b>Are you sure</b> you want <b>to sent this invitation to certify</b> ?"
    },
    "INFO": {
      "INVITATION_SENT": "Invitation sent"
    },
    "ERROR": {
      "LOAD_INVITATIONS_FAILED": "Error while loading invitations",
      "REMOVE_INVITATION_FAILED": "Error while deleting the invitation",
      "REMOVE_ALL_INVITATIONS_FAILED": "Error while deleting invitations",
      "SEND_INVITATION_FAILED": "Error while sending invitation",
      "BAD_INVITATION_FORMAT": "<span class=\"assertive\"><i class=\"ion-close-circled\"></i> Invitation unreadable (format unknown)</span> - sent by <a ui-sref=\"app.wot_identity({pubkey: '{{::pubkey}}', uid: '{{::uid}}' })\">{{::name||uid}}</a>"
    }
  },
  "COMMENTS": {
    "DIVIDER": "Comments",
    "SHOW_MORE_COMMENTS": "Show previous comments",
    "COMMENT_HELP": "Your comment, question...",
    "COMMENT_HELP_REPLY_TO": "Your answer...",
    "BTN_SEND": "Send",
    "POPOVER_SHARE_TITLE": "Message #{{number}}",
    "REPLY": "Reply",
    "REPLY_TO": "Respond to:",
    "REPLY_TO_LINK": "In response to ",
    "REPLY_TO_DELETED_COMMENT": "In response to a deleted comment",
    "REPLY_COUNT": "{{replyCount}} responses",
    "DELETED_COMMENT": "Comment deleted",
    "ERROR": {
      "FAILED_SAVE_COMMENT": "Saving comment failed",
      "FAILED_REMOVE_COMMENT": "Deleting comment failed"
    }
  },
  "MESSAGE": {
    "REPLY_TITLE_PREFIX": "Re: ",
    "FORWARD_TITLE_PREFIX": "Fw: ",
    "BTN_REPLY": "Reply",
    "BTN_COMPOSE": "New message",
    "BTN_WRITE": "Write",
    "NO_MESSAGE_INBOX": "No message received",
    "NO_MESSAGE_OUTBOX": "No message sent",
    "NOTIFICATIONS": {
      "TITLE": "Messages",
      "MESSAGE_RECEIVED": "You <b>received a message</b><br/>from"
    },
    "LIST": {
      "INBOX": "Inbox",
      "OUTBOX": "Outbox",
      "LAST_INBOX": "New messages",
      "LAST_OUTBOX": "Sent messages",
      "BTN_LAST_MESSAGES": "Recent messages",
      "TITLE": "Private messages",
      "SEARCH_HELP": "Search in messages",
      "POPOVER_ACTIONS": {
        "TITLE": "Options",
        "DELETE_ALL": "Delete all messages"
      }
    },
    "COMPOSE": {
      "TITLE": "New message",
      "TITLE_REPLY": "Reply",
      "SUB_TITLE": "New message",
      "TO": "To",
      "OBJECT": "Object",
      "OBJECT_HELP": "Object",
      "ENCRYPTED_HELP": "Please note this message will be encrypted before sending so that only the recipient can read it and be sure you are the author.",
      "MESSAGE": "Message",
      "MESSAGE_HELP": "Message content",
      "CONTENT_CONFIRMATION": "No message content.<br/><br/>Are your sure you want to send this message?"
    },
    "VIEW": {
      "TITLE": "Message",
      "SENDER": "Sent by",
      "RECIPIENT": "Sent to",
      "NO_CONTENT": "Empty message",
      "DELETE": "Delete the message"
    },
    "CONFIRM": {
      "REMOVE": "Are you sure you want to <b>delete this message</b>?<br/><br/> This operation is irreversible.",
      "REMOVE_ALL": "Are you sure you want to <b>delete all messages</b>?<br/><br/> This operation is irreversible.",
      "MARK_ALL_AS_READ": "Are you sure you want to <b>mark all message as read</b>?",
      "USER_HAS_NO_PROFILE": "This identity has no Cesium + profile. It may not use the Cesium + extension, so it <b>will not read your message</b>.<br/><br/>Are you sure you want <b>to continue</b>?"
    },
    "INFO": {
      "MESSAGE_REMOVED": "Message successfully deleted",
      "All_MESSAGE_REMOVED": "Messages successfully deleted",
      "MESSAGE_SENT": "Message sent"
    },
    "ERROR": {
      "SEND_MSG_FAILED": "Error while sending message.",
      "LOAD_MESSAGES_FAILED": "Error while loading messages.",
      "LOAD_MESSAGE_FAILED": "Error while loading message.",
      "MESSAGE_NOT_READABLE": "Unable to read message.",
      "USER_NOT_RECIPIENT": "You are not the recipient of this message: unable to read it.",
      "NOT_AUTHENTICATED_MESSAGE": "The authenticity of the message is not certain or its content is corrupted.",
      "REMOVE_MESSAGE_FAILED": "Error while deleting message",
      "MESSAGE_CONTENT_TOO_LONG": "Value too long ({{maxLength}} characters max).",
      "MARK_AS_READ_FAILED": "Unable to mark the message as 'read'.",
      "LOAD_NOTIFICATIONS_FAILED": "Error while loading messages notifications.",
      "REMOVE_All_MESSAGES_FAILED": "Error while removing all messages.",
      "MARK_ALL_AS_READ_FAILED": "Error while marking messages as read.",
      "RECIPIENT_IS_MANDATORY": "Recipient is mandatory."
    }
  },
  "BLOCKCHAIN": {
    "LOOKUP": {
      "SEARCH_HELP": "Block number, hash...",
      "POPOVER_FILTER_TITLE": "Filter",
      "HEADER_MEDIAN_TIME": "Date / Time",
      "HEADER_BLOCK": "Block #",
      "HEADER_ISSUER": "Peer owner",
      "BTN_LAST": "Last blocks",
      "DISPLAY_QUERY": "View query",
      "HIDE_QUERY": "Hide query",
      "TX_SEARCH_FILTER": {
        "MEMBER_FLOWS": "<b class=\"ion-person\"></b> Members input/output",
        "EXISTING_TRANSACTION": "<b class=\"ion-card\"></b> Having transactions",
        "PERIOD": "<b class=\"ion-clock\"></b> Between <b class=\"gray\">{{params[1]|formatDateShort}}</b> ({{params[1]|formatTime}}) and <b class=\"gray\">{{params[2]|formatDateShort}}</b> ({{params[2]|formatTime}})",
        "ISSUER": "<b class=\"ion-android-desktop\"></b> Computed by {{params[1]|formatPubkey}}",
        "TX_PUBKEY": "<b class=\"ion-card\"></b> Transactions concerning <b class=\"ion-key\"></b> {{params[1]|formatPubkey}}"
      }
    },
    "ERROR": {
      "SEARCH_BLOCKS_FAILED": "Error while searching blocks."
    }
  },
  "REGISTRY": {
    "CATEGORY": "Main activity",
    "GENERAL_DIVIDER": "Basic information",
    "LOCATION_DIVIDER": "Address",
    "SOCIAL_NETWORKS_DIVIDER": "Social networks, web sites",
    "TECHNICAL_DIVIDER": "Technical data",
    "BTN_SHOW_WOT": "People",
    "BTN_SHOW_WOT_HELP": "Search for people",
    "BTN_SHOW_PAGES": "Pages",
    "BTN_SHOW_PAGES_HELP": "Search for pages",
    "BTN_NEW": "New page",
    "MY_PAGES": "My pages",
    "NO_PAGE": "No page",
    "SEARCH": {
      "TITLE": "Professional Directory",
      "SEARCH_HELP": "What, Who: hairdresser, Lili's restaurant, ...",
      "BTN_ADD": "New",
      "BTN_LAST_RECORDS": "Recent pages",
      "BTN_ADVANCED_SEARCH": "Advanced search",
      "BTN_OPTIONS": "Advanced search",
      "TYPE": "Kind of organization",
      "LOCATION_HELP": "Where: City, Country",
      "RESULTS": "Results",
      "RESULT_COUNT_LOCATION": "{{count}} result{{count>0?'s':''}}, near {{location}}",
      "RESULT_COUNT": "{{count}} result{{count>0?'s':''}}",
      "LAST_RECORDS": "Recent pages",
      "LAST_RECORD_COUNT_LOCATION": "{{count}} recent page{{count>0?'s':''}}, near {{location}}",
      "LAST_RECORD_COUNT": "{{count}} recent page{{count>0?'s':''}}",
      "POPOVER_FILTERS": {
        "BTN_ADVANCED_SEARCH": "Advanced options?"
      }
    },
    "VIEW": {
      "TITLE": "Registry",
      "CATEGORY": "Main activity:",
      "LOCATION": "Address:",
      "MENU_TITLE": "Options",
      "POPOVER_SHARE_TITLE": "{{title}}",
      "REMOVE_CONFIRMATION" : "Are you sure you want to delete this reference?<br/><br/>This is irreversible."
    },
    "TYPE": {
      "TITLE": "New reference",
      "SELECT_TYPE": "Kind of organization:",
      "ENUM": {
        "SHOP": "Local shops",
        "COMPANY": "Company",
        "ASSOCIATION": "Association",
        "INSTITUTION": "Institution"
      }
    },
    "EDIT": {
      "TITLE": "Edit",
      "TITLE_NEW": "New reference",
      "RECORD_TYPE":"Kind of organization",
      "RECORD_TITLE": "Name",
      "RECORD_TITLE_HELP": "Name",
      "RECORD_DESCRIPTION": "Description",
      "RECORD_DESCRIPTION_HELP": "Describe activity",
      "RECORD_ADDRESS": "Street",
      "RECORD_ADDRESS_HELP": "Street, building...",
      "RECORD_CITY": "City",
      "RECORD_CITY_HELP": "City, Country",
      "RECORD_SOCIAL_NETWORKS": "Social networks and web site",
      "RECORD_PUBKEY": "Public key",
      "RECORD_PUBKEY_HELP": "Public key to receive payments"
    },
    "WALLET": {
      "REGISTRY_DIVIDER": "Pages",
      "REGISTRY_HELP": "Pages refer to activities accepting money or promoting it: local shops, companies, associations, institutions."
    },
    "ERROR": {
      "LOAD_CATEGORY_FAILED": "Loading main activities failed",
      "LOAD_RECORD_FAILED": "Loading failed",
      "LOOKUP_RECORDS_FAILED": "Error while loading records.",
      "REMOVE_RECORD_FAILED": "Deleting failed",
      "SAVE_RECORD_FAILED": "Saving failed",
      "RECORD_NOT_EXISTS": "Record not found",
      "GEO_LOCATION_NOT_FOUND": "City or zip code not found"
    },
    "INFO": {
      "RECORD_REMOVED" : "Page successfully deleted",
      "RECORD_SAVED": "Page successfully saved"
    }
  },
  "PROFILE": {
    "PROFILE_DIVIDER": "Cesium+ profile",
    "PROFILE_DIVIDER_HELP": "These are ancillary data, stored outside the currency network.",
    "NO_PROFILE_DEFINED": "No Cesium+ profile",
    "BTN_ADD": "Create my profile",
    "BTN_EDIT": "Edit my profile",
    "BTN_DELETE": "Delete my profile",
    "BTN_REORDER": "Reorder",
    "UID": "Pseudonym",
    "TITLE": "Lastname, FirstName",
    "TITLE_HELP": "Name",
    "DESCRIPTION": "About me",
    "DESCRIPTION_HELP": "About me...",
    "SOCIAL_HELP": "http://...",
    "GENERAL_DIVIDER": "General data",
    "SOCIAL_NETWORKS_DIVIDER": "Social networks and web site",
    "TECHNICAL_DIVIDER": "Technical data",
    "MODAL_AVATAR": {
      "TITLE": "Avatar",
      "SELECT_FILE_HELP": "<b>Choose an image file</b>, by clicking on the button below:",
      "BTN_SELECT_FILE": "Choose an image",
      "RESIZE_HELP": "<b>Re-crop the image</b> if necessary. A click on the image allows to move it. Click on the area at the bottom left to zoom in.",
      "RESULT_HELP": "<b>Here is the result</b> as seen on your profile:"
    },
    "CONFIRM": {
      "DELETE": "Are you sure you want to <b>delete your Cesium+ profile ?</b><br/><br/>This operation is irreversible."
    },
    "ERROR": {
      "REMOVE_PROFILE_FAILED": "Deleting profile failed",
      "LOAD_PROFILE_FAILED": "Could not load user profile.",
      "SAVE_PROFILE_FAILED": "Saving profile failed",
      "INVALID_SOCIAL_NETWORK_FORMAT": "Invalid format: please fill a valid Internet address.<br/><br/>Examples :<ul><li>- A Facebook page (https://www.facebook.com/user)</li><li>- A web page (http://www.domain.com)</li><li>- An email address (joe@dalton.com)</li></ul>",
      "IMAGE_RESIZE_FAILED": "Error while resizing picture"
    },
    "INFO": {
      "PROFILE_REMOVED": "Profile deleted",
      "PROFILE_SAVED": "Profile saved"
    },
    "HELP": {
      "WARNING_PUBLIC_DATA": "Please note that the information published here <b>is public</b>: visible including by <b>not logged in people</b>.<br/>{{'PROFILE.PROFILE_DIVIDER_HELP'|translate}}"
    }
  },
  "LOCATION": {
    "BTN_GEOLOC_ADDRESS": "Find my address on the map",
    "USE_GEO_POINT": "Appear on {{'COMMON.APP_NAME'|translate}} maps?",
    "LOADING_LOCATION": "Searching address...",
    "LOCATION_DIVIDER": "Localisation",
    "ADDRESS": "Address",
    "ADDRESS_HELP": "Address (optional)",
    "CITY": "City",
    "CITY_HELP": "City, Country",
    "DISTANCE": "Maximum distance around the city",
    "DISTANCE_UNIT": "mi",
    "DISTANCE_OPTION": "{{value}} {{'LOCATION.DISTANCE_UNIT'|translate}}",
    "SEARCH_HELP": "Ville, Country",
    "MODAL": {
      "TITLE": "Search address",
      "SEARCH_HELP": "City, Country",
      "ALTERNATIVE_RESULT_DIVIDER": "Alternative results for <b>{{address}}</b>:",
      "POSITION": "lat/lon : {{lat}} / {{lon}}"
    },
    "ERROR": {
      "REQUIRED_FOR_LOCATION": "Required field to appear on the map",
      "INVALID_FOR_LOCATION": "Unknown address",
      "GEO_LOCATION_FAILED": "Unable to retrieve your current position. Please use the search button.",
      "ADDRESS_LOCATION_FAILED": "Unable to retrieve the address position"
    }
  },
  "SUBSCRIPTION": {
    "SUBSCRIPTION_DIVIDER": "Online services",
    "SUBSCRIPTION_DIVIDER_HELP": "Online services offer optional additional services, delegated to a third party.",
    "BTN_ADD": "Add a service",
    "BTN_EDIT": "Manage my services",
    "NO_SUBSCRIPTION": "No service defined",
    "SUBSCRIPTION_COUNT": "Services / Subscription",
    "EDIT": {
      "TITLE": "Online services",
      "HELP_TEXT": "Manage your subscriptions and other online services here",
      "PROVIDER": "Provider:"
    },
    "TYPE": {
      "ENUM": {
        "EMAIL": "Receive email notifications"
      }
    },
    "CONFIRM": {
      "DELETE_SUBSCRIPTION": "Are you sur you want to <b>delete this subscription</b>?"
    },
    "ERROR": {
      "LOAD_SUBSCRIPTIONS_FAILED": "Error while loading online services",
      "ADD_SUBSCRIPTION_FAILED": "Error while adding subscription",
      "UPDATE_SUBSCRIPTION_FAILED": "Error during subscription update",
      "DELETE_SUBSCRIPTION_FAILED": "Error while deleting subscription"
    },
    "MODAL_EMAIL": {
      "TITLE" : "Notification by email",
      "HELP" : "Fill out this form to <b>be notified by email</ b> of your account's events. <br/>Your email address will be encrypted only to be visible to the service provider.",
      "EMAIL_LABEL" : "Your email:",
      "EMAIL_HELP": "john@domain.com",
      "FREQUENCY_LABEL": "Frequency of notifications:",
      "FREQUENCY_DAILY": "Daily",
      "FREQUENCY_WEEKLY": "Weekly",
      "PROVIDER": "Service Provider:"
    }
  },
  "DOCUMENT": {
    "HASH": "Hash: ",
    "LOOKUP": {
      "TITLE": "Document search",
      "BTN_ACTIONS": "Actions",
      "SEARCH_HELP": "issuer:AAA*, time:1508406169",
      "LAST_DOCUMENTS": "Last documents",
      "SHOW_QUERY": "Show query",
      "HIDE_QUERY": "Hide query",
      "HEADER_TIME": "Time/Hour",
      "HEADER_ISSUER": "Issuer",
      "HEADER_RECIPIENT": "Recipient",
      "READ": "Read",
      "BTN_REMOVE": "Delete this document",
      "POPOVER_ACTIONS": {
        "TITLE": "Actions",
        "REMOVE_ALL": "Delete these documents..."
      }
    },
    "INFO": {
      "REMOVED": "Deleted document"
    },
    "CONFIRM": {
      "REMOVE": "Are you sure you want to <b>delete this document</b>?",
      "REMOVE_ALL": "Are you sure you want to <b>delete these documents</b>?"
    },
    "ERROR": {
      "LOAD_DOCUMENTS_FAILED": "Error searching documents",
      "REMOVE_FAILED": "Error deleting the document",
      "REMOVE_ALL_FAILED": "Error deleting documents"
    }
  },
  "ES_SETTINGS": {
    "PLUGIN_NAME": "Cesium+",
    "PLUGIN_NAME_HELP": "User profiles, notifications, private messages",
    "ENABLE_TOGGLE": "Enable extension?",
    "ENABLE_MESSAGE_TOGGLE": "Enable messages?",
    "ENABLE_SETTINGS_TOGGLE": "Enable remote storage for settings?",
    "PEER": "Data peer address",
    "POPUP_PEER": {
      "TITLE" : "Data peer",
      "HELP" : "Set the address of the peer to use:",
      "PEER_HELP": "server.domain.com:port"
    },
    "NOTIFICATIONS": {
      "DIVIDER": "Notifications",
      "HELP_TEXT": "Enable the types of notifications you want to receive:",
      "ENABLE_TX_SENT": "Notify the validation of <b>sent payments</b>?",
      "ENABLE_TX_RECEIVED": "Notify the validation of <b>received payments</b>?",
      "ENABLE_CERT_SENT": "Notify the validation of <b>sent certifications</b>?",
      "ENABLE_CERT_RECEIVED": "Notify the validation of <b>received certifications</b>?"
    },
    "CONFIRM": {
      "ASK_ENABLE_TITLE": "Optional features",
      "ASK_ENABLE": "Cesium+ extension is <b>disabled</b> in your settings, making some features inactive: <ul><li>&nbsp;&nbsp;<b><i class=\"icon ion-person\"></i> user profiles</b>;<li>&nbsp;&nbsp;<b><i class=\"icon ion-android-notifications\"></i> Notifications</b>;<li>&nbsp;&nbsp;<b><i class=\"icon ion-email\"></i> Private messages</b>.</ul><br/><br/><b>Do you want to enable</b> the extension?"
    }
  },
  "ES_WALLET": {
    "ERROR": {
      "RECIPIENT_IS_MANDATORY": "A recipient is required for encryption."
    }
  },
  "EVENT": {
    "NODE_STARTED": "Your node ES API <b>{{params[0]}}</b> is UP",
    "NODE_BMA_DOWN": "Node <b>{{params[0]}}:{{params[1]}}</b> (used by your ES API) is <b>unreachable</b>.",
    "NODE_BMA_UP": "Node <b>{{params[0]}}:{{params[1]}}</b> is reachable again.",
    "MEMBER_JOIN": "You are now a <b>member</b> of currency <b>{{params[0]}}</b>!",
    "MEMBER_LEAVE": "You are <b>not a member anymore</b> of currency <b>{{params[0]}}</b>!",
    "MEMBER_EXCLUDE": "You are <b>not more member</b> of the currency <b>{{params[0]}}</b>, for lack of renewal or lack of certifications.",
    "MEMBER_REVOKE": "Your account has been revoked. It will no longer be a member of the currency <b>{{params[0]}}</b>.",
    "MEMBER_ACTIVE": "Your membership to <b>{{params[0]}}</b> has been <b>renewed successfully</b>.",
    "TX_SENT": "Your payment to <span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid}\" ><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span> was executed.",
    "TX_SENT_MULTI": "Your payment to <b>{{params[1]}}</b> was executed.",
    "TX_RECEIVED": "You received a payment from <span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid}\"><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span>.",
    "TX_RECEIVED_MULTI": "You received a payment from <b>{{params[1]}}</b>.",
    "CERT_SENT": "Your <b>certification</b> to <span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid}\" ><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span> was executed.",
    "CERT_RECEIVED": "You  have <b>received a certification</b> from <span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid}\"><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span>.",
    "REGISTRY": {
      "NEW_COMMENT": "<span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid }\"><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span> has commented on your referencing: <b>{{params[2]}}</b>",
      "UPDATE_COMMENT": "<span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid }\"><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span> has modified his comment on your referencing: <b>{{params[2]}}</b>",
      "NEW_REPLY_COMMENT": "<span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid }\"><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span> has replied to your comment on the referencing: <b>{{params[2]}}</b>",
      "UPDATE_REPLY_COMMENT": "<span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid }\"><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span> has modified his answer to your comment, on the referencing: <b>{{params[2]}}</b>"
    }
  },
  "CONFIRM": {
    "ES_USE_FALLBACK_NODE": "Data node <b>{{old}}</b> unreachable or invalid address.<br/><br/>Do you want to temporarily use the data node <b>{{new}}</b>?"
  },
  "ERROR": {
    "ES_CONNECTION_ERROR": "Data node <b>{{server}}</b> unreachable or invalid address.<br/><br/>Cesium will continue to work, <b>without the Cesium+</b> extension (user profiles, private messages, maps and graphics).<br/><br/>Check your Internet connection, or change data node in <a class=\"positive\" ng-click=\"doQuickFix('settings')\">extension settings</a>.",
    "ES_MAX_UPLOAD_BODY_SIZE": "The volume of data to be sent exceeds the limit set by the server.<br/><br/>Please try again after, for example, deleting photos."
  }
}
);

$translateProvider.translations("es-ES", {
  "COMMON": {
    "CATEGORY": "CategorÃ­a",
    "CATEGORIES": "CategorÃ­as",
    "CATEGORY_SEARCH_HELP": "BÃºsqueda",
    "LAST_MODIFICATION_DATE": "ActualizaciÃ³n el",
    "SUBMIT_BY": "Sometido por",
    "BTN_PUBLISH": "Publicar",
    "BTN_PICTURE_DELETE": "Suprimir",
    "BTN_PICTURE_FAVORISE": "Principal",
    "BTN_PICTURE_ROTATE": "Girar",
    "BTN_ADD_PICTURE": "AÃ±adir una foto",
    "NOTIFICATIONS": {
      "TITLE": "NotificaciÃ³nes",
      "MARK_ALL_AS_READ": "Marcar todo como leÃ­do",
      "NO_RESULT": "NingÃºna notificaciÃ³n",
      "SHOW_ALL": "Ver todo",
      "LOAD_NOTIFICATIONS_FAILED": "Fracaso en la carga de las notificaciÃ³nes"
    }
  },
  "MENU": {
    "REGISTRY": "Profesionales",
    "USER_PROFILE": "Mi perfil",
    "MESSAGES": "Mensajes",
    "NOTIFICATIONS": "NotificaciÃ³nes",
    "INVITATIONS": "InvitaciÃ³nes"
  },
  "ACCOUNT": {
    "NEW": {
      "ORGANIZATION_ACCOUNT": "Cuenta para una organizaciÃ³n",
      "ORGANIZATION_ACCOUNT_HELP": "Si representa una empresa, una asociaciÃ³n, etc.<br/>NingÃºn dividendo universal serÃ¡ creÃ­do por esta cuenta."
    },
    "EVENT": {
      "MEMBER_WITHOUT_PROFILE": "Para obtener sus certificaciÃ³nes mÃ¡s rapidamente, completa <a ui-sref=\"app.user_edit_profile\">su perfil usuario</a>. Los miembros concederÃ¡n mÃ¡s fÃ¡cilmente su confianza a una identidad verificable."
    },
    "ERROR": {
      "WS_CONNECTION_FAILED": "Cesium no puede recibir las notificaciÃ³nes, a causa de un error tÃ©cnico (conexiÃ³n al nodo de datos Cesium+).<br/><br/>Si el problema persiste, por favor <b>elige un otro nodo de datos</b> en las configuraciÃ³nes Cesium+."
    }
  },
  "WOT": {
    "BTN_SUGGEST_CERTIFICATIONS_DOTS": "Sugerir identidad a certificar...",
    "BTN_ASK_CERTIFICATIONS_DOTS": "Solicitar otros miembros a certificarmeâ¦",
    "BTN_ASK_CERTIFICATION": "Solicitar una certificaciÃ³n",
    "SUGGEST_CERTIFICATIONS_MODAL": {
      "TITLE": "Sugerir certificaciÃ³nes",
      "HELP": "Selectionar sus sugerencias"
    },
    "ASK_CERTIFICATIONS_MODAL": {
      "TITLE": "Solicitar certificaciÃ³nes",
      "HELP": "Selectionar los destinatarios"
    },
    "SEARCH": {
      "DIVIDER_PROFILE": "Cuentas",
      "DIVIDER_PAGE": "PÃ¡ginas",
      "DIVIDER_GROUP": "Grupos"
    },
    "CONFIRM": {
      "SUGGEST_CERTIFICATIONS": "EstÃ¡ usted segura/o querer <b>mandar estas sugerencia de certificatiÃ³n</b> ?",
      "ASK_CERTIFICATION": "EstÃ¡ usted segura/o querer <b>mandar una solicitud de certificaciÃ³n</b> ?",
      "ASK_CERTIFICATIONS": "EstÃ¡ usted segura/o querer <b>mandar una solicitud de certificaciÃ³n</b> a estas personas ?"
    }
  },
  "INVITATION": {
    "TITLE": "InvitaciÃ³nes",
    "NO_RESULT": "NingÃºna invitaciÃ³n en espera",
    "BTN_DELETE_ALL": "Suprimir todas las invitaciÃ³nes",
    "BTN_DELETE": "Suprimir la invitaciÃ³n",
    "BTN_NEW_INVITATION": "Nueva invitaciÃ³n",
    "ASK_CERTIFICATION": "<a href=\"#/app/wot/{{pubkey}}/{{::uid}}\">{{::name||uid}}</a> solicita su certificaciÃ³n",
    "SUGGESTION_CERTIFICATION": "<a href=\"#/app/wot/{{::pubkey}}/{{::uid}}\">{{::name||uid}}</a> Ã©l es sugerido por certificaciÃ³n",
    "SUGGESTED_BY": "Sugerencia mandada por <a class=\"positive\" href=\"#/app/wot/{{::issuer.pubkey}}/{{::issuer.uid}}\">{{::issuer.name||issuer.uid}}</a>",
    "NOTIFICATIONS": {
      "TITLE": "InvitaciÃ³nes"
    },
    "LIST": {
      "TITLE": "InvitaciÃ³nes"
    },
    "NEW": {
      "TITLE": "Nueva invitaciÃ³n",
      "RECIPIENTS": "A",
      "RECIPIENTS_HELP": "Destinatarios de la invitaciÃ³n",
      "RECIPIENTS_MODAL_TITLE": "Destinatarios",
      "RECIPIENTS_MODAL_HELP": "Por favor, elige los destinatarios :",
      "SUGGESTION_IDENTITIES": "Sugerencia de certificaciÃ³n",
      "SUGGESTION_IDENTITIES_HELP": "CertificaciÃ³nes a sugerir",
      "SUGGESTION_IDENTITIES_MODAL_TITLE": "Sugerencias",
      "SUGGESTION_IDENTITIES_MODAL_HELP": "Por favor, elige sus sugerencias :"
    },
    "CONFIRM": {
      "DELETE_ALL_CONFIRMATION": "La supresiÃ³n de las invitaciÃ³nes es una <b>operaciÃ³n ireversible</b>.<br/><br/><b>EstÃ¡ usted segura/o </b> querer continuar ?",
      "SEND_INVITATIONS_TO_CERTIFY": "EstÃ¡ usted segura/o querer <b>mandar esta invitaciÃ³n a certificar</b> ?"
    },
    "INFO": {
      "INVITATION_SENT": "InvitaciÃ³n mandada"
    },
    "ERROR": {
      "LOAD_INVITATIONS_FAILED": "Fracaso en la carga de las invitaciÃ³nes",
      "REMOVE_INVITATION_FAILED": "Fracaso durante la supresiÃ³n de la invitaciÃ³n",
      "REMOVE_ALL_INVITATIONS_FAILED": "Fracaso durante la supresiÃ³n de las invitaciÃ³nes",
      "SEND_INVITATION_FAILED": "Fracaso durante el envÃ­o de la invitaciÃ³n",
      "BAD_INVITATION_FORMAT": "<span class=\"assertive\"><i class=\"ion-close-circled\"></i> InvitaciÃ³n ilegible (formato desconocido)</span> - mandada por <a ui-sref=\"app.wot_identity({pubkey: '{{::pubkey}}', uid: '{{::uid}}' })\">{{::name||uid}}</a>"
    }
  },
  "COMMENTS": {
    "DIVIDER": "Comentarios",
    "SHOW_MORE_COMMENTS": "Visualizar los comentarios anteriores",
    "COMMENT_HELP": "Su comentario, preguntas, etc.",
    "COMMENT_HELP_REPLY_TO": "Su repuestaâ¦",
    "BTN_SEND": "Mandar",
    "POPOVER_SHARE_TITLE": "Mensaje #{{number}}",
    "REPLY": "Responder",
    "REPLY_TO": "Repuesta a :",
    "REPLY_TO_LINK": "En repuesta a ",
    "REPLY_TO_DELETED_COMMENT": "En repuesta a un comentario suprimido",
    "REPLY_COUNT": "{{replyCount}} repuestas",
    "DELETED_COMMENT": "Comentario suprimido",
    "ERROR": {
      "FAILED_SAVE_COMMENT": "Fracaso durante el respaldo del comentario",
      "FAILED_REMOVE_COMMENT": "Fracaso durante la supresiÃ³n del comentario"
    }
  },
  "MESSAGE": {
    "REPLY_TITLE_PREFIX": "Rep: ",
    "FORWARD_TITLE_PREFIX": "Tr: ",
    "BTN_REPLY": "Responder",
    "BTN_COMPOSE": "Nuevo mensaje",
    "BTN_WRITE": "Escribir",
    "NO_MESSAGE_INBOX": "Ningun mensaje recibido",
    "NO_MESSAGE_OUTBOX": "Ningun mensaje mandado",
    "NOTIFICATIONS": {
      "TITLE": "Mensajes",
      "MESSAGE_RECEIVED": "Ha <b>recibido un mensaje</b><br/>de"
    },
    "LIST": {
      "INBOX": "Bandeja de entrada",
      "OUTBOX": "Mensajes mandados",
      "LAST_INBOX": "Nuevos mensajes",
      "LAST_OUTBOX": "Mensajes enviados",
      "BTN_LAST_MESSAGES": "Mensajes recientes",
      "TITLE": "Mensajes",
      "SEARCH_HELP": "Buscar en mensajes",
      "POPOVER_ACTIONS": {
        "TITLE": "OpciÃ³nes",
        "DELETE_ALL": "Suprimir todos los mensajes"
      }
    },
    "COMPOSE": {
      "TITLE": "Nuevo mensaje",
      "TITLE_REPLY": "Responder",
      "SUB_TITLE": "Nuevo mensaje",
      "TO": "A",
      "OBJECT": "Objeto",
      "OBJECT_HELP": "Objeto",
      "ENCRYPTED_HELP": "Por favor, nota que este mensaje serÃ¡ cifrado antes envÃ­o, a fin que solo el destinatario pueda leerlo, y que estÃ© asegurado que usted estÃ© bien su autor.",
      "MESSAGE": "Mensaje",
      "MESSAGE_HELP": "Contenido del mensaje",
      "CONTENT_CONFIRMATION": "El contenido del mensaje es vacÃ­o.<br/><br/>Sin embargo, quiere mandar el mensaje ?"
    },
    "VIEW": {
      "TITLE": "Mensaje",
      "SENDER": "Mandado por",
      "RECIPIENT": "Mandado a",
      "NO_CONTENT": "Mensaje vacÃ­o",
      "DELETE": "Eliminar el mensaje"
    },
    "CONFIRM": {
      "REMOVE": "EstÃ¡ usted segura/o querer <b>suprimir este mensaje</b> ?<br/><br/>Esta operaciÃ³n es ireversible.",
      "REMOVE_ALL" : "EstÃ¡ usted segura/o querer <b>suprimir todos los mensajes</b> ?<br/><br/>Esta operaciÃ³n es ireversible.",
      "MARK_ALL_AS_READ": "EstÃ¡ usted segura/o querer <b>marcar todos los mensajes como leÃ­do</b> ?",
      "USER_HAS_NO_PROFILE": "Esta identidad no tiene ningÃºn perfil Cesium+. Se puede que no utilice la extensiÃ³n Cesium+, y <b>asÃ­ no consultarÃ¡ su mensaje</b>.<br/><br/>EstÃ¡ usted segura/o querer <b>continuar</b> a pesar de todo ?"
    },
    "INFO": {
      "MESSAGE_REMOVED": "Mensaje suprimido",
      "All_MESSAGE_REMOVED": "Todos los mensajes fueron suprimido",
      "MESSAGE_SENT": "Mensaje mandado"
    },
    "ERROR": {
      "SEND_MSG_FAILED": "Fracaso durante el envÃ­o del mensaje.",
      "LOAD_MESSAGES_FAILED": "Fracaso durante la recuperaciÃ³n de los mensajes.",
      "LOAD_MESSAGE_FAILED": "Fracaso durante la recuperaciÃ³n del mensaje.",
      "MESSAGE_NOT_READABLE": "Lectura del mensaje imposible.",
      "USER_NOT_RECIPIENT": "No esta el destinatario de este mensaje : deciframiento imposible.",
      "NOT_AUTHENTICATED_MESSAGE": "La autenticidad del mensaje es dudosa o su contenido es corrupto.",
      "REMOVE_MESSAGE_FAILED": "Fracaso en la supresiÃ³n del mensaje",
      "MESSAGE_CONTENT_TOO_LONG": "Valor demasiado largo ({{maxLength}} carÃ¡cteres max).",
      "MARK_AS_READ_FAILED": "Imposible marcar el mensaje como 'leÃ­do'.",
      "LOAD_NOTIFICATIONS_FAILED": "Fracaso durante la recuperaciÃ³n de las notificaciÃ³nes de mensajes.",
      "REMOVE_All_MESSAGES_FAILED": "Fracaso durante la supresiÃ³n de todos los mensajes.",
      "MARK_ALL_AS_READ_FAILED": "Fracaso durante el marcaje de los mensajes como leÃ­do.",
      "RECIPIENT_IS_MANDATORY": "El destinatario es obligatorio."
    }
  },
  "BLOCKCHAIN": {
    "LOOKUP": {
      "SEARCH_HELP": "NÃºmero de bloque, hash, llave pÃºblica, etc.",
      "POPOVER_FILTER_TITLE": "Filtros",
      "HEADER_MEDIAN_TIME": "Fecha / Hora",
      "HEADER_BLOCK": "Bloque #",
      "HEADER_ISSUER": "Nodo emisor",
      "BTN_LAST": "Ãºltimos bloques",
      "DISPLAY_QUERY": "Mostrar la consulta",
      "HIDE_QUERY": "Ocultar la consulta",
      "TX_SEARCH_FILTER": {
        "MEMBER_FLOWS": "Entradas/salidas de miembros",
        "EXISTING_TRANSACTION": "Con transacciones",
        "PERIOD": "<b class=\"ion-clock\"></b> Entre el <b class=\"gray\">{{params[1]|formatDateShort}}</b> ({{params[1]|formatTime}}) y el <b class=\"gray\">{{params[2]|formatDateShort}}</b> ({{params[2]|formatTime}})",
        "ISSUER": "<b class=\"ion-android-desktop\"></b> Calculado por <b class=\"ion-key\"></b> {{params[1]|formatPubkey}}",
        "TX_PUBKEY": "<b class=\"ion-card\"></b> Transacciones que implican <b class=\"ion-key\"></b> {{params[1]|formatPubkey}}"
      }
    },
    "ERROR": {
      "SEARCH_BLOCKS_FAILED": "Fracaso en la bÃºsqueda de los bloques."
    }
  },
  "GROUP": {
    "GENERAL_DIVIDER": "InformaciÃ³nes generales",
    "LOCATION_DIVIDER": "DirecciÃ³n",
    "SOCIAL_NETWORKS_DIVIDER": "Redes sociales y sitio web",
    "TECHNICAL_DIVIDER": "InformaciÃ³nes tÃ©cnicas",
    "CREATED_TIME": "Creada {{creationTime|formatFromNow}}",
    "NOTIFICATIONS": {
      "TITLE": "InvitaciÃ³nes"
    },
    "LOOKUP": {
      "TITLE": "Grupos",
      "SEARCH_HELP": "Nombre de grupo, palabras , lugar, etc.",
      "LAST_RESULTS_LIST": "Nuevos grupos :",
      "OPEN_RESULTS_LIST": "Grupos abiertos :",
      "MANAGED_RESULTS_LIST": "Grupos cerrados :",
      "BTN_LAST": "Nuevos grupos",
      "BTN_NEW": "AÃ±ado un grupo"
    },
    "TYPE": {
      "TITLE": "Nuevo grupo",
      "SELECT_TYPE": "Tipo de grupo :",
      "OPEN_GROUP": "Grupo abierto",
      "OPEN_GROUP_HELP": "Un grupo abierto es accesible por cualquier miembro de la moneda.",
      "MANAGED_GROUP": "Grupo administrado",
      "MANAGED_GROUP_HELP": "un grupo administrado es gestionado por administradores y moderadores, que pueden aceptar, rechazar o excluir un miembro en su seno.",
      "ENUM": {
        "OPEN": "Grupo abierto",
        "MANAGED": "Grupo administrado"
      }
    },
    "VIEW": {
      "POPOVER_SHARE_TITLE": "{{title}}",
      "MENU_TITLE": "Opciones",
      "REMOVE_CONFIRMATION" : "Seguro que quieres eliminar este grupo?<br/><br/>Esta operaciÃ³n es irreversible."
    },
    "EDIT": {
      "TITLE": "Grupo",
      "TITLE_NEW": "Nuevo grupo",
      "RECORD_TITLE": "TÃ­tulo",
      "RECORD_TITLE_HELP": "TÃ­tulo",
      "RECORD_DESCRIPTION": "DescripciÃ³n",
      "RECORD_DESCRIPTION_HELP": "DescripciÃ³n"
    },
    "ERROR": {
      "SEARCH_GROUPS_FAILED": "Fracaso en la bÃºsqueda de grupos",
      "REMOVE_RECORD_FAILED": "Error al eliminar el grupo"
    },
    "INFO": {
      "RECORD_REMOVED" : "Grupo eliminado"
    }
  },
  "REGISTRY": {
    "CATEGORY": "Actividad principal",
    "GENERAL_DIVIDER": "InformaciÃ³nes generales",
    "LOCATION_DIVIDER": "DirecciÃ³n",
    "SOCIAL_NETWORKS_DIVIDER": "Redes sociales y sitio web",
    "TECHNICAL_DIVIDER": "InformaciÃ³nes tÃ©cnicas",
    "BTN_SHOW_WOT": "Personas",
    "BTN_SHOW_WOT_HELP": "Buscar personas",
    "BTN_SHOW_PAGES": "PÃ¡ginas",
    "BTN_SHOW_PAGES_HELP": "BÃºsqueda de pÃ¡ginas",
    "BTN_NEW": "Creer una pÃ¡gina",
    "MY_PAGES": "Mis pÃ¡ginas",
    "NO_PAGE": "Sin pÃ¡gina",
    "SEARCH": {
      "TITLE": "PÃ¡ginas",
      "SEARCH_HELP": "QuÃ©, QuiÃ©n : restaurante, Con Marcel, ...",
      "BTN_ADD": "Nuevo",
      "BTN_LAST_RECORDS": "PÃ¡ginas recientes",
      "BTN_ADVANCED_SEARCH": "bÃºsqueda avanzada",
      "BTN_OPTIONS": "BÃºsqueda avanzada",
      "TYPE": "Tipo de pÃ¡gina",
      "LOCATION_HELP": "Ciudad",
      "RESULTS": "Resultados",
      "RESULT_COUNT_LOCATION": "{{count}} Resultado{{count>0?'s':''}}, cerca de {{location}}",
      "RESULT_COUNT": "{{count}} resultado{{count>0?'s':''}}",
      "LAST_RECORDS": "PÃ¡ginas recientes",
      "LAST_RECORD_COUNT_LOCATION": "{{count}} pÃ¡gina{{count>0?'s':''}} reciente{{count>0?'s':''}}, cerca de {{location}}",
      "LAST_RECORD_COUNT": "{{count}} pÃ¡gina{{count>0?'s':''}} reciente{{count>0?'s':''}}",
      "POPOVER_FILTERS": {
        "BTN_ADVANCED_SEARCH": "Opciones avanzadas?"
      }
    },
    "VIEW": {
      "TITLE": "Anuario",
      "CATEGORY": "Actividad principal :",
      "LOCATION": "DirecciÃ³n :",
      "MENU_TITLE": "OpciÃ³nes",
      "POPOVER_SHARE_TITLE": "{{title}}",
      "REMOVE_CONFIRMATION" : "EstÃ¡ usted segura/o querer suprimir esta pÃ¡gina ?<br/><br/>Esta operaciÃ³n es ireversible."
    },
    "TYPE": {
      "TITLE": "Nueva pÃ¡gina",
      "SELECT_TYPE": "Tipo de pÃ¡gina :",
      "ENUM": {
        "SHOP": "Comercio local",
        "COMPANY": "Empresa",
        "ASSOCIATION": "AsociaciÃ³n",
        "INSTITUTION": "InstituciÃ³n"
      }
    },
    "EDIT": {
      "TITLE": "EdiciÃ³n",
      "TITLE_NEW": "Nueva pÃ¡gina",
      "RECORD_TYPE":"Tipo de pÃ¡gina",
      "RECORD_TITLE": "Nombre",
      "RECORD_TITLE_HELP": "Nombre",
      "RECORD_DESCRIPTION": "DescripciÃ³n",
      "RECORD_DESCRIPTION_HELP": "DescripciÃ³n de la actividad",
      "RECORD_ADDRESS": "Calle",
      "RECORD_ADDRESS_HELP": "Calle, edificio...",
      "RECORD_CITY": "Ciudad",
      "RECORD_CITY_HELP": "Ciudad",
      "RECORD_SOCIAL_NETWORKS": "Redes sociales y sitio web",
      "RECORD_PUBKEY": "Llave pÃºblica"Â ,
      "RECORD_PUBKEY_HELP": "Llave pÃºblica de recepciÃ³n de los pagos"
    },
    "WALLET": {
      "REGISTRY_DIVIDER": "PÃ¡ginas",
      "REGISTRY_HELP": "Las pÃ¡ginas se refieren a actividades que aceptan dinero o lo favorecen: empresas, negocios, asociaciones, instituciones."
    },
    "ERROR": {
      "LOAD_CATEGORY_FAILED": "Fracaso en la carga de la lista de actividades",
      "LOAD_RECORD_FAILED": "Fracaso durante la carga de la pÃ¡gina",
      "LOOKUP_RECORDS_FAILED": "Fracaso durante la ejecuciÃ³n de la bÃºsqueda.",
      "REMOVE_RECORD_FAILED": "Fracaso en la supresiÃ³n de la pÃ¡gina",
      "SAVE_RECORD_FAILED": "Fracaso durante el respaldo",
      "RECORD_NOT_EXISTS": "PÃ¡gina inexistente",
      "GEO_LOCATION_NOT_FOUND": "Ciudad o cÃ³digo postal no encontrado"
    },
    "INFO": {
      "RECORD_REMOVED" : "PÃ¡gina suprimida",
      "RECORD_SAVED": "PÃ¡gina guardada"
    }
  },
  "PROFILE": {
    "PROFILE_DIVIDER": "Perfil Cesium+",
    "PROFILE_DIVIDER_HELP": "Estos son datos auxiliares, almacenados fuera de la red monetaria.",
    "NO_PROFILE_DEFINED": "NingÃºn perfil Cesium+",
    "BTN_ADD": "Ingresar mi perfil",
    "BTN_EDIT": "Editar mi perfil",
    "BTN_DELETE": "Eliminar mi perfil",
    "BTN_REORDER": "Reordenar",
    "UID": "SeudÃ³nimo",
    "TITLE": "Nombre, Apellido",
    "TITLE_HELP": "Nombre, Apellido",
    "DESCRIPTION": "A propÃ³sito de yo",
    "DESCRIPTION_HELP": "A propÃ³sito de yo...",
    "SOCIAL_HELP": "http://...",
    "GENERAL_DIVIDER": "InformaciÃ³nes generales",
    "SOCIAL_NETWORKS_DIVIDER": "Redes sociales, sitios web",
    "TECHNICAL_DIVIDER": "InformaciÃ³nes tÃ©cnicas",
    "MODAL_AVATAR": {
      "TITLE": "Foto de perfil",
      "SELECT_FILE_HELP": "Por favor, <b>elige un fichero imagen</b>, haciendo un clic sobre el botÃ³n por debajo :",
      "BTN_SELECT_FILE": "Eligir una foto",
      "RESIZE_HELP": "<b>Encuadra la imagen</b>, si es necesario. Un clic mantenido sobre la imagen permite desplazarla. Hace un clic sobre la zona abajo a la izquierda para hacer zoom.",
      "RESULT_HELP": "<b>AquÃ­ estÃ¡ el resultado</b> tal como estÃ¡ visible sobre su perfil :"
    },
    "CONFIRM": {
      "DELETE": "Â¿EstÃ¡s seguro de que quieres <b>eliminar tu perfil Cesium+?</b><br/><br/>Esta operaciÃ³n es irreversible."
    },
    "ERROR": {
      "REMOVE_PROFILE_FAILED": "Error de eliminaciÃ³n de perfil",
      "LOAD_PROFILE_FAILED": "Fracaso en la carga del perfil usuario.",
      "SAVE_PROFILE_FAILED": "Fracaso durante el respaldo",
      "INVALID_SOCIAL_NETWORK_FORMAT": "Formato no tomado en cuenta : por favor, indica una direcciÃ³n vÃ¡lida.<br/><br/>Ejemplos :<ul><li>- Una pÃ¡gina Facebook (https://www.facebook.com/user)</li><li>- Una pÃ¡gina web (http://www.misitio.es)</li><li>- Una direcciÃ³n email (joe@dalton.com)</li></ul>",
      "IMAGE_RESIZE_FAILED": "Fracaso durante el redimensionamiento de la imagen"
    },
    "INFO": {
      "PROFILE_REMOVED": "Perfil eliminado",
      "PROFILE_SAVED": "Perfil respaldado"
    },
    "HELP": {
      "WARNING_PUBLIC_DATA": "Las informaciÃ³nes informadas en su perfil <b>estÃ¡n pÃºblicas</b> : visibles tambiÃ©n por personas <b>no conectadas</b>.<br/>{{'PROFILE.PROFILE_DIVIDER_HELP'|translate}}"
    }
  },
  "LOCATION": {
    "BTN_GEOLOC_ADDRESS": "Actualizar desde la direcciÃ³n",
    "USE_GEO_POINT": "Aparecer en la tarjeta {{'COMMON.APP_NAME'|translate}} ?",
    "LOADING_LOCATION": "Encontrar la direcciÃ³n ...",
    "LOCATION_DIVIDER": "DirecciÃ³n",
    "ADDRESS": "Calle",
    "ADDRESS_HELP": "Calle, complemento de direcciÃ³n...",
    "CITY": "Ciudad",
    "CITY_HELP": "Ciudad, PaÃ­s",
    "DISTANCE": "Distancia mÃ¡xima alrededor de la ciudad",
    "DISTANCE_UNIT": "km",
    "DISTANCE_OPTION": "{{value}} {{'LOCATION.DISTANCE_UNIT'|translate}}",
    "SEARCH_HELP": "Ciudad, PaÃ­s",
    "MODAL": {
      "TITLE": "BÃºsqueda de direcciÃ³n",
      "SEARCH_HELP": "Ciudad, PaÃ­s",
      "ALTERNATIVE_RESULT_DIVIDER": "Resultados alternativos para <b>{{address}}</b> :",
      "POSITION": "Latitud/Longitud : {{lat}} / {{lon}}"
    },
    "ERROR": {
      "REQUIRED_FOR_LOCATION": "Campo obligatorio para aparecer en el mapa",
      "INVALID_FOR_LOCATION": "DirecciÃ³n desconocida",
      "GEO_LOCATION_FAILED": "No se puede recuperar su ubicaciÃ³n Por favor usa el botÃ³n de bÃºsqueda.",
      "ADDRESS_LOCATION_FAILED": "No se puede recuperar la posiciÃ³n de la direcciÃ³n."
    }
  },
  "SUBSCRIPTION": {
    "SUBSCRIPTION_DIVIDER": "Servicios en lÃ­nea",
    "SUBSCRIPTION_DIVIDER_HELP": "Los servicios en lÃ­nea ofrecen servicios adicionales opcionales, delegados a un tercero.",
    "BTN_ADD": "Agregar un servicio",
    "BTN_EDIT": "Administrar mis servicios",
    "NO_SUBSCRIPTION": "NingÃºn servicio definido",
    "SUBSCRIPTION_COUNT": "Servicios / SuscripciÃ³n",
    "EDIT": {
      "TITLE": "Servicios en lÃ­nea",
      "HELP_TEXT": "Gestione sus suscripciones y otros servicios en lÃ­nea aquÃ­",
      "PROVIDER": "Proveedor:"
    },
    "TYPE": {
      "ENUM": {
        "EMAIL": "Recibir notificaciones por correo electrÃ³nico"
      }
    },
    "CONFIRM": {
      "DELETE_SUBSCRIPTION": "Deseas <b>eliminar</b> esta suscripciÃ³n ?"
    },
    "ERROR": {
      "LOAD_SUBSCRIPTIONS_FAILED": "Error al cargar servicios en lÃ­nea",
      "ADD_SUBSCRIPTION_FAILED": "Error al agregar suscripciÃ³n",
      "UPDATE_SUBSCRIPTION_FAILED": "Error durante la actualizaciÃ³n de la suscripciÃ³n",
      "DELETE_SUBSCRIPTION_FAILED": "Error al eliminar la suscripciÃ³n"
    },
    "MODAL_EMAIL": {
      "TITLE" : "NotificaciÃ³n por correo electrÃ³nico",
      "HELP" : "Rellene este formulario para <b>ser notificado por correo electrÃ³nico</b> de los eventos de su cuenta. <br/> Su direcciÃ³n de correo electrÃ³nico se cifrarÃ¡ Ãºnicamente para que sea visible para el proveedor de servicios.",
      "EMAIL_LABEL" : "Tu correo electrÃ³nico :",
      "EMAIL_HELP": "carlos@dominio.com",
      "FREQUENCY_LABEL": "Frecuencia de las notificaciones :",
      "FREQUENCY_DAILY": "Diariamente",
      "FREQUENCY_WEEKLY": "Semanal",
      "PROVIDER": "Proveedor de servicio :"
    }
  },
  "ES_SETTINGS": {
    "PLUGIN_NAME": "Cesium+",
    "PLUGIN_NAME_HELP": "Perfiles, notificaciÃ³nes, mensajes privados",
    "ENABLE_TOGGLE": "Activar la extensiÃ³n ?",
    "ENABLE_MESSAGE_TOGGLE": "Activar los mensajes privados ?",
    "ENABLE_SETTINGS_TOGGLE": "Activar el almacenamiento a distancia de las configuraciÃ³nes ?",
    "PEER": "DirecciÃ³n del nodo de datos",
    "POPUP_PEER": {
      "TITLE" : "Nodo de datos",
      "HELP" : "Ingresa la direcciÃ³n del nodo que quiere utilizar :",
      "PEER_HELP": "servidor.dominio.com:puerto"
    },
    "NOTIFICATIONS": {
      "DIVIDER": "NotificaciÃ³nes",
      "HELP_TEXT": "Activa los tipos de notificaciÃ³nes que usted desea recibir :",
      "ENABLE_TX_SENT": "Notificar la validaciÃ³n de los <b>pagos emitidos</b> ?",
      "ENABLE_TX_RECEIVED": "Notificar la validaciÃ³n de los <b>pagos recibidos</b> ?",
      "ENABLE_CERT_SENT": "Notificar la validaciÃ³n de las <b>certificaciÃ³nes emitidas</b> ?",
      "ENABLE_CERT_RECEIVED": "Notificar la validaciÃ³n de las <b>certificaciÃ³nes recibidas</b> ?"
    },
    "CONFIRM": {
      "ASK_ENABLE_TITLE": "Nuevas funcionalidades",
      "ASK_ENABLE": "Nuevas funcionalidades son disponibles : <ul><li>&nbsp;&nbsp;<b><i class=\"icon ion-person\"></i> Perfiles Cesium+</b>;<li>&nbsp;&nbsp;<b><i class=\"icon ion-android-notifications\"></i> NotificaciÃ³nes</b>;<li>&nbsp;&nbsp;<b><i class=\"icon ion-email\"></i> Mensajes privados</b>.</ul><br/>Fueron <b>desactivadas</b> en sus configuraciones.<br/><br/><b>Quiere usted activarlas</b> ?"
    }
  },
  "ES_WALLET": {
    "ERROR": {
      "RECIPIENT_IS_MANDATORY": "Un destinatario es obligatorio para el cifrado."
    }
  },
  "EVENT": {
    "NODE_STARTED": "Su nodo ES API <b>{{params[0]}}</b> es comenzado",
    "NODE_BMA_DOWN": "El nodo <b>{{params[0]}}:{{params[1]}}</b> (utilizado por su nodo ES API) <b>no es localizable</b>.",
    "NODE_BMA_UP": "El nodo <b>{{params[0]}}:{{params[1]}}</b> es de nuevo accesible.",
    "MEMBER_JOIN": "Ahora usted estÃ¡ <b>miembro</b> de la moneda <b>{{params[0]}}</b> !",
    "MEMBER_LEAVE": "No estÃ¡ <b>miembro</b> de la moneda <b>{{params[0]}}</b>!",
    "MEMBER_EXCLUDE": "Usted ya no es un miembro de la moneda <b>{{params[0]}}</b>, la falta de no renovaciÃ³n o la falta de certificaciones.",
    "MEMBER_REVOKE": "La revocaciÃ³n de su cuenta se ha hecho. Puede que no sea un miembro de la cuenta en moneda <b>{{params[0]}}</b>.",
    "MEMBER_ACTIVE": "Su renovaciÃ³n de adhesiÃ³n a la moneda <b>{{params[0]}}</b> fue <b>tomado en cuenta</b>.",
    "TX_SENT": "Su <b>pago</b> a <span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid}\" ><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span> fue efectuado.",
    "TX_SENT_MULTI": "Su <b>pago</b> a <b>{{params[1]}}</b> fue efectuado.",
    "TX_RECEIVED": "Ha <b>recibido un pago</b> de <span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid}\"><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span>.",
    "TX_RECEIVED_MULTI": "Ha <b>recibido un pago</b> de <b>{{params[1]}}</b>.",
    "CERT_SENT": "Su <b>certificaciÃ³n</b> a <span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid}\" ><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span> fue efectuada.",
    "CERT_RECEIVED": "Ha <b>recibido una certificaciÃ³n</b> de <span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid}\"><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span>.",
    "REGISTRY": {
      "NEW_COMMENT": "<span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid}\"><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span> ha comentado su referencia : <b>{{params[2]}}</b>",
      "UPDATE_COMMENT": "<span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid }\"><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span> ha modificado su comentario sobre su referencia : <b>{{params[2]}}</b>",
      "NEW_REPLY_COMMENT": "<span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid}\"><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span> ha contestado a su comentario sobre el referencia : <b>{{params[2]}}</b>",
      "UPDATE_REPLY_COMMENT": "<span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid }\"><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span> ha modificado la repuesta a su comentario sobre el referencia : <b>{{params[2]}}</b>"
    }
  },
  "CONFIRM": {
    "ES_USE_FALLBACK_NODE": "Nodo de datos <b> {{old}} </ b> direcciÃ³n inalcanzable o no vÃ¡lida.<br/><br/>Â¿Desea utilizar temporalmente el nodo de datos <b>{{new}}</b>?"
  },
  "ERROR": {
    "ES_CONNECTION_ERROR": "Nodo de datos <b>{{server}}</b> direcciÃ³n inalcanzable o no vÃ¡lida.<br/><br/>Cesium continuarÃ¡ funcionando, <b>sin la extensiÃ³n Cesium+</b> (perfiles de usuario, mensajes privados), mapas y grÃ¡ficos).<br/><br/>Verifique su conexiÃ³n a Internet, o cambie el nodo de datos en <a class=\"positive\" ng-click=\"doQuickFix('settings')\"> configuraciÃ³n de extensiÃ³n </a>.",
    "ES_MAX_UPLOAD_BODY_SIZE": "El volumen de datos a enviar excede el lÃ­mite establecido por el servidor.<br/><br/>Por favor, intÃ©ntelo de nuevo despuÃ©s, por ejemplo, borrando fotos."
  }
}
);

$translateProvider.translations("fr-FR", {
  "COMMON": {
    "CATEGORY": "CatÃ©gorie",
    "CATEGORIES": "CatÃ©gories",
    "CATEGORY_SEARCH_HELP": "Recherche",
    "LAST_MODIFICATION_DATE": "Mise Ã  jour le",
    "SUBMIT_BY": "Soumis par",
    "BTN_PUBLISH": "Publier",
    "BTN_PICTURE_DELETE": "Supprimer",
    "BTN_PICTURE_FAVORISE": "Principale",
    "BTN_PICTURE_ROTATE": "Tourner",
    "BTN_ADD_PICTURE": "Ajouter une photo",
    "NOTIFICATIONS": {
      "TITLE": "Notifications",
      "MARK_ALL_AS_READ": "Tout marquer comme lu",
      "NO_RESULT": "Aucune notification",
      "SHOW_ALL": "Voir tout",
      "LOAD_NOTIFICATIONS_FAILED": "Erreur de chargement des notifications"
    }
  },
  "MENU": {
    "REGISTRY": "Pages",
    "USER_PROFILE": "Mon profil",
    "MESSAGES": "Messages",
    "NOTIFICATIONS": "Notifications",
    "INVITATIONS": "Invitations"
  },
  "ACCOUNT": {
    "NEW": {
      "ORGANIZATION_ACCOUNT": "Compte pour une organisation",
      "ORGANIZATION_ACCOUNT_HELP": "Si vous reprÃ©sentez une entreprise, une association, etc.<br/>Aucun dividende universel ne sera crÃ©Ã© par ce compte."
    },
    "EVENT": {
      "MEMBER_WITHOUT_PROFILE": "Pour obtenir vos certifications plus rapidement, completez <a ui-sref=\"app.user_edit_profile\">votre profil utilisateur</a>. Les membres accorderont plus facilement leur confiance Ã  une identitÃ© vÃ©rifiable."
    },
    "ERROR": {
      "WS_CONNECTION_FAILED": "Cesium ne peut pas recevoir les notifications, Ã  cause d'une erreur technique (connexion au noeud de donnÃ©es Cesium+).<br/><br/>Si le problÃ¨me persiste, veuillez <b>choisir un autre noeud de donnÃ©es</b> dans les paramÃ¨tres Cesium+."
    }
  },
  "WOT": {
    "BTN_SUGGEST_CERTIFICATIONS_DOTS": "SuggÃ©rer des identitÃ©s Ã  certifier...",
    "BTN_ASK_CERTIFICATIONS_DOTS": "Demander Ã  des membres de me certifier...",
    "BTN_ASK_CERTIFICATION": "Demander une certification",
    "SUGGEST_CERTIFICATIONS_MODAL": {
      "TITLE": "SuggÃ©rer des certifications",
      "HELP": "SÃ©lectionner vos suggestions"
    },
    "ASK_CERTIFICATIONS_MODAL": {
      "TITLE": "Demander des certifications",
      "HELP": "SÃ©lectionner les destinataires"
    },
    "SEARCH": {
      "DIVIDER_PROFILE": "Comptes",
      "DIVIDER_PAGE": "Pages",
      "DIVIDER_GROUP": "Groupes"
    },
    "CONFIRM": {
      "SUGGEST_CERTIFICATIONS": "Etes-vous sÃ»r de vouloir <b>envoyer ces suggestions de certification</b> ?",
      "ASK_CERTIFICATION": "Etes-vous sÃ»r de vouloir <b>envoyer une demande de certification</b> ?",
      "ASK_CERTIFICATIONS": "Etes-vous sÃ»r de vouloir <b>envoyer une demande de certification</b> Ã  ces personnes ?"
    }
  },
  "INVITATION": {
    "TITLE": "Invitations",
    "NO_RESULT": "Aucune invitation en attente",
    "BTN_DELETE_ALL": "Supprimer toutes les invitations",
    "BTN_DELETE": "Supprimer l'invitation",
    "BTN_NEW_INVITATION": "Nouvelle invitation",
    "ASK_CERTIFICATION": "<a href=\"#/app/wot/{{pubkey}}/{{::uid}}\">{{::name||uid}}</a> demande votre certification",
    "SUGGESTION_CERTIFICATION": "<a href=\"#/app/wot/{{::pubkey}}/{{::uid}}\">{{::name||uid}}</a> vous est suggÃ©rÃ© pour certification",
    "SUGGESTED_BY": "Suggestion envoyÃ©e par <a class=\"positive\" href=\"#/app/wot/{{::issuer.pubkey}}/{{::issuer.uid}}\">{{::issuer.name||issuer.uid}}</a>",
    "NOTIFICATIONS": {
      "TITLE": "Invitations"
    },
    "LIST": {
      "TITLE": "Invitations"
    },
    "NEW": {
      "TITLE": "Nouvelle invitation",
      "RECIPIENTS": "A",
      "RECIPIENTS_HELP": "Destinataires de l'invitation",
      "RECIPIENTS_MODAL_TITLE": "Destinataires",
      "RECIPIENTS_MODAL_HELP": "Veuillez choisir les destinataires :",
      "SUGGESTION_IDENTITIES": "Suggestions de certification",
      "SUGGESTION_IDENTITIES_HELP": "Certifications Ã  suggÃ©rer",
      "SUGGESTION_IDENTITIES_MODAL_TITLE": "Suggestions",
      "SUGGESTION_IDENTITIES_MODAL_HELP": "Veuillez choisir vos suggestions :"
    },
    "CONFIRM": {
      "DELETE_ALL_CONFIRMATION": "La suppression des invitations est une <b>opÃ©ration irrÃ©versible</b>.<br/><br/><b>Etes-vous sÃ»r</b> de vouloir continuer ?",
      "SEND_INVITATIONS_TO_CERTIFY": "Etes-vous sÃ»r de vouloir <b>envoyer cette invitation Ã  certfier</b> ?"
    },
    "INFO": {
      "INVITATION_SENT": "Invitation envoyÃ©e"
    },
    "ERROR": {
      "LOAD_INVITATIONS_FAILED": "Echec du chargement des invitations",
      "REMOVE_INVITATION_FAILED": "Erreur lors de la suppression de l'invitation",
      "REMOVE_ALL_INVITATIONS_FAILED": "Erreur lors de la suppression des invitations",
      "SEND_INVITATION_FAILED": "Erreur lors de l'envoi de l'invitation",
      "BAD_INVITATION_FORMAT": "<span class=\"assertive\"><i class=\"ion-close-circled\"></i> Invitation illisible (format inconnu)</span> - envoyÃ©e par <a ui-sref=\"app.wot_identity({pubkey: '{{::pubkey}}', uid: '{{::uid}}' })\">{{::name||uid}}</a>"
    }
  },
  "COMMENTS": {
    "DIVIDER": "Commentaires",
    "SHOW_MORE_COMMENTS": "Afficher les commentaires prÃ©cÃ©dents",
    "COMMENT_HELP": "Votre commentaire, question, etc.",
    "COMMENT_HELP_REPLY_TO": "Votre rÃ©ponse...",
    "BTN_SEND": "Envoyer",
    "POPOVER_SHARE_TITLE": "Message #{{number}}",
    "REPLY": "RÃ©pondre",
    "REPLY_TO": "RÃ©ponse Ã  :",
    "REPLY_TO_LINK": "En rÃ©ponse Ã  ",
    "REPLY_TO_DELETED_COMMENT": "En rÃ©ponse Ã  un commentaire supprimÃ©",
    "REPLY_COUNT": "{{replyCount}} rÃ©ponses",
    "DELETED_COMMENT": "Commentaire supprimÃ©",
    "ERROR": {
      "FAILED_SAVE_COMMENT": "Erreur lors de la sauvegarde du commentaire",
      "FAILED_REMOVE_COMMENT": "Erreur lors de la suppression du commentaire"
    }
  },
  "MESSAGE": {
    "REPLY_TITLE_PREFIX": "Rep: ",
    "FORWARD_TITLE_PREFIX": "Tr: ",
    "BTN_REPLY": "RÃ©pondre",
    "BTN_COMPOSE": "Nouveau message",
    "BTN_WRITE": "Ecrire",
    "NO_MESSAGE_INBOX": "Aucun message reÃ§u",
    "NO_MESSAGE_OUTBOX": "Aucun message envoyÃ©",
    "NOTIFICATIONS": {
      "TITLE": "Messages",
      "MESSAGE_RECEIVED": "Vous avez <b>reÃ§u un message</b><br/>de"
    },
    "LIST": {
      "INBOX": "Boite de rÃ©ception",
      "OUTBOX": "Messages envoyÃ©s",
      "LAST_INBOX": "Nouveaux messages",
      "LAST_OUTBOX": "Messages envoyÃ©s",
      "BTN_LAST_MESSAGES": "Messages rÃ©cents",
      "TITLE": "Messages",
      "SEARCH_HELP": "Recherche dans les messages",
      "POPOVER_ACTIONS": {
        "TITLE": "Options",
        "DELETE_ALL": "Supprimer tous les messages"
      }
    },
    "COMPOSE": {
      "TITLE": "Nouveau message",
      "TITLE_REPLY": "RÃ©pondre",
      "SUB_TITLE": "Nouveau message",
      "TO": "A",
      "OBJECT": "Objet",
      "OBJECT_HELP": "Objet",
      "ENCRYPTED_HELP": "Veuillez noter que ce message sera chiffrÃ© avant envoi, afin que seul le destinataire puisse le lire, et qu'il soit assurÃ© que vous soyez bien son auteur.",
      "MESSAGE": "Message",
      "MESSAGE_HELP": "Contenu du message",
      "CONTENT_CONFIRMATION": "Le contenu du message est vide.<br/><br/>Voulez-vous nÃ©anmoins envoyer le message ?"
    },
    "VIEW": {
      "TITLE": "Message",
      "SENDER": "EnvoyÃ© par",
      "RECIPIENT": "EnvoyÃ© Ã ",
      "NO_CONTENT": "Message vide",
      "DELETE": "Supprimer le message"
    },
    "CONFIRM": {
      "REMOVE": "Ãtes-vous sÃ»r de vouloir <b>supprimer ce message</b> ?<br/><br/>Cette opÃ©ration est irrÃ©versible.",
      "REMOVE_ALL" : "Ãtes-vous sÃ»r de vouloir <b>supprimer tous les messages</b> ?<br/><br/>Cette opÃ©ration est irrÃ©versible.",
      "MARK_ALL_AS_READ": "Ãtes-vous sÃ»r de vouloir <b>marquer tous les messages comme lu</b> ?",
      "USER_HAS_NO_PROFILE": "Cette identitÃ© n'a aucun profil Cesium+. Il se peut qu'elle n'utilise pas l'extension Cesium+, et <b>ne consultera donc pas votre message</b>.<br/><br/>Ãtes-vous sÃ»r de vouloir <b>continuer</b> malgrÃ© tout ?"
    },
    "INFO": {
      "MESSAGE_REMOVED": "Message supprimÃ©",
      "All_MESSAGE_REMOVED": "Tous les messages ont Ã©tÃ© supprimÃ©",
      "MESSAGE_SENT": "Message envoyÃ©"
    },
    "ERROR": {
      "SEND_MSG_FAILED": "Erreur lors de l'envoi du message.",
      "LOAD_MESSAGES_FAILED": "Erreur lors de la rÃ©cupÃ©ration des messages.",
      "LOAD_MESSAGE_FAILED": "Erreur lors de la rÃ©cupÃ©ration du message.",
      "MESSAGE_NOT_READABLE": "Lecture du message impossible.",
      "USER_NOT_RECIPIENT": "Vous n'Ãªtes pas le destinataire de ce message : dÃ©chiffrement impossible.",
      "NOT_AUTHENTICATED_MESSAGE": "L'authenticitÃ© du message est douteuse ou son contenu est corrompu.",
      "REMOVE_MESSAGE_FAILED": "Erreur de suppression du message",
      "MESSAGE_CONTENT_TOO_LONG": "Valeur trop longue ({{maxLength}} caractÃ¨res max).",
      "MARK_AS_READ_FAILED": "Impossible de marquer le message comme 'lu'.",
      "LOAD_NOTIFICATIONS_FAILED": "Erreur lors de la rÃ©cupÃ©ration des notifications de messages.",
      "REMOVE_All_MESSAGES_FAILED": "Erreur lors de la suppression de tous les messages.",
      "MARK_ALL_AS_READ_FAILED": "Erreur lors du marquage des message comme lu.",
      "RECIPIENT_IS_MANDATORY": "Le destinataire est obligatoire."
    }
  },
  "BLOCKCHAIN": {
    "LOOKUP": {
      "SEARCH_HELP": "NumÃ©ro de bloc, hash, clÃ© publique, etc.",
      "POPOVER_FILTER_TITLE": "Filtres",
      "HEADER_MEDIAN_TIME": "Date / Heure",
      "HEADER_BLOCK": "Bloc #",
      "HEADER_ISSUER": "Noeud Ã©metteur",
      "BTN_LAST": "Derniers blocs",
      "DISPLAY_QUERY": "Afficher la requÃªte",
      "HIDE_QUERY": "Masquer la requÃªte",
      "TX_SEARCH_FILTER": {
        "MEMBER_FLOWS": "<b class=\"ion-person\"></b> EntrÃ©es/sorties de membres",
        "EXISTING_TRANSACTION": "<b class=\"ion-card\"></b> Avec transactions",
        "PERIOD": "<b class=\"ion-clock\"></b> Entre <b class=\"gray\">{{params[1]|formatDateShort}}</b> ({{params[1]|formatTime}}) et <b class=\"gray\">{{params[2]|formatDateShort}}</b> ({{params[2]|formatTime}})",
        "ISSUER": "<b class=\"ion-android-desktop\"></b> CalculÃ© par <b class=\"ion-key\"></b> {{params[1]|formatPubkey}}",
        "TX_PUBKEY": "<b class=\"ion-card\"></b> Transactions concernant <b class=\"ion-key\"></b> {{params[1]|formatPubkey}}"
      }
    },
    "ERROR": {
      "SEARCH_BLOCKS_FAILED": "Erreur de la recherche des blocs."
    }
  },
  "GROUP": {
    "GENERAL_DIVIDER": "Informations gÃ©nÃ©rales",
    "LOCATION_DIVIDER": "Adresse",
    "SOCIAL_NETWORKS_DIVIDER": "RÃ©seaux sociaux et site web",
    "TECHNICAL_DIVIDER": "Informations techniques",
    "CREATED_TIME": "CrÃ©e {{creationTime|formatFromNow}}",
    "NOTIFICATIONS": {
      "TITLE": "Invitations"
    },
    "LOOKUP": {
      "TITLE": "Groupes",
      "SEARCH_HELP": "Nom de groupe, mots, lieu, etc.",
      "LAST_RESULTS_LIST": "Nouveaux groupes :",
      "OPEN_RESULTS_LIST": "Groupes ouverts :",
      "MANAGED_RESULTS_LIST": "Groupes fermÃ©s :",
      "BTN_LAST": "Nouveaux groupes",
      "BTN_NEW": "J'ajoute un groupe"
    },
    "TYPE": {
      "TITLE": "Nouveau groupe",
      "SELECT_TYPE": "Type de groupe :",
      "OPEN_GROUP": "Groupe ouvert",
      "OPEN_GROUP_HELP": "Un groupe ouvert est accessible par n'importe quel membre de la monnaie.",
      "MANAGED_GROUP": "Groupe administrÃ©",
      "MANAGED_GROUP_HELP": "un groupe administrÃ© est gÃ©rer par des administrateurs et des modÃ©rateurs, qui peuvent accepter, refuser ou exclure un membre en son sein.",
      "ENUM": {
        "OPEN": "Groupe ouvert",
        "MANAGED": "Groupe administrÃ©"
      }
    },
    "VIEW": {
      "POPOVER_SHARE_TITLE": "{{title}}",
      "MENU_TITLE": "Options",
      "REMOVE_CONFIRMATION" : "Ãtes-vous sÃ»r de vouloir supprimer ce groupe ?<br/><br/>Cette opÃ©ration est irrÃ©versible."
    },
    "EDIT": {
      "TITLE": "Groupe",
      "TITLE_NEW": "Nouveau groupe",
      "RECORD_TITLE": "Titre",
      "RECORD_TITLE_HELP": "Titre",
      "RECORD_DESCRIPTION": "Description",
      "RECORD_DESCRIPTION_HELP": "Description"
    },
    "ERROR": {
      "SEARCH_GROUPS_FAILED": "Echec de la recherche de groupes",
      "REMOVE_RECORD_FAILED": "Erreur de la suppression du groupe"
    },
    "INFO": {
      "RECORD_REMOVED" : "Groupe supprimÃ©"
    }
  },
  "REGISTRY": {
    "CATEGORY": "ActivitÃ© principale",
    "GENERAL_DIVIDER": "Informations gÃ©nÃ©rales",
    "LOCATION_DIVIDER": "Adresse",
    "SOCIAL_NETWORKS_DIVIDER": "RÃ©seaux sociaux et site web",
    "TECHNICAL_DIVIDER": "Informations techniques",
    "BTN_SHOW_WOT": "Personnes",
    "BTN_SHOW_WOT_HELP": "Rechercher des personnes",
    "BTN_SHOW_PAGES": "Pages",
    "BTN_SHOW_PAGES_HELP": "Rechercher des pages",
    "BTN_NEW": "CrÃ©er une page",
    "MY_PAGES": "Mes pages",
    "NO_PAGE": "Aucune page",
    "SEARCH": {
      "TITLE": "Pages",
      "SEARCH_HELP": "Quoi, Qui : restaurant, Chez Marcel, ...",
      "BTN_ADD": "Nouveau",
      "BTN_LAST_RECORDS": "Pages rÃ©centes",
      "BTN_ADVANCED_SEARCH": "Recherche avancÃ©e",
      "BTN_OPTIONS": "Recherche avancÃ©e",
      "TYPE": "Type de page",
      "LOCATION_HELP": "OÃ¹ : Ville, Code postal",
      "RESULTS": "RÃ©sultats",
      "RESULT_COUNT_LOCATION": "{{count}} rÃ©sultat{{count>0?'s':''}}, prÃ¨s de {{location}}",
      "RESULT_COUNT": "{{count}} rÃ©sultat{{count>0?'s':''}}",
      "LAST_RECORDS": "Pages rÃ©centes",
      "LAST_RECORD_COUNT_LOCATION": "{{count}} page{{count>0?'s':''}} rÃ©cente{{count>0?'s':''}}, prÃ¨s de {{location}}",
      "LAST_RECORD_COUNT": "{{count}} page{{count>0?'s':''}} rÃ©cente{{count>0?'s':''}}",
      "POPOVER_FILTERS": {
        "BTN_ADVANCED_SEARCH": "Options avancÃ©es ?"
      }
    },
    "VIEW": {
      "TITLE": "Annuaire",
      "CATEGORY": "ActivitÃ© principale :",
      "LOCATION": "Adresse :",
      "MENU_TITLE": "Options",
      "POPOVER_SHARE_TITLE": "{{title}}",
      "REMOVE_CONFIRMATION" : "Ãtes-vous sÃ»r de vouloir supprimer cette page ?<br/><br/>Cette opÃ©ration est irrÃ©versible."
    },
    "TYPE": {
      "TITLE": "Types",
      "SELECT_TYPE": "Type de page :",
      "ENUM": {
        "SHOP": "Commerce local",
        "COMPANY": "Entreprise",
        "ASSOCIATION": "Association",
        "INSTITUTION": "Institution"
      }
    },
    "EDIT": {
      "TITLE": "Edition",
      "TITLE_NEW": "Nouvelle page",
      "RECORD_TYPE":"Type de page",
      "RECORD_TITLE": "Nom",
      "RECORD_TITLE_HELP": "Nom",
      "RECORD_DESCRIPTION": "Description",
      "RECORD_DESCRIPTION_HELP": "Description de l'activitÃ©",
      "RECORD_ADDRESS": "Rue",
      "RECORD_ADDRESS_HELP": "Rue, batiment...",
      "RECORD_CITY": "Ville",
      "RECORD_CITY_HELP": "Ville",
      "RECORD_SOCIAL_NETWORKS": "RÃ©seaux sociaux et site web",
      "RECORD_PUBKEY": "ClÃ© publique",
      "RECORD_PUBKEY_HELP": "ClÃ© publique de rÃ©ception des paiements"
    },
    "WALLET": {
      "REGISTRY_DIVIDER": "Pages",
      "REGISTRY_HELP": "Les pages rÃ©fÃ©rencent des activitÃ©s acceptant la monnaie ou la favorisant : commerces, entreprises, associations, institutions."
    },
    "ERROR": {
      "LOAD_CATEGORY_FAILED": "Erreur de chargement de la liste des activitÃ©s",
      "LOAD_RECORD_FAILED": "Erreur lors du chargement de la page",
      "LOOKUP_RECORDS_FAILED": "Erreur lors de l'execution de la recherche.",
      "REMOVE_RECORD_FAILED": "Erreur de la suppression de la page",
      "SAVE_RECORD_FAILED": "Erreur lors de la sauvegarde",
      "RECORD_NOT_EXISTS": "Page inexistante",
      "GEO_LOCATION_NOT_FOUND": "Ville ou code postal non trouvÃ©"
    },
    "INFO": {
      "RECORD_REMOVED" : "Page supprimÃ©e",
      "RECORD_SAVED": "Page sauvegardÃ©e"
    }
  },
  "PROFILE": {
    "PROFILE_DIVIDER": "Profil Cesium+",
    "PROFILE_DIVIDER_HELP": "Il s'agit de donnÃ©es annexes, stockÃ©es en dehors du rÃ©seau de la monnaie.",
    "NO_PROFILE_DEFINED": "Aucun profil saisi",
    "BTN_ADD": "Saisir mon profil",
    "BTN_EDIT": "Editer mon profil",
    "BTN_DELETE": "Supprimer mon profil",
    "BTN_REORDER": "RÃ©ordonner",
    "UID": "Pseudonyme",
    "TITLE": "Nom, PrÃ©nom",
    "TITLE_HELP": "Nom, PrÃ©nom",
    "DESCRIPTION": "A propos de moi",
    "DESCRIPTION_HELP": "A propos de moi...",
    "SOCIAL_HELP": "http://...",
    "GENERAL_DIVIDER": "Informations gÃ©nÃ©rales",
    "SOCIAL_NETWORKS_DIVIDER": "RÃ©seaux sociaux, sites web",
    "TECHNICAL_DIVIDER": "Informations techniques",
    "MODAL_AVATAR": {
      "TITLE": "Photo de profil",
      "SELECT_FILE_HELP": "Veuillez <b>choisir un fichier image</b>, en cliquant sur le bouton ci-dessous :",
      "BTN_SELECT_FILE": "Choisir une photo",
      "RESIZE_HELP": "<b>Recadrez l'image</b>, si besoin. Un clic maintenu sur l'image permet de la dÃ©placer. Cliquez sur la zone en bas Ã  gauche pour zoomer.",
      "RESULT_HELP": "<b>Voici le rÃ©sultat</b> tel que visible sur votre profil :"
    },
    "CONFIRM": {
      "DELETE": "Etes-vous sur de vouloir <b>supprimer votre profif Cesium+ ?</b><br/><br/>Cette opÃ©ration est irrÃ©versible."
    },
    "ERROR": {
      "REMOVE_PROFILE_FAILED": "Erreur de suppression du profil",
      "LOAD_PROFILE_FAILED": "Erreur de chargement du profil utilisateur.",
      "SAVE_PROFILE_FAILED": "Erreur lors de la sauvegarde",
      "INVALID_SOCIAL_NETWORK_FORMAT": "Format non pris en compte : veuillez indiquer une adresse valide.<br/><br/>Exemples :<ul><li>- Une page Facebook (https://www.facebook.com/user)</li><li>- Une page web (http://www.monsite.fr)</li><li>- Une adresse email (joe@dalton.com)</li></ul>",
      "IMAGE_RESIZE_FAILED": "Erreur lors du redimensionnement de l'image"
    },
    "INFO": {
      "PROFILE_REMOVED": "Profil supprimÃ©",
      "PROFILE_SAVED": "Profil sauvegardÃ©"
    },
    "HELP": {
      "WARNING_PUBLIC_DATA": "Les informations renseignÃ©es dans votre profil <b>sont publiques</b> : visibles y compris par des personnes <b>non connectÃ©es</b>.<br/>{{'PROFILE.PROFILE_DIVIDER_HELP'|translate}}"
    }
  },
  "LOCATION": {
    "BTN_GEOLOC_ADDRESS": "Trouver mon adresse sur la carte",
    "USE_GEO_POINT": "ApparaÃ®tre sur les cartes {{'COMMON.APP_NAME'|translate}} ?",
    "LOADING_LOCATION": "Recherche de l'adresse...",
    "LOCATION_DIVIDER": "Adresse",
    "ADDRESS": "Rue",
    "ADDRESS_HELP": "Rue, complÃ©ment d'adresse...",
    "CITY": "Ville",
    "CITY_HELP": "Ville, Pays",
    "DISTANCE": "Distance maximale autour de la ville",
    "DISTANCE_UNIT": "km",
    "DISTANCE_OPTION": "{{value}} {{'LOCATION.DISTANCE_UNIT'|translate}}",
    "SEARCH_HELP": "Ville, Code postal",
    "MODAL": {
      "TITLE": "Recherche de l'adresse",
      "SEARCH_HELP": "Ville, Code postal, Pays",
      "ALTERNATIVE_RESULT_DIVIDER": "RÃ©sultats alternatifs pour <b>{{address}}</b> :",
      "POSITION": "Lat/Lon : {{lat}}/{{lon}}"
    },
    "ERROR": {
      "REQUIRED_FOR_LOCATION": "Champ obligatoire pour apparaÃ®tre sur la carte",
      "INVALID_FOR_LOCATION": "Adresse inconnue",
      "GEO_LOCATION_FAILED": "Impossible de rÃ©cupÃ©rer votre position. Veuillez utiliser le bouton de recherche.",
      "ADDRESS_LOCATION_FAILED": "Impossible de rÃ©cupÃ©rer la position Ã  partir de l'adresse"
    }
  },
  "SUBSCRIPTION": {
    "SUBSCRIPTION_DIVIDER": "Services en ligne",
    "SUBSCRIPTION_DIVIDER_HELP": "Les services en ligne offrent des services supplÃ©mentaires optionnels, dÃ©lÃ©guÃ©s Ã  un tiers.",
    "BTN_ADD": "Ajouter un service",
    "BTN_EDIT": "GÃ©rer mes services",
    "NO_SUBSCRIPTION": "Aucun service utilisÃ©",
    "SUBSCRIPTION_COUNT": "Services / Abonnements",
    "EDIT": {
      "TITLE": "Services en lignes",
      "HELP_TEXT": "GÃ©rer ici vos abonnements et autres services en ligne",
      "PROVIDER": "Prestataire :"
    },
    "TYPE": {
      "ENUM": {
        "EMAIL": "Recevoir les notifications par email"
      }
    },
    "CONFIRM": {
      "DELETE_SUBSCRIPTION": "Etes-vous sÃ»r de vouloir <b>supprimer cet abonnement</b> ?"
    },
    "ERROR": {
      "LOAD_SUBSCRIPTIONS_FAILED": "Erreur lors du chargement des services en ligne",
      "ADD_SUBSCRIPTION_FAILED": "Erreur de l'envoi de l'abonnement",
      "UPDATE_SUBSCRIPTION_FAILED": "Erreur de la mise Ã  jour de l'abonnement",
      "DELETE_SUBSCRIPTION_FAILED": "Erreur lors de la suppression de l'abonnement"
    },
    "MODAL_EMAIL": {
      "TITLE" : "Notification par email",
      "HELP" : "Remplissez ce formulaire pour <b>Ãªtre notifiÃ© par email</b> des Ã©vÃ©nements de votre compte.<br/>Votre adresse email sera chiffrÃ©e pour n'Ãªtre visible que par le prestataire de service.",
      "EMAIL_LABEL" : "Votre email :",
      "EMAIL_HELP": "jean.dupond@domaine.com",
      "FREQUENCY_LABEL": "FrÃ©quence des notifications :",
      "FREQUENCY_DAILY": "Journalier",
      "FREQUENCY_WEEKLY": "Hebdomadaire",
      "PROVIDER": "Prestataire du service :"
    }
  },
  "DOCUMENT": {
    "HASH": "Hash: ",
    "LOOKUP": {
      "TITLE": "Recherche de documents",
      "BTN_ACTIONS": "Actions",
      "SEARCH_HELP": "issuer:AAA*, time:1508406169",
      "LAST_DOCUMENTS": "Derniers documents",
      "SHOW_QUERY": "Voir la requÃªte",
      "HIDE_QUERY": "Masquer la requÃªte",
      "HEADER_TIME": "Date/Heure",
      "HEADER_ISSUER": "Emetteur",
      "HEADER_RECIPIENT": "Destinataire",
      "READ": "Lu",
      "BTN_REMOVE": "Supprimer ce document",
      "POPOVER_ACTIONS": {
        "TITLE": "Actions",
        "REMOVE_ALL": "Supprimer ces documents..."
      }
    },
    "INFO": {
      "REMOVED": "Document supprimÃ©"
    },
    "CONFIRM": {
      "REMOVE": "Etes-vous sÃ»r de vouloir <b>supprimer ce document</b> ?",
      "REMOVE_ALL": "Etes-vous sÃ»r de vouloir <b>supprimer ces documents</b> ?"
    },
    "ERROR": {
      "LOAD_DOCUMENTS_FAILED": "Erreur lors de la recherche de documents",
      "REMOVE_FAILED": "Erreur lors de la suppression du document",
      "REMOVE_ALL_FAILED": "Erreur lors de la suppression des documents"
    }
  },
  "ES_SETTINGS": {
    "PLUGIN_NAME": "Cesium+",
    "PLUGIN_NAME_HELP": "Profils, notifications, messages privÃ©s",
    "ENABLE_TOGGLE": "Activer l'extension ?",
    "ENABLE_REMOTE_STORAGE": "Activer le stockage distant ?",
    "ENABLE_REMOTE_STORAGE_HELP": "Permet de stockage (chiffrÃ©) de vos paramÃ¨tres sur les noeuds Cesium+",
    "ENABLE_MESSAGE_TOGGLE": "Activer les messages privÃ©s ?",
    "PEER": "Addresse du nÅud de donnÃ©es",
    "POPUP_PEER": {
      "TITLE" : "NÅud de donnÃ©es",
      "HELP" : "Saisissez l'adresse du nÅud que vous voulez utiliser :",
      "PEER_HELP": "serveur.domaine.com:port"
    },
    "NOTIFICATIONS": {
      "DIVIDER": "Notifications",
      "HELP_TEXT": "Activez les types de notifications que vous souhaitez recevoir :",
      "ENABLE_TX_SENT": "Notifier les <b>paiement Ã©mis</b> ?",
      "ENABLE_TX_RECEIVED": "Notifier les <b>paiements reÃ§us</b> ?",
      "ENABLE_CERT_SENT": "Notifier les <b>certifications Ã©mises</b> ?",
      "ENABLE_CERT_RECEIVED": "Notifier les <b>certifications reÃ§ues</b> ?"
    },
    "CONFIRM": {
      "ASK_ENABLE_TITLE": "FonctionnalitÃ©s optionnelles",
      "ASK_ENABLE": "L'extension Cesium+ est <b>dÃ©sactivÃ©e</b> dans vos paramÃ¨tres, rendant inactives les fonctionnalitÃ©s : <ul><li>&nbsp;&nbsp;<b><i class=\"icon ion-person\"></i> Profils Cesium+</b>;<li>&nbsp;&nbsp;<b><i class=\"icon ion-android-notifications\"></i> Notifications</b>;<li>&nbsp;&nbsp;<b><i class=\"icon ion-email\"></i> Messages privÃ©s</b>.<li>&nbsp;&nbsp;<b><i class=\"icon ion-location\"></i> Cartes, etc.</b>.</ul><br/><b>Souhaitez-vous la rÃ©-activer</b> l'extension ?"
    }
  },
  "ES_WALLET": {
    "ERROR": {
      "RECIPIENT_IS_MANDATORY": "Un destinataire est obligatoire pour le chiffrement."
    }
  },
  "EVENT": {
    "NODE_STARTED": "Votre noeud ES API <b>{{params[0]}}</b> est dÃ©marrÃ©",
    "NODE_BMA_DOWN": "Le noeud <b>{{params[0]}}:{{params[1]}}</b> (utilisÃ© par votre noeud ES API) est <b>injoignable</b>.",
    "NODE_BMA_UP": "Le noeud <b>{{params[0]}}:{{params[1]}}</b> est Ã  nouveau accessible.",
    "MEMBER_JOIN": "Vous Ãªtes maintenant <b>membre</b> de la monnaie <b>{{params[0]}}</b> !",
    "MEMBER_LEAVE": "Vous n'Ãªtes <b>plus membre</b> de la monnaie <b>{{params[0]}}</b>!",
    "MEMBER_EXCLUDE": "Vous n'Ãªtes <b>plus membre</b> de la monnaie <b>{{params[0]}}</b>, faute de non renouvellement ou par manque de certifications.",
    "MEMBER_REVOKE": "La rÃ©vocation de votre compte a Ã©tÃ© effectuÃ©e. Il ne pourra plus Ãªtre un compte membre de la monnaie <b>{{params[0]}}</b>.",
    "MEMBER_ACTIVE": "Votre renouvellement d'adhÃ©sion Ã  la monnaie <b>{{params[0]}}</b> a Ã©tÃ© <b>pris en compte</b>.",
    "TX_SENT": "Votre <b>paiement</b> Ã  <span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid}\" ><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span> a Ã©tÃ© effectuÃ©.",
    "TX_SENT_MULTI": "Votre <b>paiement</b> Ã  <b>{{params[1]}}</b> a Ã©tÃ© effectuÃ©.",
    "TX_RECEIVED": "Vous avez <b>reÃ§u un paiement</b> de <span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid}\"><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span>.",
    "TX_RECEIVED_MULTI": "Vous avez <b>reÃ§u un paiement</b> de <b>{{params[1]}}</b>.",
    "CERT_SENT": "Votre <b>certification</b> Ã  <span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid}\" ><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span> a Ã©tÃ© effectuÃ©e.",
    "CERT_RECEIVED": "Vous avez <b>reÃ§u une certification</b> de <span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid}\"><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span>.",
    "REGISTRY": {
      "NEW_COMMENT": "<span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid}\"><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span> a commentÃ© votre rÃ©fÃ©rencement : <b>{{params[2]}}</b>",
      "UPDATE_COMMENT": "<span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid }\"><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span> a modifiÃ© son commentaire sur votre rÃ©fÃ©rencement : <b>{{params[2]}}</b>",
      "NEW_REPLY_COMMENT": "<span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid}\"><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span> a rÃ©pondu Ã  votre commentaire sur le rÃ©fÃ©rencement : <b>{{params[2]}}</b>",
      "UPDATE_REPLY_COMMENT": "<span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid }\"><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span> a modifiÃ© sa rÃ©ponse Ã  votre commentaire sur le rÃ©fÃ©rencement : <b>{{params[2]}}</b>"
    }
  },
  "CONFIRM": {
    "ES_USE_FALLBACK_NODE": "NÅud de donnÃ©es <b>{{old}}</b> injoignable ou adresse invalide.<br/><br/>Voulez-vous temporairement utiliser le nÅud de donnÃ©es <b>{{new}}</b> ?"
  },
  "ERROR": {
    "ES_CONNECTION_ERROR": "NÅud de donnÃ©es <b>{{server}}</b> injoignable ou adresse invalide.<br/><br/>Cesium va continuer Ã  fonctionner, <b>sans l'extension Cesium+</b> (profils utilisateur, messages privÃ©s, cartes et graphiques)<br/><br/>VÃ©rifiez votre connection Internet, ou changer de nÅud de donnÃ©es dans les <a class=\"positive\" ng-click=\"doQuickFix('settings')\">paramÃ¨tres de l'extension</a>.",
    "ES_MAX_UPLOAD_BODY_SIZE": "Le volume des donnÃ©es Ã  envoyer dÃ©passe la limite fixÃ©e par le serveur.<br/>Veuillez rÃ©-essayer aprÃ¨s avoir, par exemple, supprimer des photos."
  }
}
);

$translateProvider.translations("it-IT", {
   "COMMON": {
     "CATEGORY": "Categoria",
     "CATEGORIES": "Categorie",
     "CATEGORY_SEARCH_HELP": "Ricerca",
     "LAST_MODIFICATION_DATE": "Aggiornato il ",
     "SUBMIT_BY": "Inviato da",
     "BTN_PUBLISH": "Pubblicare",
     "BTN_PICTURE_DELETE": "Eliminare",
     "BTN_PICTURE_FAVORISE": "Predefinito",
     "BTN_PICTURE_ROTATE": "Girare",
     "BTN_ADD_PICTURE": "Aggiungere foto",
     "NOTIFICATIONS": {
       "TITLE": "Notifiche",
       "MARK_ALL_AS_READ": "Segna tutte come lette",
       "NO_RESULT": "Nessuna notifica",
       "SHOW_ALL": "Mostrare tutte",
       "LOAD_NOTIFICATIONS_FAILED": "Impossibile caricare le notifiche"
     }
   },
   "MENU": {
     "REGISTRY": "Pagine",
     "USER_PROFILE": "Mio profilo",
     "MESSAGES": "Messaggi",
     "NOTIFICATIONS": "Notifiche",
     "INVITATIONS": "Inviti"
   },
   "ACCOUNT": {
     "NEW": {
       "ORGANIZATION_ACCOUNT": "Conto per enti",
       "ORGANIZATION_ACCOUNT_HELP": "Se rappresenta un'azienda, un'associazione, etc.<br/>Questo conto non potrÃ  creare il Dividendo Universale."
     },
     "EVENT": {
       "MEMBER_WITHOUT_PROFILE": "Per ottenere sue certificazioni piÃ¹ velocemente, riempire le informazioni<a ui-sref=\"app.user_edit_profile\">del suo profilo</a>. I membri della rete si fidano piÃ¹ volontieri di profili verificabili."
     },
     "ERROR": {
       "WS_CONNECTION_FAILED": "Cesium non puÃ² ricevere notifiche a causa di un problema tecnico (di conessione al data node Cesium+).<br/><br/>Se il problema persiste, le chiediamo di <b>scegliere un'altro data node</b> nelle impostazioni di Cesium+."
     }
   },
   "WOT": {
     "BTN_SUGGEST_CERTIFICATIONS_DOTS": "Suggerire delle identitÃ  da certificare..",
     "BTN_ASK_CERTIFICATIONS_DOTS": "Chiedere una certificazione ai membri...",
     "BTN_ASK_CERTIFICATION": "Chiedere una certificazione",
     "SUGGEST_CERTIFICATIONS_MODAL": {
       "TITLE": "Suggerire delle certificazioni",
       "HELP": "Scegliere i suoi suggerimenti, aiuti"
     },
     "ASK_CERTIFICATIONS_MODAL": {
       "TITLE": "Chiedere delle certificazioni",
       "HELP": "Selezionare un ricevente"
     },
     "SEARCH": {
      "DIVIDER_PROFILE": "Conti",
      "DIVIDER_PAGE": "Pagine",
      "DIVIDER_GROUP": "Gruppi"
    },
     "CONFIRM": {
       "SUGGEST_CERTIFICATIONS": "Eâ sicuro(a) di voler <b>suggerire queste certificazioni</b> ?",
       "ASK_CERTIFICATION": " Eâ sicuro(a) di voler  <b>chiedere una certificazione</b> ?",
       "ASK_CERTIFICATIONS": " Eâ sicuro(a) di voler <b>chiedere una certificazione</b> a questi membri ?"
     },
   },
  "INVITATION": {
    "TITLE": "Invitazioni",
    "NO_RESULT": "Nessun invito ricevuto",
    "BTN_DELETE_ALL": "Cancellare tutti gli inviti",
    "BTN_DELETE": "Cancellare l'invito",
    "BTN_NEW_INVITATION": "Nuovo invito",
    "ASK_CERTIFICATION": "<a href=\"#/app/wot/{{pubkey}}/{{::uid}}\">{{::name||uid}}</a> ti ha chiesto una certificazione",
    "SUGGESTION_CERTIFICATION": "<a href=\"#/app/wot/{{::pubkey}}/{{::uid}}\">{{::name||uid}}</a> Ã¨ proposto per ricevere una certificazione",
    "SUGGESTED_BY": "Suggerimento inviato da by <a class=\"positive\" href=\"#/app/wot/{{::issuer.pubkey}}/{{::issuer.uid}}\">{{::issuer.name||issuer.uid}}</a>",
    "NOTIFICATIONS": {
      "TITLE": "Inviti"
    },
    "LIST": {
      "TITLE": "Inviti"
    },
    "NEW": {
      "TITLE": "Nuovo invito",
      "RECIPIENTS": "A",
      "RECIPIENTS_HELP": "Riceventi dell'invito",
      "RECIPIENTS_MODAL_TITLE": "Riceventi",
      "RECIPIENTS_MODAL_HELP": "Scegliere riceventi:",
      "SUGGESTION_IDENTITIES": "Suggerimenti di identitÃ  da certificare",
      "SUGGESTION_IDENTITIES_HELP": "Suggerimenti di certificazioni",
      "SUGGESTION_IDENTITIES_MODAL_TITLE": "Suggerimenti",
      "SUGGESTION_IDENTITIES_MODAL_HELP": "Scegli tuoi sugerimenti:"
    },
    "CONFIRM": {
      "DELETE_ALL_CONFIRMATION": "Cancellare degli inviti Ã¨ <b>una operazione irreversibile</b>.<br/><br/><b>Sei sicuro/a</b> di voler proseguire",
      "SEND_INVITATIONS_TO_CERTIFY": "<b>Sei sicuro/a</b> di voler <b>inviare questo suggerimento di certificazione</b> ?"
    },
    "INFO": {
      "INVITATION_SENT": "Invito inviato"
    },
    "ERROR": {
      "LOAD_INVITATIONS_FAILED": "Errore nel caricare gli inviti",
      "REMOVE_INVITATION_FAILED": "Errore nel cancellare gli inviti",
      "REMOVE_ALL_INVITATIONS_FAILED": "Errore nel cancellare inviti",
      "SEND_INVITATION_FAILED": "Errore nel invio degli inviti",
      "BAD_INVITATION_FORMAT": "<span class=\"assertive\"><i class=\"ion-close-circled\"></i> Invito illegibile (formatto sconosciuto)</span> - inviato da <a ui-sref=\"app.wot_identity({pubkey: '{{::pubkey}}', uid: '{{::uid}}' })\">{{::name||uid}}</a>"
    }
  },
   "COMMENTS": {
     "DIVIDER": "Commenti",
     "SHOW_MORE_COMMENTS": "Mostrare commenti precedenti",
     "COMMENT_HELP": "Suo commento o domanda...",
     "COMMENT_HELP_REPLY_TO": "Sua risposta...",
     "BTN_SEND": "Inviare",
     "POPOVER_SHARE_TITLE": "Messaggio #{{number}}",
     "REPLY": "Rispondere",
     "REPLY_TO": "Rispondere a:",
     "REPLY_TO_LINK": "In risposta a",
     "REPLY_TO_DELETED_COMMENT": "In risposta ad un commento cancellato",
     "REPLY_COUNT": "{{replyCount}} risposte",
     "DELETED_COMMENT": "Commento cancellato",
     "ERROR": {
       "FAILED_SAVE_COMMENT": "Salvare il commento cancellato",
       "FAILED_REMOVE_COMMENT": "Cancellazione del commento fallita"
     }
   },
   "MESSAGE": {
     "REPLY_TITLE_PREFIX": "Re: ",
     "FORWARD_TITLE_PREFIX": "Fw: ",
     "BTN_REPLY": "Rispondere",
     "BTN_COMPOSE": "Nuovo messaggio",
     "BTN_WRITE": "Scrivere",
     "NO_MESSAGE_INBOX": "Nessun messaggio ricevuto",
     "NO_MESSAGE_OUTBOX": "Nessun messaggio inviato",
     "NOTIFICATIONS": {
       "TITLE": "Messaggi",
       "MESSAGE_RECEIVED": "Hai <b>ricevuto un messaggio/b><br/>da"
     },
     "LIST": {
       "INBOX": "In entrata",
       "OUTBOX": "In uscita",
       "TITLE": "Messaggi privati",
       "POPOVER_ACTIONS": {
         "TITLE": "Opzioni",
         "DELETE_ALL": "Eliminare tutti i messaggi"
       }
     },
     "COMPOSE": {
       "TITLE": "Nuovo messaggio",
       "TITLE_REPLY": "Rispondere",
       "SUB_TITLE": "Nuovo messaggio",
       "TO": "A",
       "OBJECT": "Oggetto",
       "OBJECT_HELP": "Oggetto",
       "ENCRYPTED_HELP": "La informiamo che questo messaggio verrÃ  criptato prima della sua spedizione in modo che solo il destinatario lo possa leggere e essere sicuro che ne sia Lei l'autore.",
       "MESSAGE": "Messaggio",
       "MESSAGE_HELP": "Contenuto del messaggio",
       "CONTENT_CONFIRMATION": "Nessun contenuto. <br/><br/>Eâ sicura di voler inviare questo messaggio?"
     },
     "VIEW": {
       "TITLE": "Messaggio",
       "SENDER": "Inviato da",
       "RECIPIENT": "Inviato a",
       "NO_CONTENT": "Messaggio vuoto",
       "DELETE": "Cancellare il messaggio"
     },
     "CONFIRM": {
       "REMOVE": "Eâ sicuro/a di voler <b>eliminare il messaggio</b>?<br/><br/> Questa operazione Ã¨ irreversibile.",
       "REMOVE_ALL": "Eâ sicuro/a di voler <b>eliminare tutti i messaggi</b>?<br/><br/> Questa operazione Ã¨ irreversibile.",
       "MARK_ALL_AS_READ": "Eâ sicuro/a di voler <b>segnare tutti i messaggi come letti/b>?",
       "USER_HAS_NO_PROFILE": "Questa identitÃ  non ha un profilo Cesium+. Pertanto non puÃ² <b>leggere il suo messaggio</b>.<br/><br/>Eâ sicuro/a di voler <b>continuare</b>?"
     },
     "INFO": {
       "MESSAGE_REMOVED": "Messaggio eliminato correttamente",
       "All_MESSAGE_REMOVED": "Messaggi eliminati correttamente",
       "MESSAGE_SENT": "Messaggio inviato"
     },
     "ERROR": {
       "SEND_MSG_FAILED": "Errore nella spedizione del messaggio.",
       "LOAD_MESSAGES_FAILED": "Errore durante il caricamento dei messaggi.",
       "LOAD_MESSAGE_FAILED": "Errore durante il caricamento del messaggio.",
       "MESSAGE_NOT_READABLE": "Impossibile leggere il messaggio.",
       "USER_NOT_RECIPIENT": "Lei non Ã¨ il destinatario del messaggio: impossibile leggerlo.",
       "NOT_AUTHENTICATED_MESSAGE": "Impossibile verificare l'autenticitÃ  del messaggio o contenuto corrotto.",
       "REMOVE_MESSAGE_FAILED": "Errore avvenuto durante l'eliminazione del messaggio",
       "MESSAGE_CONTENT_TOO_LONG": "Il contenuto supera il limite ({{maxLength}} caratteri ammessi).",
       "MARK_AS_READ_FAILED": "Impossibile segnare il messaggio come 'letto'.",
       "LOAD_NOTIFICATIONS_FAILED": "Errore nel caricare le notifiche.",
       "REMOVE_All_MESSAGES_FAILED": "Errore avvenuto durante l'eliminazione dei messaggi.",
       "MARK_ALL_AS_READ_FAILED": "Errore avvenuto nel segnare i messaggi come 'letti",
       "RECIPIENT_IS_MANDATORY": "Destinatario obbligatorio"
     }
   },
   "BLOCKCHAIN": {
    "LOOKUP": {
      "SEARCH_HELP": "Numero di blocco, hash...",
      "POPOVER_FILTER_TITLE": "Filtro",
      "HEADER_MEDIAN_TIME": "Data / Ora",
      "HEADER_BLOCK": "Blocco #",
      "HEADER_ISSUER": "Peer proprietario",
      "BTN_LAST": "Ultimi blocchi",
      "DISPLAY_QUERY": "Visualizzare query",
      "HIDE_QUERY": "Nascondere query",
      "TX_SEARCH_FILTER": {
        "MEMBER_FLOWS": "<b class=\"ion-person\"></b> Input/output Membri",
        "EXISTING_TRANSACTION": "<b class=\"ion-card\"></b> hanno transazioni",
        "PERIOD": "<b class=\"ion-clock\"></b> Tra <b class=\"gray\">{{params[1]|formatDateShort}}</b> ({{params[1]|formatTime}}) e <b class=\"gray\">{{params[2]|formatDateShort}}</b> ({{params[2]|formatTime}})",
        "ISSUER": "<b class=\"ion-android-desktop\"></b> Calcolato da {{params[1]|formatPubkey}}",
        "TX_PUBKEY": "<b class=\"ion-card\"></b> Transazioni legate a  <b class=\"ion-key\"></b> {{params[1]|formatPubkey}}"
      }
    },
    "ERROR": {
      "SEARCH_BLOCKS_FAILED": "Errore durante la ricerca dei blocchi."
    }
  },
  "GROUP": {
    "GENERAL_DIVIDER": "Informazioni generali",
    "LOCATION_DIVIDER": "Indirizzo",
    "SOCIAL_NETWORKS_DIVIDER": "Presenza sui social e/o sito web",
    "TECHNICAL_DIVIDER": "Dati tecnici",
    "CREATED_TIME": "Creato {{creationTime|formatFromNow}}",
    "NOTIFICATIONS": {
      "TITLE": "Inviti"
    },
    "LOOKUP": {
      "TITLE": "Gruppi",
      "SEARCH_HELP": "Nome del grupo, parole chiavi, luogo, etc.",
      "LAST_RESULTS_LIST": "Nuovi gruppi :",
      "OPEN_RESULTS_LIST": "Gruppi aperti :",
      "MANAGED_RESULTS_LIST": "Gruppi chiusi :",
      "BTN_LAST": "Nuovi gruppi",
      "BTN_NEW": "Aggiungo un grupo!"
    },
    "TYPE": {
      "TITLE": "Nuovo gruppo",
      "SELECT_TYPE": "Tipo di gruppo :",
      "OPEN_GROUP": "Gruppo aperto",
      "OPEN_GROUP_HELP": "Un gruppo aperto Ã¨ accessibile da qualsiasi membro della moneta.",
      "MANAGED_GROUP": "Gruppo amministrato",
      "MANAGED_GROUP_HELP": "un gruppo amministrato Ã¨ gestito da amministratori e moderatori, che possono accetare, rifiutare o escludere membri del gruppo.",
      "ENUM": {
        "OPEN": "Gruppo aperto",
        "MANAGED": "Gruppo amministrato"
      }
    },
    "VIEW": {
      "POPOVER_SHARE_TITLE": "{{title}}",
      "MENU_TITLE": "Opzioni",
      "REMOVE_CONFIRMATION" : "Sei sicuro/a di voler chiudere questo gruppo ?<br/><br/>Questa operazione Ã¨ irreversibile."
    },
    "EDIT": {
      "TITLE": "Gruppo",
      "TITLE_NEW": "Nuovo gruppo",
      "RECORD_TITLE": "Titolo",
      "RECORD_TITLE_HELP": "Titolo",
      "RECORD_DESCRIPTION": "Descrizione",
      "RECORD_DESCRIPTION_HELP": "Descrizione"
    },
    "ERROR": {
      "SEARCH_GROUPS_FAILED": "Errore nella ricerca di gruppi",
      "REMOVE_RECORD_FAILED": "Errore nel chiudere il gruppo"
    },
    "INFO": {
      "RECORD_REMOVED" : "Gruppo eliminato"
    }
  },
   "REGISTRY": {
     "CATEGORY": "AttivitÃ  principale",
     "GENERAL_DIVIDER": "Informazioni di base",
     "LOCATION_DIVIDER": "Indirizzo",
     "SOCIAL_NETWORKS_DIVIDER": "Presenza sui social, sito web",
     "TECHNICAL_DIVIDER": "Dati tecnici",
     "BTN_SHOW_WOT": "Persone",
     "BTN_SHOW_WOT_HELP": "Cercare persone",
     "BTN_SHOW_PAGES": "Pagine",
     "BTN_SHOW_PAGES_HELP": "Cercare pagine",
     "BTN_NEW": "Aggiungere",
     "MY_PAGES": "Mie pagine",
     "NO_PAGE": "Nessuna pagina",
     "SEARCH": {
         "TITLE": "Pagine",
         "SEARCH_HELP": "Che, chi: parrucchiere, Pizza Efisio, ...",
         "BTN_ADD": "Nuovo",
         "BTN_LAST_RECORDS": "Pagine recenti",
         "BTN_ADVANCED_SEARCH": "Ricerca avanzata",
         "BTN_OPTIONS": "Ricerca avanzata",
         "TYPE": "Tipo di ente",
         "LOCATION_HELP": "CittÃ ",
         "RESULTS": "Risultati",
         "RESULT_COUNT_LOCATION": "{{count}} risultato{{count>0?'i':''}}, vicino a {{location}}",
         "RESULT_COUNT": "{{count}} risultato{{count>0?'i':''}}",
         "LAST_RECORDS": "Pagine recenti:",
         "LAST_RECORD_COUNT_LOCATION": "{{count}} pagina{{count>0?'e':''}} recente{{count>0?'i':''}}, vicino a{{location}}",
         "LAST_RECORD_COUNT": "{{count}} pagina{{count>0?'e':''}} recente{{count>0?'i':''}}",
         "POPOVER_FILTERS": {
           "BTN_ADVANCED_SEARCH": "Opzioni avanzate ?"
         }
     },
     "VIEW": {
       "TITLE": "Annuario",
       "CATEGORY": "AttivitÃ  principale:",
       "LOCATION": "Indirizzo:",
       "MENU_TITLE": "Impostazioni",
       "POPOVER_SHARE_TITLE": "{{title}}",
       "REMOVE_CONFIRMATION" : "Eâ sicuro/a di voler eliminare questo riferimento?<br/><br/>Questa operazione Ã¨ irreversibile."
     },
     "TYPE": {
       "TITLE": "Nuovo riferimento",
       "SELECT_TYPE": "Tipo di ente/organismo:",
       "ENUM": {
         "SHOP": "Negozi locali",
         "COMPANY": "Azienda",
         "ASSOCIATION": "Associazione",
         "INSTITUTION": "Istituto"
       }
     },
     "EDIT": {
       "TITLE": "Modificare",
       "TITLE_NEW": "Nuovo riferimento",
       "RECORD_TYPE": "Tipo di ente",
       "RECORD_TITLE": "Nome",
       "RECORD_TITLE_HELP": "Nome",
       "RECORD_DESCRIPTION": "Descrizione",
       "RECORD_DESCRIPTION_HELP": "Descrivere l'attivitÃ ",
       "RECORD_ADDRESS": "Indirizzo",
       "RECORD_ADDRESS_HELP": "Indirizzo: Strada, numero civico...",
       "RECORD_CITY": "CittÃ ",
       "RECORD_CITY_HELP": "CittÃ , Paese",
       "RECORD_SOCIAL_NETWORKS": "Presenza sui social e/o sito web",
       "RECORD_PUBKEY": "Chiave pubblica",
       "RECORD_PUBKEY_HELP": "Chiave pubblica per ricevere pagamenti"
     },
     "WALLET": {
      "REGISTRY_DIVIDER": "Pagine",
      "REGISTRY_HELP": "Le pagine sono un elenco dei profesionisti che accettano o favoriscono: negozi, aziende, associazioni, istituti..."
    },
     "ERROR": {
       "LOAD_CATEGORY_FAILED": "Errore nel caricamento delle attivitÃ  principali",
       "LOAD_RECORD_FAILED": "Caricamento fallito",
       "LOOKUP_RECORDS_FAILED": "Errore nel caricare i dati",
       "REMOVE_RECORD_FAILED": "Errore nella cancellazione",
       "SAVE_RECORD_FAILED": "Impossibile salvare",
       "RECORD_NOT_EXISTS": "Inesistente",
       "GEO_LOCATION_NOT_FOUND": "CittÃ  o CAP inesistente"
     },
     "INFO": {
       "RECORD_REMOVED" : "Pagina eliminata con successo.",
       "RECORD_SAVED": "Pagina salvata"
     }
   },
   "PROFILE": {
     "PROFILE_DIVIDER": "Profilo Cesium+",
     "PROFILE_DIVIDER_HELP": "Si tratta qui di data esterni, salvati fuori della rete della moneta.",
     "NO_PROFILE_DEFINED": "Nessun profilo Cesium+",
     "BTN_ADD": "Creare mio profilo",
     "BTN_EDIT": "Modificare mio profilo",
     "UID": "Pseudonimo",
     "TITLE": "Cognome, Nome",
     "TITLE_HELP": "Nome",
     "DESCRIPTION": "A proposito di me",
     "DESCRIPTION_HELP": "A proposito di me...",
     "SOCIAL_HELP": "http://...",
     "GENERAL_DIVIDER": "Informazioni generali",
     "SOCIAL_NETWORKS_DIVIDER": "Presenza sui social e sito/i web",
     "TECHNICAL_DIVIDER": "Dati tecnici",
     "MODAL_AVATAR": {
       "TITLE": "Avatar",
       "SELECT_FILE_HELP": "<b>Scegliere un'immagine</b>, cliccando sul bottone qui sotto:",
       "BTN_SELECT_FILE": "Scegliere un'immagine",
       "RESIZE_HELP": "<b>Ritagliare l'immagine</b> se necessario. Cliccare sull'immagine permette di spostarla. Cliccando nella zona a basso sinistra permette di fare uno zoom-in.",
       "RESULT_HELP": "<b>Questo Ã¨ il risultato</b> come visibile sul suo profilo:"
     },
     "ERROR": {
       "LOAD_PROFILE_FAILED": "Impossibile caricare il profilo dellâutente.",
       "SAVE_PROFILE_FAILED": "Impossibile salvare il profilo",
       "INVALID_SOCIAL_NETWORK_FORMAT": "Formatto scorretto: URL sbagliato.<br/><br/>Esempi: :<ul><li>- Una pagina Facebook (https://www.facebook.com/user)</li><li>- Un sito: (http://www.domain.com)</li><li>- Un indirizzo mail: (joe@dalton.com)</li></ul>",
       "IMAGE_RESIZE_FAILED": "Errore nel ritagliare l'immagine"
     },
     "INFO": {
       "PROFILE_SAVED": "Profilo salvato"
     },
     "HELP": {
       "WARNING_PUBLIC_DATA": "La informiamo che le informazioni qui pubblicate <b>sono pubbliche</b>: sono anche visibili <b>da gente non registrata/b>."
     }
   },
   "LOCATION": {
     "BTN_GEOLOC_ADDRESS": "Trovare mio indirizzo sulla mappa",
     "USE_GEO_POINT": "Geo-localizzare (raccomandato)?",
     "LOADING_LOCATION": "Cercando indirizzo...",
     "LOCATION_DIVIDER": "Posizione",
     "ADDRESS": "Indirizzo",
     "ADDRESS_HELP": "Indirizzo (opzionale)",
     "CITY": "CittÃ ",
     "CITY_HELP": "CittÃ , Paese",
     "DISTANCE": "Distanza massimale intorno alla cittÃ ",
     "DISTANCE_UNIT": "km",
     "DISTANCE_OPTION": "{{value}} {{'LOCATION.DISTANCE_UNIT'|translate}}",
     "SEARCH_HELP": "CittÃ , CAP",
     "MODAL": {
       "TITLE": "Cercare indirizzo",
       "SEARCH_HELP": "CittÃ , Paese",
       "ALTERNATIVE_RESULT_DIVIDER": "Risultati alternativi <b>{{address}}</b>:",
       "POSITION": "lat/lon : {{lat}} {{lon}}"
     },
     "ERROR": {
       "REQUIRED_FOR_LOCATION": "Campo obbligatorio per apparire sulla mappa",
       "INVALID_FOR_LOCATION": "Indirizzo sconosciuto",
       "GEO_LOCATION_FAILED": "Impossibile trovare sua posizione. Utilizzi il bottone di ricerca.",
       "ADDRESS_LOCATION_FAILED": "Indirizzo non trovato"
     }
   },
   "SUBSCRIPTION": {
    "SUBSCRIPTION_DIVIDER": "Servizi online",
    "SUBSCRIPTION_DIVIDER_HELP": "I servizi online offrono servizi addizionali opzionali, delegati ad terzi.",
    "BTN_ADD": "Aggiungere un servizio",
    "BTN_EDIT": "Gestire miei servizi",
    "NO_SUBSCRIPTION": "Nessun servizio utilizzato",
    "SUBSCRIPTION_COUNT": "Servizi/ Abbonamenti",
    "EDIT": {
      "TITLE": "Servizi online",
      "HELP_TEXT": "Qui si possono gestire gli abbonamenti e/o altri servizi online",
      "PROVIDER": "Prestatore :"
    },
    "TYPE": {
      "ENUM": {
        "EMAIL": "Ricevere notifiche per posta elettronica"
      }
    },
    "CONFIRM": {
      "DELETE_SUBSCRIPTION": "Sei sicuro/a di voler <b>cancellare questo abbonamento</b> ?"
    },
    "ERROR": {
      "LOAD_SUBSCRIPTIONS_FAILED": "Errore nel caricamento dei servizi online",
      "ADD_SUBSCRIPTION_FAILED": "Errore nel invio dell' abbonamento",
      "UPDATE_SUBSCRIPTION_FAILED": "Errore nel aggiornamento dell' abbonamento",
      "DELETE_SUBSCRIPTION_FAILED": "Errore nella cancellazine dell' abbonamento"
    },
    "MODAL_EMAIL": {
      "TITLE" : "Notifiche per posta elettronica",
      "HELP" : "Riempi questo formulario per <b>essere notificato/a per e-mail</b> degli eventi che avvengono sul tuo conto.<br/>Tuo indizzo mail sarÃ  cifrato e solo il prestatore del servizio lo potrÃ  vedere.",
      "EMAIL_LABEL" : "Tuo indirizzo mail :",
      "EMAIL_HELP": "cristiana.leonardi@dominio.com",
      "FREQUENCY_LABEL": "Frequenza delle notifiche :",
      "FREQUENCY_DAILY": "Quotidiano",
      "FREQUENCY_WEEKLY": "Settimanale",
      "PROVIDER": "Prestatore del servizio :"
    }
  },
  "DOCUMENT": {
    "HASH": "Hash: ",
    "LOOKUP": {
      "TITLE": "Ricerca di documenti",
      "BTN_ACTIONS": "Azioni",
      "SEARCH_HELP": "issuer:AAA*, time:1508406169",
      "LAST_DOCUMENTS": "Ultimi documenti",
      "SHOW_QUERY": "Visualizzare la richiesta",
      "HIDE_QUERY": "Nacondere la richiesta",
      "HEADER_TIME": "Data/Ora",
      "HEADER_ISSUER": "Emittente",
      "HEADER_RECIPIENT": "Destinatario",
      "READ": "Letto",
      "BTN_REMOVE": "Eliminare questo documento",
      "POPOVER_ACTIONS": {
        "TITLE": "Azioni",
        "REMOVE_ALL": "Eliminare questi documenti..."
      }
    },
    "INFO": {
      "REMOVED": "Documento eliminato"
    },
    "CONFIRM": {
      "REMOVE": "Sei sicuro/a di voler <b>eliminare questo documento</b> ?",
      "REMOVE_ALL": "Si sicuro/a di voler <b>eliminare questi documenti</b> ?"
    },
    "ERROR": {
      "LOAD_DOCUMENTS_FAILED": "Errore nella ricerca dei documenti",
      "REMOVE_FAILED": "Errore nell'eliminazione del documento",
      "REMOVE_ALL_FAILED": "Errore nell'eliminazione dei documenti"
    }
  },
   "ES_SETTINGS": {
     "PLUGIN_NAME": "Cesium+",
     "PLUGIN_NAME_HELP": "Profili di utenti, notifiche, messaggi privati",
     "ENABLE_TOGGLE": "Abilitare l'estensione ?",
     "ENABLE_MESSAGE_TOGGLE": "Abilitare i messaggi? privati",
     "ENABLE_SETTINGS_TOGGLE": "Abilitare stoccaggio su dispositivi esterni per le impostazioni?",
     "PEER": "Indirizzo di data peers",
     "POPUP_PEER": {
       "TITLE" : "Data peer",
       "HELP" : "Definire l'indirizzo da usare per il peer:",
       "PEER_HELP": "server.domain.com:port"
     },
     "NOTIFICATIONS": {
       "DIVIDER": "Notifiche",
       "HELP_TEXT": "Scegliere le notifiche che accetta ricevere:",
       "ENABLE_TX_SENT": "Notificarmi di <b>pagamenti inviati</b> con successo?",
       "ENABLE_TX_RECEIVED": "Notificarmi di <b>pagamenti in entrata</b>?",
       "ENABLE_CERT_SENT": "Notificarmi delle <b>certificazioni inviate</b>?",
       "ENABLE_CERT_RECEIVED": "Notificarmi di <b>certificazioni ricevute</b>?"
     },
     "CONFIRM": {
       "ASK_ENABLE_TITLE": "Nuove funzionalitÃ ",
       "ASK_ENABLE": "Sono disponibili nuove funzionalitÃ : <ul><li>&nbsp;&nbsp;<b><i class=\"icon ion-person\"></i>Profili di utenti</b>;<li>&nbsp;&nbsp;<b><i class=\"icon ion-android-notifications\"></i> Notifications</b>;<li>&nbsp;&nbsp;<b><i class=\"icon ion-email\"></i> Messaggi privati/b>.</ul><br/>Sono state <b>disabilitate</b> nelle sue impostazioni.<br/><br/><b>Desidera abilitare</b> queste funzionalitÃ ?"
     }
   },
   "ES_WALLET": {
     "ERROR": {
       "RECIPIENT_IS_MANDATORY": "Un destinatario Ã¨ necessario per il criptaggio."
     }
   },
   "EVENT": {
     "NODE_STARTED": "Suo nodo ES API <b>{{params[0]}}</b> Ã¨ UP",
     "NODE_BMA_DOWN": "Nodo<b>{{params[0]}}:{{params[1]}}</b> (utilizzato dal suo ES API) Ã¨ <b>indisponibile</b>.",
     "NODE_BMA_UP": "Nodo <b>{{params[0]}}:{{params[1]}}</b> Ã¨ di nuovo attivo.",
     "MEMBER_JOIN": "E diventato <b>membro/a</b> della WoT della moneta <b>{{params[0]}}</b>!",
     "MEMBER_LEAVE": "Non <b>Ã¨ piÃ¹ membro/a</b> della WoT della moneta <b>{{params[0]}}</b>!",
     "MEMBER_EXCLUDE": "Non Ã¨ <b>piÃ¹ membro/a</b> della WoT della moneta<b>{{params[0]}}</b>, a causa di certificazioni non rinnovate o soglia di certificazioni non raggiunta.",
     "MEMBER_REVOKE": "Il suo conto Ã¨ stato revocato. Da ora in poi non farÃ  piÃ¹ parte della WoT. <b>{{params[0]}}</b>.",
     "MEMBER_ACTIVE": "La sua presenza nella WoT <b>{{params[0]}}</b> Ã¨ stata <b>rinnovata correttamente</b>.",
     "TX_SENT": "Il suo pagamento <span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid}\" ><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span> Ã¨ stato eseguito.",
     "TX_SENT_MULTI": "Il suo pagamento <b>{{params[1]}}</b> Ã¨ stato eseguito.",
     "TX_RECEIVED": "Ha ricevuto un pagamento da <span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid}\"><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span>.",
     "TX_RECEIVED_MULTI": "Ha ricevuto un pagamento da <b>{{params[1]}}</b>.",
     "CERT_SENT": "Sua <b>certificazione</b> a favore di <span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid}\" ><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span> Ã¨ stata eseguita.",
     "CERT_RECEIVED": "Ha ricevuto <b>una certificazione</b> da parte di <span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid}\"><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span>.",
     "REGISTRY": {
       "NEW_COMMENT": "<span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid }\"><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span> ha scritto un commento sul suo riferimento: <b>{{params[2]}}</b>",
       "UPDATE_COMMENT": "<span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid }\"><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span> ha modificato il suo commento sul suo riferimento: <b>{{params[2]}}</b>",
       "NEW_REPLY_COMMENT": "<span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid }\"><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span> ha risposto al suo commento sul riferimento: <b>{{params[2]}}</b>",
       "UPDATE_REPLY_COMMENT": "<span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid }\"><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span> ha modificato sua risposta sul suo commento a proposito del riferimento: <b>{{params[2]}}</b>"
     }
   },
   "CONFIRM": {
    "ES_USE_FALLBACK_NODE": "Nodo<b>{{old}}</b> irraggiungibile o indirizzo sbagliato.<br/><br/>Vuoi utilizzare temporaneamente il nodo di dati <b>{{new}}</b> ?"
  },
   "ERROR": {
    "ES_CONNECTION_ERROR": "Nodo di dati<b>{{server}}</b>  irraggiungibile o indirizzo sbagliato.<br/><br/>Cesium continuerÃ  a funzionare <b>senza l'estensione Cesium+</b> (profili utenti, messaggi privati, mappe e grafici)<br/><br/>Verifica tua connessione o cambia nodo <a class=\"positive\" ng-click=\"doQuickFix('settings')\">impostazioni dell'estensione</a>.",     
     "ES_MAX_UPLOAD_BODY_SIZE": "Il volume di data da inviare supera il limite imposto dal server.<br/><br/>Suggeriamo di riprovare dopo aver eliminato delle foto, per esempio."
   }
 }
 );

$translateProvider.translations("nl-NL", {
  "COMMON": {
    "CATEGORY": "Categorie",
    "CATEGORIES": "CategorieÃ«n",
    "CATEGORY_SEARCH_HELP": "Zoeken",
    "LAST_MODIFICATION_DATE": "Vernieuws op ",
    "SUBMIT_BY": "Ingediend door",
    "BTN_PUBLISH": "Publiceren",
    "BTN_PICTURE_DELETE": "Wissen",
    "BTN_PICTURE_FAVORISE": "Default",
    "BTN_ADD_PICTURE": "Afbeelding toevoegen",
    "NOTIFICATIONS": {
      "TITLE": "Notificaties",
      "MARK_ALL_AS_READ": "Markeer alles als gelezen",
      "NO_RESULT": "Geen berichten",
      "SHOW_ALL": "Toon alles",
      "LOAD_NOTIFICATIONS_FAILED": "Kan berichten niet laden"
    }
  },
  "MENU": {
    "REGISTRY": "Ondernemingen",
    "USER_PROFILE": "Mijn profiel",
    "MESSAGES": "Berichten"
  },
  "ACCOUNT": {
    "NEW": {
      "ORGANIZATION_ACCOUNT": "Ondernemingsrekening",
      "ORGANIZATION_ACCOUNT_HELP": "Als je een onderneming, vereniging etc. vertegenwoordigd.<br/>Deze rekening zal geen dividend crÃ©eren."
    },
    "EVENT": {
      "MEMBER_WITHOUT_PROFILE": "Vul <a ui-sref=\"app.user_edit_profile\"je gebruikersprofiel</a> in om sneller een certificering te verkrijgen. Leden zullen een verfifieerbare identiteit eerder vertrouwen."
    }
  },
  "COMMENTS": {
    "DIVIDER": "Commentaren",
    "SHOW_MORE_COMMENTS": "Toon eerder commentaren",
    "COMMENT_HELP": "Jouw commentaar, vraag...",
    "COMMENT_HELP_REPLY_TO": "Jouw antwoord...",
    "BTN_SEND": "Verzenden",
    "POPOVER_SHARE_TITLE": "Bericht #{{number}}",
    "REPLY": "Antwoord",
    "REPLY_TO": "Antwoorden op:",
    "REPLY_TO_LINK": "In antwoord op ",
    "REPLY_TO_DELETED_COMMENT": "In antwoord op een gewist bericht",
    "REPLY_COUNT": "{{replyCount}} antwoorden",
    "DELETED_COMMENT": "Bericht gewist"
  },
  "MESSAGE": {
    "REPLY_TITLE_PREFIX": "Re: ",
    "FORWARD_TITLE_PREFIX": "Fw: ",
    "BTN_REPLY": "Antwoord",
    "BTN_COMPOSE": "Nieuw bericht",
    "BTN_WRITE": "Schrijven",
    "NO_MESSAGE_INBOX": "Geen bericht ontvangen",
    "NO_MESSAGE_OUTBOX": "Geen bericht verzonden",
    "NOTIFICATIONS": {
      "TITLE": "Berichten",
      "MESSAGE_RECEIVED": "Je hebt een <b>bericht ontvangen</b><br/>van"
    },
    "LIST": {
      "INBOX": "Inbox",
      "OUTBOX": "Verzonden",
      "TITLE": "PrivÃ©",
      "POPOVER_ACTIONS": {
        "TITLE": "Opties",
        "DELETE_ALL": "Alle berichten wissen"
      }
    },
    "COMPOSE": {
      "TITLE": "Nieuw bericht",
      "TITLE_REPLY": "Antwoord",
      "SUB_TITLE": "Nieuw bericht",
      "TO": "Aan",
      "OBJECT": "Onderwerp",
      "OBJECT_HELP": "Onderwerp",
      "ENCRYPTED_HELP": "Please note this message will by encrypt before sending zodat alleen de ontvanger het kan lezen en zeker kan zijn dat jij de auteur bent.",
      "MESSAGE": "Bericht",
      "MESSAGE_HELP": "Berichtinhoud",
      "CONTENT_CONFIRMATION": "Geen berichtinhoud.<br/><br/>Weet je zeker dat je dit bericht wil verzenden?"
    },
    "VIEW": {
      "TITLE": "Bericht",
      "SENDER": "Verzonden door",
      "RECIPIENT": "Verzonden aan",
      "NO_CONTENT": "Leeg bericht"
    },
    "CONFIRM": {
      "REMOVE": "Weet je zeker dat je <b>dit bericht wil wissen</b>?<br/><br/>Dit kan niet ongedaan gemaakt worden.",
      "REMOVE_ALL": "Weet je zeker dat je <b>alle berichten wil wissen</b>?<br/><br/>Dit kan niet ongedaan gemaakt worden.",
      "MARK_ALL_AS_READ": "Weet je zeker dat je <b>alle berichten als gelezen wil markeren</b>?"
    },
    "INFO": {
      "MESSAGE_REMOVED": "Bericht succesvol gewist",
      "All_MESSAGE_REMOVED": "Berichten succesvol gewist",
      "MESSAGE_SENT": "Bericht verzonden"
    },
    "ERROR": {
      "SEND_MSG_FAILED": "Fout tijdens verzending.",
      "LOAD_MESSAGES_FAILED": "Kan berichten niet laden.",
      "LOAD_MESSAGE_FAILED": "Kan bericht niet laden.",
      "MESSAGE_NOT_READABLE": "Kan bericht niet lezen.",
      "USER_NOT_RECIPIENT": "Je bent niet de geadresseerde van dit bericht: het kan niet gelezen worden.",
      "NOT_AUTHENTICATED_MESSAGE": "De authenticiteit van het bericht is onduidelijk of de inhoud is gecorrumpeerd.",
      "REMOVE_MESSAGE_FAILED": "Kan bericht niet wissen.",
      "MESSAGE_CONTENT_TOO_LONG": "Waarde te land (max {{maxLength}} characters).",
      "MARK_AS_READ_FAILED": "Kan bericht niet als gelezen markeren.",
      "LOAD_NOTIFICATIONS_FAILED": "Kan niet alle berichtnotificaties laden.",
      "REMOVE_All_MESSAGES_FAILED": "Kan niet alle berichten wissen.",
      "MARK_ALL_AS_READ_FAILED": "Kan berichten niet als gelezen markeren."
    }
  },
  "REGISTRY": {
    "CATEGORY": "Hoofdactiviteit",
    "GENERAL_DIVIDER": "Basisinformatie",
    "LOCATION_DIVIDER": "Adres",
    "SOCIAL_NETWORKS_DIVIDER": "Sociale media en website",
    "TECHNICAL_DIVIDER": "Technische informatie",
    "BTN_NEW": "Toevoegen",
    "SEARCH": {
      "TITLE": "Bedrijfsregister",
      "TITLE_SMALL_DEVICE": "Bedrijfsregister",
      "SEARCH_HELP": "Wie, Wat: kapper, Lili's restaurant, ...",
      "BTN_ADD": "Nieuw",
      "BTN_OPTIONS": "Geavanceerd zoeken",
      "TYPE": "Soort organisatie",
      "LOCATION": "Locatie",
      "LOCATION_HELP": "Plaats",
      "LAST_RECORDS": "Nieuwste referenties:",
      "RESULTS": "Resultaten:"
    },
    "VIEW": {
      "TITLE": "Register",
      "CATEGORY": "Hoofdactiviteit:",
      "LOCATION": "Adres:",
      "MENU_TITLE": "Opties",
      "POPOVER_SHARE_TITLE": "{{title}}",
      "REMOVE_CONFIRMATION" : "Weet je zeker dat je deze referentie wil verwijderen?<br/><br/>Dit kan niet ongedaan worden gemaakt."
    },
    "TYPE": {
      "TITLE": "Nieuwe referentie",
      "SELECT_TYPE": "Soort organizatie:",
      "ENUM": {
        "SHOP": "Locale winkel",
        "COMPANY": "Onderneming",
        "ASSOCIATION": "Stichting",
        "INSTITUTION": "Instituut"
      }
    },
    "EDIT": {
      "TITLE": "Bewerk",
      "TITLE_NEW": "Nieuwe referentie",
      "RECORD_TYPE":"Soort organizatie",
      "RECORD_TITLE": "Naam",
      "RECORD_TITLE_HELP": "Naam",
      "RECORD_DESCRIPTION": "Beschrijving",
      "RECORD_DESCRIPTION_HELP": "Omschrijf activiteit",
      "RECORD_ADDRESS": "Straat",
      "RECORD_ADDRESS_HELP": "Straat, gebouw...",
      "RECORD_CITY": "Plaats",
      "RECORD_CITY_HELP": "Plaats",
      "RECORD_SOCIAL_NETWORKS": "Sociale media en website",
      "RECORD_PUBKEY": "Publieke sleutel",
      "RECORD_PUBKEY_HELP": "Publieke sleutel om betalingen te ontvangen"
    },
    "ERROR": {
      "LOAD_CATEGORY_FAILED": "Laden hoofdactiveiten mislukt",
      "LOAD_RECORD_FAILED": "Laden datasheet mislukt",
      "LOOKUP_RECORDS_FAILED": "Opzoeken datasheets is mislukt.",
      "REMOVE_RECORD_FAILED": "Verwijderen datasheet mislukt",
      "SAVE_RECORD_FAILED": "Opslaan datasheet mislukt",
      "RECORD_NOT_EXISTS": "Datasheet niet gevonden"
    },
    "INFO": {
      "RECORD_REMOVED" : "Datasheet succesvol verwijderd"
    }
  },
  "PROFILE": {
    "UID": "Pseudoniem",
    "TITLE": "Naam",
    "TITLE_HELP": "Naam",
    "DESCRIPTION": "Over mij",
    "DESCRIPTION_HELP": "Over mij...",
    "ADDRESS": "Adres",
    "ADDRESS_HELP": "Adres (optioneel)",
    "CITY": "Plaats",
    "CITY_HELP": "Plaats (optioneel)",
    "SOCIAL_HELP": "http://...",
    "GENERAL_DIVIDER": "Algemene informatie",
    "LOCATION_DIVIDER": "Localisatie",
    "SOCIAL_NETWORKS_DIVIDER": "Sociale media en website",
    "TECHNICAL_DIVIDER": "Technische informatie",
    "ERROR": {
      "LOAD_PROFILE_FAILED": "Kon gebruikersprofiel niet laden.",
      "SAVE_PROFILE_FAILED": "Opslaan profiel mislukt",
      "INVALID_SOCIAL_NETWORK_FORMAT": "Ongeldig formaat: vul een geldig internetadres in.<br/><br/>Voorbeelden:<ul><li>- Een Facebookpagina (https://www.facebook.com/user)</li><li>- Een webpagina (http://www.domain.com)</li><li>- Een emailadres (joe@dalton.com)</li></ul>",
      "IMAGE_RESIZE_FAILED": "Fout tijdens afbeelding schalen"
    },
    "INFO": {
      "PROFILE_SAVED": "Profiel opgeslagen"
    },
    "HELP": {
      "WARNING_PUBLIC_DATA": "Let op, de informatie die hier is vastgelegd <b>is publiek</b>: zichtbaar ook voor <b>niet ingelogde gebruikers</b>."
    }
  },
  "ES_SETTINGS": {
    "PLUGIN_NAME": "Cesium+",
    "ENABLE_TOGGLE": "Uitbreiding inschakelen?",
    "ENABLE_MESSAGE_TOGGLE": "Berichten inschakelen?",
    "ENABLE_SETTINGS_TOGGLE": "Globale opslag voor instellingen inschakelen?",
    "PEER": "Adres dataknooppunt",
    "POPUP_PEER": {
      "TITLE" : "Dataknoop",
      "HELP" : "Stel het te gebruiken adres in:",
      "PEER_HELP": "server.domein.com:poort"
    },
    "NOTIFICATIONS": {
      "DIVIDER": "Notificaties",
      "HELP_TEXT": "Schakel het type notificatie dat je wil ontvangen in:",
      "ENABLE_TX_SENT": "Bericht bij validatie van <b>verzonden betalingen</b>?",
      "ENABLE_TX_RECEIVED": "Bericht bij validatie van <b>ontvangen betalingen</b>?",
      "ENABLE_CERT_SENT": "Bericht bij validatie van <b>verzonden certificaties</b>?",
      "ENABLE_CERT_RECEIVED": "Bericht bij validatie van <b>ontvangen certificaties</b>?"
    },
    "CONFIRM": {
      "ASK_ENABLE_TITLE": "Nieuwe functies",
      "ASK_ENABLE": "Er zijn nieuwe functies beschikbaar: <ul><li>&nbsp;&nbsp;<b><i class=\"icon ion-person\"></i> Profile Cesium+</b>;<li>&nbsp;&nbsp;<b><i class=\"icon ion-android-notifcaitions\"></i> Notifications</b>;<li>&nbsp;&nbsp;<b><i class=\"icon ion-email\"></i> PrivÃ© berichten</b>.</ul><br/>Deze zijn <b>uitgeschakeld</b> in je instellingen.<br/><br/>Wil je deze functies <b>inschakelen</b>?"
    }
  },
  "EVENT": {
    "NODE_STARTED": "Je knoop ES API <b>{{params[0]}}</b> is UP",
    "NODE_BMA_DOWN": "Knooppunt <b>{{params[0]}}:{{params[1]}}</b> (gebruikt door je ES API) is <b>onbereikbaar</b>.",
    "NODE_BMA_UP": "Knooppunt <b>{{p0}}:{{params[1]}}</b> is weer onbereikbaar.",
    "MEMBER_JOIN": "Je bent nu <b>lid</b> van valuta <b>{{params[0]}}</b>!",
    "MEMBER_LEAVE": "Je bent <b>geen lid meer</b> van valuta <b>{{params[0]}}</b>!",
    "MEMBER_ACTIVE": "Je lidmaatschap bij <b>{{params[0]}}</b> is met <b>succes verlengd</b>.",
    "TX_SENT": "Je <b>betaling</b> aan <span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid}\" ><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span> is uitgevoerd.",
    "TX_SENT_MULTI": "Je <b>betaling</b> aan <b>{{params[1]}}</b> is uitgevoerd.",
    "TX_RECEIVED": "Je hebt een <b>betaling ontvangen</b> van <span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid}\"><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span>.",
    "TX_RECEIVED_MULTI": "Je hebt een <b>betaling ontvangen</b> van <b>{{params[1]}}</b>.",
    "CERT_SENT": "Je <b>certificatie</b> van <span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid}\" ><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span> is uitgevoerd.",
    "CERT_RECEIVED": "Je hebt een <b>certificatie ontvangen</b> van <span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid}\"><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span>.",
    "REGISTRY": {
      "NEW_COMMENT": "<span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid }\"><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span> heeft gereageerd op jouw referentie: <b>{{params[2]}}</b>",
      "UPDATE_COMMENT": "<span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid }\"><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span> heeft zijn/aar reactie op jouw referentie bewerkt: <b>{{params[2]}}</b>",
      "NEW_REPLY_COMMENT": "<span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid }\"><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span> hheeft gereageerd op jouw commentaar op referentie: <b>{{params[2]}}</b>",
      "UPDATE_REPLY_COMMENT": "<span ng-class=\"{'gray': !notification.uid, 'positive':notification.uid }\"><i class=\"icon\" ng-class=\"{'ion-person': notification.uid, 'ion-key': !notification.uid}\"></i>&thinsp;{{name||uid||params[1]}}</span> heeft zijn/haar reactie op jouw commentaar bewerkt, op referentie: <b>{{params[2]}}</b>"
    }
  }
}
);

$translateProvider.translations("en-GB", {
  "NETWORK": {
    "VIEW": {
      "BTN_GRAPH": "Statistics"
    }
  },
  "GRAPH": {
    "COMMON": {
      "LINEAR_SCALE" : "Linear scale",
      "LOGARITHMIC_SCALE" : "Logarithmic scale",
      "BTN_SHOW_STATS": "See statistics",
      "BTN_SHOW_DETAILED_STATS": "Detailed statistics"
    },
    "ACCOUNT": {
      "TITLE": "Statistics",
      "BTN_SHOW_STATS": "View account Statistics",
      "BALANCE_DIVIDER": "Account status",
      "BALANCE_TITLE": "Evolution of the account {{pubkey|formatPubkey}}",
      "TX_RECEIVED_LABEL": "Receipts",
      "TX_SENT_LABEL": "Spending",
      "UD_LABEL": "UD",
      "BALANCE_LABEL": "Balance",
      "INPUT_CHART_TITLE": "Sum of incoming flows, per transmitter:",
      "OUTPUT_CHART_TITLE": "Sum of outgoing flows, per recipient:"
    },
    "BLOCKCHAIN": {
      "TITLE": "Statistics",
      "BLOCKS_ISSUERS_DIVIDER": "Written blocks by members",
      "BLOCKS_ISSUERS_HELP": "<b>{{issuerCount|formatInteger}} members</b> calculated <b>{{blockCount|formatInteger}} blocks</b>",
      "BLOCKS_ISSUERS_TITLE": "Number of blocks calculated per member",
      "BLOCKS_ISSUERS_LABEL": "Number of blocks",
      "TX_DIVIDER": "Analysis of transactions",
      "TX_AMOUNT_TITLE": "Transaction volume",
      "TX_AMOUNT_PUBKEY_TITLE": "Volume of transactions calculated by {{issuer | formatPubkey}}",
      "TX_AMOUNT_LABEL": "Exchange volume",
      "TX_COUNT_TITLE": "Number of written transactions",
      "TX_COUNT_LABEL": "Number of transactions",
      "TX_AVG_BY_BLOCK": "Average per block",
      "TX_RANGE_DURATION_DIVIDER": "Step unit:",
      "TX_RANGE_DURATION": {
        "HOUR": "Group by <b>hour</b>",
        "DAY": "Group by <b>day</b>",
        "MONTH": "Group by <b>month</b>"
      }
    },
    "CURRENCY": {
      "MONETARY_MASS_TITLE": "Evolution of the monetary mass",
      "MONETARY_MASS_LABEL": "Monetary mass",
      "MONETARY_MASS_SHARE_LABEL": "Average per member",
      "UD_TITLE": "Evolution of the universal dividend",
      "MEMBERS_COUNT_TITLE": "Evolution of the number of members",
      "MEMBERS_COUNT_LABEL": "Number of members"
    },
    "PEER": {
      "VIEW": {
        "BLOCK_COUNT_LABEL": "Computed blocks count",
        "BLOCK_COUNT": "{{count}} blocks",
        "NO_BLOCK": "No block"
      }
    }
  }
}
);

$translateProvider.translations("en", {
  "NETWORK": {
    "VIEW": {
      "BTN_GRAPH": "Statistics"
    }
  },
  "GRAPH": {
    "COMMON": {
      "LINEAR_SCALE" : "Linear scale",
      "LOGARITHMIC_SCALE" : "Logarithmic scale",
      "BTN_SHOW_STATS": "See statistics",
      "BTN_SHOW_DETAILED_STATS": "Detailed statistics"
    },
    "ACCOUNT": {
      "TITLE": "Statistics",
      "BTN_SHOW_STATS": "View account Statistics",
      "BALANCE_DIVIDER": "Account status",
      "BALANCE_TITLE": "Evolution of the account {{pubkey|formatPubkey}}",
      "TX_RECEIVED_LABEL": "Receipts",
      "TX_SENT_LABEL": "Spending",
      "UD_LABEL": "UD",
      "BALANCE_LABEL": "Balance",
      "INPUT_CHART_TITLE": "Sum of incoming flows, per transmitter:",
      "OUTPUT_CHART_TITLE": "Sum of outgoing flows, per recipient:"
    },
    "BLOCKCHAIN": {
      "TITLE": "Statistics",
      "BLOCKS_ISSUERS_DIVIDER": "Written blocks by members",
      "BLOCKS_ISSUERS_HELP": "<b>{{issuerCount|formatInteger}} members</b> calculated <b>{{blockCount|formatInteger}} blocks</b>",
      "BLOCKS_ISSUERS_TITLE": "Number of blocks calculated per member",
      "BLOCKS_ISSUERS_LABEL": "Number of blocks",
      "TX_DIVIDER": "Analysis of transactions",
      "TX_AMOUNT_TITLE": "Transaction volume",
      "TX_AMOUNT_PUBKEY_TITLE": "Volume of transactions calculated by {{issuer | formatPubkey}}",
      "TX_AMOUNT_LABEL": "Exchange volume",
      "TX_COUNT_TITLE": "Number of written transactions",
      "TX_COUNT_LABEL": "Number of transactions",
      "TX_AVG_BY_BLOCK": "Average per block",
      "TX_RANGE_DURATION_DIVIDER": "Step unit:",
      "TX_RANGE_DURATION": {
        "HOUR": "Group by <b>hour</b>",
        "DAY": "Group by <b>day</b>",
        "MONTH": "Group by <b>month</b>"
      }
    },
    "CURRENCY": {
      "MONETARY_MASS_TITLE": "Evolution of the monetary mass",
      "MONETARY_MASS_LABEL": "Monetary mass",
      "MONETARY_MASS_SHARE_LABEL": "Average per member",
      "UD_TITLE": "Evolution of the universal dividend",
      "MEMBERS_COUNT_TITLE": "Evolution of the number of members",
      "MEMBERS_COUNT_LABEL": "Number of members"
    },
    "PEER": {
      "VIEW": {
        "BLOCK_COUNT_LABEL": "Computed blocks count",
        "BLOCK_COUNT": "{{count}} blocks",
        "NO_BLOCK": "No block"
      }
    },
    "DOC_STATS": {
      "TITLE": "Data storage statistitics",
      "USER": {
        "TITLE": "Number of documents linked to an account",
        "USER_PROFILE": "User profiles utilisateur",
        "USER_SETTINGS": "Saved settings",
      },
      "MESSAGE": {
        "TITLE": "Number of documents related to the communication",
        "MESSAGE_INBOX": "Messages in inbox",
        "MESSAGE_OUTBOX": "Messages in outbox",
        "INVITATION_CERTIFICATION": "Invitations to certify"
      },
      "SOCIAL": {
        "TITLE": "Number of page or group",
        "PAGE_COMMENT": "Comments",
        "PAGE_RECORD": "Pages",
        "GROUP_RECORD": "Groups",
      },
      "OTHER": {
        "TITLE": "Other documents",
        "HISTORY_DELETE": "Deletion of documents",
      }
    }
  }
}
);

$translateProvider.translations("es-ES", {
  "NETWORK": {
    "VIEW": {
      "BTN_GRAPH": "EstadÃ­stica"
    }
  },
  "GRAPH": {
    "COMMON": {
      "LINEAR_SCALE" : "Escala lineal",
      "LOGARITHMIC_SCALE" : "Escala logarÃ­tmica",
      "BTN_SHOW_STATS": "Ver estadÃ­sticas",
      "BTN_SHOW_DETAILED_STATS": "EstadÃ­sticas detalladas"
    },
    "ACCOUNT": {
      "INPUT_CHART_TITLE": "Suma del flujo entrante, por el transmisor:",
      "OUTPUT_CHART_TITLE": "Suma de las salidas por destino:"
    },
    "BLOCKCHAIN": {
      "TITLE": "EstadÃ­stica",
      "BLOCKS_ISSUERS_DIVIDER": "Bloques escritos por los miembros",
      "BLOCKS_ISSUERS_HELP": "<b>{{issuerCount|formatInteger}} members</b> has computed <b>{{blockCount|formatInteger}} blocks</b>",
      "BLOCKS_ISSUERS_TITLE": "NÃºmero de bloques miembro calculado",
      "BLOCKS_ISSUERS_LABEL": "NÃºmero de bloques",
      "TX_DIVIDER": "AnÃ¡lisis de transacciones",
      "TX_AMOUNT_TITLE": "El volumen de operaciones",
      "TX_AMOUNT_PUBKEY_TITLE": "El volumen de operaciones calculado por {{issuer | formatPubkey}}",
      "TX_AMOUNT_LABEL": "Volumen negociado",
      "TX_COUNT_TITLE": "NÃºmero de transacciones escritas",
      "TX_COUNT_LABEL": "NÃºmero de transacciones",
      "TX_AVG_BY_BLOCK": "Promedio por bloque",
      "TX_RANGE_DURATION": {
        "HOUR": "Grupo por <b>hora</b>",
        "DAY": "Grupo por <b>dÃ­a</b>",
        "MONTH": "Grupo por <b>mes</b>"
      }
    },
    "CURRENCY": {
      "MONETARY_MASS_TITLE": "EvoluciÃ³n de la masa monetaria",
      "MONETARY_MASS_LABEL": "Masa monetaria",
      "MONETARY_MASS_SHARE_LABEL": "Promedio miembro",
      "UD_TITLE": "EvoluciÃ³n del dividendo universales",
      "MEMBERS_COUNT_TITLE": "EvoluciÃ³n del nÃºmero de miembros",
      "MEMBERS_COUNT_LABEL": "NÃºmero de miembros"
    },
    "PEER": {
      "VIEW": {
        "BLOCK_COUNT_LABEL": "NÃºmero de bloques calculados",
        "BLOCK_COUNT": "{{count}} bloques",
        "NO_BLOCK": "NingÃºn bloque"
      }
    }
  }
}
);

$translateProvider.translations("fr-FR", {
  "NETWORK": {
    "VIEW": {
      "BTN_GRAPH": "Statistiques"
    }
  },
  "GRAPH": {
    "COMMON": {
      "LINEAR_SCALE" : "Echelle linÃ©aire",
      "LOGARITHMIC_SCALE" : "Echelle logarithmique",
      "BTN_SHOW_STATS": "Voir les statistiques",
      "BTN_SHOW_DETAILED_STATS": "Statistiques dÃ©taillÃ©es"
    },
    "ACCOUNT": {
      "TITLE": "Statistiques",
      "BTN_SHOW_STATS": "Voir les statistiques du compte",
      "BALANCE_DIVIDER": "Situation du compte",
      "BALANCE_TITLE": "Evolution du compte {{pubkey|formatPubkey}}",
      "TX_RECEIVED_LABEL": "Recettes",
      "TX_SENT_LABEL": "DÃ©penses",
      "TX_ACCUMULATION_LABEL": "Bilan des transactions",
      "UD_LABEL": "DU",
      "UD_ACCUMULATION_LABEL": "Bilan des DU",
      "BALANCE_LABEL": "Solde",
      "WOT_DIVIDER": "Toile de confiance",
      "CERTIFICATION_TITLE": "Nombre de certifications - {{pubkey|formatPubkey}}",
      "RECEIVED_CERT_LABEL": "Total reÃ§ues",
      "RECEIVED_CERT_DELTA_LABEL": "Variation reÃ§ues",
      "GIVEN_CERT_LABEL": "Total envoyÃ©es",
      "GIVEN_CERT_DELTA_LABEL": "Variation envoyÃ©es",
      "INPUT_CHART_TITLE": "Somme des flux entrants, par Ã©metteur :",
      "OUTPUT_CHART_TITLE": "Somme des flux sortants, par destinaire :"
    },
    "BLOCKCHAIN": {
      "TITLE": "Statistiques",
      "BLOCKS_ISSUERS_DIVIDER": "Analyse de la rÃ©partition du calcul",
      "BLOCKS_ISSUERS_HELP": "<b>{{issuerCount|formatInteger}} membres</b> ont calculÃ© <b>{{blockCount|formatInteger}} blocs</b>",
      "BLOCKS_ISSUERS_TITLE": "Nombre de blocs calculÃ©s par membre",
      "BLOCKS_ISSUERS_LABEL": "Nombre de blocs",
      "TX_DIVIDER": "Analyse des transactions",
      "TX_AMOUNT_TITLE": "Volume des transactions",
      "TX_AMOUNT_PUBKEY_TITLE": "Volume des transactions calculÃ©es par {{issuer | formatPubkey}}",
      "TX_AMOUNT_LABEL": "Volume Ã©changÃ©",
      "TX_COUNT_TITLE": "Nombre de transactions Ã©crites",
      "TX_COUNT_LABEL": "Nombre de transactions",
      "TX_AVG_BY_BLOCK": "Nombre moyen de transactions / bloc",
      "TX_RANGE_DURATION_DIVIDER": "UnitÃ© de temps :",
      "TX_RANGE_DURATION": {
        "HOUR": "Heure",
        "DAY": "Jour",
        "MONTH": "Mois"
      }
    },
    "CURRENCY": {
      "MONETARY_MASS_TITLE": "Evolution de la masse monÃ©taire",
      "MONETARY_MASS_LABEL": "Masse monÃ©taire",
      "MONETARY_MASS_SHARE_LABEL": "Moyenne par membre",
      "UD_TITLE": "Evolution du dividende universel",
      "MEMBERS_COUNT_TITLE": "Evolution du nombre de membres",
      "MEMBERS_COUNT_LABEL": "Nombre de membres"
    },
    "PEER": {
      "VIEW": {
        "BLOCK_COUNT_LABEL": "Nombre de blocs calculÃ©s",
        "BLOCK_COUNT": "{{count}} blocs",
        "NO_BLOCK": "Aucun bloc"
      }
    },
    "DOC_STATS": {
      "TITLE": "Statistiques de stockage",
      "USER": {
        "TITLE": "Nombre de documents liÃ©s Ã  un compte",
        "USER_PROFILE": "Profils utilisateur",
        "USER_SETTINGS": "ParamÃ¨tres sauvegardÃ©s",
      },
      "MESSAGE": {
        "TITLE": "Nombre de documents liÃ© Ã  la communication",
        "MESSAGE_INBOX": "Messages en boite de rÃ©ception",
        "MESSAGE_OUTBOX": "Messages envoyÃ©s sauvegardÃ©s",
        "INVITATION_CERTIFICATION": "Invitations Ã  certifier"
      },
      "SOCIAL": {
        "TITLE": "Nombre de pages ou groupes",
        "PAGE_COMMENT": "Commentaires",
        "PAGE_RECORD": "Pages",
        "GROUP_RECORD": "Groupes",
      },
      "OTHER": {
        "TITLE": "Autres documents",
        "HISTORY_DELETE": "Suppressions de documents",
      }
    },
    "SYNCHRO": {
      "TITLE": "Statistiques de synchronisations",
      "COUNT": {
        "TITLE": "Volume synchronisÃ©",
        "INSERTS": "Insertions",
        "UPDATES": "Mises Ã  jour",
        "DELETES": "Suppressions"
      },
      "PEER": {
        "TITLE": "Noeuds requÃªtÃ©s",
        "ES_USER_API": "Noeuds donnÃ©es utilisateurs",
        "ES_SUBSCRIPTION_API": "Noeuds services en lignes"
      },
      "PERFORMANCE": {
        "TITLE": "Performances d'execution",
        "DURATION": "Temps d'execution (ms)"
      }
    }
  }
}
);

$translateProvider.translations("it-IT", {
   "NETWORK": {
     "VIEW": {
       "BTN_GRAPH": "Statistiche"
     }
   },
   "GRAPH": {
     "COMMON": {
       "LINEAR_SCALE" : "Scala lineare",
       "LOGARITHMIC_SCALE" : "Scala logaritmica",
       "BTN_SHOW_STATS": "Vedere le statistiche",
       "BTN_SHOW_DETAILED_STATS": "Statistiche dettagliate"
     },
     "ACCOUNT": {
       "TITLE": "Statistiche",
       "BTN_SHOW_STATS": "Visualizzare le statistiche del conto",
       "BALANCE_DIVIDER": "Situazione del conto",
       "BALANCE_TITLE": "Evoluzione del conto {{pubkey|formatPubkey}}",
       "TX_RECEIVED_LABEL": "Incassi",
       "TX_SENT_LABEL": "Spese",
       "TX_ACCUMULATION_LABEL": "Bilancio delle transazioni",
       "UD_LABEL": "DU",
       "UD_ACCUMULATION_LABEL": "Bilancio dei DU",
       "BALANCE_LABEL": "Saldo",
       "WOT_DIVIDER": "Tela di fiducia",
       "CERTIFICATION_TITLE": "Numero di certificazioni - {{pubkey|formatPubkey}}",
       "RECEIVED_CERT_LABEL": "Totale ricevute",
       "RECEIVED_CERT_DELTA_LABEL": "Variazione ricevute",
       "GIVEN_CERT_LABEL": "Totale inviate",
       "GIVEN_CERT_DELTA_LABEL": "Variazione inviate",
       "INPUT_CHART_TITLE": "Somma dei flussi in entrata, par emittente :",
       "OUTPUT_CHART_TITLE": "Somma dei flussi in uscita, per destinatario :"
     },
     "BLOCKCHAIN": {
       "TITLE": "Statistiche",
       "BLOCKS_ISSUERS_DIVIDER": "Analisi della ripartizione del calcolo",
       "BLOCKS_ISSUERS_HELP": "<b>{{issuerCount|formatInteger}} membri</b> hanno calcolato <b>{{blockCount|formatInteger}} blocchi</b>",
       "BLOCKS_ISSUERS_TITLE": "Numero di blocchi calcolati a membro",
       "BLOCKS_ISSUERS_LABEL": "Numero di blocchi",
       "TX_DIVIDER": "Analisi delle transazioni",
       "TX_AMOUNT_TITLE": "Volume delle transazioni",
       "TX_AMOUNT_PUBKEY_TITLE": "Volume delle transazioni calcolato da {{issuer | formatPubkey}}",
       "TX_AMOUNT_LABEL": "Volume scambiato",
       "TX_COUNT_TITLE": "Numero di transazioni scritte",
       "TX_COUNT_LABEL": "Numero di transazioni",
       "TX_AVG_BY_BLOCK": "Numero medio di transazioni / blocco",
       "TX_RANGE_DURATION_DIVIDER": "UnitÃ  di tempo :",
       "TX_RANGE_DURATION": {
         "HOUR": "Ora",
         "DAY": "Giorno",
         "MONTH": "Mese"
       }
     },
     "CURRENCY": {
       "MONETARY_MASS_TITLE": "Evoluzione della massa monetaria",
       "MONETARY_MASS_LABEL": "Massa monetaria",
       "MONETARY_MASS_SHARE_LABEL": "Media a membro",
       "UD_TITLE": "Evoluzione del Dividendo Universale",
       "MEMBERS_COUNT_TITLE": "Evoluzione del numero di membri",
       "MEMBERS_COUNT_LABEL": "Numero di membri"
     },
     "PEER": {
       "VIEW": {
         "BLOCK_COUNT_LABEL": "Numero di blocchi calcolati",
         "BLOCK_COUNT": "{{count}} blocchi",
         "NO_BLOCK": "Nessun blocco"
       }
     },
     "DOC_STATS": {
       "TITLE": "Statistiche di stoccaggio",
       "USER": {
         "TITLE": "Numero di documenti legati ad un conto",
         "USER_PROFILE": "Profili dell'utente",
         "USER_SETTINGS": "Impostazioni salvate",
       },
       "MESSAGE": {
         "TITLE": "Numero di documenti legati alla conversazione",
         "MESSAGE_INBOX": "Messaggi in arrivo",
         "MESSAGE_OUTBOX": "Messaggi inviati salvati",
         "INVITATION_CERTIFICATION": "Invitazioni da certificare"
       },
       "SOCIAL": {
         "TITLE": "Numero di pagine o gruppi",
         "PAGE_COMMENT": "Commenti",
         "PAGE_RECORD": "Pagine",
         "GROUP_RECORD": "Gruppi",
       },
       "OTHER": {
         "TITLE": "Altri documenti",
         "HISTORY_DELETE": "Cronologia eliminazione documenti",
       }
     },
     "SYNCHRO": {
       "TITLE": "Statistiche di sincronizzazioni",
       "COUNT": {
         "TITLE": "Volume sincronizzato",
         "INSERTS": "Inserimenti",
         "UPDATES": "Aggiornamenti",
         "DELETES": "Eliminazioni"
       },
       "PEER": {
         "TITLE": "Nodi interrogati",
         "ES_USER_API": "Nodi dati utenti",
         "ES_SUBSCRIPTION_API": "Noeuds servizi online"
       },
       "PERFORMANCE": {
         "TITLE": "Prestazioni (performance) di esecuzione",
         "DURATION": "Tempo di esecuzione (ms)"
       }
     }
   }
 }
 );

$translateProvider.translations("nl-NL", {
  "NETWORK": {
    "VIEW": {
      "BTN_GRAPH": "Statistieken"
    }
  },
  "GRAPH": {
    "COMMON": {
      "LINEAR_SCALE" : "Lineaire schaal",
      "LOGARITHMIC_SCALE" : "Logaritmische schaal",
      "BTN_SHOW_STATS": "Zie statistieken",
      "BTN_SHOW_DETAILED_STATS": "Gedetailleerde statistieken"
    },
    "ACCOUNT": {
    "INPUT_CHART_TITLE": "Som van de binnenkomende stroom, door de zender:",
    "OUTPUT_CHART_TITLE": "Som van de uitstroom per bestemming:"
    },
    "BLOCKCHAIN": {
      "TITLE": "Statistieken",
      "BLOCKS_ISSUERS_DIVIDER": "Schriftelijke blokken door leden",
      "BLOCKS_ISSUERS_HELP": "<b>{{issuerCount|formatInteger}} leden</b> berekend <b>{{blockCount|formatInteger}} blokken</b>",
      "BLOCKS_ISSUERS_TITLE": "Aantal blokken berekend per lid",
      "BLOCKS_ISSUERS_LABEL": "Aantal blokken",
      "TX_DIVIDER": "Analyse van transacties",
      "TX_AMOUNT_TITLE": "Trading volume",
      "TX_AMOUNT_PUBKEY_TITLE": "Trading volume dat wordt berekend door {{issuer | formatPubkey}}",
      "TX_AMOUNT_LABEL": "Verhandeld volume",
      "TX_COUNT_TITLE": "Aantal schriftelijke transacties",
      "TX_COUNT_LABEL": "Aantal transacties",
      "TX_AVG_BY_BLOCK": "Gemiddeld aantal transacties / blok",
      "TX_RANGE_DURATION": {
        "HOUR": "Groep per <b>uur</b>",
        "DAY": "Groep per <b>dag</b>",
        "MONTH": "Groep per <b>maand</b>"
      }
    },
    "CURRENCY": {
      "MONETARY_MASS_TITLE": "Evolutie van de monetaire massa",
      "MONETARY_MASS_LABEL": "Monetaire massa",
      "MONETARY_MASS_SHARE_LABEL": "Gemiddelde leden",
      "UD_TITLE": "Ontwikkeling van de universele dividend",
      "MEMBERS_COUNT_TITLE": "Evolutie van het aantal leden",
      "MEMBERS_COUNT_LABEL": "Aantal leden"
    }
  }
}
);

$translateProvider.translations("fr-FR", {
  "RML9": {
    "BTN_EXPORT": "TÃ©lÃ©charger",
    "BTN_OPEN": "Ouvrir la page RML9",
    "BTN_SWOW_TX": "Voir les transactions",
    "FILE_NAME": "relevÃ© du compte {{pubkey|formatPubkey}} au {{currentTime|formatDateForFile}}.csv",
    "HEADERS": {
      "TIME": "Date",
      "AMOUNT": "Montant",
      "COMMENT": "Commentaire"
    },
    "VIEW": {
      "TITLE": "RML9",
      "DIVIDER": "DerniÃ¨res transactions :",
      "BALANCE": "Solde du compte"
    },
    "CHART": {
      "INPUT_CHART_TITLE": "Somme des flux entrants, par Ã©metteur :",
      "OUTPUT_CHART_TITLE": "Somme des flux sortants, par destinaire :"
    },
    "SETTINGS": {
      "ENABLE_TOGGLE": "Activer le plugin RML9 ?"
    }
  }
}
);

$translateProvider.translations("en-GB", {
  "MAP": {
    "COMMON": {
      "SEARCH_DOTS": "Search...",
      "BTN_LOCALIZE_ME": "Localize me"
    },
    "NETWORK": {
      "LOOKUP": {
        "BTN_MAP": "Peers map",
        "BTN_MAP_HELP": "Open peers map"
      },
      "VIEW": {
        "TITLE": "Peers map",
        "LAYER": {
          "MEMBER": "Member peers",
          "MIRROR": "Mirror peers",
          "OFFLINE": "Offline peers"
        }
      }
    },
    "WOT": {
      "LOOKUP": {
        "BTN_MAP": "Members map",
        "BTN_MAP_HELP": "Open members map"
      },
      "VIEW": {
        "TITLE": "Members map",
        "LAYER": {
          "MEMBER": "<i class=\"icon ion-person positive\"></i> Members",
          "PENDING": "<i class=\"icon ion-clock energized\"></i> Pending registrations",
          "WALLET": "<i class=\"icon ion-card gray\"></i> Simple wallets"
        }
      },
      "ERROR": {
        "LOAD_POSITION_FAILED": "Can not retrieve the positions to display."
      }
    },
    "REGISTRY": {
      "LOOKUP": {
        "BTN_MAP": "Map",
        "BTN_MAP_HELP": "Open the map of the pages"
      },
      "VIEW": {
        "TITLE": "Map of pages",
        "LAYER": {
          "SHOP": "<i class=\"icon ion-page-shop positive\"></i> Local shops",
          "COMPANY": "<i class=\"icon ion-page-company positive\"></i> Companies",
          "ASSOCIATION": "<i class=\"icon ion-page-association energized\"></i> Associations",
          "INSTITUTION": "<i class=\"icon ion-page-institution gray\"></i> Institutions"
        }
      }
    },
    "PROFILE": {
      "MARKER_HELP": "<b>Drag and drop</b> this marker to <b>update<br/>your position</b>, or use the buttons<br/>on top of the map."
    },
    "ERROR": {
      "LOCALIZE_ME_FAILED": "Unable to retrieve your current position"
    },
    "SETTINGS": {
      "MAP_DIVIDER": "Maps",
      "ENABLE_GOOGLE_API": "Enable Google API services?",
      "ENABLE_GOOGLE_API_HELP": "In the <b>members map</b>, allows you to display accounts with an address but without geolocation.",
      "GOOGLE_API_KEY": "Google API key",
      "BTN_GOOGLE_API": "Getting a key",
      "BTN_GOOGLE_API_WARNING": "requires a Google account",
      "GOOGLE_API_KEY_PLACEHOLDER": "eg: AIzaqyAgszvWm0tM81x1sMK_ipDHBI7EowLqR7I"
    },
    "HELP": {
      "TIP": {
        "WOT": "This map displays <b>profiles with a position</b>, whether they are member accounts or not.<br/><br/>Only profiles with the option &quot;appear on the map&quot; has been activated.",
        "WOT_BTN_LAYERS": "<b>Filter the displayed data</b>: members, pending registrations, simple portfolios, etc.",
        "WOT_BTN_SEARCH": "You can <b>search</b> by name, public key, or member pseudonym."
      }
    }
  }
}
);

$translateProvider.translations("en", {
  "MAP": {
    "COMMON": {
      "SEARCH_DOTS": "Search...",
      "BTN_LOCALIZE_ME": "Localize me"
    },
    "NETWORK": {
      "LOOKUP": {
        "BTN_MAP": "Peers map",
        "BTN_MAP_HELP": "Open peers map"
      },
      "VIEW": {
        "TITLE": "Peers map",
        "LAYER": {
          "MEMBER": "Member peers",
          "MIRROR": "Mirror peers",
          "OFFLINE": "Offline peers"
        }
      }
    },
    "WOT": {
      "LOOKUP": {
        "BTN_MAP": "Members map",
        "BTN_MAP_HELP": "Open members map"
      },
      "VIEW": {
        "TITLE": "Members map",
        "LAYER": {
          "MEMBER": "<i class=\"icon ion-person positive\"></i> Members",
          "PENDING": "<i class=\"icon ion-clock energized\"></i> Pending registrations",
          "WALLET": "<i class=\"icon ion-card gray\"></i> Simple wallets"
        }
      },
      "ERROR": {
        "LOAD_POSITION_FAILED": "Can not retrieve the positions to display."
      }
    },
    "REGISTRY": {
      "LOOKUP": {
        "BTN_MAP": "Map",
        "BTN_MAP_HELP": "Open the map of the pages"
      },
      "VIEW": {
        "TITLE": "Map of pages",
        "LAYER": {
          "SHOP": "<i class=\"icon ion-page-shop positive\"></i> Local shops",
          "COMPANY": "<i class=\"icon ion-page-company positive\"></i> Companies",
          "ASSOCIATION": "<i class=\"icon ion-page-association energized\"></i> Associations",
          "INSTITUTION": "<i class=\"icon ion-page-institution gray\"></i> Institutions"
        }
      }
    },
    "PROFILE": {
      "MARKER_HELP": "<b>Drag and drop</b> this marker to <b>update<br/>your position</b>, or use the buttons<br/>on top of the map."
    },
    "ERROR": {
      "LOCALIZE_ME_FAILED": "Unable to retrieve your current position"
    },
    "SETTINGS": {
      "MAP_DIVIDER": "Maps",
      "ENABLE_GOOGLE_API": "Enable Google API services?",
      "ENABLE_GOOGLE_API_HELP": "In the <b>members map</b>, allows you to display accounts with an address but without geolocation.",
      "GOOGLE_API_KEY": "Google API key",
      "BTN_GOOGLE_API": "Getting a key",
      "BTN_GOOGLE_API_WARNING": "requires a Google account",
      "GOOGLE_API_KEY_PLACEHOLDER": "eg: AIzaqyAgszvWm0tM81x1sMK_ipDHBI7EowLqR7I"
    },
    "HELP": {
      "TIP": {
        "WOT": "This map displays <b>profiles with a position</b>, whether they are member accounts or not.<br/><br/>Only profiles with the option &quot;appear on the map&quot; has been activated.",
        "WOT_BTN_LAYERS": "<b>Filter the displayed data</b>: members, pending registrations, simple portfolios, etc.",
        "WOT_BTN_SEARCH": "You can <b>search</b> by name, public key, or member pseudonym."
      }
    }
  }
}
);

$translateProvider.translations("fr-FR", {
  "MAP": {
    "COMMON": {
      "SEARCH_DOTS": "Rechercher...",
      "BTN_LOCALIZE_ME": "Me localiser"
    },
    "NETWORK": {
      "LOOKUP": {
        "BTN_MAP": "Carte",
        "BTN_MAP_HELP": "Ouvrir la carte des noeuds"
      },
      "VIEW": {
        "TITLE": "Carte des noeuds",
        "LAYER": {
          "MEMBER": "NÅuds membre",
          "MIRROR": "NÅuds mirroir",
          "OFFLINE": "NÅuds hors ligne"
        }
      }
    },
    "WOT": {
      "LOOKUP": {
        "BTN_MAP": "Carte",
        "BTN_MAP_HELP": "Ouvrir la carte des membres"
      },
      "VIEW": {
        "TITLE": "Carte des membres",
        "LAYER": {
          "MEMBER": "<i class=\"icon ion-person positive\"></i> Membres",
          "PENDING": "<i class=\"icon ion-clock energized\"></i> Inscriptions en attente",
          "WALLET": "<i class=\"icon ion-card gray\"></i> Simples portefeuilles"
        }
      },
      "ERROR": {
        "LOAD_POSITION_FAILED": "Impossible de rÃ©cupÃ©rer les positions Ã  afficher."
      }
    },
    "REGISTRY": {
      "LOOKUP": {
        "BTN_MAP": "Carte",
        "BTN_MAP_HELP": "Ouvrir la carte des pages"
      },
      "VIEW": {
        "TITLE": "Carte des pages",
        "LAYER": {
          "SHOP": "<i class=\"icon ion-page-shop positive\"></i> Commerces locaux",
          "COMPANY": "<i class=\"icon ion-page-company positive\"></i> Entreprises",
          "ASSOCIATION": "<i class=\"icon ion-page-association energized\"></i> Associations",
          "INSTITUTION": "<i class=\"icon ion-page-institution gray\"></i> Institutions"
        }
      }
    },
    "PROFILE": {
      "MARKER_HELP": "<b>Glissez-dÃ©posez</b> ce marqueur pour <b>mettre<br/>Ã  jour votre position</b> sur la carte, ou utilisez le bouton<br/>de recherche au dessus de la carte."
    },
    "ERROR": {
      "LOCALIZE_ME_FAILED": "Impossible de rÃ©cupÃ©rer votre position actuelle"
    },
    "SETTINGS": {
      "MAP_DIVIDER": "Cartes",
      "ENABLE_GOOGLE_API": "Activer les services Google API ?",
      "ENABLE_GOOGLE_API_HELP": "Permet l'affichage dans la <b>carte des membres</b> des comptes ayant une adresse mais aucun positionnement GPS.",
      "GOOGLE_API_KEY": "ClÃ© d'API Google",
      "BTN_GOOGLE_API": "Obtenir une clÃ©",
      "BTN_GOOGLE_API_WARNING": "nÃ©cessite d'avoir un compte Google",
      "GOOGLE_API_KEY_PLACEHOLDER": "Exemple: AIzaqyAgszvWm0tM81x1sMK_ipDHBI7EowLqR7I"
    },
    "HELP": {
      "TIP": {
        "WOT": "Cette carte affiche <b>les profils ayant une position</b>, qu'ils correspondent Ã  des comptes membre ou non.<br/><br/>Seuls sont visibles les profils dont l'option &quot;apparaitre sur le carte&quot; a Ã©tÃ© activÃ©e.",
        "WOT_BTN_LAYERS": "<b>Filtrez ici les donnÃ©es affichÃ©es</b>: membres, inscriptions en attente, simples portefeuilles, etc.",
        "WOT_BTN_SEARCH": "Vous pouvez <b>effectuer une recherche</b> par nom, clef publique ou pseudonyme de membre."
      }
    }
  }
}
);

$translateProvider.translations("it-IT", {
   "MAP": {
     "COMMON": {
       "SEARCH_DOTS": "Ricerca...",
       "BTN_LOCALIZE_ME": "Trovami"
     },
     "NETWORK": {
       "LOOKUP": {
         "BTN_MAP": "Mappa dei peers",
         "BTN_MAP_HELP": "Aprire mappa dei peers"
       },
       "VIEW": {
         "TITLE": "Mappa dei peers",
         "LAYER": {
           "MEMBER": "Peers membri",
           "MIRROR": "Peers specchi",
           "OFFLINE": "Peers offline"
         }
       }
     },
     "WOT": {
       "LOOKUP": {
         "BTN_MAP": "Mappa dei membri",
         "BTN_MAP_HELP": "Aprire mappa dei membri"
       },
       "VIEW": {
         "TITLE": "Mappa membri",
         "LAYER": {
           "MEMBER": "<i class=\"icon ion-person positive\"></i> Membri",
           "PENDING": "<i class=\"icon ion-clock energized\"></i> Registrazione pendenti",
           "WALLET": "<i class=\"icon ion-card gray\"></i> Portafogli osservatori"
         }
       },
       "ERROR": {
         "LOAD_POSITION_FAILED": "Errore nel caricamento delle posizioni."
       }
     },
     "REGISTRY": {
       "LOOKUP": {
         "BTN_MAP": "Mappa",
         "BTN_MAP_HELP": "Aprire la mappa delle pagine pro"
       },
       "VIEW": {
         "TITLE": "Mappa delle pagine pro",
         "LAYER": {
           "SHOP": "<i class=\"icon ion-page-shop positive\"></i> Negozi locali",
           "COMPANY": "<i class=\"icon ion-page-company positive\"></i> Aziende",
           "ASSOCIATION": "<i class=\"icon ion-page-association energized\"></i> Associazioni",
           "INSTITUTION": "<i class=\"icon ion-page-institution gray\"></i> Instituti"
         }
       }
     },
     "PROFILE": {
       "MARKER_HELP": "<b>Drag and drop</b> questo indicatore per <b>aggiornare<br/>tua posizione</b>, o usa i bottoni <br/>sopra la mappa."
     },
     "ERROR": {
       "LOCALIZE_ME_FAILED": "Impossible trovare tua posizione attuale"
     },
     "SETTINGS": {
       "MAP_DIVIDER": "Mappe",
       "ENABLE_GOOGLE_API": "Abilitare i servizi Google API ?",
       "ENABLE_GOOGLE_API_HELP": "Sulla <b>mappa dei membri</b>, ti permette di visualizzare i conti con un indirizzo ma senza geolocalizzazione.",
       "GOOGLE_API_KEY": "Chiave Google API",
       "BTN_GOOGLE_API": "Ottenere una chiave",
       "BTN_GOOGLE_API_WARNING": "necessita un conto Google",
       "GOOGLE_API_KEY_PLACEHOLDER": "per es. : AIzaqyAgszvWm0tM81x1sMK_ipDHBI7EowLqR7I"
     },
     "HELP": {
       "TIP": {
         "WOT": "Questa mappa mostra <b>profili che hanno fornito una posizione</b>, che siano conti membri o no.<br/><br/>Solo i profili che hanno attivato l'opzione &quot;apparire sulla mappa&quot; sono stati attivati.",
         "WOT_BTN_LAYERS": "<b>Filtrare i dati visibili</b>: membri, registrazioni pendenti, portafogli osservatori, etc.",
         "WOT_BTN_SEARCH": "Puoi <b>cercare</b> per nome, chiave pubblica, o pseudonimo del membro."
       }
     }
   }
 }
 );
}]);

angular.module("cesium.plugins.templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("plugins/es/templates/menu_extend.html","\n<!-- Top header: Main section -->\n<div ng-if=\":state:enable && extensionPoint === \'nav-buttons-right\'\" class=\"hidden-xs hidden-sm\">\n\n\n  <!-- invitation event -->\n  <button class=\"button button-clear icon ion-person-stalker\"\n          ng-if=\"login\"\n          active-link=\"gray\"\n          active-link-path-prefix=\"#/app/invitations\"\n          ng-click=\"showInvitationsPopover($event)\">\n          <span\n            ng-if=\"walletData.invitations.unreadCount\"\n            class=\"badge badge-button badge-positive\">{{walletData.invitations.unreadCount}}</span>\n  </button>\n\n  <!-- messages -->\n  <button class=\"button button-clear icon ion-email\"\n          ng-if=\"login\"\n          active-link=\"gray\"\n          active-link-path-prefix=\"#/app/user/message\"\n          ng-click=\"showMessagesPopover($event)\">\n    <span\n      ng-if=\"walletData.messages.unreadCount\"\n      class=\"badge badge-button badge-positive\">{{walletData.messages.unreadCount}}</span>\n  </button>\n\n  <!-- notifications -->\n  <button class=\"button button-clear icon ion-android-notifications\"\n          ng-if=\"login\"\n          active-link=\"gray\"\n          active-link-path-prefix=\"#/app/notifications\"\n          ng-click=\"showNotificationsPopover($event)\">\n    <span\n      ng-class=\"{\'badge-positive\': !walletData.notifications.warnCount, \'badge-assertive\': walletData.notifications.warnCount}\"\n      ng-if=\"walletData.notifications.unreadCount || walletData.notifications.warnCount\"\n      class=\"badge badge-button \">{{walletData.notifications.unreadCount+walletData.notifications.warnCount}}</span>\n  </button>\n</div>\n\n<!-- Left menu: User section -->\n<div ng-if=\":state:enable && extensionPoint === \'menu-user\'\" class=\"visible-xs visible-sm\">\n\n  <a menu-close class=\"item item-icon-left\" active-link=\"active\"\n     ng-if=\"login && walletData.isMember\"\n     active-link-path-prefix=\"#/app/invitations\"\n     ui-sref=\"app.view_invitations\">\n    <i class=\"icon ion-person-stalker\"></i>\n    <span translate>MENU.INVITATIONS</span>\n    <span class=\"badge badge-positive\"\n          ng-if=\"walletData.invitations.unreadCount\">{{walletData.invitations.unreadCount}}</span>\n  </a>\n\n  <a menu-close class=\"item item-icon-left\" active-link=\"active\"\n            active-link-path-prefix=\"#/app/user/message\"\n            ng-class=\"{\'item-menu-disable\': !login}\"\n            ui-sref=\"app.user_message.tab_inbox\">\n    <i class=\"icon ion-email\"></i>\n    <span translate>MENU.MESSAGES</span>\n    <span class=\"badge badge-positive\"\n          ng-if=\"walletData.messages.unreadCount\">{{walletData.messages.unreadCount}}</span>\n  </a>\n\n  <a menu-close class=\"item item-icon-left\" active-link=\"active\"\n       active-link-path-prefix=\"#/app/notifications\"\n       ng-class=\"{\'item-menu-disable\': !login}\"\n       ui-sref=\"app.view_notifications\">\n    <i class=\"icon ion-android-notifications\"></i>\n    <span translate>MENU.NOTIFICATIONS</span>\n    <span class=\"badge badge-positive\"\n          ng-if=\"walletData.notifications.unreadCount\">{{walletData.notifications.unreadCount}}</span>\n  </a>\n\n</div>\n");
$templateCache.put("plugins/rml9/templates/01-button.html","<!-- Button that call a function of the controller -->\n<button class=\"button button-balanced button-small-padding icon ion-android-archive\"\n        ng-click=\"onButtonClick()\"\n        title=\"{{\'RML9.BTN_OPEN\' | translate}}\">\n</button>\n\n<!-- Button: Open a view, using `ui-sref` attribute\n<button class=\"button button-balanced button-small-padding icon ion-plus-circled\"\n        ui-sref=\"app.rml9({pubkey: formData.pubkey})\"\n        title=\"{{\'RML9.BTN_OPEN\' | translate}}\">\n</button> -->\n\n");
$templateCache.put("plugins/rml9/templates/02-view.html","<ion-view left-buttons=\"leftButtons\">\n  <ion-nav-title>\n    {{\'RML9.VIEW.TITLE\' | translate}}\n  </ion-nav-title>\n\n  <ion-content>\n    <div class=\"list\">\n\n      <!-- the pubkey -->\n      <div class=\"item\">\n        {{\'COMMON.PUBKEY\'|translate}}\n        <div class=\"badge\">{{pubkey|formatPubkey}}</div>\n      </div>\n\n      <!-- a text divider-->\n      <div class=\"item item-divider\">{{\'RML9.VIEW.DIVIDER\'|translate:{pubkey: pubkey} }}</div>\n\n      <!-- iterate on each TX -->\n      <div class=\"item\" ng-repeat=\"item in items\">\n        <h3>{{item.time|formatDate}}</h3>\n        <h4>{{item.pubkey|formatPubkey}}</h4>\n        <div class=\"badge\">{{item.amount|formatAmount}}</div>\n      </div>\n    </div>\n  </ion-content>\n</ion-view>\n");
$templateCache.put("plugins/rml9/templates/03-button.html","<!-- Button: Open a view, using `ui-sref` attribute -->\n<button class=\"button button-balanced button-small-padding icon ion-android-archive\"\n        ui-sref=\"app.rml9({pubkey: formData.pubkey})\"\n        title=\"{{\'RML9.BTN_SWOW_TX\' | translate}}\">\n</button>\n\n");
$templateCache.put("plugins/rml9/templates/03-view_with_button.html","<ion-view left-buttons=\"leftButtons\">\n  <ion-nav-title>\n    {{\'RML9.VIEW.TITLE\' | translate}}\n  </ion-nav-title>\n\n  <ion-content>\n    <div class=\"list\">\n\n      <!-- buttons bar -->\n      <div class=\"center padding\">\n        <div class=\"buttons\">\n          <button class=\"button button-balanced icon-left icon ion-archive\"\n                  ng-click=\"onExportButtonClick()\">{{\'RML9.BTN_EXPORT\' | translate}}\n          </button>\n        </div>\n      </div>\n\n      <!-- the pubkey -->\n      <div class=\"item\">\n        {{\'COMMON.PUBKEY\'|translate}}\n        <div class=\"badge\">{{pubkey|formatPubkey}}</div>\n      </div>\n\n      <!-- the balance -->\n      <div class=\"item\">\n        {{\'RML9.VIEW.BALANCE\'|translate}}\n        <div class=\"badge badge-calm\">\n          {{balance|formatAmount}} <span ng-bind-html=\"$root.currency.name|currencySymbol\"></span>\n        </div>\n      </div>\n\n      <!-- a text divider-->\n      <div class=\"item item-divider\">{{\'RML9.VIEW.DIVIDER\'|translate:{pubkey: pubkey} }}</div>\n\n      <!-- iterate on each TX -->\n      <div class=\"item item-text-wrap\" ng-repeat=\"item in items\">\n\n        <h3>\n          {{item.time|formatDate}}\n          <span ng-if=\"item.comment\" class=\"gray\"> | {{item.comment}}</span>\n        </h3>\n\n        <h4 ng-if=\"item.uid\" class=\"positive\"><i class=\"icon ion-person\"></i> {{item.name||item.uid}}</h4>\n        <h4 ng-if=\"!item.uid\" class=\"gray\"><i class=\"icon ion-key\"></i> {{item.pubkey|formatPubkey}}</h4>\n\n        <div class=\"badge\"\n             ng-class=\"{\'badge-balanced\': item.amount > 0}\">\n          {{item.amount|formatAmount}} <span ng-bind-html=\"$root.currency.name|currencySymbol\"></span>\n        </div>\n      </div>\n    </div>\n  </ion-content>\n</ion-view>\n");
$templateCache.put("plugins/rml9/templates/04-view_chart.html","<ion-view left-buttons=\"leftButtons\">\n  <ion-nav-title>\n    {{\'RML9.VIEW.TITLE\' | translate}}\n  </ion-nav-title>\n\n  <ion-content>\n    <div class=\"list\">\n\n      <!-- buttons bar -->\n      <div class=\"center padding\">\n        <div class=\"buttons\">\n          <button class=\"button button-balanced icon-left icon ion-archive\"\n                  ng-click=\"onExportButtonClick()\">{{\'RML9.BTN_EXPORT\' | translate}}\n          </button>\n        </div>\n      </div>\n\n      <!-- the pubkey -->\n      <div class=\"item\">\n        {{\'COMMON.PUBKEY\'|translate}}\n        <div class=\"badge\">{{pubkey|formatPubkey}}</div>\n      </div>\n\n      <!-- the balance -->\n      <div class=\"item\">\n        {{\'RML9.VIEW.BALANCE\'|translate}}\n        <div class=\"badge badge-calm\">\n          {{balance|formatAmount}} <span ng-bind-html=\"$root.currency.name|currencySymbol\"></span>\n        </div>\n      </div>\n\n      <!-- a text divider-->\n      <div class=\"item item-divider\">{{\'RML9.VIEW.DIVIDER\'|translate:{pubkey: pubkey} }}</div>\n\n\n      <div class=\"row\">\n        <div class=\"col col-75\">\n          <!-- iterate on each TX -->\n          <div class=\"item item-text-wrap\" ng-repeat=\"item in items\">\n\n            <h3>\n              {{item.time|formatDate}}\n              <span ng-if=\"item.comment\" class=\"gray\"> | {{item.comment}}</span>\n            </h3>\n\n            <h4 ng-if=\"item.uid\" class=\"positive\"><i class=\"icon ion-person\"></i> {{item.name||item.uid}}</h4>\n            <h4 ng-if=\"!item.uid\" class=\"gray\"><i class=\"icon ion-key\"></i> {{item.pubkey|formatPubkey}}</h4>\n\n            <div class=\"badge\"\n                 ng-class=\"{\'badge-balanced\': item.amount > 0}\">\n              {{item.amount|formatAmount}} <span ng-bind-html=\"$root.currency.name|currencySymbol\"></span>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"col col-25\">\n\n          <!-- [NEW] TX input chart -->\n          <p class=\"gray\" translate>RML9.CHART.INPUT_CHART_TITLE</p>\n          <canvas id=\"chart-received-pie\" class=\"chart-pie\"\n                  chart-data=\"inputChart.data\"\n                  chart-labels=\"inputChart.labels\"\n                  chart-colors=\"inputChart.colors\">\n          </canvas>\n\n          <!-- [NEW] TX input chart -->\n          <p class=\"gray\" translate>RML9.CHART.OUTPUT_CHART_TITLE</p>\n          <canvas id=\"chart-sent-pie\" class=\"chart-pie\"\n                  chart-data=\"outputChart.data\"\n                  chart-labels=\"outputChart.labels\"\n                  chart-colors=\"outputChart.colors\">\n          </canvas>\n        </div>\n      </div>\n    </div>\n  </ion-content>\n</ion-view>\n");
$templateCache.put("plugins/rml9/templates/06-button.html","<!-- [NEW] Display only if plugin is enable -->\n\n  <!-- Button: call a method from the state controller -->\n  <button ng-if=\"enable\" class=\"button button-balanced button-small-padding icon ion-android-archive\"\n          ng-click=\"onButtonClick()\"\n          title=\"{{\'RML9.BTN_SWOW_TX\' | translate}}\">\n  </button>\n\n\n");
$templateCache.put("plugins/rml9/templates/06-settings_item.html","\n<div class=\"item item-toggle dark\">\n  <div class=\"input-label\" translate>RML9.SETTINGS.ENABLE_TOGGLE</div>\n  <label class=\"toggle toggle-royal\">\n    <input type=\"checkbox\" ng-model=\"formData.plugins.rml9.enable\" >\n    <div class=\"track\">\n      <div class=\"handle\"></div>\n    </div>\n  </label>\n</div>\n");
$templateCache.put("plugins/rml9/templates/07-button.html","<!-- Button: Open a view, using `ui-sref` attribute -->\n<button class=\"button button-balanced button-small-padding icon ion-android-archive\"\n        ui-sref=\"app.rml9({pubkey: formData.pubkey})\"\n        title=\"{{\'RML9.BTN_SWOW_TX\' | translate}}\">\n</button>\n\n");
$templateCache.put("plugins/rml9/templates/07-view.html","<leaflet id=\"map-geojson\" center=\"map.center\" geojson=\"map.geojson\"></leaflet>\n");
$templateCache.put("plugins/rml9/templates/final-button.html","<!-- Button: Open a view, using `ui-sref` attribute -->\n<button ng-if class=\"button button-balanced button-small-padding icon ion-android-archive\"\n        ui-sref=\"app.rml9({pubkey: formData.pubkey})\"\n        title=\"{{\'RML9.BTN_SWOW_TX\' | translate}}\">\n</button>\n\n");
$templateCache.put("plugins/rml9/templates/final-view.html","<ion-view left-buttons=\"leftButtons\">\n  <ion-nav-title>\n    {{\'RML9.VIEW.TITLE\' | translate}}\n  </ion-nav-title>\n\n  <ion-content>\n    <div class=\"list\">\n\n      <!-- buttons bar -->\n      <div class=\"center padding\">\n        <div class=\"buttons\">\n          <button class=\"button button-balanced icon-left icon ion-archive\"\n                  ng-click=\"onExportButtonClick()\">{{\'RML9.BTN_EXPORT\' | translate}}\n          </button>\n        </div>\n      </div>\n\n      <!-- the pubkey -->\n      <div class=\"item\">\n        {{\'COMMON.PUBKEY\'|translate}}\n        <div class=\"badge\">{{pubkey|formatPubkey}}</div>\n      </div>\n\n      <!-- the balance -->\n      <div class=\"item\">\n        {{\'RML9.VIEW.BALANCE\'|translate}}\n        <div class=\"badge badge-calm\">\n          {{balance|formatAmount}} <span ng-bind-html=\"$root.currency.name|currencySymbol\"></span>\n        </div>\n      </div>\n\n      <!-- a text divider-->\n      <div class=\"item item-divider\">{{\'RML9.VIEW.DIVIDER\'|translate:{pubkey: pubkey} }}</div>\n\n      <!-- iterate on each TX -->\n      <div class=\"row\">\n        <div class=\"col col-75\">\n          <div class=\"item item-text-wrap\" ng-repeat=\"item in items\">\n\n            <h3>\n              {{item.time|formatDate}}\n              <span ng-if=\"item.comment\" class=\"gray\"> | {{item.comment}}</span>\n            </h3>\n\n            <h4 ng-if=\"item.uid\" class=\"positive\"><i class=\"icon ion-person\"></i> {{item.name||item.uid}}</h4>\n            <h4 ng-if=\"!item.uid\" class=\"gray\"><i class=\"icon ion-key\"></i> {{item.pubkey|formatPubkey}}</h4>\n\n            <div class=\"badge\"\n                 ng-class=\"{\'badge-balanced\': item.amount > 0}\">\n              {{item.amount|formatAmount}} <span ng-bind-html=\"$root.currency.name|currencySymbol\"></span>\n            </div>\n          </div>\n\n        </div>\n\n        <div class=\"col col-25\">\n\n          <!-- [NEW] TX input chart -->\n          <p class=\"gray\" translate>RML9.CHART.INPUT_CHART_TITLE</p>\n          <canvas id=\"chart-received-pie\" class=\"chart-pie\"\n                  chart-data=\"inputChart.data\"\n                  chart-labels=\"inputChart.labels\">\n          </canvas>\n\n          <!-- [NEW] TX input chart -->\n          <p class=\"gray\" translate>RML9.CHART.OUTPUT_CHART_TITLE</p>\n          <canvas id=\"chart-sent-pie\" class=\"chart-pie\"\n                  chart-data=\"outputChart.data\"\n                  chart-labels=\"outputChart.labels\">\n          </canvas>\n        </div>\n      </div>\n    </div>\n  </ion-content>\n</ion-view>\n");
$templateCache.put("plugins/graph/templates/account/graph_balance.html","\n    <!-- button bar -->\n    <div class=\"button-bar-inline \"\n         style=\"top: 33px; margin-top:-33px; position: relative;\">\n      <button\n        class=\"button button-stable button-clear no-padding-xs pull-right\"\n        ng-click=\"showActionsPopover($event)\">\n        <i class=\"icon ion-navicon-round\"></i>\n      </button>\n    </div>\n\n    <div class=\"padding-left padding-right\">\n      <canvas id=\"account-balance\" class=\"chart-bar\"\n              height=\"{{height}}\" width=\"{{width}}\"\n              chart-data=\"data\"\n              chart-dataset-override=\"datasetOverride\"\n              chart-colors=\"colors\"\n              chart-options=\"options\"\n              chart-labels=\"labels\"\n              chart-click=\"onChartClick\">\n      </canvas>\n    </div>\n\n    <ng-include src=\"\'plugins/graph/templates/common/graph_range_bar.html\'\"></ng-include>\n");
$templateCache.put("plugins/graph/templates/account/graph_certifications.html","\n    <div class=\"padding-left padding-right\">\n      <canvas id=\"account-certifications\" class=\"chart-bar\"\n              height=\"{{height}}\" width=\"{{width}}\"\n              chart-data=\"data\"\n              chart-dataset-override=\"datasetOverride\"\n              chart-colors=\"colors\"\n              chart-options=\"options\"\n              chart-labels=\"labels\"\n              chart-click=\"onChartClick\">\n      </canvas>\n    </div>\n");
$templateCache.put("plugins/graph/templates/account/graph_sum_tx.html","<div class=\"row responsive-sm\" ng-if=\"!loading\">\n\n  <div class=\"col col-10 hidden-xs hidden-sm\">&nbsp;</div>\n\n  <div class=\"col text-center\">\n\n    <!-- [NEW] TX input chart -->\n    <p class=\"gray padding text-wrap\"\n       ng-if=\"inputChart.data.length\"\n       translate>GRAPH.ACCOUNT.INPUT_CHART_TITLE</p>\n    <canvas id=\"chart-received-pie\" class=\"chart-pie\"\n            chart-data=\"inputChart.data\"\n            chart-labels=\"inputChart.labels\"\n            chart-colors=\"inputChart.colors\"\n            chart-click=\"onInputChartClick\">\n    </canvas>\n\n  </div>\n\n  <div class=\"col col-10 hidden-xs hidden-sm\">&nbsp;</div>\n\n  <div class=\"col text-center\">\n\n    <!-- [NEW] TX input chart -->\n    <p class=\"gray padding text-wrap\"\n       ng-if=\"outputChart.data.length\"\n       translate>GRAPH.ACCOUNT.OUTPUT_CHART_TITLE</p>\n    <canvas id=\"chart-sent-pie\" class=\"chart-pie\"\n            chart-data=\"outputChart.data\"\n            chart-labels=\"outputChart.labels\"\n            chart-colors=\"outputChart.colors\"\n            chart-click=\"onOutputChartClick\">\n    </canvas>\n\n  </div>\n\n  <div class=\"col col-10 hidden-xs hidden-sm\">&nbsp;</div>\n\n</div>\n");
$templateCache.put("plugins/graph/templates/account/view_identity_extend.html","<!-- Buttons section -->\n<ng-if ng-if=\"extensionPoint === \'buttons\'\">\n\n  <button class=\"button button-stable button-small-padding icon ion-stats-bars\"\n          ng-click=\"showIdentityStats()\"\n          title=\"{{\'GRAPH.ACCOUNT.BTN_SHOW_STATS\' | translate}}\">\n  </button>\n\n</ng-if>\n");
$templateCache.put("plugins/graph/templates/account/view_identity_tx_extend.html","<!-- Buttons section -->\n<ng-if ng-if=\"extensionPoint === \'buttons\'\">\n\n  <button class=\"button button-stable button-small-padding icon ion-stats-bars\"\n          ng-click=\"showIdentityStats()\"\n          title=\"{{\'GRAPH.ACCOUNT.BTN_SHOW_STATS\' | translate}}\">\n  </button>\n\n</ng-if>\n");
$templateCache.put("plugins/graph/templates/account/view_stats.html","<ion-view left-buttons=\"leftButtons\"\n          cache-view=\"false\">\n  <ion-nav-title>\n    {{\'GRAPH.ACCOUNT.TITLE\' | translate}}{{id}}\n  </ion-nav-title>\n\n  <ion-content scroll=\"true\" class=\"no-padding\">\n\n\n\n    <div class=\"list\" >\n\n      <!--  - - - - Balance - - - - -->\n      <ng-controller ng-controller=\"GpAccountBalanceCtrl\">\n        <div class=\"center padding\" ng-if=\"loading\">\n          <ion-spinner icon=\"android\"></ion-spinner>\n        </div>\n\n        <div class=\"item item-divider\" ng-if=\"!loading\" >\n          {{\'GRAPH.ACCOUNT.BALANCE_DIVIDER\'|translate}}\n          <ion-spinner ng-if=\"loadingRange\" class=\"ion-spinner-small\" icon=\"android\"></ion-spinner>\n        </div>\n\n        <div class=\"item no-padding-xs\"\n             ng-if=\"!loading\"\n             ng-include=\"\'plugins/graph/templates/account/graph_balance.html\'\"\n             ng-init=\"setSize(350, 1000)\">\n        </div>\n      </ng-controller>\n\n    </div>\n\n    <div class=\"item no-padding-xs\"\n         ng-include=\"\'plugins/graph/templates/account/graph_sum_tx.html\'\"\n         ng-controller=\"GpAccountSumTxCtrl\">\n    </div>\n\n      <!--  - - - - WOT - - - - -->\n      <!--<div class=\"item item-divider\" translate>\n        GRAPH.ACCOUNT.WOT_DIVIDER\n      </div>\n\n      <div class=\"item no-padding-xs\"\n           ng-include=\"\'plugins/graph/templates/account/graph_certifications.html\'\"\n           ng-controller=\"GpAccountCertificationCtrl\"\n           ng-init=\"setSize(350, 1000)\">\n      </div>-->\n\n  </ion-content>\n\n</ion-view>\n");
$templateCache.put("plugins/graph/templates/account/view_wallet_tx_extend.html","<!-- Buttons section -->\n<ng-if ng-if=\"extensionPoint === \'buttons\'\">\n\n  <button class=\"button button-stable button-small-padding icon ion-stats-bars\"\n          ng-click=\"showWalletStats()\"\n          title=\"{{\'GRAPH.ACCOUNT.BTN_SHOW_STATS\' | translate}}\">\n  </button>\n\n</ng-if>\n");
$templateCache.put("plugins/graph/templates/blockchain/graph_block_issuers.html","\n    <div class=\"row responsive-lg\">\n\n      <!-- bar -->\n      <div class=\"col col-75\">\n        <canvas id=\"bar\" class=\"chart-bar\"\n                height=\"{{height}}\" width=\"{{width}}\"\n                chart-data=\"data\"\n                chart-labels=\"labels\"\n                chart-colors=\"colors\"\n                chart-options=\"barOptions\"\n                chart-click=\"onChartClick\">\n        </canvas>\n      </div>\n\n      <!-- pie -->\n      <div class=\"col col-25 padding-top\">\n        <canvas id=\"blocksByIssuer-pie\" class=\"chart-pie\"\n                chart-data=\"data\"\n                chart-labels=\"labels\"\n                chart-colors=\"colors\"\n                chart-click=\"onChartClick\">\n        </canvas>\n\n        <div class=\"gray padding-top text-center\">\n          <small ng-bind-html=\"\'GRAPH.BLOCKCHAIN.BLOCKS_ISSUERS_HELP\'| translate:{issuerCount: data.length, blockCount: blockCount }\"></small>\n        </div>\n      </div>\n    </div>\n");
$templateCache.put("plugins/graph/templates/blockchain/graph_tx_count.html","\n    <!-- button bar -->\n    <div class=\"button-bar-inline \"\n         style=\"top: 33px; margin-top:-33px; position: relative;\">\n      <button\n        class=\"button button-stable button-clear no-padding-xs pull-right\"\n        ng-click=\"showActionsPopover($event)\">\n        <i class=\"icon ion-navicon-round\"></i>\n      </button>\n    </div>\n\n    <div class=\"padding-left padding-right\">\n      <canvas id=\"tx-line\" class=\"chart-bar\"\n              height=\"{{height}}\" width=\"{{width}}\"\n              chart-data=\"data\"\n              chart-dataset-override=\"datasetOverride\"\n              chart-colors=\"colors\"\n              chart-options=\"options\"\n              chart-labels=\"labels\"\n              chart-click=\"onChartClick\">\n      </canvas>\n    </div>\n\n    <ng-include src=\"\'plugins/graph/templates/common/graph_range_bar.html\'\"></ng-include>\n");
$templateCache.put("plugins/graph/templates/blockchain/view_stats.html","<ion-view left-buttons=\"leftButtons\"\n          cache-view=\"false\">\n  <ion-nav-title>\n    {{\'GRAPH.BLOCKCHAIN.TITLE\' | translate}}{{id}}\n  </ion-nav-title>\n\n  <ion-content scroll=\"true\" class=\"no-padding\">\n\n    <div class=\"center padding\" ng-if=\"loading\">\n      <ion-spinner icon=\"android\"></ion-spinner>\n    </div>\n\n    <div class=\"list\" ng-if=\"!loading\">\n\n\n      <!-- TX count -->\n      <ng-controller ng-controller=\"GpBlockchainTxCountCtrl\">\n        <div class=\"center padding\" ng-if=\"loading\">\n          <ion-spinner icon=\"android\"></ion-spinner>\n        </div>\n\n        <div class=\"item item-divider\" ng-if=\"!loading\" >\n          {{\'GRAPH.BLOCKCHAIN.TX_DIVIDER\'|translate}}\n          <ion-spinner ng-if=\"loadingRange\" class=\"ion-spinner-small\" icon=\"android\"></ion-spinner>\n        </div>\n\n        <div class=\"item no-padding-xs\"\n             ng-if=\"!loading\"\n             ng-include=\"\'plugins/graph/templates/blockchain/graph_tx_count.html\'\"\n             ng-init=\"setSize(350, 1000)\">\n        </div>\n      </ng-controller>\n\n\n      <!-- Blocks issuer -->\n      <ng-controller ng-controller=\"GpBlockchainIssuersCtrl\">\n\n        <div class=\"item item-divider\" ng-if=\"!loading\" translate>GRAPH.BLOCKCHAIN.BLOCKS_ISSUERS_DIVIDER</div>\n\n        <div class=\"item no-padding-xs\"\n             ng-if=\"!loading\"\n             ng-include=\"\'plugins/graph/templates/blockchain/graph_block_issuers.html\'\"\n             ng-init=\"setSize(300, 750)\">\n        </div>\n\n      </ng-controller>\n\n  </ion-content>\n\n</ion-view>\n");
$templateCache.put("plugins/graph/templates/common/graph_range_bar.html","\n  <div class=\"range range-positive no-padding-left no-padding-right\">\n    <a\n      class=\"button button-stable button-clear no-padding pull-left\"\n      ng-click=\"goPreviousRange($event)\">\n      <i class=\"icon ion-chevron-left\"></i>\n    </a>\n    <input type=\"range\"\n           ng-model=\"formData.timePct\"\n           name=\"timePct\"\n           min=\"0\" max=\"100\"\n           value=\"{{formData.timePct}}\"\n           ng-change=\"onRangeChanged();\"\n           ng-model-options=\"{ debounce: 250 }\">\n    <a\n      class=\"button button-stable button-clear no-padding pull-right\"\n      ng-click=\"goNextRange($event)\">\n      <i class=\"icon ion-chevron-right\"></i>\n    </a>\n  </div>\n");
$templateCache.put("plugins/graph/templates/common/popover_range_actions.html","<ion-popover-view class=\"has-header popover-graph-currency\">\n  <ion-header-bar>\n    <h1 class=\"title\" translate>COMMON.POPOVER_ACTIONS_TITLE</h1>\n  </ion-header-bar>\n  <ion-content scroll=\"false\">\n    <div class=\"list item-text-wrap\">\n\n      <!-- scale -->\n      <a class=\"item item-icon-left ink\"\n         ng-click=\"toggleScale()\">\n        <i class=\"icon ion-ios-checkmark-empty\" ng-show=\"formData.scale==\'logarithmic\'\"></i>\n        <span ng-bind-html=\"\'GRAPH.COMMON.LOGARITHMIC_SCALE\' | translate\"></span>\n      </a>\n\n      <!-- duration divider -->\n      <div class=\"item item-divider\">\n        {{\'GRAPH.BLOCKCHAIN.TX_RANGE_DURATION_DIVIDER\'|translate}}\n      </div>\n\n      <!-- duration: hour -->\n      <a class=\"item item-icon-left ink\"\n         ng-click=\"setRangeDuration(\'hour\')\">\n        <i class=\"icon ion-ios-checkmark-empty\" ng-show=\"formData.rangeDuration==\'hour\'\"></i>\n        <span ng-bind-html=\"\'GRAPH.BLOCKCHAIN.TX_RANGE_DURATION.HOUR\' | translate\"></span>\n      </a>\n\n      <!-- duration: day -->\n      <a class=\"item item-icon-left ink\"\n         ng-click=\"setRangeDuration(\'day\')\">\n        <i class=\"icon ion-ios-checkmark-empty\" ng-show=\"formData.rangeDuration==\'day\'\"></i>\n        <span ng-bind-html=\"\'GRAPH.BLOCKCHAIN.TX_RANGE_DURATION.DAY\' | translate\"></span>\n      </a>\n\n      <!-- duration: month -->\n      <a class=\"item item-icon-left ink\"\n         ng-click=\"setRangeDuration(\'month\')\">\n        <i class=\"icon ion-ios-checkmark-empty\" ng-show=\"formData.rangeDuration==\'month\'\"></i>\n        <span ng-bind-html=\"\'GRAPH.BLOCKCHAIN.TX_RANGE_DURATION.MONTH\' | translate\"></span>\n      </a>\n\n    </div>\n  </ion-content>\n</ion-popover-view>\n");
$templateCache.put("plugins/graph/templates/currency/graph_du.html","\n  <!-- graphs button bar -->\n  <div class=\"button-bar-inline \"\n       style=\"top: 33px; margin-top:-33px; position: relative;\">\n    <button\n      class=\"button button-stable button-clear no-padding-xs pull-right\"\n      ng-click=\"showActionsPopover($event)\">\n      <i class=\"icon ion-navicon-round\"></i>\n    </button>\n  </div>\n\n  <canvas id=\"monetaryMass-bar\" class=\"chart-bar\"\n          height=\"{{height}}\"\n          width=\"{{width}}\"\n          chart-data=\"data\"\n          chart-labels=\"labels\"\n          chart-colors=\"colors\"\n          chart-dataset-override=\"datasetOverride\"\n          chart-options=\"options\"\n          chart-click=\"showBlock\">\n  </canvas>\n");
$templateCache.put("plugins/graph/templates/currency/graph_members_count.html","  <canvas id=\"membersCount-bar\" class=\"chart-line\"\n          height=\"{{height}}\"\n          width=\"{{width}}\"\n          chart-data=\"data\"\n          chart-labels=\"labels\"\n          chart-colors=\"colors\"\n          chart-options=\"options\"\n          chart-dataset-override=\"datasetOverride\"\n          chart-click=\"onChartClick\">\n  </canvas>\n");
$templateCache.put("plugins/graph/templates/currency/graph_monetary_mass.html","\n  <!-- graphs button bar -->\n  <div class=\"button-bar-inline \"\n       style=\"top: 33px; margin-top:-33px; position: relative;\">\n    <button\n      class=\"button button-stable button-clear no-padding-xs pull-right\"\n      ng-click=\"showActionsPopover($event)\">\n      <i class=\"icon ion-navicon-round\"></i>\n    </button>\n  </div>\n\n  <canvas id=\"monetaryMass-bar\"\n          class=\"chart-bar\"\n          height=\"{{height}}\"\n          width=\"{{width}}\"\n          chart-data=\"data\"\n          chart-labels=\"labels\"\n          chart-colors=\"colors\"\n          chart-dataset-override=\"datasetOverride\"\n          chart-options=\"options\"\n          chart-click=\"onChartClick\">\n  </canvas>\n");
$templateCache.put("plugins/graph/templates/currency/popover_monetary_mass_actions.html","<ion-popover-view class=\"fit has-header\">\n  <ion-header-bar>\n    <h1 class=\"title\" translate>COMMON.POPOVER_ACTIONS_TITLE</h1>\n  </ion-header-bar>\n  <ion-content scroll=\"false\">\n    <div class=\"list item-text-wrap\">\n\n      <a class=\"item item-icon-left ink\"\n         ng-click=\"toggleScale()\">\n        <i class=\"icon ion-ios-checkmark-empty\" ng-show=\"formData.scale==\'logarithmic\'\"></i>\n        <span ng-bind-html=\"\'GRAPH.COMMON.LOGARITHMIC_SCALE\' | translate\"></span>\n      </a>\n\n    </div>\n  </ion-content>\n</ion-popover-view>\n");
$templateCache.put("plugins/graph/templates/currency/tab_blocks_extend.html","<!-- buttons -->\n<ng-if ng-if=\"enable && extensionPoint === \'buttons\'\">\n  <div class=\"item item-divider\">\n    <a class=\"badge button button-text button-small button-small-padding ink\" ui-sref=\"app.currency.tab_blocks_stats\">\n      <i class=\"icon ion-stats-bars\"></i>\n      <span translate>GRAPH.COMMON.BTN_SHOW_STATS</span>\n    </a>\n  </div>\n</ng-if>\n");
$templateCache.put("plugins/graph/templates/currency/view_currency_extend.html","\n<!-- section actual parameters -->\n<ng-if ng-if=\"enable && extensionPoint === \'parameters-actual\'\" >\n\n  <ng-if ng-if=\"!smallscreen\">\n    <div class=\"item padding-left padding-right no-padding-xs\"\n         ng-include=\"\'plugins/graph/templates/currency/graph_monetary_mass.html\'\"\n         ng-controller=\"GpCurrencyMonetaryMassCtrl\"\n         ng-init=\"displayShareAxis=false;\">\n    </div>\n    <div class=\"item buttons no-padding-top \">\n      <a class=\"pull-right button button-text button-small button-small-padding ink\" ui-sref=\"app.currency_stats_lg\">\n        <i class=\"icon ion-stats-bars\"></i>\n        <span translate>GRAPH.COMMON.BTN_SHOW_DETAILED_STATS</span>\n      </a>\n    </div>\n  </ng-if>\n\n  <div class=\"item item-divider\"\n       ng-if=\"smallscreen\">\n    <a class=\"badge button button-text button-small button-small-padding ink\" ui-sref=\"app.currency.tab_parameters_stats\">\n      <i class=\"icon ion-stats-bars\"></i>\n      <span translate>GRAPH.COMMON.BTN_SHOW_STATS</span>\n    </a>\n  </div>\n</ng-if>\n\n<!-- section Wot -->\n<ng-if ng-if=\"enable && extensionPoint === \'wot-actual\'\" >\n\n  <ng-if ng-if=\"!smallscreen\">\n    <div class=\"item padding-left padding-right no-padding-xs\"\n         ng-include=\"\'plugins/graph/templates/currency/graph_members_count.html\'\"\n         ng-controller=\"GpCurrencyMembersCountCtrl\">\n    </div>\n    <div class=\"item buttons no-padding-top \">\n      <a class=\"pull-right button button-text button-small button-small-padding ink\" ui-sref=\"app.currency_stats_lg\">\n        <i class=\"icon ion-stats-bars\"></i>\n        <span translate>GRAPH.COMMON.BTN_SHOW_DETAILED_STATS</span>\n      </a>\n    </div>\n  </ng-if>\n\n  <div class=\"item item-divider\"\n       ng-if=\"smallscreen\">\n    <a class=\"badge button button-text button-small button-small-padding ink\" ui-sref=\"app.currency.tab_wot_stats\">\n      <i class=\"icon ion-stats-bars\"></i>\n      <span translate>GRAPH.COMMON.BTN_SHOW_STATS</span>\n    </a>\n  </div>\n</ng-if>\n\n<!-- section Wot -->\n<ng-if ng-if=\"enable && extensionPoint === \'network-actual\'\" >\n\n  <div class=\"item padding-left padding-right no-padding-xs\"\n       ng-if=\"!smallscreen\"\n       ng-include=\"\'plugins/graph/templates/blockchain/graph_block_issuers.html\'\"\n       ng-controller=\"GpBlockchainIssuersCtrl\">\n  </div>\n\n  <div class=\"item item-divider\"\n       ng-if=\"smallscreen\">\n    <a class=\"badge button button-text button-small button-small-padding ink\" ui-sref=\"app.currency.tab_network_stats\">\n      <i class=\"icon ion-stats-bars\"></i>\n      <span translate>GRAPH.COMMON.BTN_SHOW_STATS</span>\n    </a>\n  </div>\n</ng-if>\n\n");
$templateCache.put("plugins/graph/templates/currency/view_parameters_stats.html","<ion-view left-buttons=\"leftButtons\"\n          cache-view=\"false\">\n\n  <ion-content scroll=\"true\" >\n\n    <div class=\"center padding\" ng-if=\"loading\">\n      <ion-spinner icon=\"android\"></ion-spinner>\n    </div>\n\n    <div class=\"list no-padding-xs\">\n      <div class=\"item no-padding-xs\"\n           ng-include=\"\'plugins/graph/templates/currency/graph_monetary_mass.html\'\">\n      </div>\n\n      <!-- DU -->\n      <div class=\"item no-padding-xs\"\n           ng-include=\"\'plugins/graph/templates/currency/graph_du.html\'\"\n           ng-controller=\"GpCurrencyDUCtrl\"\n           ng-init=\"setSize(undefined, undefined)\">\n      </div>\n    </div>\n  </ion-content>\n</ion-view>\n");
$templateCache.put("plugins/graph/templates/currency/view_stats_lg.html","<ion-view left-buttons=\"leftButtons\"\n          cache-view=\"false\">\n  <ion-nav-title>\n    {{\'GRAPH.BLOCKCHAIN.TITLE\' | translate}}\n  </ion-nav-title>\n\n  <ion-content scroll=\"true\" class=\"padding\" >\n\n\n\n    <div class=\"list\" >\n\n      <!-- Monetary mass -->\n      <ng-controller ng-controller=\"GpCurrencyMonetaryMassCtrl\" >\n\n        <div class=\"center padding\" ng-if=\"loading\">\n          <ion-spinner icon=\"android\"></ion-spinner>\n        </div>\n\n        <div class=\"item no-padding-xs\" ng-if=\"!loading\"\n             ng-include=\"\'plugins/graph/templates/currency/graph_monetary_mass.html\'\"\n             ng-init=\"setSize(250, 1000)\">\n        </div>\n\n        <div ng-if=\"!loading\"\n             class=\"item item-toggle dark no-border text-right\">\n          <span class=\"\" translate>COMMON.BTN_RELATIVE_UNIT</span>\n          <label class=\"toggle toggle-royal\" id=\"helptip-currency-change-unit\">\n            <input type=\"checkbox\" ng-model=\"formData.useRelative\">\n            <div class=\"track\">\n              <div class=\"handle\"></div>\n            </div>\n          </label>\n        </div>\n      </ng-controller>\n\n      <!-- DU -->\n      <ng-controller ng-controller=\"GpCurrencyDUCtrl\" >\n        <div class=\"item no-padding-xs\"\n             ng-if=\"!loading\"\n             ng-include=\"\'plugins/graph/templates/currency/graph_du.html\'\"\n             ng-init=\"setSize(250, 1000)\">\n        </div>\n      </ng-controller>\n\n      <!-- Member count  -->\n      <ng-controller ng-controller=\"GpCurrencyMembersCountCtrl\" >\n      <div class=\"item no-padding-xs\"\n           ng-if=\"!loading\"\n           ng-include=\"\'plugins/graph/templates/currency/graph_members_count.html\'\"\n           ng-init=\"setSize(250, 1000)\">\n      </div>\n\n\n    </div>\n\n  </ion-content>\n\n</ion-view>\n");
$templateCache.put("plugins/graph/templates/currency/view_wot_stats.html","<ion-view left-buttons=\"leftButtons\"\n          cache-view=\"false\">\n\n  <ion-content scroll=\"true\" >\n\n    <div class=\"center padding\" ng-if=\"loading\">\n      <ion-spinner icon=\"android\"></ion-spinner>\n    </div>\n\n    <ng-include\n      ng-if=\"!loading\"\n      src=\"\'plugins/graph/templates/currency/graph_members_count.html\'\" ></ng-include>\n  </ion-content>\n  </ion-view>\n");
$templateCache.put("plugins/graph/templates/docstats/graph.html","\n  <!-- graphs button bar -->\n  <div class=\"button-bar-inline \"\n       style=\"top: 33px; margin-top:-33px; position: relative;\">\n    <button\n      class=\"button button-stable button-clear no-padding-xs pull-right\"\n      ng-click=\"showActionsPopover($event)\">\n      <i class=\"icon ion-navicon-round\"></i>\n    </button>\n  </div>\n\n  <canvas id=\"{{::chartIdPrefix}}{{chart.id}}\"\n          class=\"chart-line\"\n          height=\"{{height}}\"\n          width=\"{{width}}\"\n          chart-data=\"chart.data\"\n          chart-labels=\"labels\"\n          chart-dataset-override=\"chart.datasetOverride\"\n          chart-options=\"chart.options\"\n          chart-click=\"onChartClick\">\n  </canvas>\n\n  <ng-include src=\"\'plugins/graph/templates/common/graph_range_bar.html\'\"></ng-include>\n");
$templateCache.put("plugins/graph/templates/docstats/view_stats.html","<ion-view left-buttons=\"leftButtons\"\n          cache-view=\"false\">\n  <ion-nav-title>\n    {{\'GRAPH.DOC_STATS.TITLE\' | translate}}\n  </ion-nav-title>\n\n  <ion-content scroll=\"true\" class=\"padding\" >\n\n    <div class=\"list\" >\n\n      <!-- Doc stat -->\n      <div class=\"center padding\" ng-if=\"loading\">\n        <ion-spinner icon=\"android\"></ion-spinner>\n      </div>\n\n      <div class=\"item no-padding-xs\" ng-if=\"!loading\"\n           ng-repeat=\"chart in charts\"\n           ng-include=\"\'plugins/graph/templates/docstats/graph.html\'\"\n           ng-init=\"setSize(250, 1000)\">\n      </div>\n\n    </div>\n\n  </ion-content>\n\n</ion-view>\n");
$templateCache.put("plugins/graph/templates/network/view_network_extend.html","<!-- Buttons section -->\n<ng-if ng-if=\"enable && extensionPoint === \'buttons\'\">\n  <a class=\"button button-text button-small ink\"\n     ui-sref=\"app.blockchain_stats\" >\n    <i class=\"icon ion-stats-bars\"></i>\n    <span>{{\'NETWORK.VIEW.BTN_GRAPH\'|translate}}</span>\n  </a>\n</ng-if>\n");
$templateCache.put("plugins/graph/templates/network/view_peer_extend.html","<!-- Buttons section -->\n<ng-if ng-if=\"enable && extensionPoint === \'general\'\">\n\n  <a class=\"item item-icon-left item-icon-right item-text-wrap ink\"\n    ui-sref=\"app.view_peer_stats({pubkey: node.pubkey})\">\n    <i class=\"icon ion-stats-bars\"></i>\n    <span translate>GRAPH.PEER.VIEW.BLOCK_COUNT_LABEL</span>\n    <span class=\"badge\"\n          ng-if=\"!loading\"\n          ng-class=\"{\'badge-stable\': blockCount > 0, \'badge-assertive\': !blockCount}\">\n      {{!blockCount ? \'GRAPH.PEER.VIEW.NO_BLOCK\' : \'GRAPH.PEER.VIEW.BLOCK_COUNT\' | translate:{count: blockCount} }}\n    </span>\n    <ion-spinner class=\"badge\" icon=\"android\" ng-if=\"loading\"></ion-spinner>\n    <i class=\"gray icon ion-ios-arrow-right\"></i>\n  </a>\n</ng-if>\n\n");
$templateCache.put("plugins/graph/templates/network/view_peer_stats.html","<ion-view left-buttons=\"leftButtons\"\n          cache-view=\"false\">\n  <ion-nav-title>\n    {{\'GRAPH.BLOCKCHAIN.TITLE\' | translate}}{{id}}\n  </ion-nav-title>\n\n  <ion-content scroll=\"true\" class=\"no-padding\">\n\n    <div class=\"center padding\" ng-if=\"loading\">\n      <ion-spinner icon=\"android\"></ion-spinner>\n    </div>\n\n    <div class=\"list\" ng-if=\"!loading\">\n\n      <!--  - - - - TX divider - - - - -->\n      <div class=\"item item-divider hidden-xs hidden-sm\" translate>\n        GRAPH.BLOCKCHAIN.TX_DIVIDER\n      </div>\n\n      <div class=\"item no-padding-xs\"\n           ng-include=\"\'plugins/graph/templates/blockchain/graph_tx_count.html\'\"\n           ng-init=\"setSize(350, 1000)\">\n      </div>\n\n  </ion-content>\n\n</ion-view>\n");
$templateCache.put("plugins/graph/templates/synchro/graph.html","\n  <!-- graphs button bar -->\n  <div class=\"button-bar-inline \"\n       style=\"top: 33px; margin-top:-33px; position: relative;\">\n    <button\n      class=\"button button-stable button-clear no-padding-xs pull-right\"\n      ng-click=\"showActionsPopover($event)\">\n      <i class=\"icon ion-navicon-round\"></i>\n    </button>\n  </div>\n\n  <canvas id=\"synchro-chart-{{chart.id}}\"\n          class=\"chart-bar\"\n          height=\"{{height}}\"\n          width=\"{{width}}\"\n          chart-data=\"chart.data\"\n          chart-labels=\"labels\"\n          chart-dataset-override=\"chart.datasetOverride\"\n          chart-options=\"chart.options\">\n  </canvas>\n\n  <ng-include src=\"\'plugins/graph/templates/common/graph_range_bar.html\'\"></ng-include>\n");
$templateCache.put("plugins/graph/templates/synchro/view_stats.html","<ion-view left-buttons=\"leftButtons\"\n          cache-view=\"false\">\n  <ion-nav-title>\n    {{\'GRAPH.SYNCHRO.TITLE\' | translate}}\n  </ion-nav-title>\n\n  <ion-content scroll=\"true\" class=\"padding\" >\n\n    <div class=\"list\" >\n\n      <div class=\"center padding\" ng-if=\"loading\">\n        <ion-spinner icon=\"android\"></ion-spinner>\n      </div>\n\n      <div class=\"item no-padding-xs\" ng-if=\"!loading\"\n           ng-repeat=\"chart in charts\"\n           ng-include=\"\'plugins/graph/templates/synchro/graph.html\'\"\n           ng-init=\"setSize(250, 1000)\">\n      </div>\n\n    </div>\n\n  </ion-content>\n\n</ion-view>\n");
$templateCache.put("plugins/es/templates/blockchain/items_blocks.html","\n<div class=\"item row row-header done in hidden-xs hidden-sm\">\n\n  <!-- compact -->\n  <a class=\"pull-left gray button button-text button-small no-margin no-padding\"\n     ng-class=\"{\'positive\': compactMode}\"\n     ng-click=\"toggleCompactMode()\">\n    <i class=\"icon ion-navicon\"></i>\n    <b class=\"ion-arrow-down-b\" style=\"position: absolute; top: -8px; left: 2px; font-size: 8px;\"></b>\n    <b class=\"ion-arrow-up-b\" style=\"position: absolute; top: 6px; left: 2px; font-size: 8px;\"></b>\n    <span>{{\'BLOCKCHAIN.LOOKUP.BTN_COMPACT\'|translate}}</span>\n  </a>\n\n  <a class=\"no-padding dark col col-header\"\n     ng-if=\":rebind:expertMode\"\n     ng-click=\"toggleSort(\'medianTime\')\">\n    <cs-sort-icon asc=\"search.asc\" sort=\"search.sort\" toggle=\"\'medianTime\'\"></cs-sort-icon>\n    {{\'BLOCKCHAIN.LOOKUP.HEADER_MEDIAN_TIME\' | translate}}\n  </a>\n  <a class=\"no-padding dark col col-header\"\n     ng-if=\":rebind:expertMode\"\n     ng-click=\"toggleSort(\'issuer\')\">\n    <cs-sort-icon asc=\"search.asc\" sort=\"search.sort\" toggle=\"\'issuer\'\"></cs-sort-icon>\n    {{\'BLOCKCHAIN.LOOKUP.HEADER_ISSUER\' | translate}}\n  </a>\n  <div class=\"col col-20\">&nbsp;\n  </div>\n  <a class=\"no-padding dark col col-20 col-header\"\n     ng-if=\":rebind:expertMode\"\n     ng-click=\"toggleSort(\'number\')\">\n    <cs-sort-icon asc=\"search.asc\" sort=\"search.sort\" toggle=\"\'number\'\"></cs-sort-icon>\n    {{\'BLOCKCHAIN.LOOKUP.HEADER_BLOCK\' | translate}}\n  </a>\n</div>\n\n<div class=\"padding gray\" ng-if=\":rebind:!search.loading && !search.results.length\" translate>\n  COMMON.SEARCH_NO_RESULT\n</div>\n\n<!-- blocks (large view) -->\n<ng-if ng-if=\":rebind:!smallscreen\">\n  <ng-repeat ng-repeat=\"block in :rebind:search.results track by block.number\"\n             ng-include=\"!block.empty ? \'templates/blockchain/item_block_lg.html\' : \'templates/blockchain/item_block_empty_lg.html\'\">\n  </ng-repeat>\n</ng-if>\n<!-- blocks (small screens) -->\n<ng-if ng-if=\":rebind:smallscreen\">\n  <ng-repeat ng-repeat=\"block in :rebind:search.results track by block.number\"\n             ng-include=\"\'templates/blockchain/item_block.html\'\">\n  </ng-repeat>\n</ng-if>\n");
$templateCache.put("plugins/es/templates/blockchain/lookup.html","<ion-view>\n  <ion-nav-title>\n    <span translate>BLOCKCHAIN.LOOKUP.TITLE</span>\n  </ion-nav-title>\n\n  <ion-nav-buttons side=\"secondary\">\n\n    <button class=\"button button-icon button-clear icon ion-navicon visible-xs visible-sm\"\n            ng-click=\"toggleCompactMode()\">\n      <b class=\"icon-secondary\"\n         ng-class=\"{\'ion-arrow-down-b\': !compactMode, \'ion-arrow-up-b\': compactMode}\"\n         style=\"top: -12px; left: 11px; font-size: 10px;\"></b>\n      <b class=\"icon-secondary\"\n         ng-class=\"{\'ion-arrow-up-b\': !compactMode,\'ion-arrow-down-b\': compactMode}\"\n         style=\"top: 12px; left: 11px; font-size: 10px;\"></b>\n    </button>\n\n    <button class=\"button button-icon button-clear icon ion-android-more-vertical visible-xs visible-sm\" ng-click=\"showActionsPopover($event)\">\n    </button>\n\n  </ion-nav-buttons>\n\n  <ion-content class=\"padding no-padding-xs\" scroll=\"true\">\n    <ng-include src=\"\'plugins/es/templates/blockchain/lookup_form.html\'\"></ng-include>\n  </ion-content>\n</ion-view>\n");
$templateCache.put("plugins/es/templates/blockchain/lookup_form.html","<div class=\"lookupForm\">\n\n\n  <div class=\"item no-padding\">\n\n    <div class=\"button button-small button-text button-stable button-icon-event padding no-padding-right ink\"\n         ng-repeat=\"filter in search.filters\" ng-if=\"filter\">\n      <span ng-bind-html=\"\'BLOCKCHAIN.LOOKUP.TX_SEARCH_FILTER.\'+filter.type|translate:filter\"></span>\n      <i class=\"icon ion-close\" ng-click=\"itemRemove($index)\"></i>\n\n    </div>\n\n    <label class=\"item-input\">\n      <i class=\"icon ion-search placeholder-icon\"></i>\n      <input type=\"text\"\n             class=\"visible-xs visible-sm\"\n             placeholder=\"{{\'BLOCKCHAIN.LOOKUP.SEARCH_HELP\'|translate}}\"\n             ng-model=\"search.text\"\n             ng-model-options=\"{ debounce: 650 }\"\n             ng-change=\"doSearchText()\">\n      <input type=\"text\"\n             class=\"hidden-xs hidden-sm\"\n             id=\"{{searchTextId}}\" placeholder=\"{{\'BLOCKCHAIN.LOOKUP.SEARCH_HELP\'|translate}}\"\n             ng-model=\"search.text\"\n             on-return=\"doSearchText()\">\n      <div class=\"helptip-anchor-center\">\n        <a id=\"helptip-blockchain-search-text\"></a>\n      </div>\n\n    </label>\n  </div>\n\n\n  <div class=\"padding-top padding-xs\" style=\"display: block; height: 60px;\">\n    <div class=\"pull-left\">\n      <h4\n        ng-if=\"search.type==\'last\'\" translate>\n        BLOCKCHAIN.LOOKUP.LAST_BLOCKS\n      </h4>\n      <h4 ng-if=\"search.type==\'text\'\">\n        {{\'COMMON.RESULTS_LIST\'|translate}}\n      </h4>\n      <h5 class=\"dark\" ng-if=\"!search.loading && search.total\">\n        <span translate=\"COMMON.RESULTS_COUNT\" translate-values=\"{count: search.total}\"></span>\n        <small class=\"gray\" ng-if=\":rebind:search.took && expertMode\">\n          - {{:rebind:\'COMMON.EXECUTION_TIME\'|translate: {duration: search.took} }}\n        </small>\n        <small class=\"gray\" ng-if=\":rebind:expertMode && search.filters && search.filters.length\">\n          - <a ng-click=\"toggleShowQuery()\"\n            ng-if=\"!showQuery\" >\n            Voir la requÃªte\n            <i class=\"icon ion-arrow-down-b gray\"></i>\n          </a>\n          <a ng-click=\"toggleShowQuery()\"\n             ng-if=\"showQuery\" >\n             Masquer la requÃªte\n             <i class=\"icon ion-arrow-up-b gray\"></i>\n          </a>\n        </small>\n      </h5>\n      <h5 class=\"gray\" ng-if=\"search.loading\" >\n        <ion-spinner class=\"icon ion-spinner-small\" icon=\"android\"></ion-spinner>\n        <span translate>COMMON.SEARCHING</span>\n        <br/>\n      </h5>\n    </div>\n\n    <div class=\" pull-right hidden-xs hidden-sm\">\n      <a ng-if=\"enableFilter\"\n         class=\"button button-text button-small ink icon ion-clock\"\n         ng-class=\"{\'button-text-positive\': search.type==\'last\'}\"\n         ng-click=\"doSearchLast()\">\n        {{\'BLOCKCHAIN.LOOKUP.BTN_LAST\' | translate}}\n      </a>\n\n      <!--<a class=\"button button-text button-small ink icon icon-help\" ng-click=\"showHelpModal(\'join-salt\')\">\n        {{\'BLOCKCHAIN.LOOKUP.HELP\' | translate}}\n      </a>-->\n      &nbsp;\n      <button class=\"button button-small button-stable ink\"\n              ng-click=\"doSearchText()\">\n        {{\'COMMON.BTN_SEARCH\' | translate:search}}\n      </button>\n    </div>\n  </div>\n\n  <div class=\"item no-border no-padding\" ng-if=\":rebind:search.filters && search.filters.length && expertMode\">\n    <small class=\"no-padding no-margin\" ng-if=\"showQuery\">\n      <span class=\"gray text-wrap dark\">{{:rebind:search.query}}</span>\n    </small>\n  </div>\n\n  <ion-list class=\"list list-blocks\" ng-class=\"::motion.ionListClass\">\n\n    <ng-include src=\"\'plugins/es/templates/blockchain/items_blocks.html\'\"></ng-include>\n\n  </ion-list>\n\n  <ion-infinite-scroll\n    ng-if=\"search.hasMore\"\n    spinner=\"android\"\n    on-infinite=\"showMore()\"\n    distance=\"1%\">\n  </ion-infinite-scroll>\n\n");
$templateCache.put("plugins/es/templates/blockchain/lookup_popover_actions.html","<ion-popover-view class=\"fit has-header\">\n  <ion-header-bar>\n    <h1 class=\"title\" translate>BLOCKCHAIN.LOOKUP.POPOVER_FILTER_TITLE</h1>\n  </ion-header-bar>\n  <ion-content scroll=\"false\">\n    <div class=\"list item-text-wrap\">\n\n      <!-- last blocks -->\n      <a ng-if=\"enableFilter\"\n         class=\"item item-icon-left item-icon-right ink\"\n         ng-click=\"doSearchLast()\">\n        <i class=\"icon ion-clock\"></i>\n        {{\'BLOCKCHAIN.LOOKUP.BTN_LAST\' | translate}}\n        <i class=\"icon ion-ios-checkmark-empty\" ng-show=\"search.type==\'last\'\"></i>\n      </a>\n\n    </div>\n  </ion-content>\n</ion-popover-view>\n");
$templateCache.put("plugins/es/templates/common/edit_pictures.html","<div class=\"gallery\" ng-controller=\"ESPicturesEditCtrl as ctrl\">\n\n  <!-- Picture list -->\n  <div ng-repeat=\"picture in pictures\"\n       class=\"item card card-gallery stable-bg\"\n       ng-class=\"{\'in done\': picture.isnew}\">\n    <div>\n      <h2 ng-if=\"picture.title\">{{picture.title}}</h2>\n      <img ng-src=\"{{picture.src}}\">\n    </div>\n    <div class=\"item done in tabs tabs-secondary tabs-icon-left\">\n      <a class=\"tab-item stable-bg assertive\" ng-click=\"removePicture($index)\"\n         title=\"{{\'COMMON.BTN_PICTURE_DELETE\' | translate}}\"\n        ><i class=\"icon ion-trash-a\"></i>{{\'COMMON.BTN_PICTURE_DELETE\'|translate}}</a>\n      <a class=\"tab-item stable-bg dark\"\n         ng-click=\"rotatePicture($index)\"\n         title=\"{{\'COMMON.BTN_PICTURE_ROTATE\' | translate}}\"\n        ><i class=\"icon ion-forward\"></i>{{\'COMMON.BTN_PICTURE_ROTATE\'|translate}}</a>\n      <a class=\"tab-item stable-bg\"\n         ng-click=\"favoritePicture($index)\"\n         ng-class=\"{\'gray\': $index !== 0, \'positive\': $index === 0}\"\n         title=\"{{\'COMMON.BTN_PICTURE_FAVORISE\' | translate}}\"\n        ><i class=\"icon ion-star\"></i>{{\'COMMON.BTN_PICTURE_FAVORISE\'|translate}}</a>\n    </div>\n  </div>\n\n  <!-- Add picture button -->\n  <div class=\"item card card-gallery card-gallery-new text-center padding ink\"\n       ng-click=\"selectNewPicture(\'#pictureFile\')\">\n    <i class=\"ion-image stable\" style=\"font-size:150px\"></i>\n    <b class=\"ion-plus gray\" style=\"font-size:80px; position:absolute; top:25px; right: 5px;\"></b>\n    <p translate>COMMON.BTN_ADD_PICTURE</p>\n  </div>\n\n  <input type=\"file\" id=\"pictureFile\" accept=\"image/*\" onchange=\"angular.element(this).scope().fileChanged(event)\"\n         style=\"visibility:hidden; position:absolute;\"/>\n</div>\n\n");
$templateCache.put("plugins/es/templates/common/edit_position.html","<div class=\"item item-divider\" translate>LOCATION.LOCATION_DIVIDER</div>\n\n<!-- address -->\n<ion-item class=\"item-input item-floating-label item-button-right\">\n  <span class=\"input-label\">{{\'LOCATION.ADDRESS\' | translate}}</span>\n  <textarea placeholder=\"{{\'LOCATION.ADDRESS_HELP\' | translate}}\"\n            ng-model=\"formData.address\"\n            ng-model-options=\"{ debounce: 350 }\"\n            rows=\"4\" cols=\"10\">\n              </textarea>\n</ion-item>\n\n<!-- city -->\n<div class=\"item item-input item-floating-label\"\n     ng-class=\"{\'item-input-error\': form.$submitted && form.geoPoint.$invalid}\">\n  <span class=\"input-label\" translate>LOCATION.CITY</span>\n  <input type=\"text\" placeholder=\"{{\'LOCATION.CITY_HELP\'|translate}}\"\n         ng-model=\"formData.city\"\n         ng-model-options=\"{ updateOn: \'blur\' }\"\n         ng-change=\"onCityChanged()\">\n</div>\n<input type=\"hidden\"\n       name=\"geoPoint\"\n       ng-model=\"formData.geoPoint\"\n       required-if=\"formPosition.enable\"\n       geo-point>\n<div class=\"form-errors\"\n     ng-show=\"form.$submitted && form.geoPoint.$error\"\n     ng-messages=\"form.geoPoint.$error\">\n  <div class=\"form-error\" ng-message=\"required\">\n    <span translate=\"LOCATION.ERROR.REQUIRED_FOR_LOCATION\" ng-if=\"!formData.city\"></span>\n    <span translate=\"LOCATION.ERROR.INVALID_FOR_LOCATION\" ng-if=\"formData.city\"></span>\n  </div>\n  <div class=\"form-error\" ng-message=\"geoPoint\">\n    <span translate=\"LOCATION.ERROR.REQUIRED_FOR_LOCATION\" ng-if=\"!formData.city\"></span>\n    <span translate=\"LOCATION.ERROR.INVALID_FOR_LOCATION\" ng-if=\"formData.city\"></span>\n  </div>\n</div>\n\n\n<!-- Position (lat/lon) -->\n<div class=\"item row item-text-wrap no-padding\">\n\n  <div class=\"col no-padding\">\n\n    <!-- appear on map ? -->\n    <ion-checkbox ng-model=\"formPosition.enable\"\n                  ng-change=\"onUseGeopointChanged()\"\n                  class=\"item item-border-large done in\">\n      <div class=\"item-content\">\n        <span translate>LOCATION.USE_GEO_POINT</span>\n        <h4 class=\"gray\" ng-if=\"formPosition.loading\">\n          <ion-spinner class=\"icon ion-spinner-small\" icon=\"android\"></ion-spinner>\n          {{\'LOCATION.LOADING_LOCATION\'|translate}}\n        </h4>\n      </div>\n    </ion-checkbox>\n  </div>\n\n  <div class=\"col col-10 no-padding\" style=\"min-width: 60px;\">\n    <div class=\"row text-center\">\n\n      <a class=\"button button-stable button-small-padding\"\n         title=\"{{\'LOCATION.BTN_GEOLOC_ADDRESS\'|translate}}\"\n         ng-disabled=\"!formPosition.enable\"\n         ng-click=\"openSearchLocationModal()\">\n        <i class=\" icon ion-home\" style=\"left: 15px;\"></i>\n        <b class=\" icon-secondary ion-search\" style=\"top: -9px; left:32px; font-size: 18px;\"></b>\n      </a>\n\n    </div>\n  </div>\n</div>\n\n\n<cs-extension-point name=\"after-position\"></cs-extension-point>\n");
$templateCache.put("plugins/es/templates/common/edit_socials.html","<ion-list class=\"no-padding\">\n  <!-- divider -->\n  <div class=\"item item-divider\">\n      <span>\n        {{\'PROFILE.SOCIAL_NETWORKS_DIVIDER\' | translate}}\n      </span>\n    <a class=\"badge button button-text button-small button-small-padding\"\n       ng-class=\"{\'button-text-positive\': socialData.reorder}\"\n       ng-if=\"formData.socials && formData.socials.length &gt; 1\"\n       ng-click=\"socialData.reorder=!socialData.reorder\">\n      <span translate>PROFILE.BTN_REORDER</span>\n    </a>\n  </div>\n</ion-list>\n\n<ion-list show-reorder=\"socialData.reorder\">\n\n  <ion-item class=\"item-remove-animate item-icon-left \"\n            type=\"no-padding item-text-wrap\"\n            ng-if=\"formData.socials && formData.socials.length\"\n            ng-repeat=\"social in formData.socials | filter:filterFn track by social.url\"\n            id=\"social-{{social.url|formatSlug}}\">\n    <i class=\"icon ion-social-{{social.type}}\"\n       ng-class=\"{\'ion-bookmark\': social.type == \'other\', \'ion-link\': social.type == \'web\', \'ion-email\': social.type == \'email\', \'ion-iphone\': social.type == \'phone\'}\"></i>\n    <p ng-if=\"social.type && social.type != \'web\'\">\n      {{social.type}}\n      <i class=\"ion-locked\" ng-if=\"social.recipient\"></i>\n    </p>\n    <h2>\n      <a href=\"{{social.url}}\" ng-if=\"social.type != \'email\' && social.type != \'phone\'\" target=\"_blank\">{{social.url}}</a>\n      <a href=\"mailto:{{social.url}}\" ng-if=\"social.type == \'email\'\">{{social.url}}</a>\n      <a href=\"tel:{{social.url}}\" ng-if=\"social.type == \'phone\'\">{{social.url}}</a>\n      <a class=\"gray hidden-device\"\n         ng-if=\"!social.recipient && !socialData.reorder\"\n         ng-click=\"formData.socials.splice($index, 1); dirty = true;\">\n        &nbsp;<b class=\"ion ion-trash-a\"></b>&nbsp;\n      </a>\n      <a class=\"gray hidden-device\"\n         ng-if=\"!social.recipient && !socialData.reorder\"\n         ng-click=\"editSocialNetwork($index)\">\n        &nbsp;<b class=\"ion ion-edit\"></b>&nbsp;\n      </a>\n    </h2>\n    <ion-option-button class=\"button-assertive\"\n                       ng-if=\"!social.recipient\"\n                       ng-click=\"formData.socials.splice($index, 1); dirty = true;\">\n      {{\'COMMON.BTN_DELETE\'|translate}}\n    </ion-option-button>\n    <ion-option-button class=\"button-info\"\n                       ng-if=\"!social.recipient\"\n                       ng-click=\"editSocialNetwork($index)\">\n      {{\'COMMON.BTN_EDIT\'|translate}}\n    </ion-option-button>\n    <ion-reorder-button class=\"ion-drag\"\n                        on-reorder=\"reorderSocialNetwork(social, $fromIndex, $toIndex)\">\n    </ion-reorder-button>\n  </ion-item>\n</ion-list>\n\n<ion-list class=\"no-padding\">\n  <div class=\"item item-complex item-input-inset\">\n    <label class=\"item-input-wrapper\">\n      <input type=\"text\" style=\"width:100%\" placeholder=\"{{\'PROFILE.SOCIAL_HELP\'|translate}}\"\n             id=\"socialUrl\"\n             on-return=\"addSocialNetwork($event);\"\n             ng-model=\"socialData.url\"/>\n    </label>\n    <button class=\"button button-small hidden-xs\" type=\"button\" ng-click=\"addSocialNetwork($event)\">\n      {{\'COMMON.BTN_ADD\'|translate}}\n    </button>\n    <button class=\"button button-small button-icon icon ion-android-add visible-xs\" type=\"button\"\n            ng-click=\"addSocialNetwork($event)\">\n    </button>\n  </div>\n\n</ion-list>\n");
$templateCache.put("plugins/es/templates/common/item_comment.html","<ng-init ng-init=\"level = level + 1\">\n  <a name=\"{{::comment.id|formatHash}}\"></a>\n\n  <ion-item\n    id=\"comment-{{::comment.id|formatHash}}\"\n    class=\"card card-comment card-avatar stable-900-bg item-text-wrap no-padding\"\n    ng-class=\"::{\'in done\': comment.isnew}\">\n\n    <!-- Parent comment -->\n    <div class=\"card-header padding-left\" ng-if=\"comment.parent && !hideParent\">\n      <h5 class=\"gray underline\">\n        <ng-if ng-if=\"!comment.parent.issuer\">\n          {{\'COMMENTS.REPLY_TO_DELETED_COMMENT\'|translate}}\n        </ng-if>\n        <ng-if ng-if=\"comment.parent.issuer\">\n          <a ng-click=\"toggleExpandedParent(comment, $index)\">\n            {{\'COMMENTS.REPLY_TO_LINK\'|translate}}\n            <ng-if ng-if=\"::comment.parent.uid\">\n              {{::comment.parent.name||comment.parent.uid}}\n            </ng-if>\n            <ng-if ng-if=\"::!comment.parent.uid\">\n              <i class=\"ion-key\"></i>\n              {{::comment.parent.name|| (comment.parent.issuer|formatPubkey) }}\n            </ng-if>\n          </a>\n          <i ng-class=\"{\'ion-arrow-down-b\': !comment.expandedParent[$index], \'ion-arrow-up-b\': comment.expandedParent[$index]}\"></i>\n        </ng-if>\n      </h5>\n      <div class=\"padding-left\" ng-if=\"comment.expandedParent[$index]\">\n        <div class=\"card card-avatar card-avatar-small stable-bg item-text-wrap no-padding in done\">\n          <ng-include ng-init=\"comment = comment.parent\"\n                      src=\"\'plugins/es/templates/common/item_comment_content.html\'\">\n          </ng-include>\n        </div>\n      </div>\n    </div>\n\n    <ng-include src=\"\'plugins/es/templates/common/item_comment_content.html\'\"></ng-include>\n\n    <div class=\"card-footer gray\">\n      <small class=\"underline\">\n        <a ng-click=\"share($event, comment, $index)\">{{comment.creationTime | formatFromNow}}</a>\n\n        <ng-if ng-if=\"comment.replyCount\">\n          | <a class=\"dark\" ng-click=\"toggleExpandedReplies(comment, $index)\">{{\'COMMENTS.REPLY_COUNT\'|translate:comment}}</a>\n          <i ng-class=\"{\'ion-arrow-down-b\': !comment.showReplies, \'ion-arrow-up-b\': comment.showReplies}\"></i>\n        </ng-if>\n      </small>\n\n      <div class=\"pull-right\">\n        <a class=\"ion-android-share-alt\" ng-click=\"share($event, comment)\">\n        </a>\n        <a class=\"ion-edit\" ng-if=\"isUserPubkey(comment.issuer)\" ng-click=\"edit(comment)\">\n        </a>\n        <a class=\"ion-trash-a\" ng-if=\"isUserPubkey(comment.issuer)\" ng-click=\"remove(comment, $index)\">\n        </a>\n        <a class=\"ion-reply\" ng-click=\"reply(comment)\">\n          {{::\'COMMENTS.REPLY\'|translate}}\n        </a>\n      </div>\n    </div>\n  </ion-item>\n\n  <!-- replies   -->\n  <div ng-if=\"comment.expandedReplies[$index]\" class=\"padding-left card-avatar-small expanded\" ng-init=\"hideParent=true\">\n    <ng-include ng-repeat=\"comment in comment.replies track by comment.id\"\n                src=\"\'plugins/es/templates/common/item_comment.html\'\">\n    </ng-include>\n  </div>\n\n</ng-init>\n");
$templateCache.put("plugins/es/templates/common/item_comment_content.html","\n<div class=\"item item-avatar done in\">\n    <span class=\"avatar\"\n          ng-if=\"::!comment.avatar\"\n          ng-class=\"::{\'avatar-member\': comment.uid, \'avatar-wallet\': !comment.uid}\"></span>\n  <span class=\"avatar\"\n        ng-if=\"::comment.avatar\"\n        style=\"background-image: url({{::comment.avatar.src}})\"></span>\n\n    <a class=\"pull-left\"\n       ui-sref=\"app.wot_identity({pubkey:comment.issuer, uid: comment.uid})\">\n      <span class=\"positive\" ng-if=\"::comment.uid\">\n        {{::comment.name||comment.uid}}\n      </span>\n      <span ng-if=\"::!comment.uid\" class=\"gray\">\n        <i class=\"icon ion-key gray\"></i>\n        {{::comment.name || (comment.issuer|formatPubkey)}}\n      </span>\n  </a>&nbsp;\n  <span trust-as-html=\"comment.html\"></span>\n</div>\n");
$templateCache.put("plugins/es/templates/common/item_location_search.html","  <!-- search text -->\n  <div class=\"item no-padding\">\n    <div class=\"item-input\">\n      <i class=\"icon ion-location placeholder-icon\"></i>\n      <input type=\"text\"\n             placeholder=\"{{(options.location.help||\'LOCATION.SEARCH_HELP\')|translate}}\"\n             ng-model-options=\"{ debounce: 350 }\"\n             ng-model=\"search.location\"\n             ng-keydown=\"onKeydown($event)\"\n             ng-change=\"onLocationChanged()\"\n             ng-blur=\"hideDropdown()\">\n    </div>\n  </div>\n\n  <!-- dropdown -->\n  <ul class=\"item no-padding list dropdown-list\" ng-if=\"locations\" scroll=\"true\">\n\n    <div ng-if=\"!locations.length\"\n         class=\"item padding assertive\">\n      <span translate>COMMON.SEARCH_NO_RESULT</span>\n    </div>\n\n    <a ng-repeat=\"res in locations\"\n         class=\"item item-border-large item-text-wrap  ink done in {{res.selected && \'active\' || \'\'}}\"\n         ng-class=\"::{\'item-divider\': !res.address, \'item-icon-left\': res.address}\"\n         ng-click=\"::res.address ? selectLocation(res) : false\">\n\n      <!-- if divider -->\n      <h4 class=\"text-italic\" ng-if=\"::!res.address\" ng-bind-html=\"res.name\"></h4>\n\n      <!-- if divider -->\n      <ng-if ng-if=\"::res.address\">\n\n        <i class=\"icon ion-location\"></i>\n\n        <h3 ng-if=\"res.address.road\">\n          {{::res.address.road}}\n        </h3>\n        <h3>\n          <span ng-if=\"res.address.postcode\">{{::res.address.postcode}}</span>\n          {{::res.address.city||res.address.village}}\n          <span class=\"gray\">| {{::res.address.country}}</span>\n        </h3>\n        <h5 class=\"gray\">\n          {{\'LOCATION.MODAL.POSITION\'|translate:res }}\n        </h5>\n      </ng-if>\n\n    </a>\n\n  </ul>\n");
$templateCache.put("plugins/es/templates/common/modal_category.html","<ion-modal-view>\n  <ion-header-bar class=\"bar-positive\">\n      <button class=\"button button-clear\" ng-click=\"closeModal()\" translate>COMMON.BTN_CANCEL</button>\n      <h1 class=\"title\" >{{ (ctrl.title || \'COMMON.CATEGORIES\') | translate}}</h1>\n  </ion-header-bar>\n\n  <ion-content class=\"categoryModal\">\n\n    <div class=\"center padding\" ng-if=\"loading\">\n      <ion-spinner icon=\"android\"></ion-spinner>\n    </div>\n\n    <div class=\"list\">\n      <label class=\"item item-input\">\n          <i class=\"icon ion-search placeholder-icon\"></i>\n          <input type=\"text\" placeholder=\"{{\'COMMON.CATEGORY_SEARCH_HELP\'|translate}}\"\n                 ng-model=\"ctrl.searchText\"\n                 ng-model-options=\"{ debounce: 350 }\"\n                 ng-change=\"ctrl.doSearch()\">\n      </label>\n\n\n      <div ng-repeat=\"cat in categories\"\n         class=\"item item-category item-text-wrap\"\n         ng-class=\"{\'item-divider\': !cat.parent}\"\n         ng-click=\"cat.parent ? closeModal(cat) : false\">\n          <h2 ng-bind-html=\"cat.name\"></h2>\n      </div>\n    </div>\n  </ion-content>\n</ion-modal-view>\n");
$templateCache.put("plugins/es/templates/common/modal_edit_avatar.html","<ion-modal-view>\n  <ion-header-bar class=\"bar-positive\">\n    <button class=\"button button-clear visible-xs visible-sm\" ng-click=\"closeModal()\" translate>COMMON.BTN_CANCEL</button>\n\n    <h1 class=\"title\" translate>PROFILE.MODAL_AVATAR.TITLE</h1>\n\n    <button class=\"button button-clear icon-right visible-xs\"\n            ng-click=\"doCrop()\"\n            ng-disabled=\"formData.imageCropStep == 1\"\n            ng-if=\"formData.imageCropStep <= 2\">\n      <span translate>COMMON.BTN_NEXT</span>\n      <i class=\"icon ion-ios-arrow-right\"></i>\n    </button>\n    <button class=\"button button-clear icon-right visible-xs\"\n            ng-click=\"closeModal(formData.result)\"\n            ng-if=\"formData.imageCropStep == 3\">\n      <i class=\"icon ion-android-done\"></i>\n    </button>\n  </ion-header-bar>\n\n  <ion-content class=\"modal-avatar padding\">\n\n\n    <div ng-show=\"formData.imageCropStep == 1\">\n      <p translate>PROFILE.MODAL_AVATAR.SELECT_FILE_HELP</p>\n\n      <!-- Add picture button -->\n      <div class=\"item card text-center padding ink\"\n           ng-click=\"openFileSelector()\">\n        <i class=\"ion-image stable\" style=\"font-size:150px\"></i>\n        <b class=\"ion-plus gray\" style=\"position:relative; font-size:80px; top:-51px; right: 19px;\"></b>\n        <p translate>PROFILE.MODAL_AVATAR.BTN_SELECT_FILE</p>\n      </div>\n\n      <input type=\"file\" name=\"fileInput\" accept=\"image/*\" id=\"fileInput\" onchange=\"angular.element(this).scope().fileChanged(event)\"\n             style=\"visibility:hidden; position:absolute;\"/>\n    </div>\n\n    <div ng-show=\"formData.imageCropStep == 2\">\n      <p translate>PROFILE.MODAL_AVATAR.RESIZE_HELP</p>\n\n      <!-- <image-crop\n             data-height=\"200\" //shape\'s height\n             data-width=\"150\" //shape\'s width\n             data-shape=\"square\" //the shape.. square or circle\n             data-step=\"imageCropStep\"//scope variable that will contain the current step of the crop (1. Waiting for source image; 2. Image loaded, waiting for crop; 3. Crop done)\n             src=\"imgSrc\" //scope variable that will be the source image for the crop (may be a Blob or base64 string)\n             data-result-blob=\"result\" //scope variable that will contain the Blob information\n             data-result=\"resultDataUrl\" //scope variable that will contain the image\'s base64 string representation\n             crop=\"initCrop\" //scope variable that must be set to true when the image is ready to be cropped\n             padding=\"250\" //space, in pixels, rounding the shape\n             max-size=\"1024\" //max of the image, in pixels\n           ></image-crop> -->\n\n      <div class=\"item card text-center padding ink\">\n        <image-crop\n          data-height=\"100\"\n          data-width=\"100\"\n          data-shape=\"circle\"\n          data-step=\"formData.imageCropStep\"\n          src=\"formData.imgSrc\"\n          data-result=\"formData.result\"\n          data-result-blob=\"formData.resultBlob\"\n          crop=\"formData.initCrop\"\n          padding=\"150\"\n          max-size=\"1024\">\n        </image-crop>\n      </div>\n    </div>\n\n    <div ng-show=\"formData.imageCropStep == 3\">\n      <p translate>PROFILE.MODAL_AVATAR.RESULT_HELP</p>\n\n      <div class=\"item card padding hero\" style=\"height: 110px;\">\n        <div class=\"content\">\n          <img class=\"avatar\" ng-src=\"{{formData.result}}\" style=\"height: 88px; width: 88px;\">\n        </div>\n      </div>\n    </div>\n\n    <!-- buttons bar -->\n    <div class=\"padding hidden-xs text-right\">\n      <button class=\"button button-clear button-dark ink\" ng-click=\"closeModal()\" type=\"button\" translate>\n        COMMON.BTN_CANCEL\n      </button>\n      <button class=\"button button-calm icon-right ion-chevron-right ink\" ng-click=\"doCrop()\" translate\n              ng-disabled=\"formData.imageCropStep == 1\"\n              ng-if=\"formData.imageCropStep <= 2\">\n        COMMON.BTN_NEXT\n      </button>\n      <button class=\"button button-positive ink\" ng-click=\"closeModal(formData.result)\" translate\n              ng-if=\"formData.imageCropStep == 3\">\n        COMMON.BTN_CONTINUE\n      </button>\n    </div>\n\n  </ion-content>\n</ion-modal-view>\n");
$templateCache.put("plugins/es/templates/common/modal_location.html","<ion-modal-view class=\"modal-full-height modal-search-location\">\n  <ion-header-bar class=\"bar-positive\">\n      <button class=\"button button-clear\" ng-click=\"closeModal()\" translate>COMMON.BTN_CANCEL</button>\n      <h1 class=\"title\" translate>LOCATION.MODAL.TITLE</h1>\n  </ion-header-bar>\n\n  <ion-content class=\"padding no-padding-xs\" scroll=\"true\">\n\n\n    <!-- search text -->\n    <div class=\"item item-input\">\n      <i class=\"icon ion-search placeholder-icon\"></i>\n\n      <input type=\"text\"\n             class=\"visible-xs visible-sm\"\n             placeholder=\"{{\'LOCATION.MODAL.SEARCH_HELP\'|translate}}\"\n             ng-model=\"search.text\"\n             ng-model-options=\"{ debounce: 650 }\"\n             ng-change=\"doSearch()\">\n      <input type=\"text\"\n             class=\"hidden-xs hidden-sm\"\n              placeholder=\"{{\'LOCATION.MODAL.SEARCH_HELP\'|translate}}\"\n             ng-model=\"search.text\"\n             on-return=\"doSearch()\">\n    </div>\n\n    <div class=\"padding-top padding-xs\" style=\"display: block; height: 60px;\">\n      <div class=\"pull-left\" ng-if=\"!search.loading && search.results\">\n        <h4 translate>COMMON.RESULTS_LIST</h4>\n      </div>\n\n      <div class=\"pull-right hidden-xs hidden-sm\">\n        <button class=\"button button-small button-stable ink\"\n                ng-click=\"doSearch()\">\n          {{\'COMMON.BTN_SEARCH\' | translate}}\n        </button>\n      </div>\n\n    </div>\n\n    <div class=\"center padding\" ng-if=\"search.loading\">\n      <ion-spinner icon=\"android\"></ion-spinner>\n    </div>\n\n    <div ng-if=\"!search.loading && search.results && (!search.results.length || !search.results[0].address)\"\n         class=\"assertive padding\">\n      <span translate>COMMON.SEARCH_NO_RESULT</span>\n    </div>\n\n    <ion-list ng-if=\"!search.loading\"\n              class=\"padding-top {{::motion.ionListClass}}\">\n      <div ng-repeat=\"res in search.results\"\n         class=\"item item-border-large  item-text-wrap  ink\"\n         ng-class=\"::{\'item-divider\': !res.address, \'item-icon-left item-icon-right\': res.address}\"\n         ng-click=\"res.address ? closeModal(res) : false\">\n\n        <!-- if divider -->\n        <h4 class=\"text-italic\" ng-if=\"::!res.address\" ng-bind-html=\"res.name\"></h4>\n\n        <!-- if divider -->\n        <ng-if ng-if=\"::res.address\">\n\n          <i class=\"icon ion-location\"></i>\n\n          <h2 ng-if=\"res.address.road\">\n            {{::res.address.road}}\n          </h2>\n          <h3>\n            <span ng-if=\"res.address.postcode\">{{::res.address.postcode}}</span>\n            {{::res.address.city||res.address.village}}\n            <span class=\"gray\">| {{::res.address.country}}</span>\n          </h3>\n          <h5 class=\"gray\">\n             {{\'LOCATION.MODAL.POSITION\'|translate:res }}\n          </h5>\n\n          <i class=\"icon ion-ios-arrow-right\"></i>\n        </ng-if>\n\n      </div>\n    </ion-list>\n  </ion-content>\n\n  <ion-footer-bar class=\"stable-bg padding-left padding-right block\" ng-if=\"license\">\n    <div class=\"pull-right copyright\">\n      <span class=\"dark\">Â© </span>\n      <a class=\"positive\" href=\"{{license.url}}\" target=\"_blank\">{{license.name}}</a>\n    </div>\n  </ion-footer-bar>\n</ion-modal-view>\n");
$templateCache.put("plugins/es/templates/common/popover_profile_extend.html","    <!-- profile -->\n    <button ng-if=\":state:enable && auth\"\n            class=\"button button-positive button-small ink\"\n            ng-click=\"showEditUserProfile()\">\n      {{\'PROFILE.BTN_EDIT\' | translate}}\n    </button>\n\n");
$templateCache.put("plugins/es/templates/common/view_comments.html","\n<form class=\"comments\" ng-controller=\"ESCommentsCtrl\" ng-submit=\"save()\">\n\n  <div class=\"item item-divider\">\n    <i class=\"icon ion-chatboxes\"></i>\n    <span translate>COMMENTS.DIVIDER</span>\n    <span class=\"gray\" ng-if=\"comments.total\">({{comments.total}})</span>\n  </div>\n\n  <span class=\"item item-more-comments\"\n        ng-if=\"comments.hasMore\">\n    <small><a ng-click=\"showMore()\" translate>COMMENTS.SHOW_MORE_COMMENTS</a></small>\n  </span>\n\n  <div class=\"padding-right\">\n    <ng-repeat ng-repeat=\"comment in comments.result track by comment.id\"\n               ng-include=\"\'plugins/es/templates/common/item_comment.html\'\">\n    </ng-repeat>\n  </div>\n\n  <div class=\"hidden-xs hidden-sm padding-right\">\n    <div class=\"card card-comment item item-input item-button-right\">\n\n      <!-- reply to comment-->\n      <ng-if ng-if=\"formData.parent\">\n        <div class=\"padding card-header text-right pull-left\" translate>COMMENTS.REPLY_TO</div><br/>\n        <div class=\"padding-left\">\n          <div class=\"card card-avatar card-avatar-small stable-900-bg item-text-wrap no-padding in done\">\n            <ng-include ng-if=\"formData.parent.message\"\n                        ng-init=\"comment = formData.parent\"\n                        src=\"\'plugins/es/templates/common/item_comment_content.html\'\">\n            </ng-include>\n            <div class=\"item dark done in gray\" ng-if=\"!formData.parent.message\">\n              {{::\'COMMENTS.DELETED_COMMENT\'|translate}}\n            </div>\n            <div class=\"card-footer text-right gray\">\n              <div class=\"pull-right\">\n                <a class=\"ion-close\" ng-click=\"removeParentLink()\">\n                  {{::\'COMMON.BTN_CANCEL\'|translate}}\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </ng-if>\n      <textarea class=\"padding\"\n                style=\"background-color: transparent;\"\n                id=\"comment-form-textarea\"\n                rows=\"3\"\n                placeholder=\"{{formData.replyTo ? \'COMMENTS.COMMENT_HELP_REPLY_TO\' : \'COMMENTS.COMMENT_HELP\'|translate}}\"\n                ng-model=\"formData.message\"\n                ng-keypress=\"onKeypress($event)\">\n      </textarea>\n      <div class=\"card-footer text-right\">\n        <button type=\"button\" class=\"button button-small button-small-padding\"\n                ng-class=\"{\'button-positive\': formData.message.length}\"\n                ng-if=\"!formData.id\"\n                ng-click=\"save()\" translate>\n          COMMON.BTN_SEND\n        </button>\n        <!-- Edit buttons -->\n        <ng-if ng-if=\"formData.id\">\n          <button type=\"button\" class=\"button button-small button-small-padding\"\n                  ng-click=\"cancel()\" translate>\n            COMMON.BTN_CANCEL\n          </button>\n          <button type=\"button\" class=\"button button-small button-small-padding button-positive\"\n                  ng-click=\"save()\" translate>\n            COMMON.BTN_SAVE\n          </button>\n        </ng-if>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"visible-xs visible-sm\" style=\"margin-bottom\">\n    <div class=\"block\">\n      <!-- reply to comment-->\n      <div class=\"item item-input-inset done in\" ng-if=\"formData.parent\">\n        <div class=\"padding text-right pull-left\" translate>COMMENTS.REPLY_TO</div><br/>\n        <div class=\"padding-left expanded\">\n          <div class=\"card card-comment stable-900-bg item-text-wrap no-padding in done\">\n            <ng-include ng-if=\"::formData.parent.message\"\n                        ng-init=\"comment = formData.parent\"\n                        src=\"\'plugins/es/templates/common/item_comment_content.html\'\">\n            </ng-include>\n            <span ng-if=\"::!formData.parent.message\" translate>\n              COMMENTS.DELETED_COMMENT\n            </span>\n            <div class=\"card-footer text-right gray\">\n              <div class=\"pull-right\">\n                <a class=\"ion-close\" ng-click=\"removeParentLink()\">\n                  {{::\'COMMON.BTN_CANCEL\'|translate}}\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"item item-input-inset\">\n        <div class=\"item-input-wrapper\">\n          <input type=\"text\"\n                 id=\"comment-form-input\"\n                 style=\"width: 100%\"\n                 placeholder=\"{{\'COMMENTS.COMMENT_HELP\'|translate}}\"\n                 on-return=\"save();\"\n                 ng-model=\"formData.message\"/>\n          <button type=\"submit\" class=\"button button-small button-small-padding button-icon button-dark button-icon gray\">\n            <i class=\"icon ion-android-send\"></i>\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</form>\n");
$templateCache.put("plugins/es/templates/common/view_pictures.html","<div class=\"item gallery done in\" ng-if=\"pictures && pictures.length>0\" >\n  <div ng-repeat=\"picture in pictures\"\n       class=\"item card card-gallery\">\n    <div class=\"ink\">\n      <h2 ng-if=\"picture.title\">{{::picture.title}}</h2>\n      <img ng-src=\"{{picture.src}}\"/>\n    </div>\n  </div>\n</div>\n");
$templateCache.put("plugins/es/templates/currency/tab_blocks_extend.html","\n<!-- Buttons section -->\n<ng-if ng-if=\":state:enable && extensionPoint === \'nav-buttons\'\">\n\n  <button class=\"button button-icon button-clear icon ion-android-search visible-xs visible-sm\"\n          ui-sref=\"app.blockchain_search\">\n  </button>\n</ng-if>\n");
$templateCache.put("plugins/es/templates/document/item_document.html","<ion-item id=\"doc-{{::doc.id}}\"\n          class=\"item item-document item-icon-left ink {{::ionItemClass}} no-padding-top no-padding-bottom\"\n          ng-click=\"selectDocument($event, doc)\">\n\n  <i class=\"icon ion-document stable\" ng-if=\":rebind:!doc.avatar\"></i>\n  <i class=\"avatar\" ng-if=\":rebind:doc.avatar\" style=\"background-image: url(\'{{:rebind:doc.avatar.src}}\')\"></i>\n\n  <div class=\"row no-padding\">\n    <div class=\"col\">\n      <h3 class=\"dark\">\n        <i class=\"ion-locked\" ng-if=\":rebind:doc.nonce\"></i>\n        {{:rebind:doc.time|formatDate}}</h3>\n      <h4 class=\"gray\">{{:rebind:\'DOCUMENT.HASH\'|translate}} {{:rebind:doc.hash|formatHash}}</h4>\n    </div>\n\n    <div class=\"col\">\n      <h3>\n        <a ui-sref=\"app.wot_identity({pubkey: doc.pubkey, uid: doc.uid})\">\n          <span class=\"gray\">\n            <i class=\"ion-key\"></i> {{:rebind:doc.pubkey|formatPubkey}}\n          </span>\n          <span class=\"positive\" ng-if=\":rebind:doc.uid\">\n            <i class=\"ion-person\"></i> {{:rebind:doc.name||doc.uid}}\n          </span>\n        </a>\n      </h3>\n    </div>\n\n    <div class=\"col\">\n      <a\n        ng-if=\":rebind:login && doc.pubkey==walletData.pubkey\"\n        ng-click=\"remove($index)\"\n        class=\"gray pull-right\"\n         title=\"{{\'DOCUMENT.LOOKUP.BTN_REMOVE\'|translate}}\">\n        <i class=\"ion-trash-a\"></i>\n      </a>\n      <h3 ng-if=\":rebind:doc.recipient\">\n          <a ui-sref=\"app.wot_identity({pubkey: doc.recipient.pubkey, uid: doc.recipient.uid})\">\n          <span class=\"gray\">\n            <i class=\"ion-key\"></i> {{:rebind:doc.recipient.pubkey|formatPubkey}}\n          </span>\n            <span class=\"positive\" ng-if=\":rebind:doc.recipient.uid\">\n            <i class=\"ion-person\"></i> {{:rebind:doc.recipient.name||doc.recipient.uid}}\n          </span>\n          </a>\n      </h3>\n      <h4 class=\"gray\" ng-if=\":rebind:doc.read_signature\">\n        <i class=\"ion-checkmark\"></i>\n        <span translate>DOCUMENT.LOOKUP.READ</span>\n      </h4>\n\n    </div>\n\n  </div>\n</ion-item>\n");
$templateCache.put("plugins/es/templates/document/items_documents.html","\n<div class=\"item row row-header done in hidden-xs hidden-sm\">\n\n  <a class=\"no-padding dark col col-header\"\n     ng-if=\":rebind:expertMode\"\n     ng-click=\"toggleSort(\'time\')\">\n    <cs-sort-icon asc=\"search.asc\" sort=\"search.sort\" toggle=\"\'time\'\"></cs-sort-icon>\n    {{\'DOCUMENT.LOOKUP.HEADER_TIME\' | translate}}\n  </a>\n  <a class=\"no-padding dark col col-header\"\n     ng-if=\":rebind:expertMode\"\n     ng-click=\"toggleSort(\'issuer\')\">\n    <cs-sort-icon asc=\"search.asc\" sort=\"search.sort\" toggle=\"\'issuer\'\"></cs-sort-icon>\n    {{\'DOCUMENT.LOOKUP.HEADER_ISSUER\' | translate}}\n  </a>\n  <a class=\"no-padding dark col col-header\"\n     ng-if=\":rebind:expertMode\"\n     ng-click=\"toggleSort(\'recipient\')\">\n    <cs-sort-icon asc=\"search.asc\" sort=\"search.sort\" toggle=\"\'recipient\'\"></cs-sort-icon>\n    {{\'DOCUMENT.LOOKUP.HEADER_RECIPIENT\' | translate}}\n  </a>\n</div>\n\n<div class=\"padding gray\" ng-if=\":rebind:!search.loading && !search.results.length\" translate>\n  COMMON.SEARCH_NO_RESULT\n</div>\n\n<!-- for each doc -->\n<ng-repeat ng-repeat=\"doc in :rebind:search.results track by doc.id\"\n           ng-include=\"\'plugins/es/templates/document/item_document.html\'\">\n</ng-repeat>\n");
$templateCache.put("plugins/es/templates/document/lookup.html","<ion-view>\n  <ion-nav-title>\n    <span translate>DOCUMENT.LOOKUP.TITLE</span>\n  </ion-nav-title>\n\n  <ion-nav-buttons side=\"secondary\">\n\n    <button class=\"button button-icon button-clear icon ion-android-more-vertical visible-xs visible-sm\" ng-click=\"showActionsPopover($event)\">\n    </button>\n\n  </ion-nav-buttons>\n\n  <ion-content class=\"padding no-padding-xs\" scroll=\"true\">\n\n    <ng-include src=\"\'plugins/es/templates/document/lookup_form.html\'\"></ng-include>\n  </ion-content>\n</ion-view>\n");
$templateCache.put("plugins/es/templates/document/lookup_form.html","<div class=\"lookupForm\">\n\n\n  <div class=\"item no-padding\">\n\n    <!--<div class=\"button button-small button-text button-stable button-icon-event padding no-padding-right ink\"\n         ng-repeat=\"filter in search.filters\" ng-if=\"filter\">\n      <span ng-bind-html=\"\'DOCUMENT.LOOKUP.TX_SEARCH_FILTER.\'+filter.type|translate:filter\"></span>\n      <i class=\"icon ion-close\" ng-click=\"itemRemove($index)\"></i>\n\n    </div>-->\n\n    <label class=\"item-input\">\n      <i class=\"icon ion-search placeholder-icon\"></i>\n      <input type=\"text\"\n             class=\"visible-xs visible-sm\"\n             placeholder=\"{{\'DOCUMENT.LOOKUP.SEARCH_HELP\'|translate}}\"\n             ng-model=\"search.text\"\n             ng-model-options=\"{ debounce: 650 }\"\n             ng-change=\"doSearchText()\">\n      <input type=\"text\"\n             class=\"hidden-xs hidden-sm\"\n             id=\"{{searchTextId}}\" placeholder=\"{{\'DOCUMENT.LOOKUP.SEARCH_HELP\'|translate}}\"\n             ng-model=\"search.text\"\n             on-return=\"doSearchText()\">\n      <div class=\"helptip-anchor-center\">\n        <a id=\"{{helptipPrefix}}-search-text\"></a>\n      </div>\n\n    </label>\n  </div>\n\n\n  <div class=\"padding-top padding-xs\" style=\"display: block; height: 60px;\">\n    <div class=\"pull-left\">\n      <h4\n        ng-if=\"search.last\" translate>\n        DOCUMENT.LOOKUP.LAST_DOCUMENTS\n      </h4>\n      <h4 ng-if=\"!search.last\">\n        {{\'COMMON.RESULTS_LIST\'|translate}}\n      </h4>\n      <h5 class=\"dark\" ng-if=\"!search.loading && search.total\">\n        <span translate=\"COMMON.RESULTS_COUNT\" translate-values=\"{count: search.total}\"></span>\n        <small class=\"gray\" ng-if=\":rebind:search.took && expertMode\">\n          - {{:rebind:\'COMMON.EXECUTION_TIME\'|translate: {duration: search.took} }}\n        </small>\n        <small class=\"gray\" ng-if=\":rebind:expertMode && search.filters && search.filters.length\">\n          - <a ng-click=\"toggleShowQuery()\"\n            ng-if=\"!showQuery\" >\n            <span translate>DOCUMENT.LOOKUP.SHOW_QUERY</span>\n            <i class=\"icon ion-arrow-down-b gray\"></i>\n          </a>\n          <a ng-click=\"toggleShowQuery()\"\n             ng-if=\"showQuery\" >\n            <span translate>DOCUMENT.LOOKUP.HIDE_QUERY</span>\n             <i class=\"icon ion-arrow-up-b gray\"></i>\n          </a>\n        </small>\n      </h5>\n      <h5 class=\"gray\" ng-if=\"search.loading\" >\n        <ion-spinner class=\"icon ion-spinner-small\" icon=\"android\"></ion-spinner>\n        <span translate>COMMON.SEARCHING</span>\n        <br/>\n      </h5>\n    </div>\n\n    <div class=\" pull-right hidden-xs hidden-sm\">\n      <a class=\"button button-text button-small ink\"\n         ng-if=\"login\"\n         ng-click=\"showActionsPopover($event)\">\n        {{\'DOCUMENT.LOOKUP.BTN_ACTIONS\' | translate}}\n        <i class=\"icon ion-arrow-down-b\"></i>\n      </a>\n      &nbsp;\n      <button class=\"button button-small button-stable ink\"\n              ng-click=\"doSearchText()\">\n        {{\'COMMON.BTN_SEARCH\' | translate:search}}\n      </button>\n    </div>\n  </div>\n\n  <div class=\"item no-border no-padding\" ng-if=\":rebind:search.filters && search.filters.length && expertMode\">\n    <small class=\"no-padding no-margin\" ng-if=\"showQuery\">\n      <span class=\"gray text-wrap dark\">{{:rebind:search.query}}</span>\n    </small>\n  </div>\n\n  <ion-list class=\"list\" ng-class=\"::motion.ionListClass\">\n\n    <ng-include src=\"\'plugins/es/templates/document/items_documents.html\'\"></ng-include>\n\n  </ion-list>\n\n  <ion-infinite-scroll\n    ng-if=\"search.hasMore\"\n    spinner=\"android\"\n    on-infinite=\"showMore()\"\n    distance=\"1%\">\n  </ion-infinite-scroll>\n\n");
$templateCache.put("plugins/es/templates/document/lookup_popover_actions.html","<ion-popover-view class=\"fit has-header\">\n  <ion-header-bar>\n    <h1 class=\"title\" translate>DOCUMENT.LOOKUP.POPOVER_ACTIONS.TITLE</h1>\n  </ion-header-bar>\n  <ion-content scroll=\"false\">\n    <div class=\"list item-text-wrap\">\n      <a class=\"item item-icon-left assertive ink\"\n         ng-class=\"{\'gray\': !search.total}\"\n         ng-click=\"removeAll()\">\n        <i class=\"icon ion-trash-a\"></i>\n        {{\'DOCUMENT.LOOKUP.POPOVER_ACTIONS.REMOVE_ALL\' | translate}}\n      </a>\n    </div>\n  </ion-content>\n</ion-popover-view>\n");
$templateCache.put("plugins/es/templates/group/edit_group.html","<ion-view left-buttons=\"leftButtons\">\n  <ion-nav-title>\n    <span class=\"visible-xs\" ng-if=\"id\" ng-bind-html=\"formData.title\"></span>\n    <span class=\"visible-xs\" ng-if=\"!loading && !id\" translate>GROUP.EDIT.TITLE_NEW</span>\n  </ion-nav-title>\n\n  <ion-nav-buttons side=\"secondary\">\n      <button class=\"button button-icon button-clear visible-xs visible-sm\"\n              ng-class=\"{\'ion-android-send\':!id, \'ion-android-done\': id}\"\n              ng-click=\"save()\">\n      </button>\n  </ion-nav-buttons>\n\n  <ion-content scroll=\"true\">\n      <div class=\"row no-padding\">\n\n        <div class=\"col col-20 hidden-xs hidden-sm\">&nbsp;</div>\n\n        <div class=\"col\">\n          <!-- loading -->\n          <div class=\"center padding\" ng-if=\"loading\">\n            <ion-spinner icon=\"android\"></ion-spinner>\n          </div>\n\n          <form name=\"recordForm\" novalidate=\"\" ng-submit=\"save()\">\n\n            <!--  -->\n            <div class=\"list\"\n                 ng-class=\"motion.ionListClass\"\n                 ng-init=\"setForm(recordForm)\">\n\n              <div class=\"item hidden-xs\">\n                <h1 ng-if=\"id\" ng-bind-html=\"formData.title\"></h1>\n                <h1 ng-if=\"!id\" translate>GROUP.EDIT.TITLE_NEW</h1>\n                <h2 class=\"balanced\" ng-if=\"!id\">\n                  <i class=\"icon ion-android-people\"></i>\n                  <i class=\"icon ion-android-lock\" ng-if=\"formData.type==\'managed\'\"></i>\n                  {{\'GROUP.TYPE.ENUM.\'+formData.type|upper|translate}}\n                </h2>\n              </div>\n              <div class=\"item\" ng-if=\"id\">\n                <h4 class=\"gray\">\n                  <i class=\"icon ion-calendar\"></i>\n                  {{\'COMMON.LAST_MODIFICATION_DATE\'|translate}}&nbsp;{{formData.time | formatDate}}\n                </h4>\n                <div class=\"badge badge-balanced badge-editable\" ng-click=\"showRecordTypeModal()\">\n                  {{\'GROUP.TYPE.ENUM.\'+formData.type|upper|translate}}\n                </div>\n              </div>\n\n              <!-- pictures -->\n              <ng-include src=\"\'plugins/es/templates/common/edit_pictures.html\'\"></ng-include>\n\n              <div class=\"item item-divider\" translate>GROUP.GENERAL_DIVIDER</div>\n\n              <!-- title -->\n              <div class=\"item item-input item-floating-label\"\n                   ng-class=\"{\'item-input-error\': form.$submitted && form.title.$invalid}\">\n                <span class=\"input-label\" translate>GROUP.EDIT.RECORD_TITLE</span>\n                <input type=\"text\" placeholder=\"{{\'GROUP.EDIT.RECORD_TITLE_HELP\'|translate}}\"\n                       name=\"title\"\n                       id=\"group-record-title\"\n                       ng-model=\"formData.title\"\n                       ng-minlength=\"3\"\n                       ng-required=\"true\"/>\n              </div>\n              <div class=\"form-errors\"\n                   ng-if=\"form.$submitted && form.title.$error\"\n                   ng-messages=\"form.title.$error\">\n                <div class=\"form-error\" ng-message=\"required\">\n                  <span translate=\"ERROR.FIELD_REQUIRED\"></span>\n                </div>\n                <div class=\"form-error\" ng-message=\"minlength\">\n                  <span translate=\"ERROR.FIELD_TOO_SHORT\"></span>\n                </div>\n              </div>\n\n              <!-- description -->\n              <div class=\"item item-input item-floating-label\">\n                <span class=\"input-label\" translate>GROUP.EDIT.RECORD_DESCRIPTION</span>\n                <textarea placeholder=\"{{\'GROUP.EDIT.RECORD_DESCRIPTION_HELP\'|translate}}\"\n                          ng-model=\"formData.description\"\n                          rows=\"8\" cols=\"10\">\n                </textarea>\n              </div>\n\n              <!-- social networks -->\n              <ng-include src=\"\'plugins/es/templates/common/edit_socials.html\'\" ng-controller=\"ESSocialsEditCtrl\"></ng-include>\n\n            </div>\n\n            <div class=\"padding hidden-xs hidden-sm text-right\">\n              <button class=\"button button-clear button-dark ink\" ng-click=\"cancel()\" type=\"button\" translate>\n                COMMON.BTN_CANCEL\n              </button>\n              <button class=\"button button-positive button-raised ink\" type=\"submit\" ng-if=\"!id\" translate>\n                COMMON.BTN_PUBLISH\n              </button>\n              <button class=\"button button-assertive button-raised ink\" type=\"submit\" ng-if=\"id\" translate>\n                COMMON.BTN_SAVE\n              </button>\n            </div>\n          </form>\n        </div>\n\n        <div class=\"col col-20 hidden-xs hidden-sm\">&nbsp;</div>\n\n      </div>\n    </div>\n  </ion-content>\n</ion-view>\n");
$templateCache.put("plugins/es/templates/group/item_group.html","<a name=\"group-{{:rebind:group.hash}}\"></a>\n<div id=\"group-{{:rebind:group.hash}}\"\n          class=\"item item-icon-right item-avatar {{::ionItemClass}} ink\"\n          ng-click=\"select(group)\">\n\n  <i class=\"item-image avatar\" style=\"background-image: url({{::group.avatar.src}})\" ng-if=\"group.avatar\"></i>\n  <i class=\"item-image icon ion-android-people\" ng-if=\"!group.avatar\"></i>\n  <i class=\"item-image icon-secondary ion-android-lock\" ng-if=\"!group.avatar\" style=\"left: 20px; top: 17px; font-size: 19px; color: #d9d9d9;\"></i>\n\n  <h2 ng-bind-html=\":rebind:group.title\"></h2>\n\n  <!-- creation time-->\n  <h4 class=\"gray pull-right\">\n    <i class=\"ion-clock\"></i>\n    {{:rebind:\'GROUP.CREATED_TIME\'|translate: group }}\n  </h4>\n\n  <!-- membersCount -->\n  <h4 class=\"dark pull-left\" ng-if=\":rebind:group.membersCount\">\n    <i class=\"dark ion-person\"></i>\n    <span class=\"dark\">+{{:rebind:group.membersCount}}</span>\n  </h4>\n\n  <i class=\"icon ion-ios-arrow-right\"></i>\n</div>\n");
$templateCache.put("plugins/es/templates/group/items_groups.html","\n\n<div class=\"item row row-header hidden-xs hidden-sm\" ng-if=\"expertMode\">\n\n  <a class=\"no-padding dark col col-header\"\n     ng-click=\"toggleSort(\'medianTime\')\">\n    <cs-sort-icon asc=\"search.asc\" sort=\"search.sort\" toggle=\"\'medianTime\'\"></cs-sort-icon>\n    {{\'GROUP.LOOKUP.HEADER_CREATION_TIME\' | translate}}\n  </a>\n  <a class=\"no-padding dark col col-header\"\n     ng-click=\"toggleSort(\'issuer\')\">\n    <cs-sort-icon asc=\"search.asc\" sort=\"search.sort\" toggle=\"\'issuer\'\"></cs-sort-icon>\n    {{\'GROUP.LOOKUP.HEADER_ISSUER\' | translate}}\n  </a>\n  <div class=\"col col-20\">&nbsp;\n  </div>\n  <a class=\"no-padding dark col col-20 col-header\" ng-click=\"toggleSort(\'number\')\">\n    <cs-sort-icon asc=\"search.asc\" sort=\"search.sort\" toggle=\"\'number\'\"></cs-sort-icon>\n    {{\'GROUP.LOOKUP.HEADER_NAME\' | translate}}\n  </a>\n</div>\n\n<div class=\"padding gray\" ng-if=\":rebind:!search.loading && !search.results.length\" translate>\n  COMMON.SEARCH_NO_RESULT\n</div>\n\n<ng-repeat ng-repeat=\"group in :rebind:search.results\"\n           ng-include=\"\'plugins/es/templates/group/item_group.html\'\">\n</ng-repeat>\n");
$templateCache.put("plugins/es/templates/group/list.html","<ion-list class=\"{{::motion.ionListClass}}\">\n\n  <ion-item\n    ng-repeat=\"notification in search.results\"\n    class=\"item-border-large item-text-wrap ink item-avatar\"\n    ng-class=\"{\'unread\': !notification.read}\"\n    ng-click=\"select(notification)\">\n\n    <i ng-if=\"!notification.avatar\" class=\"item-image icon {{::notification.avatarIcon}}\"></i>\n    <i ng-if=\"notification.avatar\" class=\"item-image avatar\" style=\"background-image: url({{::notification.avatar.src}})\"></i>\n\n    <h3 trust-as-html=\"notification.message | translate:notification\"></h3>\n    <h4>\n      <i class=\"icon {{notification.icon}}\"></i>&thinsp;<span class=\"dark\">{{notification.time|formatFromNow}}</span>\n      <span class=\"gray\">| {{notification.time|formatDate}}</span>\n    </h4>\n  </ion-item>\n</ion-list>\n\n<ion-infinite-scroll\n  ng-if=\"!search.loading && search.hasMore\"\n  spinner=\"android\"\n  on-infinite=\"showMore()\"\n  distance=\"1%\">\n</ion-infinite-scroll>\n");
$templateCache.put("plugins/es/templates/group/lookup.html","<ion-view class=\"view-group\">\n  <ion-nav-title>\n    <span translate>GROUP.LOOKUP.TITLE</span>\n  </ion-nav-title>\n\n  <ion-nav-buttons side=\"secondary\">\n\n    <button class=\"button button-icon button-clear icon ion-android-more-vertical visible-xs visible-sm\" ng-click=\"showActionsPopover($event)\">\n    </button>\n\n  </ion-nav-buttons>\n\n  <ion-content class=\"padding no-padding-xs\" scroll=\"true\">\n    <ng-include src=\"\'plugins/es/templates/group/lookup_form.html\'\"></ng-include>\n  </ion-content>\n</ion-view>\n");
$templateCache.put("plugins/es/templates/group/lookup_form.html","<div class=\"lookupForm\">\n\n  <button class=\"button button-small button-positive button-clear ink pull-right padding-right hidden-sm hidden-xs\"\n          ng-click=\"showNewRecordModal()\">\n    <i class=\"icon ion-plus\"></i>\n    {{\'GROUP.LOOKUP.BTN_NEW\' | translate}}\n  </button>\n\n  <!-- search text-->\n  <label class=\"item item-input\">\n    <i class=\"icon ion-search placeholder-icon\"></i>\n    <input type=\"text\"\n           class=\"visible-xs visible-sm\"\n           placeholder=\"{{\'GROUP.LOOKUP.SEARCH_HELP\'|translate}}\"\n           ng-model=\"search.text\"\n           ng-model-options=\"{ debounce: 650 }\"\n           ng-change=\"doSearchText()\">\n    <input type=\"text\"\n           class=\"hidden-xs hidden-sm\"\n           id=\"{{searchTextId}}\" placeholder=\"{{\'GROUP.LOOKUP.SEARCH_HELP\'|translate}}\"\n           ng-model=\"search.text\"\n           on-return=\"doSearchText()\">\n    <div class=\"helptip-anchor-center\">\n      <a id=\"helptip-group-search-text\"></a>\n    </div>\n\n  </label>\n\n  <div class=\"padding-top padding-xs\" style=\"display: block; height: 60px;\">\n    <div class=\"pull-left\">\n      <h4\n        ng-if=\"search.type==\'open\'\" translate>\n        GROUP.LOOKUP.OPEN_RESULTS_LIST\n      </h4>\n      <h4\n        ng-if=\"search.type==\'last\'\" translate>\n        GROUP.LOOKUP.LAST_RESULTS_LIST\n      </h4>\n      <h4\n        ng-if=\"search.type==\'managed\'\" translate>\n        GROUP.LOOKUP.MANAGED_RESULTS_LIST\n      </h4>\n      <h4 ng-if=\"search.type==\'text\'\">\n        {{\'COMMON.RESULTS_LIST\'|translate}}\n      </h4>\n      <h5 class=\"dark\" ng-if=\"!search.loading && search.total\">\n        <span translate=\"COMMON.RESULTS_COUNT\" translate-values=\"{count: search.total}\"></span>\n        <small class=\"gray\" ng-if=\":rebind:search.took && expertMode\">\n          - {{:rebind:\'COMMON.EXECUTION_TIME\'|translate: {duration: search.took} }}\n        </small>\n      </h5>\n      <h5 class=\"gray\" ng-if=\"search.loading\" >\n        <ion-spinner class=\"icon ion-spinner-small\" icon=\"android\"></ion-spinner>\n        <span translate>COMMON.SEARCHING</span>\n        <br/>\n      </h5>\n    </div>\n\n    <div class=\" pull-right hidden-xs hidden-sm\">\n      <a ng-if=\"enableFilter\"\n         class=\"button button-text button-small ink icon ion-clock\"\n         ng-class=\"{\'button-text-positive\': search.type==\'last\'}\"\n         ng-click=\"doSearchLast()\">\n        {{\'GROUP.LOOKUP.BTN_LAST\' | translate}}\n      </a>\n      &nbsp;\n      <button class=\"button button-small button-stable ink\"\n              ng-click=\"doSearchText()\">\n        {{\'COMMON.BTN_SEARCH\' | translate:search}}\n      </button>\n    </div>\n  </div>\n\n  <div class=\"list {{::motion.ionListClass}}\" ng-if=\"!$scope.search.loading\">\n\n    <ng-include src=\"\'plugins/es/templates/group/items_groups.html\'\"></ng-include>\n\n  </div>\n\n  <ion-infinite-scroll\n    ng-if=\"search.hasMore\"\n    spinner=\"android\"\n    on-infinite=\"showMore()\"\n    distance=\"1%\">\n  </ion-infinite-scroll>\n\n");
$templateCache.put("plugins/es/templates/group/lookup_item.html","\n  <i class=\"item-image avatar\" style=\"background-image: url({{::item.avatar.src}})\" ng-if=\"item.avatar\"></i>\n  <i class=\"item-image icon ion-android-people\" ng-if=\"!item.avatar\"></i>\n  <i class=\"item-image icon-secondary ion-android-lock\" ng-if=\"!item.avatar\" style=\"left: 20px; top: 17px; font-size: 19px; color: #d9d9d9;\"></i>\n\n  <h2 ng-bind-html=\":rebind:item.title\"></h2>\n\n  <!-- creation time-->\n  <h4 class=\"gray pull-right\">\n    <i class=\"ion-clock\"></i>\n    {{:rebind:\'GROUP.CREATED_TIME\'|translate: item }}\n  </h4>\n\n  <!-- membersCount -->\n  <h4 class=\"dark pull-left\" ng-if=\":rebind:item.membersCount\">\n    <i class=\"dark ion-person\"></i>\n    <span class=\"dark\">+{{:rebind:item.membersCount}}</span>\n  </h4>\n");
$templateCache.put("plugins/es/templates/group/modal_record_type.html","<ion-modal-view>\n  <ion-header-bar class=\"bar-positive\">\n      <button class=\"button button-clear\" ng-click=\"closeModal()\" translate>COMMON.BTN_CANCEL</button>\n      <h1 class=\"title\" translate>GROUP.TYPE.TITLE</h1>\n  </ion-header-bar>\n\n    <ion-content class=\"lookupForm padding\">\n      <h3 translate>GROUP.TYPE.SELECT_TYPE</h3>\n\n    	<div class=\"list\">\n\n        <!-- open group -->\n        <div class=\"item item-complex card stable-bg item-icon-left ink\"\n             ng-click=\"closeModal(\'open\')\">\n          <div class=\"item-content item-text-wrap\">\n            <i class=\"item-image icon ion-android-people dark\"></i>\n            <h2 translate>GROUP.TYPE.OPEN_GROUP</h2>\n            <h4 class=\"gray\" translate>GROUP.TYPE.OPEN_GROUP_HELP</h4>\n          </div>\n        </div>\n\n        <!-- managed group -->\n        <div class=\"item item-complex card stable-bg item-icon-left ink\"\n             ng-click=\"closeModal(\'managed\')\">\n          <div class=\"item-content item-text-wrap\">\n            <i class=\"item-image icon ion-android-people dark\"></i>\n            <i class=\"icon-secondary ion-android-lock dark\" style=\"left: 10px; top: -8px;\"></i>\n            <h2 translate>GROUP.TYPE.MANAGED_GROUP</h2>\n            <h4 class=\"gray\" translate>GROUP.TYPE.MANAGED_GROUP_HELP</h4>\n          </div>\n        </div>\n\n      </div>\n</ion-content>\n</ion-modal-view>\n");
$templateCache.put("plugins/es/templates/group/view_popover_actions.html","<ion-popover-view class=\"fit has-header\">\n  <ion-header-bar>\n    <h1 class=\"title\"  translate>GROUP.VIEW.MENU_TITLE</h1>\n  </ion-header-bar>\n  <ion-content scroll=\"false\">\n    <div class=\"list item-text-wrap\">\n\n      <a class=\"item item-icon-left ink\"\n         ng-click=\"showSharePopover($event)\">\n        <i class=\"icon ion-android-share-alt\"></i>\n        {{\'COMMON.BTN_SHARE\' | translate}}\n      </a>\n\n      <!--<a class=\"item item-icon-left assertive ink\"\n         ng-if=\"canEdit\"\n         ng-click=\"delete()\">\n        <i class=\"icon ion-trash-a\"></i>\n        {{\'COMMON.BTN_DELETE\' | translate}}\n      </a>-->\n    </div>\n  </ion-content>\n</ion-popover-view>\n");
$templateCache.put("plugins/es/templates/group/view_record.html","<ion-view left-buttons=\"leftButtons\">\n  <ion-nav-title>\n\n  </ion-nav-title>\n\n  <ion-nav-buttons side=\"secondary\">\n    <button class=\"button button-bar button-icon button-clear visible-xs visible-sm\" ng-click=\"edit()\" ng-if=\"canEdit\">\n      <i class=\"icon ion-android-create\"></i>\n    </button>\n    <button class=\"button button-bar button-icon button-clear icon ion-android-more-vertical visible-xs visible-sm\"\n            ng-click=\"showActionsPopover($event)\">\n    </button>\n  </ion-nav-buttons>\n\n  <ion-content scroll=\"true\">\n    <div class=\"positive-900-bg hero\">\n      <div class=\"content\" ng-if=\"!loading\">\n        <i class=\"avatar cion-registry-{{formData.type}}\" ng-if=\"!formData.avatar\"></i>\n        <i class=\"avatar\" style=\"background-image: url({{::formData.avatar.src}})\" ng-if=\"formData.avatar\"></i>\n        <h3 ng-bind-html=\"formData.title\"></h3>\n        <h4>&nbsp;</h4>\n      </div>\n      <h4 class=\"content light\" ng-if=\"loading\">\n        <ion-spinner icon=\"android\"></ion-spinner>\n      </h4>\n    </div>\n\n    <div class=\"row no-padding-xs\">\n      <div class=\"col col-20 hidden-xs hidden-sm\">&nbsp;\n      </div>\n\n      <div class=\"col list item-text-wrap no-padding-xs\" ng-class=\"::motion.ionListClass\">\n\n        <div class=\"item\">\n          <h2 class=\"gray\">\n            <a ng-if=\"formData.city\" ui-sref=\"app.groups({location:formData.city})\">\n              <i class=\"icon ion-location\"></i>\n              <span ng-bind-html=\"formData.city\"></span>\n            </a>\n            <span ng-if=\"formData.city && formData.type\">&nbsp;|&nbsp;</span>\n            <a ng-if=\"formData.type\" ui-sref=\"app.groups({type:formData.type})\">\n              <i class=\"icon ion-flag\"></i>\n              {{\'GROUP.TYPE.ENUM.\'+formData.type|upper|translate}}\n            </a>\n          </h2>\n          <h4>\n            <i class=\"icon ion-clock\" ng-if=\"formData.time\"></i>\n            <span translate>COMMON.SUBMIT_BY</span>\n            <a ng-class=\"{\'positive\': issuer.uid, \'gray\': !issuer.uid}\"\n               ui-sref=\"app.wot_identity({pubkey:issuer.pubkey, uid: issuer.name||issuer.uid})\">\n              <ng-if ng-if=\"issuer.uid\">\n                <i class=\"icon ion-person\"></i>\n                {{::issuer.name||issuer.uid}}\n              </ng-if>\n              <span ng-if=\"!issuer.uid\">\n                <i class=\"icon ion-key\"></i>\n                {{issuer.pubkey|formatPubkey}}\n              </span>\n            </a>\n            <span >\n                {{formData.time|formatFromNow}}\n                <h4 class=\"gray hidden-xs\">|\n                  {{formData.time | formatDate}}\n                </h4>\n              </span>\n          </h4>\n        </div>\n\n        <!-- Buttons bar-->\n        <a id=\"group-share-anchor-{{id}}\"></a>\n        <div class=\"item large-button-bar hidden-xs hidden-sm\">\n          <button class=\"button button-stable button-small-padding icon ion-android-share-alt\"\n                  ng-click=\"showSharePopover($event)\">\n          </button>\n          <button class=\"button button-calm ink-dark\"\n                  ng-if=\"formData.pubkey && !isUserPubkey(formData.pubkey)\"\n                  ng-click=\"showTransferModal({pubkey:formData.pubkey, uid: formData.title})\">\n            {{\'COMMON.BTN_SEND_MONEY\' | translate}}\n          </button>\n          <button class=\"button button-stable icon-left ink-dark\"\n                  ng-if=\"canEdit\"\n                  ng-click=\"delete()\">\n            <i class=\"icon ion-trash-a assertive\"></i>\n            <span class=\"assertive\"> {{\'COMMON.BTN_DELETE\' | translate}}</span>\n          </button>\n          <button class=\"button button-calm icon-left ion-android-create ink\"\n                  ng-if=\"canEdit\"\n                  ng-click=\"edit()\">\n            {{\'COMMON.BTN_EDIT\' | translate}}\n          </button>\n        </div>\n\n        <ion-item>\n            <h2>\n              <span trust-as-html=\"formData.description\"></span>\n            </h2>\n        </ion-item>\n\n        <ion-item>\n          <h4 ng-if=\"formData.address\">\n            <span class=\"gray\" translate>REGISTRY.VIEW.LOCATION</span>\n            <a class=\"positive\" target=\'_blank\' href=\"https://www.google.fr/maps/?q={{formData.address}},%20{{formData.city}}\">\n              <span ng-bind-html=\"formData.address\"></span>\n              <span ng-if=\"formData.city\"> - </span>\n              <span ng-bind-html=\"formData.city\"></span>\n            </a>\n          </h4>\n        </ion-item>\n\n        <!-- Socials networks -->\n        <ng-if ng-if=\"formData.socials && formData.socials.length>0\">\n          <ion-item class=\"item-icon-left\"\n                    type=\"no-padding item-text-wrap\"\n                    ng-repeat=\"social in formData.socials track by social.url\"\n                    id=\"social-{{social.url|formatSlug}}\">\n            <i class=\"icon ion-social-{{social.type}}\"\n               ng-class=\"{\'ion-bookmark\': social.type == \'other\', \'ion-link\': social.type == \'web\', \'ion-email\': social.type == \'email\'}\"></i>\n            <p ng-if=\"social.type && social.type != \'web\'\">{{social.type}}</p>\n            <h2>\n              <a href=\"{{social.url}}\" ng-if=\"social.type != \'email\'\" target=\"_blank\">{{social.url}}</a>\n              <a href=\"mailto:{{social.url}}\" ng-if=\"social.type == \'email\'\">{{social.url}}</a>\n            </h2>\n          </ion-item>\n        </ng-if>\n\n        <div class=\"lazy-load\">\n\n          <!-- pictures -->\n          <ng-include src=\"\'plugins/es/templates/common/view_pictures.html\'\"></ng-include>\n\n\n          <span class=\"item item-divider\" ng-if=\"formData.pubkey\">\n            <span translate>REGISTRY.TECHNICAL_DIVIDER</span>\n          </span>\n\n          <!-- pubkey -->\n          <div class=\"item item-icon-left item-text-wrap ink\"\n                    ng-if=\"formData.pubkey\"\n                    copy-on-click=\"{{::formData.pubkey}}\">\n            <i class=\"icon ion-key\"></i>\n            <span translate>REGISTRY.EDIT.RECORD_PUBKEY</span>\n            <h4 class=\"dark\">{{::formData.pubkey}}</h4>\n          </div>\n\n          <!-- comments -->\n          <ng-include src=\"\'plugins/es/templates/common/view_comments.html\'\"></ng-include>\n        </div>\n      </div>\n\n      <div class=\"col col-20 hidden-xs hidden-sm\">&nbsp;\n      </div>\n    </div>\n  </ion-content>\n\n  <button class=\"button button-fab button-fab-bottom-right button-assertive icon ion-android-send visible-xs visible-sm\"\n          ng-if=\"formData.pubkey && !isUserPubkey(formData.pubkey)\"\n          ng-click=\"showTransferModal({pubkey: formData.pubkey, uid: formData.title})\">\n  </button>\n\n\n</ion-view>\n");
$templateCache.put("plugins/es/templates/invitation/list_invitation.html","<ion-list class=\"{{::motion.ionListClass}}\">\n\n  <ion-item\n    ng-repeat=\"invitation in search.results\"\n    class=\"item-border-large item-text-wrap item-avatar\">\n\n    <i ng-if=\"::!invitation.avatar\" class=\"item-image icon {{::invitation.avatarIcon}}\"></i>\n    <i ng-if=\"::invitation.avatar\" class=\"item-image avatar\" style=\"background-image: url({{::invitation.avatar.src}})\"></i>\n    <h3 trust-as-html=\"invitation.message | translate:invitation\"></h3>\n    <h3 class=\"dark text-italic\" ng-if=\"invitation.comment\">\n      <i class=\"icon ion-quote\"></i>\n      <span ng-bind-html=\"invitation.comment\"></span>\n    </h3>\n    <h4>\n      <i class=\"icon {{::invitation.icon}}\"></i>\n      <span class=\"dark\" ng-if=\"::invitation.issuer\" trust-as-html=\"\'INVITATION.SUGGESTED_BY\' | translate:invitation\"></span>\n      <span class=\"dark\">{{::invitation.time|formatFromNow}}</span>\n      <span class=\"gray\">| {{::invitation.time|formatDate}}</span>\n    </h4>\n    <div class=\"block text-right\">\n      <button class=\"button button-positive button-small button-small-padding\"\n              ng-click=\"accept(invitation)\"\n              ng-if=\"::invitation.state\"\n              translate>{{::(invitation.okText||\'COMMON.BTN_SHOW\') |translate}}</button>\n      <button class=\"button button-stable button-small button-small-padding\"\n              ng-click=\"delete($index)\"\n              translate>INVITATION.BTN_DELETE</button>\n    </div>\n  </ion-item>\n\n</ion-list>\n\n<ion-infinite-scroll\n  ng-if=\"!search.loading && search.hasMore\"\n  spinner=\"android\"\n  on-infinite=\"showMore()\"\n  distance=\"1%\">\n</ion-infinite-scroll>\n");
$templateCache.put("plugins/es/templates/invitation/modal_new_invitation.html","<ion-modal-view id=\"transfer\" class=\"modal-invitation modal-full-height\">\n  <ion-header-bar class=\"bar-positive\">\n    <button class=\"button button-clear visible-xs\" ng-click=\"closeModal()\" translate>COMMON.BTN_CANCEL</button>\n    <h1 class=\"title\" translate>INVITATION.NEW.TITLE</h1>\n\n    <button class=\"button button-icon button-clear icon ion-android-send visible-xs\" ng-click=\"doSend()\">\n    </button>\n  </ion-header-bar>\n\n  <ion-content scroll=\"true\">\n      <ng-include src=\"\'plugins/es/templates/invitation/new_invitation_form.html\'\"></ng-include>\n  </ion-content>\n</ion-modal-view>\n");
$templateCache.put("plugins/es/templates/invitation/new_invitation_form.html","  <form name=\"invitationForm\" novalidate=\"\"\n        ng-submit=\"doSend()\">\n\n    <div class=\"list\" ng-init=\"setForm(invitationForm)\">\n\n      <a class=\"item item-icon-right gray ink\"\n         ng-class=\"{\'disable-pointer-events\': recipients.length, \'item-input-error\': form.$submitted && !recipients.length}\"\n         ng-click=\"showSelectRecipientModal($event)\">\n        <span class=\"gray\" translate>INVITATION.NEW.RECIPIENTS</span>\n        <span class=\"item-note\">\n          <span class=\"hidden-xs\" ng-if=\"!recipients.length\" translate>INVITATION.NEW.RECIPIENTS_HELP</span>\n          <ng-repeat ng-repeat=\"identity in recipients track by identity.id\"\n                     class=\"button button-small button-text button-stable button-icon-event ink\"\n                     ng-class=\"{\'button-text-positive\': identity.selected}\">\n            <ng-bind-html ng-bind-html=\"identity.name||identity.uid||(identity.pubkey|formatPubkey)\"></ng-bind-html>\n            <b class=\"enable-pointer-events ion-close\" ng-click=\"removeRecipient($index, $event)\">&nbsp;&nbsp;</b>\n          </ng-repeat>\n        </span>\n\n        <i class=\"gray icon enable-pointer-events ion-ios-arrow-right\"></i>\n      </a>\n      <div class=\"form-errors\"\n           ng-if=\"form.$submitted && !recipients.length\">\n        <div class=\"form-error\">\n          <span translate=\"ERROR.FIELD_REQUIRED\"></span>\n        </div>\n      </div>\n\n      <a class=\"item item-icon-right gray ink\"\n         ng-class=\"{\'disable-pointer-events\': suggestions.length, \'item-input-error\': form.$submitted && !suggestions.length}\"\n         ng-click=\"showSelectSuggestionModal($event)\">\n        <span class=\"gray enable-pointer-events\" translate>INVITATION.NEW.SUGGESTION_IDENTITIES</span>\n\n        <span class=\"item-note\">\n          <span class=\"hidden-xs\" ng-if=\"!suggestions.length\" translate>INVITATION.NEW.SUGGESTION_IDENTITIES_HELP</span>\n          <ng-repeat ng-repeat=\"identity in suggestions track by identity.id\"\n               class=\"button button-small button-text button-stable button-icon-event ink\"\n               ng-class=\"{\'button-text-positive\': identity.selected}\">\n            <ng-bind-html ng-bind-html=\"identity.name||identity.uid||(identity.pubkey|formatPubkey)\"></ng-bind-html>\n            <b class=\"enable-pointer-events ion-close\" ng-click=\"removeSuggestion($index, $event)\">&nbsp;&nbsp;</b>\n          </ng-repeat>\n        </span>\n        <i class=\"gray icon enable-pointer-events ion-ios-arrow-right\"></i>\n      </a>\n      <div class=\"form-errors\"\n           ng-if=\"form.$submitted && !suggestions.length\">\n        <div class=\"form-error\">\n          <span translate=\"ERROR.FIELD_REQUIRED\"></span>\n        </div>\n      </div>\n\n      <!-- Enable comment ? -->\n      <div class=\"item item-content item-toggle dark visible-xs visible-sm\">\n        <span class=\"input-label gray\">{{\'TRANSFER.BTN_ADD_COMMENT\' | translate}}</span>\n        <label class=\"toggle toggle-royal\">\n          <input type=\"checkbox\" ng-model=\"formData.useComment\">\n          <div class=\"track\">\n            <div class=\"handle\"></div>\n          </div>\n        </label>\n      </div>\n\n      <!-- Comment -->\n      <label class=\"item item-input item-floating-label hidden-xs hidden-sm\"\n             ng-class=\"{\'item-input-error\': form.$submitted && form.comment.$invalid}\">\n        <span class=\"input-label\">{{\'TRANSFER.COMMENT\' | translate}}</span>\n        <textarea placeholder=\"{{\'TRANSFER.COMMENT_HELP\' | translate}}\"\n                  name=\"comment\"\n                  ng-model=\"formData.comment\"\n                  ng-maxlength=\"255\">\n        </textarea>\n      </label>\n      <label class=\"item item-input item-floating-label visible-xs visible-sm\"\n             ng-if=\"formData.useComment\"\n             ng-class=\"{\'item-input-error\': form.$submitted && form.comment.$invalid}\">\n        <span class=\"input-label\">{{\'TRANSFER.COMMENT\' | translate}}</span>\n        <textarea placeholder=\"{{\'TRANSFER.COMMENT_HELP\' | translate}}\"\n                  name=\"comment\"\n                  ng-model=\"formData.comment\"\n                  ng-maxlength=\"255\">\n        </textarea>\n      </label>\n      <div class=\"form-errors\"\n           ng-show=\"form.$submitted && form.comment.$error\"\n           ng-messages=\"form.comment.$error\">\n        <div class=\"form-error\" ng-message=\"maxlength\">\n          <span translate=\"ERROR.FIELD_TOO_LONG\"></span>\n        </div>\n        <div class=\"form-error\" ng-message=\"pattern\">\n          <span translate=\"ERROR.FIELD_ACCENT\"></span>\n        </div>\n      </div>\n\n    </div>\n\n    <div class=\"padding hidden-xs text-right\">\n      <button class=\"button button-small button-clear button-dark ink\"\n              ng-click=\"cancel()\" type=\"button\" translate>COMMON.BTN_CANCEL\n      </button>\n      <button class=\"button button-small button-positive ink\" type=\"submit\">\n        {{\'COMMON.BTN_SEND\' | translate}}\n      </button>\n    </div>\n  </form>\n\n");
$templateCache.put("plugins/es/templates/invitation/popover_actions.html","<ion-popover-view class=\"fit has-header\">\n  <ion-header-bar>\n    <h1 class=\"title\" translate>COMMON.POPOVER_ACTIONS_TITLE</h1>\n  </ion-header-bar>\n  <ion-content scroll=\"false\">\n    <div class=\"list item-text-wrap\">\n\n      <a class=\"item item-icon-left  ink\"\n         ng-class=\"{\'gray\': !search.results.length, \'assertive\': search.results.length}\"\n         ng-click=\"deleteAll()\">\n        <i class=\"icon ion-trash-a\"></i>\n        <span translate>INVITATION.BTN_DELETE_ALL</span>\n      </a>\n\n    </div>\n  </ion-content>\n</ion-popover-view>\n");
$templateCache.put("plugins/es/templates/invitation/popover_invitation.html","<ion-popover-view class=\"fit hidden-xs hidden-sm popover-notification popover-invitation\"\n                  ng-controller=\"PopoverInvitationCtrl\">\n  <ion-header-bar class=\"stable-bg block\">\n    <div class=\"title\" translate>INVITATION.NOTIFICATIONS.TITLE</div>\n\n    <div class=\"pull-right\">\n      <a class=\"positive\"\n         ng-click=\"showNewInvitationModal()\"\n         translate>INVITATION.BTN_NEW_INVITATION</a>\n    </div>\n  </ion-header-bar>\n  <ion-content scroll=\"true\">\n    <div class=\"center padding\" ng-if=\"search.loading\">\n      <ion-spinner icon=\"android\"></ion-spinner>\n    </div>\n    <div class=\"padding gray\" ng-if=\"!search.loading && !search.results.length\" translate>\n      INVITATION.NO_RESULT\n    </div>\n\n    <ng-include src=\"\'plugins/es/templates/invitation/list_invitation.html\'\"></ng-include>\n\n  </ion-content>\n\n  <ion-footer-bar class=\"stable-bg block\">\n    <!-- settings -->\n    <div class=\"pull-left\">\n      <a class=\"positive\"\n         ui-sref=\"app.es_settings\"\n         ng-click=\"closePopover()\"\n         translate>MENU.SETTINGS</a>\n    </div>\n\n    <!-- show all -->\n    <div class=\"pull-right\">\n      <a class=\"positive\"\n         ui-sref=\"app.view_invitations\"\n         ng-click=\"closePopover()\"\n         translate>COMMON.NOTIFICATIONS.SHOW_ALL</a>\n    </div>\n  </ion-footer-bar>\n</ion-popover-view>\n");
$templateCache.put("plugins/es/templates/invitation/view_invitations.html","<ion-view left-buttons=\"leftButtons\"\n          class=\"view-invitation\">\n  <ion-nav-title>\n    {{\'INVITATION.LIST.TITLE\' | translate}}\n  </ion-nav-title>\n\n  <ion-content class=\"padding no-padding-xs\" scroll=\"true\">\n\n    <!-- Buttons bar-->\n    <div class=\"hidden-xs hidden-sm padding text-center\" ng-if=\"!loading\">\n\n      <button class=\"button button-stable button-small-padding icon ion-loop ink\"\n              ng-click=\"load()\">\n      </button>\n\n      <button class=\"button button-raised button-calm ink\"\n              ng-click=\"showNewInvitationModal()\">\n        {{\'INVITATION.BTN_NEW_INVITATION\' | translate}}\n      </button>\n\n      <button class=\"button button-stable icon-right ink\"\n              ng-click=\"showActionsPopover($event)\">\n        &nbsp; <i class=\"icon ion-android-more-vertical\"></i>&nbsp;\n        {{\'COMMON.BTN_OPTIONS\' | translate}}\n      </button>\n    </div>\n\n    <div class=\"row no-padding\">\n      <div class=\"col col-20 hidden-xs hidden-sm\">&nbsp;</div>\n\n      <div class=\"col no-padding-xs\">\n\n        <div class=\"center padding\" ng-if=\"search.loading\">\n          <ion-spinner icon=\"android\"></ion-spinner>\n        </div>\n\n        <div class=\"padding gray\" ng-if=\"!search.loading && !search.results.length\" translate>\n          INVITATION.NO_RESULT\n        </div>\n\n        <ng-include src=\"\'plugins/es/templates/invitation/list_invitation.html\'\"></ng-include>\n\n      </div>\n\n      <div class=\"col col-20 hidden-xs hidden-sm\">&nbsp;</div>\n\n    </div>\n\n  </ion-content>\n\n  <button id=\"fab-new-invitation\"\n          class=\"button button-fab button-fab-bottom-right button-assertive icon ion-android-send visible-xs visible-sm spin\"\n          ng-click=\"showNewInvitationModal()\">\n  </button>\n</ion-view>\n");
$templateCache.put("plugins/es/templates/join/modal_join_extend.html","<ng-if ng-if=\":state:enable && extensionPoint === \'select-account-type\'\">\n\n  <!-- ornigzation wallet -->\n  <div class=\"item item-complex card stable-bg item-icon-left item-icon-right ink\"\n       ng-class=\"{ activated: accountTypeMember != null && !accountTypeMember }\"\n       ng-click=\"selectAccountType(\'organization\')\">\n    <div class=\"item-content item-text-wrap\">\n      <i class=\"item-image icon dark cion-registry-association\"></i>\n      <h2 translate>ACCOUNT.NEW.ORGANIZATION_ACCOUNT</h2>\n      <h4 class=\"gray\" translate>ACCOUNT.NEW.ORGANIZATION_ACCOUNT_HELP</h4>\n      <i class=\"icon dark ion-ios-arrow-right\"></i>\n    </div>\n  </div>\n\n</ng-if>\n\n<!-- Add a slide -->\n<ng-if ng-if=\":state:enable && extensionPoint === \'last-slide\'\">\n\n  <!-- STEP 6: organization type -->\n  <ion-slide-page>\n    <ion-content class=\"has-header\" scroll=\"false\">\n\n      <p>TOTO</p>\n\n    </ion-content>\n  </ion-slide-page>\n\n</ng-if>\n");
$templateCache.put("plugins/es/templates/message/compose.html","<ion-view left-buttons=\"leftButtons\"\n          id=\"composeMessage\">\n  <ion-nav-title>\n    <span class=\"visible-xs visible-sm\" nf-if=\"!isReply\" translate>MESSAGE.COMPOSE.TITLE</span>\n    <span class=\"visible-xs visible-sm\" nf-if=\"isReply\" translate>MESSAGE.COMPOSE.TITLE_REPLY</span>\n  </ion-nav-title>\n\n  <ion-nav-buttons side=\"secondary\">\n    <button class=\"button button-icon button-clear icon ion-android-send visible-xs\" ng-click=\"doSend()\">\n    </button>\n  </ion-nav-buttons>\n\n  <ion-content scroll=\"true\">\n    <div class=\"row\">\n      <div class=\"col col-20 hidden-xs hidden-sm\">&nbsp;</div>\n      <div class=\"col\">\n        <h2 class=\"hidden-xs hidden-sm\">\n          {{\'MESSAGE.COMPOSE.SUB_TITLE\'|translate}}\n        </h2>\n        <h4 class=\"hidden-xs hidden-sm\">&nbsp;</h4>\n        <ng-include src=\"\'plugins/es/templates/message/compose_form.html\'\"></ng-include>\n      </div>\n      <div class=\"col col-20 hidden-xs hidden-sm\">&nbsp;</div>\n    </div>\n  </ion-content>\n</ion-view>\n");
$templateCache.put("plugins/es/templates/message/compose_form.html","  <form name=\"messageForm\" novalidate=\"\" ng-submit=\"doSend()\">\n\n    <div class=\"list no-margin\"\n         ng-init=\"setForm(messageForm)\">\n\n      <!-- TODO: allow multi dest ?\n           Do IT with a ion-scroll - see https://stackoverflow.com/a/38308803 -->\n      <a class=\"item item-icon-right gray ink\"\n         ng-class=\"{\'item-input-error\': form.$submitted && !formData.destPub}\"\n         ng-click=\"showWotLookupModal()\">\n          <span class=\"gray\" translate>MESSAGE.COMPOSE.TO</span>\n          <span class=\"badge badge-royal\">{{destUid}}{{destPub | formatPubkey}}</span>&nbsp;\n          <i class=\"gray icon ion-ios-arrow-right\"></i>\n      </a>\n      <div class=\"form-errors\"\n           ng-if=\"form.$submitted && !formData.destPub\">\n        <div class=\"form-error\">\n          <span translate=\"ERROR.FIELD_REQUIRED\"></span>\n        </div>\n      </div>\n\n      <ion-item class=\"item-text-wrap ink\"\n           ng-class=\"{\'item-icon-right\': enableSelectWallet}\"\n           ng-click=\"showSelectWalletModal()\">\n          <span class=\"gray\" translate>TRANSFER.FROM</span>\n          <span class=\"badge badge-balanced animate-fade-in animate-show-hide\" ng-show=\"!loading\">\n              <ion-spinner icon=\"android\" ng-if=\"!walletData.pubkey\"></ion-spinner>\n              <span ng-if=\"walletData.pubkey && !walletData.isMember\">\n                <i class=\"ion-key\"></i> {{walletData.pubkey| formatPubkey}}&nbsp;&nbsp;\n              </span>\n              <span ng-if=\"walletData.isMember\">\n                <i class=\"ion-person\"></i> {{walletData.name||walletData.uid}}\n              </span>\n          </span>\n        <i class=\"gray icon ion-ios-arrow-right\" ng-if=\"enableSelectWallet\"></i>\n      </ion-item>\n\n      <!-- Object -->\n      <div class=\"item item-input\"\n             ng-class=\"{\'item-input-error\': form.$submitted && form.title.$invalid}\">\n        <!--<span class=\"input-label\">{{\'MESSAGE.COMPOSE.OBJECT\' | translate}}</span>-->\n        <input type=\"text\"\n               placeholder=\"{{\'MESSAGE.COMPOSE.OBJECT_HELP\' | translate}}\"\n               name=\"title\"\n               ng-model=\"formData.title\"\n               ng-maxlength=\"256\"\n               required>\n        </input>\n      </div>\n      <div class=\"form-errors\"\n           ng-show=\"form.$submitted && form.title.$error\"\n           ng-messages=\"form.title.$error\">\n        <div class=\"form-error\" ng-message=\"maxlength\">\n          <span translate=\"MESSAGE.ERROR.MESSAGE_CONTENT_TOO_LONG\" translate-values=\"{maxLength: 256}\"></span>\n        </div>\n        <div class=\"form-error\" ng-message=\"required\">\n          <span translate=\"ERROR.FIELD_REQUIRED\"></span>\n        </div>\n      </div>\n\n      <!-- Content -->\n      <div class=\"item item-input item-floating-label\"\n             ng-class=\"{\'item-input-error\': form.$submitted && form.content.$invalid}\">\n        <span class=\"input-label\">{{\'MESSAGE.COMPOSE.MESSAGE\' | translate}}</span>\n        <textarea placeholder=\"{{\'MESSAGE.COMPOSE.MESSAGE_HELP\' | translate}}\"\n                  name=\"content\"\n                  ng-model=\"formData.content\"\n                  rows=\"8\"\n                  ng-maxlength=\"5000\">\n        </textarea>\n      </div>\n      <div class=\"form-errors\"\n           ng-show=\"form.$submitted && form.content.$error\"\n           ng-messages=\"form.content.$error\">\n        <div class=\"form-error\" ng-message=\"maxlength\">\n          <span translate=\"MESSAGE.ERROR.MESSAGE_CONTENT_TOO_LONG\" translate-values=\"{maxLength: 5000}\"></span>\n        </div>\n      </div>\n\n    </div>\n\n    <div class=\"padding hidden-xs text-right\">\n      <button class=\"button button-clear button-dark ink\"\n              ng-click=\"cancel()\" type=\"button\"\n              translate>COMMON.BTN_CANCEL</button>\n      <button class=\"button button-positive ink\" type=\"submit\"\n              translate>TRANSFER.BTN_SEND</button>\n    </div>\n\n    <!-- Encryption info -->\n    <div class=\"list no-margin\">\n      <div class=\"item item-icon-left item-text-wrap\">\n        <i class=\"icon ion-ios-information-outline positive\"></i>\n        <h4 class=\"positive\" translate>MESSAGE.COMPOSE.ENCRYPTED_HELP</h4>\n      </div>\n    </div>\n  </form>\n\n");
$templateCache.put("plugins/es/templates/message/list.html","<div class=\"padding gray\" ng-if=\"!search.loading && !search.results.length\">\n  <span ng-if=\"search.type==\'last\'\">{{ (\'MESSAGE.NO_MESSAGE_\' + type) | upper | translate }}</span>\n  <span ng-if=\"search.type==\'text\'\" translate>COMMON.SEARCH_NO_RESULT</span>\n</div>\n\n<ion-list class=\"{{::motion.ionListClass}}\"\n          can-swipe=\"$root.device.enable\">\n\n  <ion-item\n    class=\"item item-border-large item-avatar item-icon-right ink\"\n    ng-repeat=\"msg in search.results\"\n    ui-sref=\"app.user_view_message({type:type, id:msg.id})\">\n\n    <i ng-if=\"::!msg.avatar\" class=\"item-image icon\" ng-class=\"{\'ion-person\': msg.uid, \'ion-email\': !msg.uid}\"></i>\n    <i ng-if=\"::msg.avatar\" class=\"item-image avatar\" style=\"background-image: url({{::msg.avatar.src}})\"></i>\n\n    <h4 class=\"pull-right hidden-xs hidden-sm\">\n      <span class=\"dark\"><i class=\"ion-clock\"></i> {{::msg.time|formatFromNow}}</span>\n      <span class=\"gray \">| {{::msg.time|formatDate}}</span>\n    </h4>\n    <h4 class=\"pull-right visible-xs visible-sm dark\"><i class=\"ion-clock\"></i> {{::msg.time|formatFromNow}}</h4>\n    <h3>\n      <a class=\"positive\"\n         ng-if=\"::msg.name||msg.uid\"\n         ui-sref=\"app.wot_identity({pubkey:msg.issuer, uid:msg.name||msg.uid})\">\n        <i class=\"ion-person\"></i>\n        {{::msg.name||msg.uid}}\n      </a>\n      <a class=\"gray\" ng-if=\"::!msg.name && !msg.uid\"\n         ui-sref=\"app.wot_identity({pubkey:msg.issuer})\">\n        <i class=\"ion-key\"></i>\n        {{::msg.issuer|formatPubkey}}\n      </a>\n    </h3>\n    <h2 ng-class=\"{\'unread\': !msg.read}\" ng-bind-html=\"::msg.title\"></h2>\n    <p ng-bind-html=\"::msg.summary||msg.content\"></p>\n    <i class=\"icon ion-ios-arrow-right \"></i>\n    <ion-option-button class=\"button-stable\"\n                       ng-click=\"showReplyModal($index)\"\n                       translate>MESSAGE.BTN_REPLY</ion-option-button>\n    <ion-option-button class=\"button-assertive\"\n                       ng-click=\"delete($index)\"\n                       translate>COMMON.BTN_DELETE</ion-option-button>\n\n  </ion-item>\n</ion-list>\n\n<ion-infinite-scroll\n  ng-if=\"!search.loading && search.hasMore\"\n  icon=\"ion-loading-c\"\n  on-infinite=\"showMore()\"\n  distance=\"10%\">\n</ion-infinite-scroll>\n");
$templateCache.put("plugins/es/templates/message/lookup.html","<ion-view left-buttons=\"leftButtons\" class=\"view-messages\">\n\n  <ion-tabs class=\"tabs-positive tabs-icon-top\">\n\n    <ion-tab title=\"{{\'MESSAGE.LIST.INBOX\'|translate}}\" icon=\"ion-archive\"\n      ui-sref=\"app.user_message.tab_inbox\">\n      <ion-nav-view name=\"tab_inbox\"></ion-nav-view>\n    </ion-tab>\n\n    <ion-tab title=\"{{\'MESSAGE.LIST.OUTBOX\'|translate}}\" icon=\"ion-paper-airplane\"\n             ui-sref=\"app.user_message.tab_outbox\">\n      <ion-nav-view name=\"tab_outbox\"></ion-nav-view>\n    </ion-tab>\n\n  </ion-tabs>\n\n</ion-view>\n");
$templateCache.put("plugins/es/templates/message/lookup_lg.html","<ion-view left-buttons=\"leftButtons\" class=\"view-messages\">\n  <ion-nav-title>\n    <span translate>MESSAGE.LIST.TITLE</span>\n  </ion-nav-title>\n\n  <ion-nav-buttons side=\"secondary\">\n    <button class=\"button button-icon button-clear visible-xs visible-sm\"\n            ng-click=\"showActionsPopover($event)\">\n      <i class=\"icon ion-android-more-vertical\"></i>\n    </button>\n  </ion-nav-buttons>\n\n  <ion-content class=\"padding no-padding-xs\">\n    <ion-refresher pulling-text=\"{{\'COMMON.BTN_REFRESH\' | translate}}\"\n                   on-refresh=\"refresh(true)\">\n    </ion-refresher>\n\n    <!-- Buttons bar-->\n    <div class=\"hidden-xs hidden-sm padding text-center\">\n\n      <button class=\"button button-stable button-small-padding icon ion-loop\" ng-click=\"load()\">\n      </button>\n\n      <button class=\"button button-calm icon ion-compose\"\n              ng-click=\"showNewMessageModal()\">\n        {{\'MESSAGE.BTN_COMPOSE\' | translate}}\n      </button>\n\n      <button class=\"button button-stable button-small-padding icon ion-android-more-vertical\"\n              ng-click=\"showActionsPopover($event)\"\n              title=\"{{\'COMMON.POPOVER_ACTIONS_TITLE\' | translate}}\">\n      </button>\n\n\n    </div>\n\n    <!-- button tabs -->\n    <div class=\"buttons-tabs border-bottom hidden-sm hidden-xs\">\n      <div class=\"pull-right\">\n        <div\n          class=\"button button-tab dark\"\n          title=\"{{\'MESSAGE.LIST.INBOX\' | translate}}\"\n          nav-transition=\"none\"\n          ng-class=\"{\'active\': type==\'inbox\'}\"\n          ui-sref=\"app.user_messages_lg_inbox\">\n          <i class=\"icon ion-archive\"></i>\n          {{\'MESSAGE.LIST.INBOX\' | translate}}\n        </div>\n        <a\n          class=\"button button-tab ink dark\"\n          title=\"{{\'MESSAGE.LIST.OUTBOX\' | translate}}\"\n          nav-transition=\"none\"\n          ng-class=\"{\'active\': type==\'outbox\'}\"\n          ui-sref=\"app.user_messages_lg_outbox\">\n          <i class=\"icon ion-paper-airplane\"></i>\n          {{\'MESSAGE.LIST.OUTBOX\' | translate}}\n        </a>\n      </div>\n    </div>\n\n    <div class=\"item no-padding\">\n      <div class=\"item-input \">\n        <i class=\"icon ion-search placeholder-icon\"></i>\n\n        <input type=\"text\"\n               class=\"visible-xs visible-sm\"\n               placeholder=\"{{\'MESSAGE.LIST.SEARCH_HELP\'|translate}}\"\n               ng-model=\"search.text\"\n               ng-model-options=\"{ debounce: 650 }\"\n               ng-change=\"doSearch()\"\n               on-return=\"doSearch()\"\n               select-on-click>\n        <input type=\"text\"\n               class=\"hidden-xs hidden-sm\"\n               placeholder=\"{{\'MESSAGE.LIST.SEARCH_HELP\'|translate}}\"\n               ng-model=\"search.text\"\n               on-return=\"doSearch()\">\n        <div class=\"helptip-anchor-center\">\n          <a id=\"helptip-message-search-text\"></a>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"padding-top hidden-xs\" style=\"display: block; height: 60px;\">\n\n      <div class=\"pull-left\" ng-if=\"!search.loading\">\n        <ng-if ng-if=\"search.type==\'last\'\">\n          <h4>{{ (\'MESSAGE.LIST.LAST_\' + type) | upper | translate}}</h4>\n        </ng-if>\n        <ng-if ng-if=\"search.type==\'text\'\">\n          <h4 translate>COMMON.RESULTS_LIST</h4>\n        </ng-if>\n      </div>\n\n      <div class=\"pull-right hidden-xs hidden-sm\">\n        <a class=\"button button-text button-small ink\"\n           ng-class=\"{\'button-text-positive\': search.type==\'last\'}\"\n           ng-click=\"doSearchLast()\">\n          <i class=\"icon ion-clock\"></i>\n          {{\'MESSAGE.LIST.BTN_LAST_MESSAGES\' | translate}}\n        </a>\n\n        <!-- Allow extension here -->\n        <cs-extension-point name=\"filter-buttons\"></cs-extension-point>\n        &nbsp;\n        <button class=\"button button-small button-stable ink\"\n                ng-click=\"doSearch()\">\n          {{\'COMMON.BTN_SEARCH\' | translate}}\n        </button>\n\n      </div>\n    </div>\n\n    <div class=\"center padding\" ng-if=\"search.loading\">\n      <ion-spinner icon=\"android\"></ion-spinner>\n    </div>\n\n    <!-- list -->\n    <ng-include src=\"\'plugins/es/templates/message/list.html\'\"></ng-include>\n\n  </ion-content>\n\n  <button id=\"fab-add-message-record\"\n          class=\"button button-fab button-fab-bottom-right button-assertive icon ion-compose visible-xs visible-sm spin\"\n          ng-click=\"showNewMessageModal()\">\n  </button>\n</ion-view>\n");
$templateCache.put("plugins/es/templates/message/lookup_popover_actions.html","<ion-popover-view class=\"fit has-header\">\n  <ion-header-bar>\n    <h1 class=\"title\" translate>MESSAGE.LIST.POPOVER_ACTIONS.TITLE</h1>\n  </ion-header-bar>\n  <ion-content scroll=\"false\">\n    <div class=\"list item-text-wrap\">\n      <a class=\"item item-icon-left ink\"\n         ng-class=\"{\'gray\': (type != \'inbox\' && !messages.length)}\"\n         ng-click=\"markAllAsRead()\">\n        <i class=\"icon ion-android-checkmark-circle\"></i>\n        {{\'COMMON.NOTIFICATIONS.MARK_ALL_AS_READ\' | translate}}\n      </a>\n\n      <a class=\"item item-icon-left assertive ink\"\n         ng-class=\"{\'gray\': !messages.length}\"\n         ng-click=\"deleteAll()\">\n        <i class=\"icon ion-trash-a\"></i>\n        {{\'MESSAGE.LIST.POPOVER_ACTIONS.DELETE_ALL\' | translate}}\n      </a>\n    </div>\n  </ion-content>\n</ion-popover-view>\n");
$templateCache.put("plugins/es/templates/message/modal_compose.html","<ion-modal-view id=\"composeMessage\"\n                class=\"modal-full-height\">\n  <ion-header-bar class=\"bar-positive\">\n    <button class=\"button button-clear visible-xs\" ng-click=\"closeModal()\" translate>COMMON.BTN_CANCEL</button>\n    <h1 class=\"title\" ng-if=\"!isReply\" translate>MESSAGE.COMPOSE.TITLE</h1>\n    <h1 class=\"title\" ng-if=\"isReply\" translate>MESSAGE.COMPOSE.TITLE_REPLY</h1>\n\n    <button class=\"button button-icon button-clear icon ion-android-send visible-xs\" ng-click=\"doSend()\">\n    </button>\n  </ion-header-bar>\n\n  <ion-content scroll=\"true\">\n      <ng-include src=\"\'plugins/es/templates/message/compose_form.html\'\"></ng-include>\n  </ion-content>\n</ion-modal-view>\n");
$templateCache.put("plugins/es/templates/message/popover_message.html","<ion-popover-view class=\"fit hidden-xs hidden-sm popover-notification\"\n                  ng-controller=\"PopoverMessageCtrl\">\n  <ion-header-bar class=\"stable-bg block\">\n    <div class=\"title\" translate>MESSAGE.NOTIFICATIONS.TITLE</div>\n\n    <div class=\"pull-right\">\n      <a class=\"positive\"\n         ng-click=\"showNewMessageModal()\"\n         translate>MESSAGE.BTN_COMPOSE</a>\n    </div>\n  </ion-header-bar>\n  <ion-content scroll=\"true\">\n    <div class=\"center padding\" ng-if=\"search.loading\">\n      <ion-spinner icon=\"android\"></ion-spinner>\n    </div>\n    <div class=\"padding gray\" ng-if=\"!search.loading && !search.results.length\" translate>\n      MESSAGE.NO_MESSAGE_INBOX\n    </div>\n\n    <ion-list>\n\n      <ion-item\n        ng-repeat=\"notification in search.results\"\n        class=\"item-border-large item-text-wrap ink item-avatar\"\n        ng-class=\"{\'unread\': !notification.read}\"\n        ng-click=\"select(notification)\">\n\n        <i ng-if=\"!notification.avatar\" class=\"item-image icon\" ng-class=\"{\'ion-person\': notification.uid, \'ion-email\': !notification.uid}\"></i>\n        <i ng-if=\"notification.avatar\" class=\"item-image avatar\" style=\"background-image: url({{::notification.avatar.src}})\"></i>\n\n        <h3>\n          <span translate>MESSAGE.NOTIFICATIONS.MESSAGE_RECEIVED</span>\n          <span class=\"positive\" ng-if=\"notification.uid\"><i class=\"ion-person\"></i>&thinsp;{{notification.name||notification.uid}}</span>\n          <span class=\"gray\" ng-if=\"!notification.uid\"><i class=\"ion-key\"></i>&thinsp;{{notification.issuer|formatPubkey}}</span>\n        </h3>\n        <h4>\n          <i class=\"icon ion-archive balanced\"></i>&thinsp;<span class=\"dark\">{{notification.time|formatFromNow}}</span>\n          <span class=\"gray\">| {{notification.time|formatDate}}</span>\n        </h4>\n      </ion-item>\n    </ion-list>\n\n    <ion-infinite-scroll\n      ng-if=\"!search.loading && search.hasMore\"\n      spinner=\"android\"\n      on-infinite=\"showMore()\"\n      distance=\"1%\">\n    </ion-infinite-scroll>\n  </ion-content>\n\n  <ion-footer-bar class=\"stable-bg block\">\n\n    <!-- show all -->\n    <div class=\"pull-right\">\n      <a class=\"positive\"\n         ui-sref=\"app.user_message.tab_inbox\"\n         ng-click=\"closePopover()\"\n         translate>COMMON.NOTIFICATIONS.SHOW_ALL</a>\n    </div>\n  </ion-footer-bar>\n</ion-popover-view>\n");
$templateCache.put("plugins/es/templates/message/view_message.html","<ion-view left-buttons=\"leftButtons\" class=\"view-message\">\n  <ion-nav-title>\n    <span translate>MESSAGE.VIEW.TITLE</span>\n  </ion-nav-title>\n\n  <ion-nav-buttons side=\"secondary\">\n\n    <button class=\"button button-icon button-clear icon ion-android-more-vertical visible-xs visible-sm\"\n            ng-click=\"showActionsPopover($event)\">\n    </button>\n  </ion-nav-buttons>\n\n  <ion-content scroll=\"true\">\n\n    <div class=\"row no-padding\">\n      <div class=\"col col-20 hidden-xs hidden-sm\">&nbsp;</div>\n\n      <div class=\"col no-padding\">\n\n        <div class=\"center padding\" ng-if=\"loading\">\n          <ion-spinner icon=\"android\"></ion-spinner>\n        </div>\n\n        <div class=\"list animate-fade-slide-in item-text-wrap\">\n\n          <!-- Buttons bar-->\n          <div class=\"item large-button-bar hidden-xs hidden-sm\">\n            <button class=\"button button-stable icon-left ink-dark\"\n                    ng-click=\"delete()\">\n              <i class=\"icon ion-trash-a assertive\"></i>\n              <span class=\"assertive\"> {{\'COMMON.BTN_DELETE\' | translate}}</span>\n            </button>\n            <button class=\"button button-stable icon ion-reply\"\n                    ng-click=\"showReplyModal()\">\n              {{\'MESSAGE.BTN_REPLY\' | translate}}\n            </button>\n            <!--<button class=\"button button-small button-stable icon ion-reply\"\n                    ng-click=\"showForwardModal()\">\n              {{\'MESSAGE.BTN_FORWARD\' | translate}}\n            </button>-->\n          </div>\n\n          <div class=\"item item-avatar\" ng-class=\"{\'item-avatar\': formData.avatar}\">\n\n            <i ng-if=\"!formData.avatar\" class=\"item-image\" ng-class=\"{\'ion-person\': formData.uid, \'ion-email\': !formData.uid}\"></i>\n            <i ng-if=\"formData.avatar\" class=\"item-image avatar\" style=\"background-image: url({{::formData.avatar.src}})\"></i>\n\n            <h1 class=\"title hidden-xs hidden-sm\" ng-bind-html=\"formData.title\"></h1>\n            <h4>\n              {{type == \'inbox\' ? \'MESSAGE.VIEW.SENDER\': \'MESSAGE.VIEW.RECIPIENT\'|translate}}\n              <a class=\"positive\" ui-sref=\"app.wot_identity({pubkey: (type == \'inbox\') ? formData.issuer : formData.recipient, uid: formData.name||formData.uid})\">\n                <span ng-if=\"formData.uid\">\n                  <i class=\"ion-person\"></i>\n                  {{formData.name||formData.uid}}\n                </span>\n                <span ng-if=\"!formData.uid\" class=\"gray\">\n                  <i class=\"ion-key gray\"></i>\n                  {{formData.name||(formData.issuer|formatPubkey)}}\n                </span>\n              </a>\n              <span class=\"hidden-xs hidden-sm\">\n                <i class=\"ion-clock\"></i>\n                {{formData.time|formatFromNow}}\n                <span class=\"gray\">|\n                  {{formData.time | formatDate}}\n                </span>\n              </span>\n            </h4>\n            <h5 class=\"gray visible-xs visible-sm\">\n              <i class=\"ion-clock\"></i> {{formData.time | formatDate}}\n            </h5>\n          </div>\n\n          <!-- content -->\n          <ion-item class=\"visible-xs visible-sm\">\n            <h1 class=\"title\" ng-bind-html=\"formData.title\"></h1>\n          </ion-item>\n\n          <!-- content -->\n          <ion-item>\n            <p ng-bind-html=\"formData.html\">\n            </p>\n\n            <div class=\"padding gray\" ng-if=\"!formData.content\" translate>\n              MESSAGE.VIEW.NO_CONTENT\n            </div>\n          </ion-item>\n\n\n        </div>\n      </div>\n\n      <div class=\"col col-20 hidden-xs hidden-sm\">&nbsp;</div>\n    </div>\n  </ion-content>\n\n  <button id=\"fab-view-message-reply\"\n          class=\"button button-fab button-fab-bottom-right button-calm icon ion-reply visible-xs visible-sm spin\"\n          ng-click=\"showReplyModal()\">\n  </button>\n</ion-view>\n");
$templateCache.put("plugins/es/templates/message/view_popover_actions.html","<ion-popover-view class=\"fit has-header\">\n  <ion-header-bar>\n    <h1 class=\"title\" translate>COMMON.POPOVER_ACTIONS_TITLE</h1>\n  </ion-header-bar>\n  <ion-content scroll=\"false\">\n    <div class=\"list item-text-wrap\">\n\n      <a class=\"item item-icon-left assertive ink\"\n         ng-click=\"delete()\">\n        <i class=\"icon ion-trash-a\"></i>\n        {{\'MESSAGE.VIEW.DELETE\' | translate}}\n      </a>\n    </div>\n  </ion-content>\n</ion-popover-view>\n");
$templateCache.put("plugins/es/templates/network/view_network_extend.html","<!-- Buttons section -->\n<ng-if ng-if=\":state:enable && extensionPoint === \'buttons\'\">\n  <a class=\"button button-text button-small ink\"\n     ui-sref=\"app.blockchain_search\" >\n    <i class=\"icon ion-android-search\"></i>\n    <span>{{\'COMMON.BTN_SEARCH\'|translate}}</span>\n  </a>\n</ng-if>\n");
$templateCache.put("plugins/es/templates/notification/list_notification.html","<ion-list class=\"{{::motion.ionListClass}}\">\n\n  <ion-item\n    ng-repeat=\"notification in search.results track by notification.id\"\n    class=\"item-border-large item-text-wrap ink item-avatar\"\n    ng-class=\"{\'unread\': !notification.read}\"\n    ng-click=\"select($event, notification)\">\n\n    <i ng-if=\"!notification.avatar\" class=\"item-image icon {{::notification.avatarIcon}}\"></i>\n    <i ng-if=\"notification.avatar\" class=\"item-image avatar\" style=\"background-image: url({{::notification.avatar.src}})\"></i>\n\n    <h3 trust-as-html=\"notification.message | translate:(notification.messageParams||notification)\"></h3>\n    <h4>\n      <i class=\"icon {{notification.icon}}\"></i>&thinsp;<span class=\"dark\">{{notification.time|formatFromNow}}</span>\n      <span class=\"gray\">| {{notification.time|formatDate}}</span>\n    </h4>\n  </ion-item>\n</ion-list>\n\n<ion-infinite-scroll\n  ng-if=\"!search.loading && search.hasMore\"\n  spinner=\"android\"\n  on-infinite=\"showMore()\"\n  distance=\"1%\">\n</ion-infinite-scroll>\n");
$templateCache.put("plugins/es/templates/notification/popover_actions.html","<ion-popover-view class=\"fit has-header\">\n  <ion-header-bar>\n    <h1 class=\"title\" translate>COMMON.POPOVER_ACTIONS_TITLE</h1>\n  </ion-header-bar>\n  <ion-content scroll=\"false\">\n    <div class=\"list item-text-wrap\">\n\n      <a class=\"item item-icon-left ink\"\n         ng-disabled=\"!search.results.length\"\n         ng-click=\"markAllAsRead()\">\n        <i class=\"icon ion-android-checkmark-circle\"></i>\n        {{\'COMMON.NOTIFICATIONS.MARK_ALL_AS_READ\' | translate}}\n      </a>\n\n    </div>\n  </ion-content>\n</ion-popover-view>\n");
$templateCache.put("plugins/es/templates/notification/popover_notification.html","<ion-popover-view class=\"fit hidden-xs hidden-sm popover-notification\"\n                  ng-controller=\"PopoverNotificationsCtrl\">\n  <ion-header-bar class=\"stable-bg block\">\n    <div class=\"title\" translate>COMMON.NOTIFICATIONS.TITLE</div>\n\n    <div class=\"pull-right\">\n      <a class=\"positive\"\n         ng-click=\"markAllAsRead()\"\n         translate>COMMON.NOTIFICATIONS.MARK_ALL_AS_READ</a>\n    </div>\n  </ion-header-bar>\n  <ion-content scroll=\"true\">\n    <div class=\"center padding\" ng-if=\"search.loading\">\n      <ion-spinner icon=\"android\"></ion-spinner>\n    </div>\n    <div class=\"padding gray\" ng-if=\"!search.loading && !search.results.length\" translate>\n      COMMON.NOTIFICATIONS.NO_RESULT\n    </div>\n\n    <ng-include src=\"\'plugins/es/templates/notification/list_notification.html\'\"></ng-include>\n\n  </ion-content>\n\n  <ion-footer-bar class=\"stable-bg block\">\n    <!-- settings -->\n    <div class=\"pull-left\">\n      <a class=\"positive\"\n         ui-sref=\"app.es_settings\"\n         ng-click=\"closePopover()\"\n         translate>MENU.SETTINGS</a>\n    </div>\n\n    <!-- show all -->\n    <div class=\"pull-right\">\n      <a class=\"positive\"\n         ui-sref=\"app.view_notifications\"\n         ng-click=\"closePopover()\"\n         translate>COMMON.NOTIFICATIONS.SHOW_ALL</a>\n    </div>\n  </ion-footer-bar>\n</ion-popover-view>\n");
$templateCache.put("plugins/es/templates/notification/view_notifications.html","<ion-view left-buttons=\"leftButtons\"\n          class=\"view-notification\">\n  <ion-nav-title>\n    {{\'COMMON.NOTIFICATIONS.TITLE\' | translate}}\n  </ion-nav-title>\n\n  <ion-nav-buttons side=\"secondary\">\n      <button class=\"button button-icon button-clear icon ion-android-more-vertical visible-xs visible-sm\"\n              ng-click=\"showActionsPopover($event)\">\n      </button>\n  </ion-nav-buttons>\n\n  <ion-content class=\"padding no-padding-xs\" scroll=\"true\">\n    <ion-refresher pulling-text=\"{{\'COMMON.BTN_REFRESH\' | translate}}\"\n                   on-refresh=\"refresh(true)\">\n    </ion-refresher>\n\n    <!-- Buttons bar-->\n    <div class=\"hidden-xs hidden-sm padding text-center\" >\n\n      <button class=\"button button-stable button-small-padding icon ion-loop ink\"\n              ng-click=\"refresh()\">\n      </button>\n\n      <button class=\"button button-raised icon-left ion-checkmark ink\"\n              ng-click=\"markAllAsRead()\">\n        {{\'COMMON.NOTIFICATIONS.MARK_ALL_AS_READ\' | translate}}\n      </button>\n    </div>\n\n    <div class=\"row no-padding\">\n      <div class=\"col col-20 hidden-xs hidden-sm\">&nbsp;</div>\n\n      <div class=\"col no-padding-xs\">\n\n        <div class=\"center padding\" ng-if=\"search.loading\">\n          <ion-spinner icon=\"android\"></ion-spinner>\n        </div>\n\n        <div class=\"padding gray\" ng-if=\"!search.loading && !search.results.length\" translate>\n          COMMON.NOTIFICATIONS.NO_RESULT\n        </div>\n\n        <ng-include src=\"\'plugins/es/templates/notification/list_notification.html\'\"></ng-include>\n\n\n      </div>\n\n      <div class=\"col col-20 hidden-xs hidden-sm\">&nbsp;</div>\n\n    </div>\n\n  </ion-content>\n\n</ion-view>\n");
$templateCache.put("plugins/es/templates/registry/edit_record.html","<ion-view left-buttons=\"leftButtons\" class=\"view-page\">\n  <ion-nav-title>\n    <span class=\"visible-xs\" ng-if=\"id\" ng-bind-html=\"formData.title\"></span>\n    <span class=\"visible-xs\" ng-if=\"!loading && !id\" translate>REGISTRY.EDIT.TITLE_NEW</span>\n  </ion-nav-title>\n\n  <ion-nav-buttons side=\"secondary\">\n      <button class=\"button button-icon button-clear visible-xs visible-sm\"\n              ng-class=\"{\'ion-android-send\':!id, \'ion-android-done\': id}\"\n              ng-click=\"save()\">\n      </button>\n  </ion-nav-buttons>\n\n  <ion-content scroll=\"true\">\n\n    <div class=\"hero\">\n      <div class=\"content\">\n        <i class=\"avatar\"\n           ng-class=\"avatarClass\"\n           ng-style=\"avatarStyle\">\n          <button class=\"button button-positive button-large button-clear flat icon ion-camera visible-xs visible-sm\"\n                  style=\"display: inline-block;\"\n                  ng-click=\"showAvatarModal()\"></button>\n          <button ng-if=\"avatar.src\"\n                  class=\"button button-positive button-large button-clear flat  visible-xs visible-sm\"\n                  style=\"display: inline-block; left: 85px; bottom:15px;\"\n                  ng-click=\"rotateAvatar()\">\n            <i class=\"icon-secondary ion-image\" style=\"left: 24px; top: 3px; font-size: 24px;\"></i>\n            <i class=\"icon-secondary ion-forward\" style=\"left: 26px; top: -13px;\"></i>\n          </button>\n          <button class=\"button button-positive button-large button-clear icon ion-camera hidden-xs hidden-sm\"\n                  ng-click=\"showAvatarModal()\"></button>\n        </i>\n        <h3 class=\"dark\">\n          <span ng-if=\"!loading && formData.title\">{{formData.title}}</span>\n          <span ng-if=\"!loading && !id && !formData.title\" translate>REGISTRY.EDIT.TITLE_NEW</span>\n        </h3>\n        <h4 class=\"dark\">\n          <ion-spinner ng-if=\"loading\" icon=\"android\"></ion-spinner>\n        </h4>\n      </div>\n    </div>\n\n      <div class=\"row no-padding\">\n\n        <div class=\"col col-20 hidden-xs hidden-sm\">&nbsp;</div>\n\n        <div class=\"col no-padding-xs\">\n\n          <form name=\"recordForm\" novalidate=\"\" ng-submit=\"save()\">\n            <div class=\"list {{::motion.ionListClass}}\"\n                 ng-init=\"setForm(recordForm)\">\n              <div class=\"item\" ng-if=\"id\">\n                <h4 class=\"gray\">\n                  <i class=\"icon ion-calendar\"></i>\n                  {{\'COMMON.LAST_MODIFICATION_DATE\'|translate}}&nbsp;{{formData.time | formatDate}}\n                </h4>\n                <div class=\"badge badge-balanced badge-editable\" ng-click=\"showRecordTypeModal()\">\n                  {{\'REGISTRY.TYPE.ENUM.\'+formData.type|upper|translate}}\n                </div>\n              </div>\n\n              <!-- pictures -->\n              <ng-include src=\"\'plugins/es/templates/common/edit_pictures.html\'\"></ng-include>\n\n              <div class=\"item item-divider\" translate>REGISTRY.GENERAL_DIVIDER</div>\n\n              <!-- title -->\n              <div class=\"item item-input item-floating-label\"\n                   ng-class=\"{\'item-input-error\': form.$submitted && form.title.$invalid}\">\n                <span class=\"input-label\" translate>REGISTRY.EDIT.RECORD_TITLE</span>\n                <input type=\"text\" placeholder=\"{{\'REGISTRY.EDIT.RECORD_TITLE_HELP\'|translate}}\"\n                       name=\"title\"\n                       id=\"registry-record-title\"\n                       ng-model=\"formData.title\"\n                       ng-minlength=\"3\"\n                       ng-required=\"true\"/>\n              </div>\n              <div class=\"form-errors\"\n                   ng-if=\"form.$submitted && form.title.$error\"\n                   ng-messages=\"form.title.$error\">\n                <div class=\"form-error\" ng-message=\"required\">\n                  <span translate=\"ERROR.FIELD_REQUIRED\"></span>\n                </div>\n                <div class=\"form-error\" ng-message=\"minlength\">\n                  <span translate=\"ERROR.FIELD_TOO_SHORT\"></span>\n                </div>\n              </div>\n\n              <!-- description -->\n              <div class=\"item item-input item-floating-label\">\n                <span class=\"input-label\" translate>REGISTRY.EDIT.RECORD_DESCRIPTION</span>\n                <textarea placeholder=\"{{\'REGISTRY.EDIT.RECORD_DESCRIPTION_HELP\'|translate}}\"\n                          ng-model=\"formData.description\"\n                          rows=\"8\" cols=\"10\">\n                </textarea>\n              </div>\n\n              <!-- category -->\n              <div class=\"item item-icon-right ink\"\n                   ng-if=\"loading || formData.type===\'company\' || formData.type===\'shop\'\"\n                   ng-class=\"{\'item-input-error\': form.$submitted && !formData.category.id, \'done in\': !loading}\"\n                   ng-click=\"showCategoryModal()\">\n                <span translate>REGISTRY.CATEGORY</span>\n                <span class=\"badge badge-royal\">{{formData.category.name | formatCategory}}</span>&nbsp;\n                <i class=\"gray icon ion-ios-arrow-right\"></i>\n              </div>\n              <input type=\"hidden\" name=\"category\" ng-model=\"formData.category.id\" required-if=\"formData.type==\'company\' || formData.type==\'shop\'\">\n              <div class=\"form-errors\"\n                   ng-if=\"form.$submitted && form.category.$error\"\n                   ng-messages=\"form.category.$error\">\n                <div class=\"form-error\" ng-message=\"required\">\n                  <span translate=\"ERROR.FIELD_REQUIRED\"></span>\n                </div>\n              </div>\n\n              <!-- position -->\n              <ng-include src=\"\'plugins/es/templates/common/edit_position.html\'\"></ng-include>\n\n              <!-- social networks -->\n              <ng-include src=\"\'plugins/es/templates/common/edit_socials.html\'\" ng-controller=\"ESSocialsEditCtrl\"></ng-include>\n\n              <div class=\"item item-divider\" translate>REGISTRY.TECHNICAL_DIVIDER</div>\n\n              <!-- pubkey  -->\n              <div class=\"item item-input item-floating-label\">\n                <span class=\"input-label\" translate>REGISTRY.EDIT.RECORD_PUBKEY</span>\n                <input type=\"text\" placeholder=\"{{\'REGISTRY.EDIT.RECORD_PUBKEY_HELP\'|translate}}\" ng-model=\"formData.pubkey\"/>\n              </div>\n\n            </div>\n\n            <div class=\"padding hidden-xs hidden-sm text-right\">\n              <button class=\"button button-clear button-dark ink\" ng-click=\"cancel()\" type=\"button\" translate>\n                COMMON.BTN_CANCEL\n              </button>\n              <button class=\"button button-positive button-raised ink\" type=\"submit\" ng-if=\"!id\" translate>\n                COMMON.BTN_PUBLISH\n              </button>\n              <button class=\"button button-assertive button-raised ink\" type=\"submit\" ng-if=\"id\" translate>\n                COMMON.BTN_SAVE\n              </button>\n            </div>\n          </form>\n        </div>\n\n        <div class=\"col col-20 hidden-xs hidden-sm\">&nbsp;</div>\n\n      </div>\n    </div>\n  </ion-content>\n</ion-view>\n");
$templateCache.put("plugins/es/templates/registry/lookup_form.html","\n<!-- selected location\n<a\n     class=\"button button-small button-text button-stable button-icon-event stable-900-bg\"\n     style=\"margin-right: 10px;\">\n  &nbsp;<i class=\"icon ion-location\"></i>\n  {{search.location}}\n  <i class=\"icon ion-close\" ng-click=\"removeLocation2()\">&nbsp;&nbsp;</i>\n</a>-->\n<form ng-submit=\"doSearch()\"/>\n  <div class=\"item no-padding\">\n\n    <div class=\"item-input\">\n      <i class=\"icon ion-search placeholder-icon\"></i>\n      <input type=\"text\"\n             class=\"visible-xs visible-sm\"\n             placeholder=\"{{\'REGISTRY.SEARCH.SEARCH_HELP\'|translate}}\"\n             ng-model=\"search.text\"\n             ng-model-options=\"{ debounce: 650 }\"\n             ng-change=\"doSearch()\"\n             on-return=\"doSearchText()\"\n             select-on-click>\n      <input type=\"text\"\n             class=\"hidden-xs hidden-sm\"\n             placeholder=\"{{\'REGISTRY.SEARCH.SEARCH_HELP\'|translate}}\"\n             id=\"registrySearchText\"\n             ng-model=\"search.text\"\n             on-return=\"doSearchText()\">\n    </div>\n\n    <div class=\"row double-padding-x item-text-wrap animate-show-hide ng-hide hidden-xs hidden-sm\"\n         ng-show=\"entered\"\n         ng-if=\"search.geoPoint || search.type || search.category\" >\n\n      <!-- selected location -->\n      <div ng-show=\"search.geoPoint\"\n           class=\"button button-small button-text button-stable button-icon-event stable-900-bg\"\n           style=\"margin-right: 10px;\">\n        &nbsp;<i class=\"icon ion-location\"></i>\n        <span ng-bind-html=\"search.location\"></span>\n        <i class=\"icon ion-close\" ng-click=\"removeLocation()\">&nbsp;&nbsp;</i>\n      </div>\n\n      <!-- selected type -->\n      <div ng-show=\"search.type\"\n           class=\"button button-small button-text button-stable button-icon-event stable-900-bg\"\n           style=\"margin-right: 10px;\" >\n        &nbsp;<i class=\"icon cion-page-{{search.type}}\"></i>\n        <span>{{\'REGISTRY.TYPE.ENUM.\'+search.type|uppercase|translate}}</span>\n        <i class=\"icon ion-close\" ng-click=\"removeType()\">&nbsp;&nbsp;</i>\n      </div>\n\n      <!-- selected category -->\n      <div ng-show=\"search.category.name\"\n           class=\"button button-small button-text button-stable button-icon-event stable-900-bg\"\n           style=\"margin-right: 10px;\">\n        &nbsp;<i class=\"icon ion-flag\"></i>\n        <span>{{search.category.name|truncText:40}}</span>\n        <i class=\"icon ion-close\" ng-click=\"removeCategory()\">&nbsp;&nbsp;</i>\n      </div>\n    </div>\n  </div>\n\n  <!-- location -->\n  <ng-include src=\"::\'plugins/es/templates/common/item_location_search.html\'\"\n              ng-if=\"entered && options.location.show && (!search.geoPoint || smallscreen)\"\n              ng-controller=\"ESSearchPositionItemCtrl\"></ng-include>\n\n  <!-- options -->\n  <ng-include src=\"::\'plugins/es/templates/registry/lookup_form_options.html\'\"></ng-include>\n\n</form>\n\n<div class=\"buttons-block padding-top hidden-xs hidden-sm\">\n\n  <div class=\"pull-left\" >\n\n    <a class=\"button button-text button-small ink \"\n       ng-class=\"{\'button-text-stable\': !search.advanced, \'button-text-positive\': search.advanced}\"\n       ng-click=\"search.advanced=!search.advanced\">\n      {{\'REGISTRY.SEARCH.BTN_ADVANCED_SEARCH\' | translate}}\n      <i class=\"icon\" ng-class=\"{\'ion-arrow-down-b\': !search.advanced, \'ion-arrow-up-b\': search.advanced}\"></i>\n    </a>\n\n    &nbsp;\n\n  </div>\n\n  <div class=\"pull-right\">\n\n    <a ng-if=\"enableFilter\"\n       class=\"button button-text button-small ink\"\n       ng-class=\"{\'button-text-positive\': search.lastRecords}\"\n       ng-click=\"doGetLastRecords()\">\n      <i class=\"icon ion-clock\"></i>\n      {{\'REGISTRY.SEARCH.BTN_LAST_RECORDS\' | translate}}\n    </a>\n    &nbsp;\n\n    <!-- Allow extension here -->\n    <cs-extension-point name=\"filter-buttons\"></cs-extension-point>\n\n    &nbsp;\n\n    <button class=\"button button-small button-stable ink\"\n            ng-click=\"doSearchText()\">\n      {{\'COMMON.BTN_SEARCH\' | translate}}\n    </button>\n  </div>\n</div>\n\n\n<div class=\"padding-xs\" style=\"display: block; height: 60px;\">\n  <div class=\"pull-left ng-hide\" ng-show=\"!search.loading && search.results\">\n    <ng-if ng-if=\"search.lastRecords\">\n      <h4  translate>REGISTRY.SEARCH.LAST_RECORDS</h4>\n      <small class=\"gray no-padding\" ng-if=\"search.total\">\n        <span ng-if=\"search.geoPoint && search.total\">{{\'REGISTRY.SEARCH.LAST_RECORD_COUNT_LOCATION\'|translate:{count: search.total, location: search.location} }}</span>\n        <span ng-if=\"!search.geoPoint && search.total\">{{\'REGISTRY.SEARCH.LAST_RECORD_COUNT\'|translate:{count: search.total} }}</span>\n      </small>\n    </ng-if>\n\n    <ng-if ng-if=\"!search.lastRecords\">\n      <h4 translate>COMMON.RESULTS_LIST</h4>\n      <small class=\"gray no-padding\" ng-if=\"search.total\">\n        <span ng-if=\"search.geoPoint && search.total\">{{\'REGISTRY.SEARCH.RESULT_COUNT_LOCATION\'|translate:{count: search.total, location: search.location} }}</span>\n        <span ng-if=\"!search.geoPoint && search.total\">{{\'REGISTRY.SEARCH.RESULT_COUNT\'|translate:{count: search.total} }}</span>\n      </small>\n    </ng-if>\n\n  </div>\n</div>\n\n<div class=\"center padding\" ng-if=\"search.loading\">\n  <ion-spinner icon=\"android\"></ion-spinner>\n</div>\n\n<div class=\"padding assertive\" ng-if=\"!search.loading && search.results.length===0\" translate>\n  COMMON.SEARCH_NO_RESULT\n</div>\n");
$templateCache.put("plugins/es/templates/registry/lookup_form_options.html","\n  <!-- removeIf(device) -->\n  <div class=\"item item-icon-left item-icon-right item-input stable-bg\"\n       remove-if=\"device\"\n       ng-click=\"showRecordTypeModal($event)\"\n       ng-if=\"!smallscreen && search.advanced && !search.type\">\n    <b class=\"icon-secondary ion-help gray\" style=\"left:10px; top: -8px;\"></b>\n    <b class=\"icon-secondary cion-page-association gray\" style=\"left:14px; top: 2px;\"></b>\n    <b class=\"icon-secondary cion-page-company gray\" style=\"left:28px; top: -6px;\"></b>\n\n    <span class=\"input-label item-icon-left-padding\" translate>REGISTRY.SEARCH.TYPE</span>\n    <i class=\"gray icon ion-ios-arrow-right\"></i>\n  </div>\n\n  <div class=\"item item-icon-left item-icon-right item-input stable-bg\"\n       remove-if=\"device\"\n       ng-click=\"showCategoryModal($event)\"\n       ng-if=\"!smallscreen && search.advanced && !search.category\">\n    <i class=\"icon ion-flag gray\"></i>\n    <span class=\"input-label item-icon-left-padding\" translate>REGISTRY.CATEGORY</span>\n    <i class=\"gray icon ion-ios-arrow-right\"></i>\n  </div>\n\n  <div class=\"item item-icon-left item-input item-select stable-bg\" ng-if=\"search.advanced && options.location.show\">\n    <i class=\"icon ion-arrow-resize gray\"></i>\n    <span class=\"input-label item-icon-left-padding \" translate>LOCATION.DISTANCE</span>\n    <label>\n      <select ng-model=\"search.geoDistance\" class=\"col-border-left\"\n              ng-options=\"i as (geoDistanceLabels[i].labelKey | translate:geoDistanceLabels[i].labelParams ) for i in geoDistances track by i\">\n      </select>\n    </label>\n  </div>\n");
$templateCache.put("plugins/es/templates/registry/lookup_lg.html","<ion-view left-buttons=\"leftButtons\">\n  <ion-nav-title>\n    {{\'REGISTRY.SEARCH.TITLE\' | translate}}\n  </ion-nav-title>\n\n  <ion-content class=\"lookupForm padding no-padding-xs\">\n\n    <ng-include src=\"::\'plugins/es/templates/wot/lookup_lg_extend.html\'\" ng-init=\"enable= true; showNewPageButton=true;\"></ng-include>\n\n    <ng-include src=\"::\'plugins/es/templates/registry/lookup_form.html\'\"></ng-include>\n\n    <ng-include src=\"::\'plugins/es/templates/registry/lookup_list_lg.html\'\"></ng-include>\n  </ion-content>\n\n  <button id=\"fab-add-registry-record\"\n          class=\"button button-fab button-fab-bottom-right button-assertive icon ion-plus hidden-md hidden-lg spin\"\n          ng-click=\"showNewPageModal()\">\n  </button>\n</ion-view>\n");
$templateCache.put("plugins/es/templates/registry/lookup_list.html","\n<ion-list class=\"{{::motion.ionListClass}}\"\n          ng-if=\"!search.loading && search.results\">\n\n  <div class=\"item item-avatar item-icon-right item-border-large ink\"\n       ng-repeat=\"item in search.results\"\n       ui-sref=\"app.view_page({id: item.id, title: item.urlTitle})\">\n\n    <i ng-if=\"::!item.avatar\" class=\"item-image icon cion-page-{{::item.type}}\"></i>\n    <i ng-if=\"::item.avatar\" class=\"item-image avatar\" style=\"background-image: url({{::item.avatar.src}})\"></i>\n\n    <h2 ng-bind-html=\"::item.title\"></h2>\n    <h4>\n      <span class=\"dark\" ng-if=\"::item.city\">\n        <b class=\"ion-location\"></b>\n        <span ng-bind-html=\"::item.city\"></span>\n      </span>\n      <span class=\"gray\" ng-if=\"::item.distance\">\n        ({{::item.distance|formatDecimal}} {{::geoUnit}})\n      </span>\n    </h4>\n    <h4 class=\"gray\" ng-if=\"::item.time && search.lastRecords\">\n      <i class=\"ion-clock\" ></i>\n      {{::item.time | formatFromNow}}\n    </h4>\n    <h4 class=\"gray\" ng-if=\"!search.lastRecords\">\n      <i class=\"cion-page-{{::item.type}}\"></i>\n      <span ng-if=\"item.category\">{{::item.category.name}}</span>\n      <span ng-if=\"!item.category\">{{::\'REGISTRY.TYPE.ENUM.\'+item.type|uppercase|translate}}</span>\n    </h4>\n    <i class=\"icon ion-ios-arrow-right \"></i>\n  </div>\n</ion-list>\n");
$templateCache.put("plugins/es/templates/registry/lookup_list_lg.html","\n\n<div class=\"list {{::motion.ionListClass}}\"\n          ng-if=\"!search.loading && search.results && search.results.length > 0\">\n\n  <a ng-repeat=\"item in search.results\"\n     class=\"item item-record item-border-large ink padding-xs\"\n     ui-sref=\"app.view_page({id: item.id, title: item.urlTitle})\">\n\n    <div class=\"row row-record\">\n      <div class=\"col item-text-wrap item-avatar-left-padding\"\n           ng-class=\"::{\'item-avatar\': item.avatar || item.type}\">\n        <i class=\"item-image icon cion-page-{{::item.type}}\" ng-if=\"::!item.avatar\"></i>\n        <i class=\"item-image avatar\" style=\"background-image: url({{::item.avatar.src}})\" ng-if=\"::item.avatar\"></i>\n        <h2 ng-bind-html=\"::item.title\"></h2>\n        <h4>\n          <span class=\"dark\" ng-if=\"::item.city\">\n            <b class=\"ion-location\"></b>\n            <span ng-bind-html=\"::item.city\"></span>\n          </span>\n          <span class=\"gray\" ng-if=\"::item.distance\">\n            ({{::item.distance|formatDecimal}} {{::geoUnit}})\n          </span>\n        </h4>\n        <h4>\n          <span class=\"gray\" ng-if=\"::item.time && search.lastRecords\">\n            <b class=\"ion-clock\" ></b>\n            {{::item.time | formatFromNow}}\n          </span>\n          <span ng-if=\"::item.tags\" class=\"dark\">\n           <ng-repeat ng-repeat=\"tag in ::item.tags\">\n             #<ng-bind-html ng-bind-html=\"::tag\"></ng-bind-html>\n           </ng-repeat>\n          </span>\n        </h4>\n        <span  ng-if=\"::item.picturesCount > 1\"\n               class=\"badge badge-balanced badge-picture-count\">{{::item.picturesCount}}&nbsp;<i class=\"icon ion-camera\"></i></span>\n      </div>\n      <div class=\"col col-20 hidden-xs hidden-sm\">\n        <h3 class=\"gray\">\n          <ng-if ng-if=\"::item.category\">{{::item.category.name}}</ng-if>\n          <ng-if ng-if=\"::!item.category\">{{::\'REGISTRY.TYPE.ENUM.\'+item.type|uppercase|translate}}</ng-if>\n        </h3>\n      </div>\n      <div class=\"col hidden-xs\">\n        <h4 class=\"text-wrap\">\n          <span class=\"visible-sm\">\n            <b class=\"ion-flag\" ></b>\n            <ng-if ng-if=\"::item.category\">{{::item.category.name|truncText:50}}</ng-if>\n            <ng-if ng-if=\"::!item.category\">{{::\'REGISTRY.TYPE.ENUM.\'+item.type|uppercase|translate}}</ng-if>\n          </span>\n          <span class=\"gray text-italic\" ng-if=\"::item.description\">\n            <b class=\"ion-quote\" ></b>\n            <span ng-bind-html=\"::item.description|truncText:500\" ng-if=\"::item.description\"></span>\n          </span>\n        </h4>\n      </div>\n    </div>\n\n  </a>\n</div>\n\n<ion-infinite-scroll\n  ng-if=\"!search.loading && search.hasMore\"\n  spinner=\"android\"\n  on-infinite=\"showMore()\"\n  distance=\"10%\">\n</ion-infinite-scroll>\n");
$templateCache.put("plugins/es/templates/registry/lookup_popover_actions.html","<ion-popover-view class=\"fit has-header\">\n  <ion-header-bar>\n    <h1 class=\"title\" translate>COMMON.POPOVER_ACTIONS_TITLE</h1>\n  </ion-header-bar>\n  <ion-content scroll=\"false\">\n    <div class=\"list item-text-wrap\">\n\n      <!-- new page -->\n      <a class=\"item item-icon-left ink\"\n         ng-click=\"showNewPageModal();\">\n        <i class=\"icon ion-plus\"></i>\n        <span translate>REGISTRY.BTN_NEW</span>\n      </a>\n\n    </div>\n  </ion-content>\n</ion-popover-view>\n");
$templateCache.put("plugins/es/templates/registry/lookup_popover_filters.html","<ion-popover-view class=\"fit has-header \">\n  <ion-header-bar>\n    <h1 class=\"title\" translate>COMMON.POPOVER_FILTER_TITLE</h1>\n  </ion-header-bar>\n  <ion-content scroll=\"false\">\n    <div class=\"list item-text-wrap\">\n\n      <!-- last record -->\n      <a class=\"item item-icon-left ink\"\n         ng-click=\"doGetLastRecords()\">\n        <i class=\"icon ion-clock\"></i>\n        {{\'REGISTRY.SEARCH.BTN_LAST_RECORDS\' | translate}}\n      </a>\n\n      <!-- advanced options -->\n      <a class=\"item item-icon-left ink\"\n         ng-click=\"toggleAdvanced();\">\n        <i class=\"icon ion-android-checkbox-outline-blank\" ng-show=\"!search.advanced\"></i>\n        <i class=\"icon ion-android-checkbox-outline\" ng-show=\"search.advanced\"></i>\n        <span translate>REGISTRY.SEARCH.POPOVER_FILTERS.BTN_ADVANCED_SEARCH</span>\n      </a>\n    </div>\n  </ion-content>\n</ion-popover-view>\n");
$templateCache.put("plugins/es/templates/registry/modal_record_type.html","<ion-modal-view>\n  <ion-header-bar class=\"bar-positive\">\n    <button class=\"button button-clear\" ng-click=\"closeModal()\" translate>COMMON.BTN_CANCEL</button>\n    <h1 class=\"title\" translate>{{getParameters().title||\'REGISTRY.TYPE.TITLE\'|translate}}</h1>\n  </ion-header-bar>\n\n  <ion-content class=\"lookupForm\">\n    <div class=\"list padding\">\n      <h3 translate>REGISTRY.TYPE.SELECT_TYPE</h3>\n      <button class=\"button button-block button-stable icon-left cion-page-shop\"\n              ng-click=\"closeModal(\'shop\')\"\n              translate>REGISTRY.TYPE.ENUM.SHOP</button>\n\n      <button class=\"button button-block button-stable icon-left cion-page-association\"\n              ng-click=\"closeModal(\'association\')\"\n              translate>REGISTRY.TYPE.ENUM.ASSOCIATION</button>\n\n      <button class=\"button button-block button-stable icon-left cion-page-company\"\n              ng-click=\"closeModal(\'company\')\"\n              translate>REGISTRY.TYPE.ENUM.COMPANY</button>\n\n      <button class=\"button button-block button-stable icon-left cion-page-institution\"\n              ng-click=\"closeModal(\'institution\')\"\n              translate>REGISTRY.TYPE.ENUM.INSTITUTION</button>\n    </div>\n  </ion-content>\n</ion-modal-view>\n");
$templateCache.put("plugins/es/templates/registry/view_popover_actions.html","<ion-popover-view class=\"fit has-header\">\n  <ion-header-bar>\n    <h1 class=\"title\"  translate>REGISTRY.VIEW.MENU_TITLE</h1>\n  </ion-header-bar>\n  <ion-content scroll=\"false\">\n    <div class=\"list item-text-wrap\">\n\n      <a class=\"item item-icon-left ink\"\n         ng-click=\"showSharePopover($event)\">\n        <i class=\"icon ion-android-share-alt\"></i>\n        {{\'COMMON.BTN_SHARE\' | translate}}\n      </a>\n\n      <a class=\"item item-icon-left assertive ink\"\n         ng-if=\"canEdit\"\n         ng-click=\"delete()\">\n        <i class=\"icon ion-trash-a\"></i>\n        {{\'COMMON.BTN_DELETE\' | translate}}\n      </a>\n    </div>\n  </ion-content>\n</ion-popover-view>\n");
$templateCache.put("plugins/es/templates/registry/view_record.html","<ion-view left-buttons=\"leftButtons\" class=\"view-page\">\n  <ion-nav-title>\n\n  </ion-nav-title>\n\n  <ion-nav-buttons side=\"secondary\">\n    <button class=\"button button-bar button-icon button-clear visible-xs visible-sm\" ng-click=\"edit()\" ng-if=\"canEdit\">\n      <i class=\"icon ion-android-create\"></i>\n    </button>\n    <button class=\"button button-bar button-icon button-clear icon ion-android-more-vertical visible-xs visible-sm\"\n            ng-click=\"showActionsPopover($event)\">\n    </button>\n  </ion-nav-buttons>\n\n  <ion-content scroll=\"true\" class=\"refresher-top-bg\">\n\n    <ion-refresher pulling-text=\"{{\'COMMON.BTN_REFRESH\' | translate}}\"\n                   on-refresh=\"load()\">\n    </ion-refresher>\n\n    <div class=\"hero\">\n      <div class=\"content\" ng-if=\"!loading\">\n        <i class=\"avatar cion-page-{{formData.type}}\" ng-if=\"!formData.avatar\"></i>\n        <i class=\"avatar\" ng-style=\"{{avatarStyle}}\" ng-if=\"formData.avatar\"></i>\n        <h3><span class=\"dark\" ng-bind-html=\"formData.title\"></span></h3>\n        <h4>&nbsp;</h4>\n      </div>\n      <h4 class=\"content dark\" ng-if=\"loading\">\n        <ion-spinner icon=\"android\"></ion-spinner>\n      </h4>\n      <h4 class=\"content gray hidden-xs hidden-sm\" ng-if=\"formData.city\">\n        <i class=\"icon ion-location\"></i>\n        <span ng-bind-html=\"formData.city\"></span>\n      </h4>\n    </div>\n\n    <div class=\"row no-padding-xs\">\n      <div class=\"col col-20 hidden-xs hidden-sm\">&nbsp;\n      </div>\n\n      <div class=\"col list animate-fade-slide-in item-text-wrap no-padding-xs\">\n\n        <div class=\"item\">\n          <h2 class=\"gray\">\n            <a ng-if=\"formData.city\" ui-sref=\"app.wot_lookup.tab_registry({location:formData.city})\">\n              <i class=\"icon ion-location\"></i>\n              <span ng-bind-html=\"formData.city\"></span>\n            </a>\n            <span ng-if=\"formData.city && formData.type\">&nbsp;|&nbsp;</span>\n            <a ng-if=\"formData.type\" ui-sref=\"app.wot_lookup.tab_registry({type:formData.type})\">\n              <i class=\"cion-page-{{formData.type}}\"></i>\n              {{\'REGISTRY.TYPE.ENUM.\'+formData.type|upper|translate}}\n            </a>\n          </h2>\n          <h4>\n            <i class=\"icon ion-clock\" ng-if=\"formData.time\"></i>\n            <span translate>COMMON.SUBMIT_BY</span>\n            <a ng-class=\"{\'positive\': issuer.uid, \'gray\': !issuer.uid}\"\n               ui-sref=\"app.wot_identity({pubkey:issuer.pubkey, uid: issuer.name||issuer.uid})\">\n              <ng-if ng-if=\"issuer.uid\">\n                <i class=\"icon ion-person\"></i>\n                {{::issuer.name||issuer.uid}}\n              </ng-if>\n              <span ng-if=\"!issuer.uid\">\n                <i class=\"icon ion-key\"></i>\n                {{issuer.pubkey|formatPubkey}}\n              </span>\n            </a>\n            <span >\n                {{formData.time|formatFromNow}}\n                <h4 class=\"gray hidden-xs\">|\n                  {{formData.time | formatDate}}\n                </h4>\n              </span>\n          </h4>\n        </div>\n\n        <!-- Buttons bar-->\n        <a id=\"registry-share-anchor-{{id}}\"></a>\n        <div class=\"item large-button-bar hidden-xs hidden-sm\">\n          <button class=\"button button-stable button-small-padding icon ion-android-share-alt\"\n                  ng-click=\"showSharePopover($event)\">\n          </button>\n          <button class=\"button button-calm ink-dark\"\n                  ng-if=\"showTransfer\"\n                  ng-click=\"showTransferModal({pubkey:formData.pubkey, uid: formData.title})\">\n            {{\'COMMON.BTN_SEND_MONEY\' | translate}}\n          </button>\n          <button class=\"button button-stable icon-left ink-dark\"\n                  ng-if=\"canEdit\"\n                  ng-click=\"delete()\">\n            <i class=\"icon ion-trash-a assertive\"></i>\n            <span class=\"assertive\"> {{\'COMMON.BTN_DELETE\' | translate}}</span>\n          </button>\n          <button class=\"button button-calm icon-left ion-android-create ink\"\n                  ng-if=\"canEdit\"\n                  ng-click=\"edit()\">\n            {{\'COMMON.BTN_EDIT\' | translate}}\n          </button>\n        </div>\n\n        <div class=\"item\">\n          <h2 trust-as-html=\"formData.description\"></h2>\n        </div>\n\n        <div class=\"item\" ng-if=\"formData.category || formData.address\">\n          <h4 ng-if=\"formData.category\">\n            <span class=\"gray\" translate>REGISTRY.VIEW.CATEGORY</span>\n            <a class=\"positive\" ng-if=\"formData.category\" ui-sref=\"app.wot_lookup.tab_registry({category:formData.category.id})\">\n              <span ng-bind-html=\"formData.category.name\"></span>\n            </a>\n          </h4>\n          <h4 ng-if=\"formData.address\">\n            <span class=\"gray\" translate>REGISTRY.VIEW.LOCATION</span>\n            <a class=\"positive\" target=\"_system\" href=\"https://www.openstreetmap.org/search?query={{formData.address}},%20{{formData.city}}\">\n              <span ng-bind-html=\"formData.address\"></span>\n              <span ng-if=\"formData.city\"> - </span>\n              <span ng-bind-html=\"formData.city\"></span>\n            </a>\n          </h4>\n        </div>\n\n        <!-- Socials networks -->\n        <ng-if ng-if=\"formData.socials && formData.socials.length>0\">\n          <div class=\"item item-icon-left\"\n                    type=\"no-padding item-text-wrap\"\n                    ng-repeat=\"social in formData.socials track by social.url\"\n                    id=\"social-{{social.url|formatSlug}}\">\n            <i class=\"icon ion-social-{{social.type}}\"\n               ng-class=\"{\'ion-bookmark\': social.type == \'other\', \'ion-link\': social.type == \'web\', \'ion-email\': social.type == \'email\'}\"></i>\n            <p ng-if=\"social.type && social.type != \'web\'\">{{social.type}}</p>\n            <h2>\n              <a ng-click=\"openLink($event, social.url, social.type)\">{{social.url}}</a>\n            </h2>\n          </div>\n        </ng-if>\n\n        <!-- pubkey -->\n        <div class=\"item item-icon-left item-text-wrap ink\"\n             ng-if=\"formData.pubkey\"\n             copy-on-click=\"{{::formData.pubkey}}\">\n          <i class=\"icon ion-key\"></i>\n          <span translate>REGISTRY.EDIT.RECORD_PUBKEY</span>\n          <h4 class=\"dark\">{{::formData.pubkey}}</h4>\n        </div>\n\n        <div class=\"lazy-load\">\n\n          <!-- pictures -->\n          <ng-include src=\"\'plugins/es/templates/common/view_pictures.html\'\"></ng-include>\n\n          <!-- comments -->\n          <ng-include src=\"\'plugins/es/templates/common/view_comments.html\'\"></ng-include>\n        </div>\n      </div>\n\n      <div class=\"col col-20 hidden-xs hidden-sm\">&nbsp;\n      </div>\n    </div>\n  </ion-content>\n\n  <button class=\"button button-fab button-fab-bottom-right button-assertive icon ion-android-send visible-xs visible-sm\"\n          ng-if=\"formData.pubkey && !isUserPubkey(formData.pubkey)\"\n          ng-click=\"showTransferModal({pubkey: formData.pubkey, uid: formData.title})\">\n  </button>\n\n\n</ion-view>\n");
$templateCache.put("plugins/es/templates/registry/view_wallet_pages.html","<ion-view left-buttons=\"leftButtons\"\n          class=\"view-notification\">\n  <ion-nav-title>\n    {{\'REGISTRY.MY_PAGES\' | translate}}\n  </ion-nav-title>\n\n  <ion-nav-buttons side=\"secondary\">\n\n    <button class=\"button button-icon button-clear icon ion-loop visible-xs visible-sm\" ng-click=\"load()\">\n    </button>\n\n    <button class=\"button button-icon button-clear visible-xs visible-sm\"\n            ng-click=\"showActionsPopover($event)\">\n      <i class=\"icon ion-android-more-vertical\"></i>\n    </button>\n  </ion-nav-buttons>\n\n  <ion-content class=\"padding no-padding-xs\" scroll=\"true\">\n\n    <!-- Buttons bar -->\n    <div class=\"hidden-xs hidden-sm padding text-center\">\n\n      <button class=\"button button-stable button-small-padding icon ion-loop ink\"\n              ng-click=\"doUpdate()\"\n              title=\"{{\'COMMON.BTN_REFRESH\' | translate}}\">\n      </button>\n\n      <button class=\"button button-calm icon-left ink\"\n              ng-click=\"showNewPageModal()\">\n        {{\'REGISTRY.BTN_NEW\' | translate}}\n      </button>\n    </div>\n\n    <div class=\"center padding\" ng-if=\"search.loading\">\n      <ion-spinner icon=\"android\"></ion-spinner>\n    </div>\n\n    <div class=\"center padding gray\" ng-if=\"!search.loading && !search.results.length\" translate>\n      REGISTRY.NO_PAGE\n    </div>\n\n    <ng-include src=\"\'plugins/es/templates/registry/lookup_list.html\'\"></ng-include>\n\n  </ion-content>\n\n  <button id=\"fab-wallet-add-registry-record\"\n          class=\"button button-fab button-fab-bottom-right button-assertive hidden-md hidden-lg drop\"\n          ng-click=\"showNewPageModal()\">\n    <i class=\"icon ion-plus\"></i>\n  </button>\n</ion-view>\n");
$templateCache.put("plugins/es/templates/settings/plugin_settings.html","<ion-view left-buttons=\"leftButtons\"\n          class=\"settings\">\n  <ion-nav-title translate>ES_SETTINGS.PLUGIN_NAME</ion-nav-title>\n\n  <ion-content scroll=\"true\">\n\n    <div class=\"item item-toggle dark\">\n      <div class=\"input-label\" translate>ES_SETTINGS.ENABLE_TOGGLE</div>\n      <label class=\"toggle toggle-royal\">\n        <input type=\"checkbox\" ng-model=\"formData.enable\" >\n        <div class=\"track\">\n          <div class=\"handle\"></div>\n        </div>\n      </label>\n    </div>\n\n    <div class=\"item item-toggle dark\">\n      <div class=\"input-label\" translate>ES_SETTINGS.ENABLE_REMOTE_STORAGE</div>\n      <h4 class=\"gray\" ng-bind-html=\"\'ES_SETTINGS.ENABLE_REMOTE_STORAGE_HELP\' | translate\"></h4>\n      <label class=\"toggle toggle-royal\">\n        <input type=\"checkbox\" ng-model=\"formData.useRemoteStorage\" >\n        <div class=\"track\">\n          <div class=\"handle\"></div>\n        </div>\n      </label>\n    </div>\n\n    <span class=\"item item-divider\" translate>SETTINGS.NETWORK_SETTINGS</span>\n\n    <div class=\"item ink\" ng-click=\"formData.enable && changeEsNode()\" ng-disabled=\"!formData.enable\">\n      <div class=\"input-label\" ng-class=\"{\'gray\': !formData.enable}\">\n      {{\'ES_SETTINGS.PEER\' | translate}}\n      </div>\n\n      <!-- node fallback node -->\n      <ng-if ng-if=\"isFallbackNode\">\n        <h4 class=\"gray text-wrap assertive\" >\n          <i class=\"icon ion-alert-circled\"></i>\n          <span ng-bind-html=\"\'SETTINGS.PEER_CHANGED_TEMPORARY\' | translate \"></span>\n        </h4>\n        <div class=\"item-note assertive text-italic\">{{server}}</div>\n      </ng-if>\n\n      <span ng-if=\"!isFallbackNode\" class=\"item-note\" ng-class=\"{\'dark\': formData.enable}\">{{server}}</span>\n    </div>\n\n    <span class=\"item item-divider\" translate>ES_SETTINGS.NOTIFICATIONS.DIVIDER</span>\n\n    <span class=\"item gray item-text-wrap\" translate>ES_SETTINGS.NOTIFICATIONS.HELP_TEXT</span>\n\n    <label class=\"item item-toggle dark item-text-wrap\">\n      <span ng-class=\"{\'gray\': !formData.enable}\" translate>ES_SETTINGS.NOTIFICATIONS.ENABLE_TX_SENT</span>\n      <div class=\"toggle toggle-royal\">\n        <input type=\"checkbox\" ng-model=\"formData.notifications.txSent\" ng-disabled=\"!formData.enable\">\n        <div class=\"track\">\n          <div class=\"handle\"></div>\n        </div>\n      </div>\n    </label>\n    <label class=\"item item-toggle dark item-text-wrap\">\n      <span ng-class=\"{\'gray\': !formData.enable}\" translate>ES_SETTINGS.NOTIFICATIONS.ENABLE_TX_RECEIVED</span>\n      <label class=\"toggle toggle-royal\">\n        <input type=\"checkbox\" ng-model=\"formData.notifications.txReceived\" ng-disabled=\"!formData.enable\">\n        <div class=\"track\">\n          <div class=\"handle\"></div>\n        </div>\n      </label>\n    </label>\n    <label class=\"item item-toggle dark item-text-wrap\">\n      <span ng-class=\"{\'gray\': !formData.enable}\" translate>ES_SETTINGS.NOTIFICATIONS.ENABLE_CERT_SENT</span>\n      <div class=\"toggle toggle-royal\">\n        <input type=\"checkbox\" ng-model=\"formData.notifications.certSent\" ng-disabled=\"!formData.enable\">\n        <div class=\"track\">\n          <div class=\"handle\"></div>\n        </div>\n      </div>\n    </label>\n    <label class=\"item item-toggle dark item-text-wrap\">\n      <span ng-class=\"{\'gray\': !formData.enable}\" translate>ES_SETTINGS.NOTIFICATIONS.ENABLE_CERT_RECEIVED</span>\n      <div class=\"toggle toggle-royal\">\n        <input type=\"checkbox\" ng-model=\"formData.notifications.certReceived\" ng-disabled=\"!formData.enable\">\n        <div class=\"track\">\n          <div class=\"handle\"></div>\n        </div>\n      </div>\n    </label>\n\n    <!-- Allow extension here -->\n    <cs-extension-point name=\"common\"></cs-extension-point>\n\n\n\n  </ion-content>\n</ion-view>\n");
$templateCache.put("plugins/es/templates/settings/settings_extend.html","\n<div class=\"item item-text-wrap item-icon-right ink\" ui-sref=\"app.es_settings\">\n  <div class=\"input-label ng-binding\" translate>ES_SETTINGS.PLUGIN_NAME</div>\n\n  <h4 class=\"gray\" translate>ES_SETTINGS.PLUGIN_NAME_HELP</h4>\n\n  <i class=\"icon ion-ios-arrow-right\"></i>\n</div>\n");
$templateCache.put("plugins/es/templates/user/edit_popover_actions.html","<ion-popover-view class=\"fit has-header\">\n  <ion-header-bar>\n    <h1 class=\"title\" translate>COMMON.POPOVER_ACTIONS_TITLE</h1>\n  </ion-header-bar>\n  <ion-content scroll=\"false\">\n    <div class=\"list item-text-wrap\">\n\n      <!-- delete profile -->\n      <a class=\"item item-icon-left assertive ink\"\n         ng-click=\"removeProfile()\">\n        <i class=\"icon ion-trash-a\"></i>\n        {{\'PROFILE.BTN_DELETE\' | translate}}\n      </a>\n\n    </div>\n  </ion-content>\n</ion-popover-view>\n");
$templateCache.put("plugins/es/templates/user/edit_profile.html","<ion-view left-buttons=\"leftButtons\">\n  <ion-nav-title>\n    <!-- no title-->\n  </ion-nav-title>\n\n  <ion-nav-buttons side=\"secondary\">\n    <!-- remove button -->\n    <button class=\"button button-icon button-clear button-assertive ion-trash-a visible-xs visible-sm\" ng-click=\"removeProfile()\"\n            ng-if=\"existing\">\n    </button>\n    <!-- save button -->\n    <button class=\"button button-icon button-clear ion-android-done visible-xs visible-sm\" ng-click=\"submitAndSaveAndClose()\">\n    </button>\n  </ion-nav-buttons>\n\n  <ion-content scroll=\"true\">\n\n    <div class=\"positive-900-bg hero\">\n      <div class=\"content\">\n        <i class=\"avatar\"\n           ng-style=\"avatarStyle\"\n           ng-class=\"{\'avatar-wallet\': !loading && !avatar && walletData && !walletData.isMember, \'avatar-member\': !loading && !avatar && walletData.isMember}\">\n          <button class=\"button button-positive button-large button-clear flat icon ion-camera visible-xs visible-sm\"\n                  style=\"display: inline-block;\"\n                  ng-click=\"showAvatarModal()\"></button>\n          <button ng-if=\"avatar.src\"\n                  class=\"button button-positive button-large button-clear flat  visible-xs visible-sm\"\n                  style=\"display: inline-block; left: 85px; bottom:15px;\"\n                  ng-click=\"rotateAvatar()\">\n            <i class=\"icon-secondary ion-image\" style=\"left: 24px; top: 3px; font-size: 24px;\"></i>\n            <i class=\"icon-secondary ion-forward\" style=\"left: 26px; top: -13px;\"></i>\n          </button>\n          <button class=\"button button-positive button-large button-clear icon ion-camera hidden-xs hidden-sm\"\n                  ng-click=\"showAvatarModal()\"></button>\n        </i>\n        <h3 class=\"light\">\n          <ng-if ng-if=\"!loading && !formData.title && walletData && walletData.isMember\">{{walletData.uid}}</ng-if>\n          <ng-if ng-if=\"!loading && !formData.title && walletData && !walletData.isMember\">{{::walletData.pubkey | formatPubkey}}</ng-if>\n          <ng-if ng-if=\"!loading && formData.title\">{{formData.title}}</ng-if>\n        </h3>\n        <h4 class=\"light\">\n          <ion-spinner ng-if=\"loading\" icon=\"android\"></ion-spinner>\n        </h4>\n      </div>\n    </div>\n\n\n    <div class=\"row no-padding\">\n      <div class=\"col col-20 hidden-xs hidden-sm\">&nbsp;\n      </div>\n\n      <div class=\"col\">\n\n        <!-- Buttons bar-->\n        <div class=\"hidden-xs hidden-sm padding text-center\" ng-if=\"existing && !saving\">\n\n          <button class=\"button button-stable icon-right ink\"\n                  ng-click=\"showActionsPopover($event)\">\n            &nbsp; <i class=\"icon ion-android-more-vertical\"></i>&nbsp;\n            {{\'COMMON.BTN_OPTIONS\' | translate}}\n          </button>\n        </div>\n\n        <form name=\"profileForm\" novalidate=\"\" ng-submit=\"saveAndClose()\">\n\n          <div class=\"list item-text-wrap {{::motion.ionListClass}}\"\n                    ng-init=\"setForm(profileForm)\">\n\n\n\n\n            <!-- Public info -->\n            <div class=\"item item-icon-left item-text-wrap\">\n              <i class=\"icon ion-ios-information-outline positive\"></i>\n              <h4 class=\"positive\" translate>PROFILE.HELP.WARNING_PUBLIC_DATA</h4>\n            </div>\n\n            <div class=\"item item-divider\">\n              {{\'PROFILE.GENERAL_DIVIDER\' | translate}}\n            </div>\n\n            <!-- title -->\n            <ion-item class=\"item-input item-floating-label item-button-right\"\n                      ng-class=\"{\'item-input-error\': form.$submitted && form.title.$invalid}\">\n              <span class=\"input-label\">{{\'PROFILE.TITLE\' | translate}}</span>\n              <input type=\"text\" name=\"title\" placeholder=\"{{\'PROFILE.TITLE_HELP\' | translate}}\"\n                     id=\"profile-name\"\n                     ng-model=\"formData.title\"\n                     ng-model-options=\"{ debounce: 350 }\"\n                     ng-maxlength=\"50\"\n                     required>\n            </ion-item>\n            <div class=\"form-errors\"\n                 ng-show=\"form.$submitted && form.title.$error\"\n                 ng-messages=\"form.title.$error\">\n              <div class=\"form-error\" ng-message=\"required\">\n                <span translate=\"ERROR.FIELD_REQUIRED\"></span>\n              </div>\n              <div class=\"form-error\" ng-message=\"maxlength\">\n                <span translate=\"ERROR.FIELD_TOO_LONG_WITH_LENGTH\" translate-values=\"{maxLength: 50}\"></span>\n              </div>\n            </div>\n\n            <!-- description -->\n            <ion-item class=\"item-input item-floating-label item-button-right\">\n              <span class=\"input-label\" style=\"width: 100%\">{{\'PROFILE.DESCRIPTION\' | translate}}</span>\n              <textarea placeholder=\"{{\'PROFILE.DESCRIPTION_HELP\' | translate}}\"\n                        ng-model=\"formData.description\"\n                        ng-model-options=\"{ debounce: 350 }\"\n                        rows=\"4\" cols=\"10\">\n              </textarea>\n            </ion-item>\n\n            <!-- position -->\n            <ng-include src=\"\'plugins/es/templates/common/edit_position.html\'\" ng-controller=\"ESPositionEditCtrl as ctrl\"></ng-include>\n\n          </div>\n\n          <!-- social networks -->\n          <ng-include src=\"\'plugins/es/templates/common/edit_socials.html\'\" ng-controller=\"ESSocialsEditCtrl\"></ng-include>\n\n          <div class=\"list item-text-wrap {{::motion.ionListClass}}\">\n\n            <div class=\"item item-divider\">\n              {{\'PROFILE.TECHNICAL_DIVIDER\' | translate}}\n            </div>\n\n            <!-- uid -->\n            <ion-item class=\"item-icon-left\" ng-if=\"walletData && walletData.uid\">\n              <span translate>COMMON.UID</span>\n              <span class=\"badge badge-stable\">{{::walletData.uid}}</span>\n            </ion-item>\n\n            <!-- pubkey-->\n            <ion-item class=\"item-icon-left item-icon-right item-text-wrap ink\"\n                  on-hold=\"copy(formData.pubkey)\"\n                  copy-on-click>\n                <i class=\"icon ion-key\"></i>\n                <span translate>COMMON.PUBKEY</span>\n                <p class=\"gray\">{{walletData.pubkey}}</p>\n            </ion-item>\n\n            <div class=\"item padding hidden-xs hidden-sm text-right\">\n              <button class=\"button button-clear button-dark ink\"\n                      ng-click=\"cancel()\" type=\"button\" translate>COMMON.BTN_CANCEL\n              </button>\n              <button class=\"button button-calm ink\"\n                      ng-class=\"{\'button-assertive\': dirty}\"\n                      type=\"submit\">\n                {{\'COMMON.BTN_SAVE\' | translate}}\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n\n      <div class=\"col col-20 hidden-xs hidden-sm\">&nbsp;\n      </div>\n    </div>\n\n  </ion-content>\n\n</ion-view>\n");
$templateCache.put("plugins/es/templates/user/items_profile.html","<div ng-if=\"!formData.profile\"\n     class=\"item gray\" translate>PROFILE.NO_PROFILE_DEFINED</div>\n\n<!-- name -->\n<div class=\"item\" ng-if=\"formData.profile && formData.name && showName\">\n  <span class=\"gray\" translate>PROFILE.TITLE</span>\n  <h3>{{formData.name}}</h3>\n</div>\n\n<!-- About me -->\n<div class=\"item item-text-wrap\" ng-if=\"formData.profile.description\">\n  <span class=\"gray\" translate>PROFILE.DESCRIPTION</span>\n  <h3 trust-as-html=\"formData.profile.description\"></h3>\n</div>\n\n<!-- Localisation -->\n<div class=\"item\" ng-if=\"formData.profile.address || formData.profile.city\"\n     copy-on-click=\"{{formData.profile.address ? formData.profile.address + \'&#10;\' : \'\'}}{{formData.profile.city}}\">\n  <span class=\"gray\" translate>LOCATION.LOCATION_DIVIDER</span>\n  <h3>\n    <span class=\"text-keep-lines\" ng-if=\"formData.profile.address\">{{formData.profile.address}}<br/></span>\n    {{formData.profile.city}}\n  </h3>\n</div>\n\n<!-- Socials networks -->\n<div class=\"item\" ng-if=\"formData.profile.socials && formData.profile.socials.length\" ng-controller=\"ESSocialsViewCtrl\">\n  <span class=\"gray\" translate>PROFILE.SOCIAL_NETWORKS_DIVIDER</span>\n  <div class=\"list no-padding\">\n    <ion-item ng-repeat=\"social in formData.profile.socials | filter:filterFn track by social.url \"\n              id=\"social-{{::social.url|formatSlug}}\"\n              class=\"item-icon-left item-text-wrap no-padding-bottom ink\"\n              on-tap=\"openSocial($event, social)\"\n              >\n      <i class=\"icon ion-social-{{social.type}}\"\n         ng-class=\"{\'ion-bookmark\': social.type == \'other\', \'ion-link\': social.type == \'web\', \'ion-email\': social.type == \'email\', \'ion-iphone\': social.type == \'phone\'}\"></i>\n      <p ng-if=\"social.type && social.type != \'web\'\">\n        {{social.type}}\n        <i class=\"ion-locked\" ng-if=\"social.recipient\"></i>\n      </p>\n      <h4>\n        <a on-tap=\"openSocial($event, social)\" href=\"{{::social.url}}\" target=\"_blank\">{{::social.url}}</a>\n      </h4>\n    </ion-item>\n  </div>\n</div>\n\n\n");
$templateCache.put("plugins/es/templates/subscription/edit_subscriptions.html","<ion-view left-buttons=\"leftButtons\"\n          class=\"view-notification\">\n  <ion-nav-title>\n    {{\'SUBSCRIPTION.EDIT.TITLE\' | translate}}\n  </ion-nav-title>\n\n  <ion-nav-buttons side=\"secondary\">\n\n    <button class=\"button button-icon button-clear icon ion-loop visible-xs visible-sm\" ng-click=\"load()\">\n    </button>\n\n    <button class=\"button button-icon button-clear visible-xs visible-sm\"\n            ng-click=\"showActionsPopover($event)\">\n      <i class=\"icon ion-android-more-vertical\"></i>\n    </button>\n  </ion-nav-buttons>\n\n  <ion-content class=\"padding no-padding-xs\" scroll=\"true\">\n\n    <!-- Buttons bar -->\n    <div class=\"hidden-xs hidden-sm padding text-center\">\n\n      <button class=\"button button-stable button-small-padding icon ion-loop ink\"\n              ng-click=\"load()\"\n              title=\"{{\'COMMON.BTN_REFRESH\' | translate}}\">\n      </button>\n\n      <button class=\"button button-calm ink\"\n              ng-click=\"addSubscription()\">\n        {{\'SUBSCRIPTION.BTN_ADD\' | translate}}\n      </button>\n    </div>\n\n    <div class=\"center padding\" ng-if=\"search.loading\">\n      <ion-spinner icon=\"android\"></ion-spinner>\n    </div>\n\n    <div class=\"center padding gray\" ng-if=\"!search.loading && !search.results.length\" translate>\n      SUBSCRIPTION.NO_SUBSCRIPTION\n    </div>\n\n    <div class=\"row no-padding\">\n      <div class=\"col col-20 hidden-xs hidden-sm\">&nbsp;</div>\n\n      <div class=\"col list {{::motion.ionListClass}} item-border-large\">\n\n        <!-- emails -->\n        <ng-repeat ng-repeat=\"subscriptions in search.results | filter: { type: \'email\' }\"\n                   ng-include=\"\'plugins/es/templates/subscription/item_\' + subscriptions.type.toLowerCase() + \'_subscription.html\'\">>\n        </ng-repeat>\n\n      </div>\n\n      <div class=\"col col-20 hidden-xs hidden-sm\">&nbsp;</div>\n\n    </div>\n\n  </ion-content>\n\n</ion-view>\n");
$templateCache.put("plugins/es/templates/subscription/item_email_subscription.html","<div class=\"item item-thumbnail-left\">\n  <i class=\"item-image icon ion-email\"></i>\n  <h3>\n    {{\'SUBSCRIPTION.TYPE.ENUM.\' + subscriptions.type.toUpperCase() | translate}}\n  </h3>\n  <h4 class=\"gray\">\n    {{\'SUBSCRIPTION.EDIT.PROVIDER\'|translate}}\n    <a ui-sref=\"app.wot_identity({pubkey: subscriptions.recipient, uid: subscriptions.uid})\">\n      <span ng-class=\"{\'positive\': subscriptions.uid, \'dark\': !subscriptions.uid}\" ng-if=\"subscriptions.name||subscriptions.uid\">\n        <i class=\"ion-person\" ng-if=\"subscriptions.uid\"></i>\n        {{subscriptions.name||subscriptions.uid}}\n      </span>\n      <span class=\"gray\" ng-if=\"!subscriptions.uid\">\n        <i class=\"ion-key\"></i>\n        {{subscriptions.recipient | formatPubkey}}\n      </span>\n    </a>\n  </h4>\n  <div class=\"item-note text-right\">\n    <span ng-repeat=\"item in subscriptions.items\">\n      {{item.content.email}}\n      <a class=\"ion-trash-a gray padding-left\" ng-click=\"deleteSubscription(item)\"></a>\n      <a class=\"ion-edit gray padding-left\" ng-click=\"editSubscription(item)\"></a>\n      <br/>\n    </span>\n  </div>\n</div>\n");
$templateCache.put("plugins/es/templates/subscription/modal_email.html","\n<ion-modal-view id=\"composeMessage\"\n                class=\"modal-full-height\">\n  <ion-header-bar class=\"bar-positive\">\n    <button class=\"button button-clear visible-xs\" ng-click=\"closeModal()\" translate>COMMON.BTN_CANCEL</button>\n    <h1 class=\"title\" translate>SUBSCRIPTION.MODAL_EMAIL.TITLE</h1>\n\n    <button class=\"button button-icon button-clear icon ion-android-send visible-xs\" ng-click=\"doSubmit()\">\n    </button>\n  </ion-header-bar>\n\n  <ion-content scroll=\"true\">\n\n    <!-- Encryption info -->\n    <div class=\"item item-icon-left item-text-wrap\">\n      <i class=\"icon ion-ios-information-outline positive\"></i>\n      <h4 class=\"positive\" translate>SUBSCRIPTION.MODAL_EMAIL.HELP</h4>\n    </div>\n\n    <form name=\"subscriptionForm\" novalidate=\"\" ng-submit=\"doSubmit()\">\n\n      <div class=\"list\" ng-init=\"setForm(subscriptionForm)\">\n\n        <!-- email -->\n        <label class=\"item item-input\"\n               ng-class=\"{\'item-input-error\': form.$submitted && (form.email.$invalid || form.email.$error)}\">\n          <span class=\"input-label\" translate>SUBSCRIPTION.MODAL_EMAIL.EMAIL_LABEL</span>\n          <input name=\"email\" type=\"text\" placeholder=\"{{\'SUBSCRIPTION.MODAL_EMAIL.EMAIL_HELP\' | translate}}\"\n                 ng-model=\"formData.content.email\"\n                 ng-minlength=\"3\"\n                 required\n                 email>\n        </label>\n        <div class=\"form-errors\"\n             ng-if=\"form.$submitted && (form.email.$invalid || form.email.$error)\"\n             ng-messages=\"form.email.$error\">\n          <div class=\"form-error\" ng-message=\"minlength\">\n            <span translate=\"ERROR.FIELD_TOO_SHORT\"></span>\n          </div>\n          <div class=\"form-error\" ng-message=\"email\">\n            <span translate=\"ERROR.FIELD_NOT_EMAIL\"></span>\n          </div>\n        </div>\n\n        <!-- Frequency -->\n        <label class=\"item item-input item-select\"\n             ng-class=\"{\'item-input-error\': form.$submitted && !formData.content.frequency}\">\n          <span class=\"input-label\" translate>SUBSCRIPTION.MODAL_EMAIL.FREQUENCY_LABEL</span>\n          <select name=\"frequency\" ng-model=\"formData.content.frequency\" style=\"height: 46px;margin-top: 1px;\">\n            <option value=\"weekly\" translate>SUBSCRIPTION.MODAL_EMAIL.FREQUENCY_WEEKLY</option>\n            <option value=\"daily\" translate>SUBSCRIPTION.MODAL_EMAIL.FREQUENCY_DAILY</option>\n          </select>\n        </label>\n        <div class=\"form-errors\"\n             ng-if=\"form.$submitted && !formData.content.frequency\">\n          <div class=\"form-error\">\n            <span translate=\"ERROR.FIELD_REQUIRED\"></span>\n          </div>\n        </div>\n\n        <!-- Recipient (service provider) -->\n        <a class=\"item item-input item-icon-right gray ink\"\n           ng-class=\"{\'item-input-error\': form.$submitted && !formData.recipient}\"\n           ng-click=\"showNetworkLookup()\"\n          style=\"height: 67px;\">\n          <span class=\"input-label\" translate>SUBSCRIPTION.MODAL_EMAIL.PROVIDER</span>\n          <span class=\"badge animate-fade-in animate-show-hide ng-hide\"\n                ng-class=\"{\'badge-royal\': recipient.uid, \'badge-stable\': !recipient.uid}\"\n                ng-show=\"recipient && (recipient.name||recipient.uid)\">\n            <i class=\"ion-person\" ng-if=\"recipient.uid\"></i> {{recipient.name||recipient.uid}}\n          </span>\n          <span class=\"badge badge-secondary animate-fade-in animate-show-hide ng-hide\" ng-show=\"formData.recipient\">\n            <i class=\"ion-key\"></i> {{formData.recipient | formatPubkey}}\n          </span>\n          <i class=\"gray icon ion-ios-arrow-right\"></i>\n        </a>\n        <div class=\"form-errors\"\n             ng-if=\"form.$submitted && !formData.recipient\">\n          <div class=\"form-error\">\n            <span translate=\"ERROR.FIELD_REQUIRED\"></span>\n          </div>\n        </div>\n\n      </div>\n\n      <div class=\"padding hidden-xs text-right\">\n        <button class=\"button button-small button-clear button-dark ink\"\n                ng-click=\"cancel()\" type=\"button\" translate>COMMON.BTN_CANCEL\n        </button>\n        <button class=\"button button-small button-positive ink\" type=\"submit\">\n          {{\'COMMON.BTN_SEND\' | translate}}\n        </button>\n      </div>\n\n    </form>\n  </ion-content>\n</ion-modal-view>\n\n\n\n\n");
$templateCache.put("plugins/es/templates/wallet/view_wallet_extend.html","<ng-if ng-if=\":state:enable\">\n  <!-- profile -->\n  <div class=\"item item-divider item-divider-top-border\">\n    <span>\n      {{\'PROFILE.PROFILE_DIVIDER\' | translate}}\n      <i style=\"font-size: 12pt; cursor: pointer;\"\n         ng-click=\"showProfileHelp=!showProfileHelp\"\n         class=\"icon positive ion-ios-help-outline\"\n         title=\"{{\'PROFILE.PROFILE_DIVIDER_HELP\' | translate}}\"></i>\n    </span>\n    <a class=\"badge button button-text button-small button-small-padding\"\n       ng-if=\"isDefaultWallet\"\n       ui-sref=\"app.edit_profile\">\n      <i class=\"icon ion-edit\"></i>\n      <span ng-if=\"!formData.profile\" translate>PROFILE.BTN_ADD</span>\n      <span ng-if=\"formData.profile\" translate>PROFILE.BTN_EDIT</span>\n    </a>\n    <a class=\"badge button button-text button-small button-small-padding \"\n       ng-if=\"!isDefaultWallet\"\n       ui-sref=\"app.edit_profile_by_id({id: walletId})\">\n      <i class=\"icon ion-edit\"></i>\n      <span ng-if=\"!formData.profile\" translate>PROFILE.BTN_ADD</span>\n      <span ng-if=\"formData.profile\" translate>PROFILE.BTN_EDIT</span>\n    </a>\n  </div>\n\n\n  <div class=\"item item-text-wrap positive item-small-height\" ng-show=\"showProfileHelp\">\n    <small translate>PROFILE.PROFILE_DIVIDER_HELP</small>\n  </div>\n\n  <ng-include src=\"\'plugins/es/templates/user/items_profile.html\'\" ng-init=\"showName=true\"></ng-include>\n\n  <!-- subscriptions -->\n  <div class=\"item item-divider item-divider-top-border\">\n    <span>\n      {{\'SUBSCRIPTION.SUBSCRIPTION_DIVIDER\' | translate}}\n      <i style=\"font-size: 12pt; cursor: pointer;\"\n         ng-click=\"showSubscriptionHelp=!showSubscriptionHelp\"\n         class=\"icon positive ion-ios-help-outline\"\n         title=\"{{\'SUBSCRIPTION.SUBSCRIPTION_DIVIDER_HELP\' | translate}}\"></i>\n    <span>\n\n    <a class=\"badge button button-text button-small button-small-padding \"\n       ng-if=\"!formData.subscriptions.count && isDefaultWallet\"\n       ui-sref=\"app.edit_subscriptions\">\n      <i class=\"icon ion-edit\"></i>\n      <span translate>SUBSCRIPTION.BTN_ADD</span>\n    </a>\n    <a class=\"badge button button-text button-small button-small-padding \"\n       ng-if=\"!formData.subscriptions.count && !isDefaultWallet\"\n       ui-sref=\"app.edit_subscriptions_by_id({id: walletId})\">\n      <i class=\"icon ion-edit\"></i>\n      <span translate>SUBSCRIPTION.BTN_ADD</span>\n    </a>\n  </div>\n\n  <div class=\"item item-text-wrap positive item-small-height\" ng-show=\"showSubscriptionHelp\">\n    <small translate>SUBSCRIPTION.SUBSCRIPTION_DIVIDER_HELP</small>\n  </div>\n\n  <div ng-if=\"!formData.subscriptions.count\"\n       class=\"item gray\" translate>SUBSCRIPTION.NO_SUBSCRIPTION</div>\n\n  <a class=\"item item-icon-left item-text-wrap item-icon-right ink\"\n     ng-if=\"formData.subscriptions.count && isDefaultWallet\"\n     ui-sref=\"app.edit_subscriptions\">\n    <i class=\"icon ion-gear-a\"></i>\n    <span translate>SUBSCRIPTION.SUBSCRIPTION_COUNT</span>\n    <span class=\"badge badge-calm\">{{formData.subscriptions.count}}</span>\n\n    <i class=\"gray icon ion-ios-arrow-right\"></i>\n  </a>\n  <a class=\"item item-icon-left item-text-wrap item-icon-right ink\"\n     ng-if=\"formData.subscriptions.count && !isDefaultWallet\"\n     ui-sref=\"app.edit_subscriptions_by_id({id: walletId})\">\n    <i class=\"icon ion-gear-a\"></i>\n    <span translate>SUBSCRIPTION.SUBSCRIPTION_COUNT</span>\n    <span class=\"badge badge-calm\">{{formData.subscriptions.count}}</span>\n\n    <i class=\"gray icon ion-ios-arrow-right\"></i>\n  </a>\n\n  <!-- page -->\n  <div class=\"item item-divider item-divider-top-border\">\n    <span>\n      {{\'REGISTRY.WALLET.REGISTRY_DIVIDER\' | translate}}\n      <i style=\"font-size: 12pt; cursor: pointer;\"\n         ng-click=\"showPagesHelp=!showPagesHelp\"\n         class=\"icon positive ion-ios-help-outline\"\n         title=\"{{\'REGISTRY.WALLET.REGISTRY_HELP\' | translate}}\"></i>\n    <span>\n\n    <a class=\"badge button button-text button-small button-small-padding \"\n       ng-if=\"!formData.pages.count\"\n       ng-click=\"showNewPageModal()\">\n      <i class=\"icon ion-edit\"></i>\n      <span translate>REGISTRY.BTN_NEW</span>\n    </a>\n  </div>\n\n  <div class=\"item item-text-wrap positive item-small-height\" ng-show=\"showPagesHelp\">\n    <small translate>REGISTRY.WALLET.REGISTRY_HELP</small>\n  </div>\n\n  <div ng-if=\"!formData.pages.count\"\n       class=\"item gray\" translate>REGISTRY.NO_PAGE</div>\n\n  <a class=\"item item-icon-left item-text-wrap item-icon-right ink\"\n     ng-if=\"formData.pages.count && isDefaultWallet\"\n     ui-sref=\"app.wallet_pages\">\n    <i class=\"icon ion-social-buffer\"></i>\n    <span translate>REGISTRY.MY_PAGES</span>\n    <span class=\"badge badge-calm\">{{formData.pages.count}}</span>\n\n    <i class=\"gray icon ion-ios-arrow-right\"></i>\n  </a>\n  <a class=\"item item-icon-left item-text-wrap item-icon-right ink\"\n     ng-if=\"formData.pages.count && !isDefaultWallet\"\n     ui-sref=\"app.wallet_pages_by_id({id: walletId})\">\n    <i class=\"icon ion-social-buffer\"></i>\n    <span translate>REGISTRY.MY_PAGES</span>\n    <span class=\"badge badge-calm\">{{formData.pages.count}}</span>\n\n    <i class=\"gray icon ion-ios-arrow-right\"></i>\n  </a>\n</ng-if>\n");
$templateCache.put("plugins/es/templates/wot/lookup_extend.html","<ion-tab ng-if=\":state:enable\"\n         title=\"{{\'MENU.REGISTRY\'|translate}}\" icon=\"ion-social-buffer\"\n         ui-sref=\"app.wot_lookup.tab_registry\">\n  <ion-nav-view name=\"tab_registry\"></ion-nav-view>\n</ion-tab>\n");
$templateCache.put("plugins/es/templates/wot/lookup_item_group.html","\n<i ng-if=\"::!item.avatar\" class=\"item-image icon ion-android-people\"></i>\n<i ng-if=\"::!item.avatar\" class=\"item-image icon-secondary ion-android-lock\" style=\"left: 20px; top: 17px; font-size: 19px; color: #d9d9d9;\"></i>\n<i ng-if=\"::item.avatar\" class=\"item-image avatar\" style=\"background-image: url({{::item.avatar.src}})\"></i>\n\n<h2 ng-bind-html=\":rebind:item.name\"></h2>\n\n<!-- creation time-->\n<h4 class=\"gray\">\n  <i class=\"ion-clock\"></i>\n  {{:rebind:\'GROUP.CREATED_TIME\'|translate: item }}\n</h4>\n\n<!-- membersCount -->\n<h4 class=\"dark pull-left\" ng-if=\":rebind:item.membersCount\">\n  <i class=\"dark ion-person\"></i>\n  <span class=\"dark\">+{{:rebind:item.membersCount}}</span>\n</h4>\n\n<h4 class=\"dark\">\n  <span class=\"dark\" ng-if=\"::item.description\">\n    <i class=\"ion-quote\"></i>\n    {{::item.description|truncText}}\n  </span>\n</h4>\n<h4 ng-if=\"::item.tags\">\n  <span ng-if=\"::item.tags\" class=\"dark\">\n   <ng-repeat ng-repeat=\"tag in ::item.tags\">\n     #<ng-bind-html ng-bind-html=\"::tag\"></ng-bind-html>\n   </ng-repeat>\n  </span>\n</h4>\n");
$templateCache.put("plugins/es/templates/wot/lookup_item_page.html","<i ng-if=\"::!item.avatar\" class=\"item-image icon cion-page-{{item.type}}\"></i>\n<i ng-if=\"::item.avatar\" class=\"item-image avatar\" style=\"background-image: url({{::item.avatar.src}})\"></i>\n\n<h2 ng-bind-html=\":rebind:item.name\"></h2>\n\n<h4 class=\"gray\">\n  <span class=\"gray\" ng-if=\"::item.city\">\n    <i class=\"ion-location\"></i>\n    {{::item.city|truncText}}\n  </span>\n  <span ng-if=\"::item.city && item.type\">|</span>\n  <span ng-if=\"item.type\">\n    <i class=\"cion-page-{{item.type}}\"></i>\n    {{::\'REGISTRY.TYPE.ENUM.\'+item.type|uppercase|translate}}\n  </span>\n</h4>\n<h4 class=\"dark\">\n  <span class=\"dark\" ng-if=\"::item.description\">\n    <i class=\"ion-quote\"></i>\n    {{::item.description|truncText}}\n  </span>\n</h4>\n<h4 ng-if=\"::item.tags\">\n  <span ng-if=\"::item.tags\" class=\"dark\">\n   <ng-repeat ng-repeat=\"tag in ::item.tags\">\n     #<ng-bind-html ng-bind-html=\"::tag\"></ng-bind-html>\n   </ng-repeat>\n  </span>\n</h4>\n");
$templateCache.put("plugins/es/templates/wot/lookup_lg_extend.html","<div class=\"buttons-tabs\" ng-if=\":state:enable\">\n  <div class=\"pull-right\">\n    <div\n      class=\"button button-tab dark\"\n      title=\"{{\'REGISTRY.BTN_SHOW_WOT_HELP\' | translate}}\"\n      nav-transition=\"none\"\n      active-link=\"active\"\n      active-link-path-prefix=\"#/app/wot/lg\"\n      ui-sref=\"app.wot_lookup_lg\">\n      <i class=\"icon ion-person-stalker\"></i>\n      {{\'REGISTRY.BTN_SHOW_WOT\' | translate}}\n    </div>\n    <a\n      class=\"button button-tab ink dark\"\n      title=\"{{\'REGISTRY.BTN_SHOW_PAGES_HELP\' | translate}}\"\n      nav-transition=\"none\"\n      active-link=\"active\"\n      active-link-path-prefix=\"#/app/wot/page\"\n      ui-sref=\"app.registry_lookup_lg\">\n      <i class=\"icon ion-social-buffer\"></i>\n      {{\'REGISTRY.BTN_SHOW_PAGES\' | translate}}\n    </a>\n  </div>\n\n  <div class=\"pull-right\" ng-if=\"showNewPageButton\">\n    <button class=\"button button-small button-positive button-small-padding button-clear ink hidden-sm hidden-xs\"\n            ng-click=\"showNewPageModal()\">\n      <i class=\"icon ion-plus\"></i>\n      {{\'REGISTRY.BTN_NEW\' | translate}}\n    </button>\n    &nbsp;\n  </div>\n</div>\n");
$templateCache.put("plugins/es/templates/wot/popover_certification_actions.html","<ion-popover-view class=\"fit has-header\">\n  <ion-header-bar>\n    <h1 class=\"title\" translate>COMMON.POPOVER_ACTIONS_TITLE</h1>\n  </ion-header-bar>\n  <ion-content scroll=\"false\">\n    <div class=\"list item-text-wrap\">\n\n      <!-- certify  -->\n      <a class=\"item item-icon-left ink\"\n         ng-if=\"canCertify\"\n         ng-click=\"certify()\">\n        <i class=\"icon ion-ribbon-b\" ></i>\n        {{\'WOT.BTN_CERTIFY\' | translate}}\n      </a>\n\n      <!-- ask certification to current identities -->\n      <a class=\"item item-icon-left ink\"\n         ng-if=\"!isUserPubkey(formData.pubkey) && formData.isMember\"\n         ng-click=\"askCertification()\">\n        <i class=\"icon-secondary ion-ribbon-b\" style=\"left: 16px; top: 0px; font-size: 25px;\"></i>\n        <b class=\"icon-secondary ion-help\" style=\"left: 35px; top: 0px;\"></b>\n        {{\'WOT.BTN_ASK_CERTIFICATION\' | translate}}\n      </a>\n\n      <!-- ask certifications to many identities -->\n      <a class=\"item item-icon-left ink\"\n         ng-if=\"isUserPubkey(formData.pubkey)\"\n         ng-click=\"showAskCertificationModal()\">\n        <i class=\"icon-secondary ion-ribbon-b\" style=\"left: 16px; top: 0px; font-size: 25px;\"></i>\n        <b class=\"icon-secondary ion-help\" style=\"left: 35px; top: 0px;\"></b>\n        {{\'WOT.BTN_ASK_CERTIFICATIONS_DOTS\' | translate}}\n      </a>\n\n      <!-- suggest certifications to current identity -->\n      <a class=\"item item-icon-left ink\"\n         ng-if=\"!isUserPubkey(formData.pubkey)\"\n         ng-click=\"showSuggestCertificationModal()\">\n        <i class=\"icon-secondary ion-person-stalker\" style=\"left: 16px; top: 0px; font-size: 25px;\"></i>\n        <b class=\"icon-secondary ion-help\" style=\"left: 37px; top: -4px;\"></b>\n        {{\'WOT.BTN_SUGGEST_CERTIFICATIONS_DOTS\' | translate}}\n      </a>\n    </div>\n  </ion-content>\n</ion-popover-view>\n");
$templateCache.put("plugins/es/templates/wot/view_certifications_extend.html","<!-- nav buttons section -->\n<ng-if ng-if=\":state:enable && extensionPoint === \'nav-buttons\'\">\n\n  <button class=\"button button-icon button-clear icon ion-android-more-vertical visible-xs visible-sm\" ng-click=\"showCertificationActionsPopover($event)\">\n  </button>\n\n</ng-if>\n\n<!-- Buttons section -->\n<ng-if ng-if=\":state:enable && extensionPoint === \'buttons\'\">\n\n  <button class=\"button button-stable button-small-padding icon ion-android-more-vertical\"\n          ng-click=\"showCertificationActionsPopover($event)\"\n          title=\"{{\'COMMON.POPOVER_ACTIONS_TITLE\' | translate}}\">\n  </button>\n\n</ng-if>\n");
$templateCache.put("plugins/es/templates/wot/view_identity_extend.html","<!-- Buttons section -->\n<ng-if ng-if=\":state:enable && extensionPoint === \'buttons\'\">\n  <button class=\"button button-stable button-small-padding icon ion-compose\"\n          ng-click=\"showNewMessageModal()\"\n          title=\"{{\'MESSAGE.BTN_WRITE\' | translate}}\">\n  </button>\n</ng-if>\n\n<!-- General section -->\n<ng-if ng-if=\":state:enable && extensionPoint === \'after-general\'\">\n\n  <span class=\"item item-divider item-divider-top-border\">\n    <span>\n      {{\'PROFILE.PROFILE_DIVIDER\' | translate}}\n      <a style=\"font-size: 12pt; cursor: pointer;\"\n         ng-click=\"showProfileHelp=!showProfileHelp\"\n         class=\"icon positive ion-ios-help-outline ink\"\n         title=\"{{\'PROFILE.PROFILE_DIVIDER_HELP\' | translate}}\"></a>\n    </span>\n  </span>\n\n  <div class=\"item item-text-wrap positive item-small-height\" ng-show=\"showProfileHelp\">\n    <small translate>PROFILE.PROFILE_DIVIDER_HELP</small>\n  </div>\n\n  <ng-include src=\"\'plugins/es/templates/user/items_profile.html\'\" ng-init=\"showName=false;\"></ng-include>\n\n</ng-if>\n");
$templateCache.put("plugins/map/templates/network/item_search_tooltip.html","<a href=\"#\">\n  {{peer.dns || peer.server}}\n  <span class=\"{{peer.uid ? \'positive\' : \'gray\'}}\">\n    <i class=\"icon {{peer.uid ? \'ion-person\' : \'ion-key\'}}\"></i>\n    {{peer.uid ? (peer.name||peer.uid) : (peer.pubkey|formatPubkey) }}\n  </span>\n  <span class=\"gray\">{{peer.ipv4 ? (peer.ipv4 + \':\' + peer.port) : \'\'}}</span>\n  <span class=\"{{peer.bma.useSsl  ? \'\' : \'ng-hide\'}}\"><i class=\"ion-locked\"></i> <small>SSL</small></span>\n</a>\n");
$templateCache.put("plugins/map/templates/network/lookup_extend.html","<a ng-if=\"enable\"\n   class=\"button button-text button-small ink hidden-sm hidden-xs\"\n   title=\"{{\'MAP.NETWORK.LOOKUP.BTN_MAP_HELP\' | translate}}\"\n        ui-sref=\"app.view_network_map\">\n  <i class=\"icon ion-ios-location\"></i>\n  {{\'MAP.NETWORK.LOOKUP.BTN_MAP\' | translate}}\n</a>\n");
$templateCache.put("plugins/map/templates/network/view_map.html","<ion-view left-buttons=\"leftButtons\" class=\"view-map-network\">\n  <ion-nav-title>\n    <span class=\"hidden-xs\" translate>MAP.NETWORK.VIEW.TITLE</span>\n  </ion-nav-title>\n\n  <ion-nav-buttons side=\"secondary\">\n  </ion-nav-buttons>\n\n  <ion-content data-tap-disabled=\"true\">\n    <leaflet id=\"{{::mapId}}\"\n             height=\"100%\"\n             center=\"map.center\"\n             markers=\"map.markers\"\n             layers=\"map.layers\">\n    </leaflet>\n  </ion-content>\n</ion-view>\n");
$templateCache.put("plugins/map/templates/registry/item_search_tooltip.html","<a href=\"#\" class=\"{{type}}\">\n  <i class=\"{{\'cion-page-\' + type}}\"></i>\n  {{name != uid ? name +\' \' : \'\'}}\n  <span class=\"gray\">\n    {{pubkey ? (pubkey|formatPubkey) : \'\'}}\n  </span>\n</a>\n");
$templateCache.put("plugins/map/templates/registry/lookup_lg_extend.html","<a class=\"button button-text button-small ink hidden-sm hidden-xs\"\n   title=\"{{\'MAP.REGISTRY.LOOKUP.BTN_MAP_HELP\' | translate}}\"\n   ui-sref=\"app.view_registry_map\">\n  <i class=\"icon ion-ios-location\"></i>\n  {{\'MAP.REGISTRY.LOOKUP.BTN_MAP\' | translate}}\n</a>\n");
$templateCache.put("plugins/map/templates/registry/popup_marker.html","<div class=\"item no-border no-padding item-avatar \"\n     ng-if=\"loading\">\n\n  <i class=\"item-image icon ion-person\"></i>\n\n  <div class=\"item-content item-avatar-left-padding padding-top\" >\n    <h2 class=\"stable-bg\">\n      &nbsp;\n    </h2>\n    <h4 class=\"stable-bg col-75\">\n      &nbsp;\n    </h4>\n    <h4 class=\"stable-bg col-50\">\n      &nbsp;\n    </h4>\n  </div>\n</div>\n\n<a class=\"item no-border no-padding item-avatar ink animate-fade-in animate-show-hide ng-hide\"\n     ng-show=\"!loading\"\n     ui-sref=\"app.view_page({id: formData.id, title: formData.name})\">\n  <i ng-if=\"formData.avatar\" class=\"item-image avatar\" style=\"background-image: url({{::formData.avatar.src}}\"></i>\n  <i ng-if=\"!formData.avatar\" class=\"item-image icon cion-page-{{::formData.type}}\"></i>\n  <div class=\"item-content item-avatar-left-padding padding-top\">\n    <h2 class=\"dark\">\n      {{::formData.name}}\n    </h2>\n    <h4 ng-if=\"::formData.category\" class=\"gray\" title=\"{{::formData.category.name}}\">\n      <b class=\"ion-flag\"></b> {{::formData.category.name}}\n    </h4>\n    <h4 ng-if=\"::formData.city\" class=\"gray\" title=\"{{::formData.city}}\">\n      <b class=\"ion-location\"></b> {{::formData.city}}\n    </h4>\n  </div>\n</a>\n<!-- buttons -->\n<div class=\"item no-border no-padding\">\n  <div class=\"pull-left gray\">\n    <!-- show description -->\n    <a class=\"animate-fade-in animate-show-hide gray ng-hide\"\n       ng-class=\"{\'ion-arrow-down-b\': !showDescription, \'ion-arrow-up-b\': showDescription}\"\n       ng-click=\"showDescription=!showDescription;\"\n       title=\"{{\'PROFILE.DESCRIPTION\'|translate}}\"\n       ng-show=\"!loading && formData.description\">\n      &nbsp;\n    </a>\n  </div>\n</div>\n<div class=\"item no-border no-padding item-text-wrap hidden-xs ng-hide\" ng-show=\"showDescription\">\n  <small trust-as-html=\"::formData.description|truncText:500\"></small>\n</div>\n");
$templateCache.put("plugins/map/templates/registry/view_map.html","<ion-view left-buttons=\"leftButtons\" class=\"view-map-registry\">\n  <ion-nav-title>\n    <span class=\"hidden-xs\" translate>MAP.REGISTRY.VIEW.TITLE</span>\n  </ion-nav-title>\n\n  <ion-nav-buttons side=\"secondary\">\n    <button class=\"button button-icon button-clear icon ion-loop visible-xs visible-sm\" ng-click=\"load()\">\n    </button>\n  </ion-nav-buttons>\n\n  <ion-content data-tap-disabled=\"true\">\n    <a id=\"helptip-map-registry\" style=\"left: 150px; top: 50px; position: relative;\"></a>\n    <leaflet id=\"{{::mapId}}\"\n             height=\"100%\"\n             layers=\"map.layers\"\n             markers=\"map.markers\"\n             lf-center=\"map.center\"\n             bounds=\"map.bounds\">\n    </leaflet>\n  </ion-content>\n</ion-view>\n");
$templateCache.put("plugins/map/templates/settings/es_settings_extend.html","\n<!--<span class=\"item item-divider\" translate>MAP.SETTINGS.MAP_DIVIDER</span>\n\n<label class=\"item item-toggle dark item-text-wrap\">\n  <span translate>MAP.SETTINGS.ENABLE_GOOGLE_API</span>\n  <h4 class=\"gray\" translate>MAP.SETTINGS.ENABLE_GOOGLE_API_HELP</h4>\n  <div class=\"toggle toggle-royal\">\n    <input type=\"checkbox\" ng-model=\"formData.enableGoogleApi\">\n    <div class=\"track\">\n      <div class=\"handle\"></div>\n    </div>\n  </div>\n</label>\n\n<ion-item class=\"item-input\"\n          ng-if=\"!$root.config.plugins.es.googleApiKey\"\n          ng-class=\"{\'item-input-error\': formData.enableGoogleApi && !formData.googleApiKey}\">\n  <div class=\"input-label col-33\">\n    <span class=\"\" ng-class=\"{\'gray\': !formData.enableGoogleApi}\"translate>MAP.SETTINGS.GOOGLE_API_KEY</span>\n    <h4>\n      <a ng-click=\"openLink($event, \'https://console.developers.google.com/apis/credentials/key\')\" translate>MAP.SETTINGS.BTN_GOOGLE_API</a>\n      <span class=\"gray\"> ({{\'MAP.SETTINGS.BTN_GOOGLE_API_WARNING\'|translate}})</span>\n    </h4>\n  </div>\n  <input type=\"text\"\n         placeholder=\"{{\'MAP.SETTINGS.GOOGLE_API_KEY_PLACEHOLDER\' | translate}}\"\n         ng-model=\"formData.googleApiKey\"\n         ng-if=\"formData.enableGoogleApi\">\n</ion-item>\n<div class=\"form-errors\"\n     ng-show=\"formData.enableGoogleApi && !formData.googleApiKey\">\n  <div class=\"form-error\">\n    <span translate=\"ERROR.FIELD_REQUIRED\"></span>\n  </div>\n</div>-->\n");
$templateCache.put("plugins/map/templates/user/edit_profile_extend.html","<div class=\"item no-padding {{ionItemClass}}\" ng-if=\"formData.geoPoint && formData.geoPoint.lat && formData.geoPoint.lon\">\n  <leaflet id=\"{{::mapId}}\"\n           height=\"250px\"\n           center=\"map.center\"\n           markers=\"map.markers\"\n           defaults=\"map.defaults\">\n  </leaflet>\n</div>\n");
$templateCache.put("plugins/map/templates/wot/item_search_tooltip.html","<a href=\"#\" class=\"{{type}}\">\n  <i class=\"{{pending ? \'ion-clock\': (type ? \'cion-page-\' + type : \'\')}}\"></i>\n  {{name != uid ? name +\' \' : \'\'}}\n  <span class=\"{{uid ? \'positive\' : \'gray\'}}\">\n    <i class=\"{{uid ? \'ion-person\' : \'ion-key\'}}\"></i>\n    {{uid ? uid : (pubkey|formatPubkey) }}\n  </span>\n</a>\n");
$templateCache.put("plugins/map/templates/wot/lookup_lg_extend.html","<a ng-if=\"enable\"\n   class=\"button button-text button-small ink hidden-sm hidden-xs\"\n   title=\"{{\'MAP.WOT.LOOKUP.BTN_MAP_HELP\' | translate}}\"\n   ui-sref=\"app.view_wot_map\">\n  <i class=\"icon ion-ios-location\"></i>\n  {{\'MAP.WOT.LOOKUP.BTN_MAP\' | translate}}\n</a>\n");
$templateCache.put("plugins/map/templates/wot/popup_marker.html","\n<div class=\"item no-border no-padding item-avatar \"\n     ng-if=\"loading\">\n\n  <i class=\"item-image icon ion-person\"></i>\n\n  <div class=\"item-content item-avatar-left-padding padding-top\" >\n    <h2 class=\"stable-bg\">\n      &nbsp;\n    </h2>\n    <h4 class=\"stable-bg col-75\">\n      &nbsp;\n    </h4>\n    <h4 class=\"stable-bg col-50\">\n      &nbsp;\n    </h4>\n  </div>\n</div>\n\n<a class=\"item no-border no-padding item-avatar ink animate-fade-in animate-show-hide ng-hide\"\n   ng-show=\"!loading\"\n   ui-sref=\"app.wot_identity({pubkey: formData.pubkey, uid: formData.uid})\">\n\n  <i ng-if=\"formData.avatar\" class=\"item-image avatar\" style=\"background-image: url({{::formData.avatar.src}})\"></i>\n  <i ng-if=\"!formData.avatar && formData.uid\" class=\"item-image icon ion-person\"></i>\n  <i ng-if=\"!formData.avatar && !formData.uid\" class=\"item-image icon ion-card\"></i>\n\n  <div class=\"item-content item-avatar-left-padding padding-top\">\n    <h2 class=\"dark\">\n      {{formData.name}}\n    </h2>\n    <h4>\n      <span ng-if=\"formData.uid\" class=\"positive\">\n        <b class=\"ion-person\"></b>\n        {{formData.uid}}\n      </span>\n      <span class=\"gray\" title=\"{{formData.pubkey}}\"><b class=\"ion-key\"></b> {{formData.pubkey|formatPubkey}}</span>\n      <span class=\"assertive\" ng-if=\"!formData.isMember\">\n        {{::\'WOT.NOT_MEMBER_PARENTHESIS\'|translate}}\n      </span>\n    </h4>\n    <h4 ng-if=\"formData.profile.city\" class=\"gray\" title=\"{{formData.profile.city}}\">\n      <b class=\"ion-location\"></b> {{formData.profile.city}}\n    </h4>\n  </div>\n</a>\n<!-- buttons -->\n<div class=\"item no-border no-padding\">\n  <div class=\"pull-left gray\">\n    <!-- show description -->\n    <a class=\"animate-fade-in animate-show-hide gray ng-hide\"\n       ng-class=\"{\'ion-arrow-down-b\': !showDescription, \'ion-arrow-up-b\': showDescription}\"\n       ng-click=\"showDescription=!showDescription;\"\n       title=\"{{\'PROFILE.DESCRIPTION\'|translate}}\"\n       ng-show=\"!loading && formData.profile.description\">\n      &nbsp;\n    </a>\n  </div>\n  <div style=\"font-size: 18px;\" class=\"pull-right gray\">\n    <!-- share -->\n    <a class=\"icon ion-android-share-alt \"\n       ng-click=\"showSharePopover($event)\"\n       title=\"{{\'COMMON.BTN_SHARE\' | translate}}\">&nbsp;</a>\n    <!-- certify -->\n    <a class=\"icon ion-ribbon-b\"\n       ng-click=\"certify()\"\n       title=\"{{\'WOT.BTN_CERTIFY\' | translate}}\"\n       ng-hide=\"!canCertify\">&nbsp;</a>\n    <!-- compose message -->\n    <a class=\"icon ion-compose\"\n       ng-click=\"showNewMessageModal()\"\n       title=\"{{\'MESSAGE.BTN_WRITE\' | translate}}\">&nbsp;</a>\n    <!-- transfer -->\n    <a class=\"icon ion-card\"\n       ng-click=\"showTransferModal({pubkey:formData.pubkey, uid: formData.name||formData.uid})\"\n       title=\"{{\'COMMON.BTN_SEND_MONEY\' | translate}}\">&nbsp;</a>\n\n  </div>\n</div>\n<div class=\"item no-border no-padding item-text-wrap hidden-xs ng-hide\" ng-show=\"showDescription\">\n  <small trust-as-html=\"formData.profile.description|truncText:500\"></small>\n</div>\n");
$templateCache.put("plugins/map/templates/wot/view_map.html","<ion-view left-buttons=\"leftButtons\" class=\"view-map-wot\">\n  <ion-nav-title>\n    <span class=\"hidden-xs\" translate>MAP.WOT.VIEW.TITLE</span>\n  </ion-nav-title>\n\n  <ion-nav-buttons side=\"secondary\">\n    <button class=\"button button-icon button-clear icon ion-loop visible-xs visible-sm\" ng-click=\"load()\">\n    </button>\n  </ion-nav-buttons>\n\n  <ion-content data-tap-disabled=\"true\">\n    <a id=\"helptip-map-wot\" style=\"left: 150px; top: 50px; position: relative;\"></a>\n    <leaflet id=\"{{::mapId}}\"\n             height=\"100%\"\n             layers=\"map.layers\"\n             markers=\"map.markers\"\n             lf-center=\"map.center\"\n             bounds=\"map.bounds\">\n    </leaflet>\n  </ion-content>\n</ion-view>\n");
$templateCache.put("plugins/graph/templates/currency/tabs/tab_blocks_stats.html","<ion-view>\n  <ion-content>\n    <div\n       ng-include=\"\'plugins/graph/templates/blockchain/graph_tx_count.html\'\"\n       ng-controller=\"GpBlockchainTxCountCtrl\"\n       ng-init=\"setSize(500,700,false)\">\n      </div>\n  </ion-content>\n</ion-view>\n");
$templateCache.put("plugins/graph/templates/currency/tabs/tab_network_stats.html","<ion-view>\n  <ion-content>\n\n    <div class=\"list\">\n      <div class=\"item\"\n         ng-include=\"\'plugins/graph/templates/blockchain/graph_block_issuers.html\'\"\n         ng-controller=\"GpBlockchainIssuersCtrl\"\n           ng-init=\"setSize(500,700,true)\">\n      </div>\n    </div>\n  </ion-content>\n</ion-view>\n");
$templateCache.put("plugins/graph/templates/currency/tabs/tab_parameters_stats.html","<ion-view>\n  <ion-content>\n    <div class=\"center padding\" ng-if=\"loading\">\n      <ion-spinner icon=\"android\"></ion-spinner>\n    </div>\n\n    <div class=\"row responsive-sm\">\n      <div class=\"col\"\n           ng-include=\"\'plugins/graph/templates/currency/graph_monetary_mass.html\'\"\n           ng-init=\"setSize(500,700,true)\">\n      </div>\n\n      <!-- DU -->\n      <div class=\"col\"\n           ng-include=\"\'plugins/graph/templates/currency/graph_du.html\'\"\n           ng-controller=\"GpCurrencyDUCtrl\"\n           ng-init=\"setSize(500,700,true)\">\n      </div>\n    </div>\n  </ion-content>\n</ion-view>\n");
$templateCache.put("plugins/graph/templates/currency/tabs/tab_wot_stats.html","<ion-view>\n  <ion-content>\n    <div class=\"center padding\" ng-if=\"loading\">\n      <ion-spinner icon=\"android\"></ion-spinner>\n    </div>\n\n    <div class=\"list no-padding\">\n      <div class=\"item no-padding-top\"\n           ng-include=\"\'plugins/graph/templates/currency/graph_members_count.html\'\"\n           ng-init=\"setSize(600,700,false)\">\n      </div>\n    </div>\n  </ion-content>\n</ion-view>\n");
$templateCache.put("plugins/es/templates/message/tabs/tab_list.html","<ion-view>\n  <ion-nav-buttons side=\"secondary\">\n\n    <!-- Allow extension here -->\n    <cs-extension-point name=\"nav-buttons\"></cs-extension-point>\n\n    <button class=\"button button-icon button-clear icon ion-android-more-vertical\"\n            ng-click=\"showActionsPopover($event)\">\n    </button>\n  </ion-nav-buttons>\n\n  <ion-content>\n\n    <ion-refresher pulling-text=\"{{\'COMMON.BTN_REFRESH\' | translate}}\"\n                   on-refresh=\"refresh()\">\n    </ion-refresher>\n\n    <cs-extension-point name=\"buttons\"></cs-extension-point>\n\n    <!-- list -->\n    <ng-include src=\"\'plugins/es/templates/message/list.html\'\"></ng-include>\n\n  </ion-content>\n\n  <!-- fab button -->\n  <div class=\"visible-xs visible-sm\" >\n    <button ng-if=\"fabButtonNewMessageId\"\n            id=\"{{::fabButtonNewMessageId}}\"\n            class=\"button button-fab button-fab-bottom-right button-assertive spin has-footer\"\n            ng-click=\"showNewMessageModal()\">\n      <i class=\"icon ion-compose\"></i>\n    </button>\n  </div>\n\n</ion-view>\n");
$templateCache.put("plugins/es/templates/registry/tabs/tab_registry.html","<ion-view>\n  <ion-nav-buttons side=\"secondary\">\n\n    <!-- Allow extension here -->\n    <cs-extension-point name=\"nav-buttons\"></cs-extension-point>\n\n    <button class=\"button button-icon button-clear\"\n            ng-click=\"showFiltersPopover($event)\">\n      <i class=\"icon ion-android-funnel\"></i>\n    </button>\n\n    <button class=\"button button-icon button-clear icon ion-android-more-vertical\"\n            ng-click=\"showActionsPopover($event)\">\n    </button>\n  </ion-nav-buttons>\n\n  <ion-content>\n\n    <ion-refresher pulling-text=\"{{\'COMMON.BTN_REFRESH\' | translate}}\"\n                   on-refresh=\"doSearch()\">\n    </ion-refresher>\n\n    <cs-extension-point name=\"buttons\"></cs-extension-point>\n\n    <ng-include src=\"::\'plugins/es/templates/registry/lookup_form.html\'\"></ng-include>\n\n    <ng-include src=\"::\'plugins/es/templates/registry/lookup_list.html\'\"></ng-include>\n  </ion-content>\n\n</ion-view>\n");}]);

angular.module('cesium.es.plugin', [
    // Services
    'cesium.es.services',
    // Controllers
    'cesium.es.app.controllers',
    'cesium.es.common.controllers',
    'cesium.es.settings.controllers',
    'cesium.es.currency.controllers',
    'cesium.es.wot.controllers',
    'cesium.es.wallet.controllers',
    'cesium.es.profile.controllers',
    'cesium.es.message.controllers',
    'cesium.es.notification.controllers',
    'cesium.es.blockchain.controllers',
    'cesium.es.network.controllers',
    'cesium.es.registry.controllers',
    'cesium.es.group.controllers',
    'cesium.es.invitation.controllers',
    'cesium.es.subscription.controllers',
    'cesium.es.document.controllers'
  ])
;


function Notification(json, markAsReadCallback) {

  var messagePrefixes = {
    'registry': 'EVENT.REGISTRY.'
  };

  var that = this;

  // Avoid undefined errors
  json = json || {};

  that.type = json.type && json.type.toLowerCase();
  that.time = json.time;
  that.hash = json.hash;
  that.read = json.read_signature ? true : false;

  that.message = json.reference && messagePrefixes[json.reference.index] ?
  messagePrefixes[json.reference.index] + json.code :
  'EVENT.' + json.code;
  that.params = json.params;

  if (markAsReadCallback && (typeof markAsReadCallback === "function") ) {
    that.markAsReadCallback = markAsReadCallback;
  }

  function _formatHash(input) {
    return input ? input.substr(0,4) + input.substr(input.length-4) : '';
  }

  that.markAsRead = function() {
    if (that.markAsReadCallback) {
      that.markAsReadCallback(that);
    }
  };

  var pubkeys;

  json.code = json.code || '';

  // Membership
  if (json.code.startsWith('MEMBER_')) {
    that.avatarIcon = 'ion-person';
    that.icon = 'ion-information-circled positive';
    that.state = 'app.view_wallet';
  }

  // TX
  else if (json.code.startsWith('TX_')) {
    that.avatarIcon = 'ion-card';
    that.icon = (json.code == 'TX_SENT') ? 'ion-paper-airplane dark' : 'ion-archive balanced';
    pubkeys = json.params.length > 0 ? json.params[0] : null;
    if (pubkeys && pubkeys.indexOf(',') == -1) {
      that.pubkey = pubkeys;
    }
    that.state = 'app.view_wallet_tx';
    that.stateParams = {refresh: true};
  }

  // Certifications
  else if (json.code.startsWith('CERT_')) {
    that.avatarIcon = (json.code == 'CERT_RECEIVED') ? 'ion-ribbon-b' : 'ion-ribbon-a';
    that.icon = (json.code == 'CERT_RECEIVED') ? 'ion-ribbon-b balanced' : 'ion-ribbon-a gray';
    that.pubkey = json.params.length > 0 ? json.params[0] : null;
    that.state = 'app.wallet_cert';
    that.stateParams = {
      type: (json.code == 'CERT_RECEIVED') ? 'received' : 'given'
    };
  }

  // Message
  else if (json.code.startsWith('MESSAGE_')) {
    that.avatarIcon = 'ion-email';
    that.icon = 'ion-email dark';
    pubkeys = json.params.length > 0 ? json.params[0] : null;
    if (pubkeys && pubkeys.indexOf(',') == -1) {
      that.pubkey = pubkeys;
    }
    that.id = json.reference.id; // Do not care about notification ID, because notification screen use message _id
  }

  // page record
  else if (json.reference && json.reference.index == 'page') {
    that.avatarIcon = 'ion-ios-book';
    if (json.reference.anchor) {
      that.icon = 'ion-ios-chatbubble-outline dark';
      that.state = 'app.view_page_anchor';
      that.stateParams = {
        id: json.reference.id,
        title: json.params[1],
        anchor: _formatHash(json.reference.anchor)
      };
    }
    else {
      that.icon = 'ion-ios-book dark';
      that.state = 'app.view_page';
      that.stateParams = {
        id: json.reference.id,
        title: json.params[1]};
    }
  }

  // info message
  else if (json.type == 'INFO') {
    that.avatarIcon = 'ion-information';
    that.icon = 'ion-information-circled positive';
  }
  // warn message
  else if (json.type == 'WARN') {
    that.avatarIcon = 'ion-alert-circled';
    that.icon = 'ion-alert-circled energized';
  }
  // error message
  else if (json.type == 'ERROR') {
    that.avatarIcon = 'ion-close';
    that.icon = 'ion-close-circled assertive';
  }
}


function Comment(id, json) {

  var that = this;

  that.id = id;
  that.message = null; // set in copyFromJson()
  that.html = null; // set in copyFromJson()
  that.issuer = null; // set in copyFromJson()
  that.time = null; // set in copyFromJson()
  that.creationTime = null; // set in copyFromJson()
  that.reply_to = null; // set in copyFromJson()

  that.replyCount = 0;
  that.parent = null;
  that.replies = [];
  that.onRemoveListeners = [];

  that.copy = function(otherComment) {
    // Mandatory fields
    that.message = otherComment.message;
    that.html = otherComment.html;
    that.issuer = otherComment.issuer;
    that.time = otherComment.time;
    that.creationTime = otherComment.creationTime || that.time; // fill using time, for backward compatibility

    // Optional fields
    that.id = otherComment.id || that.id;
    that.reply_to = otherComment.reply_to || that.reply_to;
    that.uid = otherComment.uid || that.uid;
    that.name = otherComment.name || that.name;
    that.avatarStyle = otherComment.avatarStyle || that.avatarStyle;
    if (otherComment.parent) {
      that.parent = otherComment.parent;
    }
    if (otherComment.replies) that.setReplies(otherComment.replies);
  };

  that.copyFromJson = function(json) {
    that.message = json.message;
    that.issuer = json.issuer;
    that.time = json.time;
    that.creationTime = json.creationTime || that.time;
    that.reply_to = json.reply_to;
  };

  that.addOnRemoveListener = function(listener) {
    if (listener && (typeof listener === "function") ) {
      that.onRemoveListeners.push(listener);
    }
  };

  that.cleanAllListeners = function() {
    that.onRemoveListeners = [];
  };

  that.setReplies = function(replies) {
    that.removeAllReplies();
    that.addReplies(replies);
  };

  that.addReplies = function(replies) {
    if (!replies || !replies.length) return;
    replies = replies.sort(function(cm1, cm2) {
      return (cm1.time - cm2.time);
    });
    _.forEach(replies, function(reply) {
      reply.parent = that;
      that.replies.push(reply);
    });
    that.replyCount += replies.length;
  };

  that.containsReply = function(reply) {
    return that.replies.indexOf(reply) != -1;
  };

  that.addReply = function(reply) {
    that.replyCount += 1;
    that.replies.push(reply);
    that.replies = that.replies.sort(function(cm1, cm2) {
      return (cm1.time - cm2.time);
    });
    reply.parent = that;
  };

  that.removeAllReplies = function() {
    if (that.replyCount) {
      var replies = that.replies.splice(0, that.replies.length);
      that.replyCount = 0;
      _.forEach(replies, function (reply) {
        reply.remove();
      });
    }
  };

  that.removeReply = function(replyId) {
    var index = _.findIndex(that.replies, {id: replyId});
    if (index != -1) {
      that.replyCount--;
      var reply = that.replies.splice(index, 1)[0];
      delete reply.parent;
    }
  };

  that.remove = function() {
    if (that.parent) {
      that.parent.removeReply(that.id);
      delete that.parent;
    }
    //that.removeAllReplies();
    if (that.onRemoveListeners.length) {
      _.forEach(that.onRemoveListeners, function(listener) {
        listener(that);
      });
      that.issuer = null;
      that.message = null;
      that.cleanAllListeners();
    }
  };

  // Init from json
  if (json && typeof json === "object") {
    that.copyFromJson(json);
  }
}


function Invitation(json) {

  var that = this;

  // Avoid undefined errors
  json = json || {};

  that.type = json.type && json.type.toLowerCase();
  that.time = json.time;
  that.id = json.id;

  // Invitation to certify
  if (that.type == 'certification') {

    that.comment = json.comment;
    that.icon = 'ion-ribbon-a';
    that.okText= 'WOT.BTN_CERTIFY';

    // read the identity to certify
    if (!json.content || json.content.indexOf('-') == -1) {
      console.error('[invitation] Empty content for invitation [{0}]'.format(that.id));
      that.message = 'INVITATION.ERROR.BAD_INVITATION_FORMAT';
      that.pubkey = json.issuer;
      return;
    }

    var separatorIndex = json.content.lastIndexOf('-');
    if (separatorIndex == -1) {
      console.error('[invitation] Bad content format for invitation [{0}]: {1}'.format(that.id, json.content));
      that.message = 'INVITATION.ERROR.BAD_INVITATION_FORMAT';
      that.pubkey = json.issuer;
      return;
    }

    var identity = {
      uid: json.content.substr(0, separatorIndex),
      pubkey: json.content.substr(separatorIndex+1)
    };

    // Prepare the state action
    that.state = 'app.wot_identity';
    that.stateParams = {
      pubkey: identity.pubkey,
      uid: identity.uid,
      action: 'certify'
    };

    // Ask certification to himself
    if (identity.pubkey == json.issuer) {
      that.pubkey = json.issuer;
      that.uid = identity.uid;
      that.message = 'INVITATION.ASK_CERTIFICATION';
    }

    // Ask certification to someone else
    else {
      that.issuer = {
        pubkey: json.issuer
      };
      that.message = 'INVITATION.SUGGESTION_CERTIFICATION';
      that.pubkey = identity.pubkey;
      that.uid = identity.uid;
    }

  }

}


angular.module('cesium.es.services', [
    // Services
    'cesium.es.http.services',
    'cesium.es.comment.services',
    'cesium.es.social.services',
    'cesium.es.settings.services',
    'cesium.es.crypto.services',
    'cesium.es.profile.services',
    'cesium.es.notification.services',
    'cesium.es.message.services',
    'cesium.es.modal.services',
    'cesium.es.blockchain.services',
    'cesium.es.registry.services',
    'cesium.es.group.services',
    'cesium.es.wallet.services',
    'cesium.es.invitation.services',
    'cesium.es.subscription.services',
    'cesium.es.wot.services',
    'cesium.es.tx.services',
    'cesium.es.geo.services',
    'cesium.es.document.services'
  ])
;

angular.module('cesium.es.comment.services', ['ngResource', 'cesium.services',
  'cesium.es.http.services', 'cesium.es.profile.services'])

  .factory('esComment', ['$rootScope', '$q', 'UIUtils', 'BMA', 'esHttp', 'csWallet', 'csWot', function($rootScope, $q, UIUtils, BMA, esHttp, csWallet, csWot) {
    'ngInject';

    function EsComment(index) {

      var
        DEFAULT_SIZE = 20,
        fields = {
          commons: ["issuer", "creationTime", "time", "message", "reply_to"]
        },
        exports = {
          index: index,
          fields: {
            commons: fields.commons
          },
          raw: {
            search: esHttp.post('/'+index+'/comment/_search'),
            remove: esHttp.record.remove(index, 'comment'),
            wsChanges: esHttp.ws('/ws/_changes'),
            add: new esHttp.record.post('/'+index+'/comment', {creationTime: true}),
            update: new esHttp.record.post('/'+index+'/comment/:id/_update', {creationTime: true})
          }
        };

      exports.raw.refreshTreeLinks = function(data) {
        return exports.raw.addTreeLinks(data, true);
      };

      exports.raw.addTreeLinks = function(data, refresh) {
        data = data || {};
        data.result = data.result || [];
        data.mapById = data.mapById || {};

        var incompleteCommentIdByParentIds = {};
        _.forEach(_.values(data.mapById), function(comment) {
          if (comment.reply_to && !comment.parent) {
            var parent = data.mapById[comment.reply_to];
            if (!parent) {
              parent = new Comment(comment.reply_to);
              incompleteCommentIdByParentIds[parent.id] = comment.id;
              data.mapById[parent.id] = parent;
            }
            if (!refresh || !parent.containsReply(comment)) {
              parent.addReply(comment);
            }
          }
        });

        if (!_.size(incompleteCommentIdByParentIds)) {
          var deferred = $q.defer();
          deferred.resolve(data);
          return deferred.promise;
        }

        var request = {
          query : {
            terms: {
              _id: _.keys(incompleteCommentIdByParentIds)
            }
          },
          sort : [
            // Need desc, because of size+offset (will be sort in 'asc' order later)
            { "creationTime" : {"order" : "desc"}},
            { "time" : {"order" : "desc"}} // for backward compatibility
          ],
          from: 0,
          size: 1000,
          _source: fields.commons
        };

        console.debug("[ES] [comment] Getting missing comments in tree");
        return exports.raw.search(request)
          .then(function(res){
            if (!res.hits.total) {
              console.error("[ES] [comment] Comments has invalid [reply_to]: " + _.values(incompleteCommentIdByParentIds).join(','));
              return data;
            }

            _.forEach(res.hits.hits, function(hit) {
              var comment = data.mapById[hit._id];
              comment.copyFromJson(hit._source);
              // Parse URL and hashtags
              comment.html = esHttp.util.parseAsHtml(comment.message);
              delete incompleteCommentIdByParentIds[comment.id];
            });

            if (_.size(incompleteCommentIdByParentIds)) {
              console.error("Comments has invalid [reply_to]: " + _.values(incompleteCommentIdByParentIds).join(','));
            }

            return exports.raw.addTreeLinks(data); // recursive call
          });
      };

      exports.raw.loadDataByRecordId = function(recordId, options) {
        options = options || {};
        options.from = options.from || 0;
        options.size = options.size || DEFAULT_SIZE;
        options.loadAvatar = angular.isDefined(options.loadAvatar) ? options.loadAvatar : true;
        options.loadAvatarAllParent = angular.isDefined(options.loadAvatarAllParent) ? (options.loadAvatar && options.loadAvatarAllParent) : false;
        if (options.size < 0) options.size = DEFAULT_SIZE;

        var request = {
          query : {
            term: { record : recordId}
          },
          sort : [
            // Need desc, because of size+offset (will be sort in 'asc' order later)
            { "creationTime" : {"order" : "desc"}},
            { "time" : {"order" : "desc"}} // for backward compatibility
          ],
          from: options.from,
          size: options.size,
          _source: fields.commons
        };

        var data = {
          total: 0,
          mapById: {},
          result: [],
          pendings: {}
        };

        // Search comments
        return exports.raw.search(request)
          .then(function(res){
            if (!res.hits.total) return data;
            data.total = res.hits.total;
            data.result = res.hits.hits.reduce(function (result, hit) {
              var comment = new Comment(hit._id, hit._source);
              // Parse URL and hashtags
              comment.html = esHttp.util.parseAsHtml(comment.message);
              // fill map by id
              data.mapById[comment.id] = comment;
              return result.concat(comment);
            }, data.result);

            // Add tree (parent/child) link
            return exports.raw.addTreeLinks(data);
          })

          // Fill avatars (and uid)
          .then(function() {
            if (!options.loadAvatar) return;
            if (options.loadAvatarAllParent) {
              return csWot.extendAll(_.values(data.mapById), 'issuer');
            }
            return csWot.extendAll(data.result, 'issuer');
          })

          // Sort (creationTime asc)
          .then(function() {
            data.result = data.result.sort(function(cm1, cm2) {
              return (cm1.creationTime - cm2.creationTime);
            });
            return data;
          });
      };

      // Add listener to send deletion
      exports.raw.createOnDeleteListener = function(data) {
        return function(comment) {
          var index = _.findIndex(data.result, {id: comment.id});
          if (index === -1) return;
          data.result.splice(index, 1);
          delete data.mapById[comment.id];
          // Send deletion request
          if (csWallet.isUserPubkey(comment.issuer)) {
            return exports.raw.remove(comment.id)
              .catch(function(err){
                console.error(err);
                throw new Error('COMMENTS.ERROR.FAILED_REMOVE_COMMENT');
              });
          }
          else {
            return $q.reject("User is not the comment issuer");
          }
        };
      };

      exports.raw.startListenChanges = function(recordId, data, scope) {
        data = data || {};
        data.result = data.result || [];
        data.mapById = data.mapById || {};
        data.pendings = data.pendings || {};

        scope = scope||$rootScope;

        // Add listener to send deletion
        var onRemoveListener = exports.raw.createOnDeleteListener(data);
        _.forEach(data.result, function(comment) {
          comment.addOnRemoveListener(onRemoveListener);
        });

        // Open websocket
        var time = new Date().getTime();
        console.info("[ES] [comment] Starting websocket to listen comments on [{0}/record/{1}]".format(index, recordId.substr(0,8)));
        var wsChanges = exports.raw.wsChanges();
        return wsChanges.open()

        // Define source filter
          .then(function(sock) {
            return sock.send(index + '/comment');
          })

          // Listen changes
          .then(function(){
            console.debug("[ES] [comment] Websocket opened in {0} ms".format(new Date().getTime() - time));
            wsChanges.on(function(change) {
              if (!change) return;
              scope.$applyAsync(function() {
                var comment = data.mapById[change._id];
                if (change._operation === 'DELETE') {
                  if (comment) comment.remove();
                }
                else if (change._source && change._source.record === recordId) {
                  // update
                  if (comment) {
                    comment.copyFromJson(change._source);
                    // Parse URL and hashtags
                    comment.html = esHttp.util.parseAsHtml(comment.message);
                    exports.raw.refreshTreeLinks(data);
                  }
                  // create (if not in pending comment)
                  else if ((!data.pendings || !data.pendings[change._source.creationTime]) && change._source.issuer != csWallet.data.pubkey) {
                    comment = new Comment(change._id, change._source);
                    comment.addOnRemoveListener(onRemoveListener);
                    comment.isnew = true;
                    // Parse URL and hashtags
                    comment.html = esHttp.util.parseAsHtml(comment.message);
                    // fill map by id
                    data.mapById[change._id] = comment;
                    exports.raw.refreshTreeLinks(data)
                    // fill avatars (and uid)
                      .then(function() {
                        return csWot.extend(comment, 'issuer');
                      })
                      .then(function() {
                        data.result.push(comment);
                      });
                  }
                  else {
                    console.debug("Skip comment received by WS (already in pending)");
                  }
                }
              });
            });
          });
      };

      /**
       * Save a comment (add or update)
       * @param recordId
       * @param data
       * @param comment
       * @returns {*}
       */
      exports.raw.save = function(recordId, data, comment) {
        data = data || {};
        data.result = data.result || [];
        data.mapById = data.mapById || {};
        data.pendings = data.pendings || {};

        // Preparing JSON to sent
        var id = comment.id;
        var json = {
          creationTime: id ? comment.creationTime || comment.time/*for compat*/ : esHttp.date.now(),
          message: comment.message,
          record: recordId,
          issuer: csWallet.data.pubkey
        };
        if (comment.reply_to || comment.parent) {
          json.reply_to = comment.reply_to || comment.parent.id;
        }
        else {
          json.reply_to = null; // force to null because ES ignore missing field, when updating
        }

        // Create or update the entity
        var entity;
        if (!id) {
          entity = new Comment(null, json);
          entity.addOnRemoveListener(exports.raw.createOnDeleteListener(data));
          // copy additional wallet data
          entity.uid = csWallet.data.uid;
          entity.name = csWallet.data.name;
          entity.avatar = csWallet.data.avatar;

          entity.isnew = true;
          if (comment.parent) {
            comment.parent.addReply(entity);
          }
          data.result.push(entity);
        }
        else {
          entity = data.mapById[id];
          entity.copy(comment);
        }

        // Parse URL and hashtags
        entity.html = esHttp.util.parseAsHtml(entity.message);

        // Send add request
        if (!id) {
          data.pendings = data.pendings || {};
          data.pendings[json.creationTime] = json;

          return exports.raw.add(json)
            .then(function (id) {
              entity.id = id;
              data.mapById[id] = entity;
              delete data.pendings[json.creationTime];
              return entity;
            });
        }
        // Send update request
        else {
          return exports.raw.update(json, {id: id})
            .then(function () {
              return entity;
            });
        }
      };

      exports.raw.stopListenChanges = function(data) {
        console.debug("[ES] [comment] Stopping websocket on comments");
        _.forEach(data.result, function(comment) {
          comment.cleanAllListeners();
        });
        // Close previous
        exports.raw.wsChanges().close();
      };

      // Expose functions
      exports.load = exports.raw.loadDataByRecordId;
      exports.save = exports.raw.save;
      exports.changes = {
        start: exports.raw.startListenChanges,
        stop: exports.raw.stopListenChanges
      };
      return exports;
    }

    return {
      instance: EsComment
    };
  }])
;

angular.module('cesium.es.http.services', ['ngResource', 'ngApi', 'cesium.services', 'cesium.config'])

/**
 * Elastic Search Http
 */
.factory('esHttp', ['$q', '$timeout', '$rootScope', '$state', '$sce', '$translate', '$window', '$filter', 'CryptoUtils', 'UIUtils', 'csHttp', 'csConfig', 'csSettings', 'BMA', 'csWallet', 'csPlatform', 'Api', function($q, $timeout, $rootScope, $state, $sce, $translate, $window, $filter,
                            CryptoUtils, UIUtils, csHttp, csConfig, csSettings, BMA, csWallet, csPlatform, Api) {
  'ngInject';

  // Allow to force SSL connection with port different from 443
  var forceUseSsl = (csConfig.httpsMode === 'true' || csConfig.httpsMode === true || csConfig.httpsMode === 'force') ||
  ($window.location && $window.location.protocol === 'https:') ? true : false;
  if (forceUseSsl) {
    console.debug('[ES] [https] Enable SSL (forced by config or detected in URL)');
  }

  function Factory(host, port, wsPort, useSsl) {

    var
      that = this,
      constants = {
        ES_USER_API_ENDPOINT: 'ES_USER_API( ([a-z_][a-z0-9-_.]*))?( ([0-9.]+))?( ([0-9a-f:]+))?( ([0-9]+))'
      },
      regexp = {
        IMAGE_SRC: exact('data:([A-Za-z//]+);base64,(.+)'),
        URL: match('(www\\.|https?:\/\/(www\\.)?)[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)'),
        HASH_TAG: match('(?:^|[\t\n\r\s ])#([\\wá¸¡ÄÇ¦ÄÃ Ã¡Ã¢Ã£Ã¤Ã¥Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã°Ã²Ã³Ã´ÃµÃ¶Ã¹ÃºÃ»Ã¼Ã½Ã¿]+)'),
        USER_TAG: match('(?:^|[\t\n\r\s ])@('+BMA.constants.regexp.USER_ID+')'),
        ES_USER_API_ENDPOINT: exact(constants.ES_USER_API_ENDPOINT)
      },
      fallbackNodeIndex = 0,
      listeners,
      defaultSettingsNode,
      truncUrlFilter = $filter('truncUrl');

    that.data = {
      isFallback: false
    };
    that.cache = _emptyCache();
    that.api = new Api(this, "esHttp");
    that.started = false;
    that.init = init;

    init(host, port, wsPort, useSsl);

    function init(host, port, wsPort, useSsl) {
      // Use settings as default
      if (!host && csSettings.data) {
        host = host || (csSettings.data.plugins && csSettings.data.plugins.es ? csSettings.data.plugins.es.host : null);
        port = port || (host ? csSettings.data.plugins.es.port : null);
        wsPort = wsPort || (host ? csSettings.data.plugins.es.wsPort : null);
        useSsl = angular.isDefined(useSsl) ? useSsl : (port == 443 || csSettings.data.plugins.es.useSsl || forceUseSsl);
      }

      that.alive = false;
      that.host = host;
      that.port = port || ((useSsl || forceUseSsl) ? 443 : 80);
      that.wsPort = wsPort || that.port;
      that.useSsl = angular.isDefined(useSsl) ? useSsl : (that.port == 443 || forceUseSsl);
      that.server = csHttp.getServer(host, port);
    }

    function isSameNodeAsSettings(data) {
      data = data || csSettings.data;
      if (!data.plugins || !data.plugins.es) return false;

      var host = data.plugins.es.host;
      var useSsl = data.plugins.es.port == 443 || data.plugins.es.useSsl || forceUseSsl;
      var port = data.plugins.es.port || (useSsl ? 443 : 80);
      var wsPort = data.plugins.es.wsPort || port;

      return isSameNode(host, port, wsPort, useSsl);
    }

    function isSameNode(host, port, wsPort, useSsl) {
      return (that.host == host) &&
        (that.port == port) &&
        (!wsPort || that.wsPort == wsPort) &&
        (angular.isUndefined(useSsl) || useSsl == that.useSsl);
    }

    // Say if the ES node is a fallback node or the configured node
    function isFallbackNode() {
      return that.data.isFallback;
    }

    // Set fallback flag (e.g. called by ES settings, when resetting settings)
    function setIsFallbackNode(isFallback) {
      that.data.isFallback = isFallback;
    }

    function exact(regexpContent) {
      return new RegExp('^' + regexpContent + '$');
    }
    function match(regexpContent) {
      return new RegExp(regexpContent);
    }

    function _emptyCache() {
      return {
        getByPath: {},
        postByPath: {},
        wsByPath: {}
      };
    }

    function onSettingsReset(data, deferred) {
      deferred = deferred || $q.defer();

      if (that.data.isFallback) {
        // Force a restart
        if (that.started) {
          that.stop();
        }
      }

      // Reset to default values
      that.data.isFallback = false;
      defaultSettingsNode = null;

      deferred.resolve(data);
      return deferred.promise;
    }

    that.cleanCache = function() {
      console.debug('[ES] [http] Cleaning requests cache...');
      _.keys(that.cache.wsByPath).forEach(function(key) {
        var sock = that.cache.wsByPath[key];
        sock.close();
      });
      that.cache = _emptyCache();
    };

    that.copy = function(otherNode) {
      if (that.started) that.stop();
      that.init(otherNode.host, otherNode.port, otherNode.wsPort, otherNode.useSsl || otherNode.port == 443);
      that.data.isTemporary = false; // reset temporary flag
      return that.start(true /*skipInit*/);
    };



    // Get time (UTC)
    that.date = { now : csHttp.date.now };

    that.getUrl  = function(path) {
      return csHttp.getUrl(that.host, that.port, path, that.useSsl);
    };

    that.get = function (path) {

      var getRequest = function(params) {
        if (!that.started) {
          if (!that._startPromise) {
            console.error('[ES] [http] Trying to get [{0}] before start()...'.format(path));
          }
          return that.ready().then(function(start) {
            if (!start) return $q.reject('ERROR.ES_CONNECTION_ERROR');
            return getRequest(params); // loop
          });
        }

        var request = that.cache.getByPath[path];
        if (!request) {
          request =  csHttp.get(that.host, that.port, path, that.useSsl);
          that.cache.getByPath[path] = request;
        }
        return request(params);
      };

      return getRequest;
    };

    that.post = function(path) {
      var postRequest = function(obj, params) {
        if (!that.started) {
          if (!that._startPromise) {
            console.error('[ES] [http] Trying to post [{0}] before start()...'.format(path));
          }
          return that.ready().then(function(start) {
            if (!start) return $q.reject('ERROR.ES_CONNECTION_ERROR');
            return postRequest(obj, params); // loop
          });
        }

        var request = that.cache.postByPath[path];
        if (!request) {
          request =  csHttp.post(that.host, that.port, path, that.useSsl);
          that.cache.postByPath[path] = request;
        }
        return request(obj, params);
      };
      return postRequest;
    };

    that.ws = function(path) {
      return function() {
        var sock = that.cache.wsByPath[path];
        if (!sock) {
          sock =  csHttp.ws(that.host, that.wsPort, path, that.useSsl);
          that.cache.wsByPath[path] = sock;
        }
        return sock;
      };
    };

    that.isAlive = function() {
      return csHttp.get(that.host, that.port, '/node/summary', that.useSsl)()
        .then(function(json) {
          var software = json && json.duniter && json.duniter.software || 'unknown';
          if (software == 'duniter4j-elasticsearch') return true;
          console.error("[ES] [http] Not a Duniter4j ES node, but a {0} node".format(software));
          return false;
        })
        .catch(function() {
          return false;
        });
    };

    // Alert user if node not reached - fix issue #
    that.checkNodeAlive = function(alive) {
      if (alive) {
        setIsFallbackNode(!isSameNodeAsSettings());
        return true;
      }
      if (angular.isUndefined(alive)) {
        return that.isAlive().then(that.checkNodeAlive);
      }

      var settings = csSettings.data.plugins && csSettings.data.plugins.es || {};

      // Remember the default node
      defaultSettingsNode = defaultSettingsNode || {
        host: settings.host,
        port: settings.port,
        wsPort: settings.wsPort
      };

      var fallbackNode = settings.fallbackNodes && fallbackNodeIndex < settings.fallbackNodes.length && settings.fallbackNodes[fallbackNodeIndex++];
      if (!fallbackNode) {
        $translate('ERROR.ES_CONNECTION_ERROR', {server: that.server})
          .then(UIUtils.alert.info);
        return false; // stop the loop
      }
      var newServer = csHttp.getServer(fallbackNode.host, fallbackNode.port);
      UIUtils.loading.hide();
      return $translate('CONFIRM.ES_USE_FALLBACK_NODE', {old: that.server, new: newServer})
        .then(UIUtils.alert.confirm)
        .then(function (confirm) {
          if (!confirm) return false; // stop the loop

          that.cleanCache();

          that.init(fallbackNode.host, fallbackNode.port, fallbackNode.wsPort, fallbackNode.useSsl || fallbackNode.port == 443);

          // check is alive then loop
          return that.isAlive().then(that.checkNodeAlive);
        });
    };

    that.isStarted = function() {
      return that.started;
    };

    that.ready = function() {
      if (that.started) return $q.when(true);
      return that._startPromise || that.start();
    };

    that.start = function(skipInit) {
      if (that._startPromise) return that._startPromise;
      if (that.started) return $q.when(that.alive);

      that._startPromise = csPlatform.ready()
        .then(function() {

          if (!skipInit) {
            // Init with defaults settings
            that.init();
          }
        })
        .then(function() {
          console.debug('[ES] [http] Starting on [{0}]{1}...'.format(
            that.server,
            (that.useSsl ? ' (SSL on)' : '')
          ));
          var now = new Date().getTime();

          return that.checkNodeAlive()
            .then(function(alive) {
              that.alive = alive;
              if (!alive) {
                console.error('[ES] [http] Could not start [{0}]: node unreachable'.format(that.server));
                that.started = true;
                delete that._startPromise;
                fallbackNodeIndex = 0; // reset the fallback node counter
                return false;
              }

              // Add listeners
              addListeners();

              console.debug('[ES] [http] Started in '+(new Date().getTime()-now)+'ms');
              that.api.node.raise.start();


              that.started = true;
              delete that._startPromise;
              fallbackNodeIndex = 0; // reset the fallback node counter


              return true;
            });
        });
      return that._startPromise;
    };

    that.stop = function() {
      console.debug('[ES] [http] Stopping...');

      removeListeners();

      setIsFallbackNode(false); // will be re-computed during start phase
      delete that._startPromise;
      if (that.alive) {
        that.cleanCache();
        that.alive = false;
        that.started = false;
        that.api.node.raise.stop();
      }
      else {
        that.started = false;
      }
      return $q.when();
    };

    that.restart = function() {
      that.stop();
      return $timeout(that.start, 200);
    };

    function parseTagsFromText(value, prefix) {
      prefix = prefix || '#';
      var reg = prefix === '@' ? regexp.USER_TAG : regexp.HASH_TAG;
      var matches = value && reg.exec(value);
      var tags = matches && [];
      while(matches) {
        var tag = matches[1];
        if (!_.contains(tags, tag)) {
          tags.push(tag);
        }
        value = value.substr(matches.index + matches[1].length + 1);
        matches = value.length > 0 && reg.exec(value);
      }
      return tags;
    }

    function parseUrlsFromText(value) {
      var matches = value && regexp.URL.exec(value);
      var urls = matches && [];
      while(matches) {
        var url = matches[0];
        if (!_.contains(urls, url)) {
          urls.push(url);
        }
        value = value.substr(matches.index + matches[0].length + 1);
        matches = value && regexp.URL.exec(value);
      }
      return urls;
    }

    function escape(text) {
      if (!text) return text;
      return text.replace(/</g, '&lt;').replace(/>/g, '&gt;');
    }

    function parseAsHtml(text, options) {

      var content = text ? escape(text.trim()) : undefined;
      if (content) {
        options = options || {};
        options.tagState = options.tagState || 'app.wot_lookup.tab_search';
        options.uidState = options.uidState || 'app.wot_identity_uid';
        if (options.newLine || !angular.isDefined(options.newLine)) {
          content = content.replace(/\n/g, '<br>\n');
        }

        // Replace URL in description
        var urls = parseUrlsFromText(content);
        _.forEach(urls, function(url){
          var href = (url.startsWith('http://') || url.startsWith('https://')) ? url : ('http://' + url);
          // Redirect URL to the function 'openLink', to open a new window if need (e.g. desktop app)
          var link = '<a on-tap=\"openLink($event, \'{0}\')\" href=\"{1}\" target="_blank">{2}</a>'.format(href, href, truncUrlFilter(url));
          content = content.replace(url, link);
        });

        // Replace hashtags
        var hashTags = parseTagsFromText(content);
        _.forEach(hashTags, function(tag){
          var link = '<a ui-sref=\"{0}({hash: \'{1}\'})\">#{2}</a>'.format(options.tagState, tag, tag);
          content = content.replace('#'+tag, link);
        });

        // Replace user tags
        var userTags = parseTagsFromText(content, '@');
        _.forEach(userTags, function(uid){
          var link = '<a ui-sref=\"{0}({uid: \'{1}\'})\">@{2}</a>'.format(options.uidState, uid, uid);
          content = content.replace('@'+uid, link);
        });
      }
      return content;
    }

    function fillRecordTags(record, fieldNames) {
      fieldNames = fieldNames || ['title', 'description'];

      record.tags = fieldNames.reduce(function(res, fieldName) {
        var value = record[fieldName];
        var tags = value && parseTagsFromText(value);
        return tags ? res.concat(tags) : res;
      }, []);
    }

    function findObjectInTree(obj, attrName) {
      if (!obj) return;
      if (obj[attrName]) return obj[attrName];
      if (Array.isArray(obj)) {
        return obj.reduce(function(res, item) {
          return res ? res : findObjectInTree(item, attrName);
        }, false);
      }
      else if (typeof obj == "object") {
        return _.reduce(_.keys(obj), function (res, key) {
          return res ? res : findObjectInTree(obj[key], attrName);
        }, false);
      }
    }

    function postRecord(path, options) {
      options = options || {};
      var postRequest = that.post(path);
      return function(record, params) {

        var wallet = (params && params.wallet || csWallet);
        params = params || {};
        params.pubkey = params.pubkey || wallet.data.pubkey;
        var keypair = params.keypair || wallet.data.keypair;
        // make sure to hide some params
        if (params) {
          delete params.wallet;
          delete params.keypair;
        }
        return (wallet.isAuth() ? $q.when(wallet.data) : wallet.auth({silent: true, minData: true}))
          .then(function() {
            if (options.creationTime && !record.creationTime) {
              record.creationTime = that.date.now();
            }
            // Always update the time - fix #572
            // Make sure time is always > previous (required by ES node)
            var now = that.date.now();
            record.time = (!record.time || record.time < now) ? now : (record.time+1);

            var obj = angular.copy(record);
            delete obj.signature;
            delete obj.hash;
            obj.issuer = params.pubkey; // force keypair pubkey
            if (!obj.version) {
              obj.version = 2;
            }

            // Fill tags
            if (options.tagFields) {
              fillRecordTags(obj, options.tagFields);
            }

            //console.debug("Will send obj: ", obj);
            var str = JSON.stringify(obj);

            return CryptoUtils.util.hash(str)
              .then(function(hash) {
                return CryptoUtils.sign(hash, keypair)
                  .then(function(signature) {
                    // Prepend hash+signature
                    str = '{"hash":"{0}","signature":"{1}",'.format(hash, signature) + str.substring(1);
                    // Send data
                    return postRequest(str, params)
                      .then(function (id){
                        return id;
                      });
                  });
              });
          });
      };
    }

    function removeRecord(index, type) {
      return function(id, options) {
        options = options || {};
        var wallet = (options && options.wallet || csWallet);
        delete options.wallet;
        return (wallet.isAuth() ? $q.when(wallet.data) : wallet.auth({silent: true, minData: true}))
          .then(function(walletData) {

            var obj = {
              version: 2,
              index: index,
              type: type,
              id: id,
              issuer: walletData.pubkey,
              time: that.date.now()
            };
            var str = JSON.stringify(obj);
            return CryptoUtils.util.hash(str)
              .then(function (hash) {
                return CryptoUtils.sign(hash, walletData.keypair)
                  .then(function (signature) {
                    // Prepend hash+signature
                    str = '{"hash":"{0}","signature":"{1}",'.format(hash, signature) + str.substring(1);
                    // Send data
                    return that.post('/history/delete')(str)
                      .then(function (id) {
                        return id;
                      });
                  });
              });
          });
      };
    }

    that.image = {};

    function imageFromAttachment(attachment) {
      if (!attachment || !attachment._content_type || !attachment._content || attachment._content.length === 0) {
        return null;
      }
      var image = {
        src: "data:" + attachment._content_type + ";base64," + attachment._content
      };
      if (attachment._title) {
        image.title = attachment._title;
      }
      if (attachment._name) {
        image.name = attachment._name;
      }
      return image;
    }

    function imageToAttachment(image) {
      if (!image || !image.src) return null;
      var match = regexp.IMAGE_SRC.exec(image.src);
      if (!match) return null;
      var attachment = {
        _content_type: match[1],
        _content: match[2]
      };
      if (image.title) {
        attachment._title = image.title;
      }
      if (image.name) {
        attachment._name = image.name;
      }
      return attachment;
    }

    /**
     * This will create a image (src, title, name) using the _content is present, or computing a image URL to the ES node
     * @param host
     * @param port
     * @param hit
     * @param imageField
     * @returns {{}}
     */
    that.image.fromHit = function(hit, imageField) {
      if (!hit || !hit._source) return;
      var attachment =  hit._source[imageField];
      if (!attachment || !attachment._content_type || !attachment._content_type.startsWith("image/")) return;
      var image = {};
      // If full content: then use it directly
      if (attachment._content) {
        image.src = "data:" + attachment._content_type + ";base64," + attachment._content;
      }
      // Compute an url
      else {
        var extension = attachment._content_type.substr(6);
        var path = [hit._index, hit._type, hit._id, '_image', imageField].join('/');
        path = '/' + path + '.' + extension;
        image.src = that.getUrl(path);
      }
      if (attachment._title) {
        image.title = attachment._title;
      }
      if (attachment._name) {
        image.name = attachment._name;
      }
      return image;
    };

    function parseEndPoint(endpoint) {
      var matches = regexp.ES_USER_API_ENDPOINT.exec(endpoint);
      if (!matches) return;
      return {
        "dns": matches[2] || '',
        "ipv4": matches[4] || '',
        "ipv6": matches[6] || '',
        "port": matches[8] || 80
      };
    }

    function emptyHit() {
      return {
         _id: null,
         _index: null,
         _type: null,
         _version: null,
         _source: {}
      };
    }

    function addListeners() {
      // Watch some service events
      listeners = [
        csSettings.api.data.on.reset($rootScope, onSettingsReset, that)
      ];
    }

    function removeListeners() {
      _.forEach(listeners, function(remove){
        remove();
      });
      listeners = [];
    }

    // Define events
    that.api.registerEvent('node', 'start');
    that.api.registerEvent('node', 'stop');

    var exports = {
      getServer: csHttp.getServer,
      node: {
        summary: that.get('/node/summary'),
        parseEndPoint: parseEndPoint,
        same: isSameNode,
        sameAsSettings: isSameNodeAsSettings,
        isFallback: isFallbackNode
      },
      record: {
        post: postRecord,
        remove: removeRecord
      },
      image: {
        fromAttachment: imageFromAttachment,
        toAttachment: imageToAttachment
      },
      hit: {
        empty: emptyHit
      },
      util: {
        parseTags: parseTagsFromText,
        parseAsHtml: parseAsHtml,
        findObjectInTree: findObjectInTree
      },
      constants: constants
    };
    exports.constants.regexp = regexp;
    angular.merge(that, exports);
  }


  var service = new Factory();

  service.instance = function(host, port, wsPort, useSsl) {
    return new Factory(host, port, wsPort, useSsl);
  };

  return service;
}])
;

angular.module('cesium.es.settings.services', ['cesium.services', 'cesium.es.http.services'])
.config(['PluginServiceProvider', 'csConfig', function(PluginServiceProvider, csConfig) {
    'ngInject';

    var enable = csConfig.plugins && csConfig.plugins.es;
    if (enable) {
      // Will force to load this service
      PluginServiceProvider.registerEagerLoadingService('esSettings');
    }

  }])

.factory('esSettings', ['$rootScope', '$q', '$timeout', 'Api', 'esHttp', 'csConfig', 'csSettings', 'CryptoUtils', 'Device', 'UIUtils', 'csWallet', function($rootScope, $q, $timeout, Api, esHttp,
                            csConfig, csSettings, CryptoUtils, Device, UIUtils, csWallet) {
  'ngInject';

  var
    SETTINGS_SAVE_SPEC = {
      includes: ['locale', 'showUDHistory', 'useRelative', 'useLocalStorage', 'expertMode', 'logoutIdle', 'blockValidityWindow'],
      excludes: ['timeout', 'cacheTimeMs', 'time', 'login', 'build'],
      plugins: {
        es: {
          excludes: ['enable', 'host', 'port', 'wsPort', 'fallbackNodes', 'enableGoogleApi', 'googleApiKey'],
          notifications: {
          }
        }
      },
      wallet: {
        includes: ['alertIfUnusedWallet'],
        excludes: ['notificationReadTime']
      },
      helptip: {
        excludes: ['installDocUrl']
      },
      notifications: {
        excludes: ['readTime']
      }
    },
    defaultSettings = angular.merge({
        plugins: {
          es: {
            askEnable: false,
            useRemoteStorage: true,
            notifications: {
              txSent: true,
              txReceived: true,
              certSent: true,
              certReceived: true
            },
            invitations: {
              readTime: true
            },
            defaultCountry: undefined,
            enableGoogleApi: false,
            googleApiKey: undefined,
            wot: {
              enableMixedSearch: true
            },
            registry: {
              defaultSearch: {
                location: null,
                geoPoint: null
              }
            },
            geoDistance: '20km'
          }
        }
    }, {plugins: {es: csConfig.plugins && csConfig.plugins.es || {}}}),
    that = this,
    api = new Api('esSettings'),
    previousRemoteData,
    listeners,
    ignoreSettingsChanged = false,
    failEnable = false
  ;

  that.api = api;
  that.get = esHttp.get('/user/settings/:id');
  that.add = esHttp.record.post('/user/settings');
  that.update = esHttp.record.post('/user/settings/:id/_update');

  that.isEnable = function() {
    return csSettings.data.plugins &&
      csSettings.data.plugins.es &&
      csSettings.data.plugins.es.enable &&
      !!csSettings.data.plugins.es.host;
  };

  that.wot = {};
  that.wot.isMixedSearchEnable = function() {
    return that.isEnable() &&
      (angular.isDefined(csSettings.data.plugins.es.wot && csSettings.data.plugins.es.wot.enableMixedSearch) ?
        csSettings.data.plugins.es.wot.enableMixedSearch : true);
  };

  function copyUsingSpec(data, copySpec) {
    var result = {};

    // Add implicit includes
    if (copySpec.includes) {
      _.forEach(_.keys(copySpec), function(key) {
        if (key != "includes" && key != "excludes") {
          copySpec.includes.push(key);
        }
      });
    }

    _.forEach(_.keys(data), function(key) {
      if ((!copySpec.includes || _.contains(copySpec.includes, key)) &&
        (!copySpec.excludes || !_.contains(copySpec.excludes, key))) {
        if (data[key] && (typeof data[key] == 'object') &&
          copySpec[key] && (typeof copySpec[key] == 'object')) {
          result[key] = copyUsingSpec(data[key], copySpec[key]);
        }
        else {
          result[key] = data[key];
        }
      }
    });
    return result;
  }

  // Load settings
  function loadSettings(pubkey, boxKeypair) {
    var now = new Date().getTime();
    return that.get({id: pubkey})
        .catch(function(err){
          if (err && err.ucode && err.ucode == 404) {
            return null; // not found
          }
          else {
            throw err;
          }
        })
      .then(function(res) {
        if (!res || !res._source) {
          return;
        }
        var record = res._source;
        // Do not apply if same version
        if (record.time === csSettings.data.time) {
          console.debug('[ES] [settings] Loaded in '+ (new Date().getTime()-now) +'ms, but already up to date');
          return;
        }
        var nonce = CryptoUtils.util.decode_base58(record.nonce);
        // Decrypt settings content
        return CryptoUtils.box.open(record.content, nonce, boxKeypair.boxPk, boxKeypair.boxSk)
          .then(function(json) {
            var settings = JSON.parse(json || '{}');
            settings.time = record.time;
            console.debug('[ES] [settings] Loaded and decrypted in '+ (new Date().getTime()-now) +'ms');
            return settings;
          })
          // if error: skip stored content
          .catch(function(err){
            console.error('[ES] [settings] Could not load remote settings: ' + (err && err.message || 'decryption error'));
            // make sure to remove time, to be able to save it again
            delete csSettings.data.time;
            return null;
          });
      });
  }

  function onSettingsReset(data, deferred) {
    deferred = deferred || $q.defer();
    angular.merge(data, defaultSettings);

    failEnable = false;
    deferred.resolve(data);
    return deferred.promise;
  }

  function onWalletAuth(data, deferred) {
    deferred = deferred || $q.defer();
    if (!data || !data.pubkey || !data.keypair || !data.keypair.signSk || !data.keypair.boxSk) {
      deferred.resolve();
      return deferred.promise;
    }

    console.debug('[ES] [settings] Loading user settings...');

    // Load settings
    loadSettings(data.pubkey, data.keypair)
      .then(function(settings) {
        if (!settings) return; // not found or up to date
        angular.merge(csSettings.data, settings);

        // Remember for comparison
        previousRemoteData = settings;

        console.debug('[ES] [settings] Applied');
        return storeSettingsLocally();
      })
    .then(function() {
      deferred.resolve(data);
    })
    .catch(function(err){
      deferred.reject(err);
    });

    return deferred.promise;
  }

  // Listen for settings changed
  function onSettingsChanged(data) {
    // avoid recursive call, because storeSettingsLocally() could emit event again
    if (ignoreSettingsChanged) return;

    var wasEnable = listeners && listeners.length > 0;

    // Force to stop & restart, if ES node has changed
    if (esHttp.isStarted() && !esHttp.node.isFallback() && !esHttp.node.sameAsSettings(data)) {
      stop();
    }

    refreshState();

    var isEnable = that.isEnable();
    if (isEnable && csWallet.isAuth()) {
      if (!wasEnable) {
        onWalletAuth(csWallet.data);
      }
      else {
        storeSettingsRemotely(data);
      }
    }
  }

  function storeSettingsLocally() {
    if (ignoreSettingsChanged) return $q.when();
    ignoreSettingsChanged = true;
    return csSettings.store()
      .then(function(){
        ignoreSettingsChanged = false;
      })
      .catch(function(err) {
        ignoreSettingsChanged = false;
        throw err;
      });
  }

  function storeSettingsRemotely(data) {
    var filteredData = copyUsingSpec(data, SETTINGS_SAVE_SPEC);
    if (previousRemoteData && angular.equals(filteredData, previousRemoteData)) {
      return $q.when();
    }

    // Skip remote saving, if remote storage disable
    if (!csSettings.data.plugins.es.useRemoteStorage) {
      return storeSettingsLocally();
    }

    var time = esHttp.date.now(); // always update time
    console.debug('[ES] [settings] Saving user settings remotely...');

    return $q.all([
        csWallet.getKeypair(), // same result as esWallet.box.getKeypair(), because box keypair computed on auth
        CryptoUtils.util.random_nonce()
      ])
      .then(function(res) {
        var boxKeypair = res[0];
        var nonce = res[1];

        // Make sure user has not disconnect
        // This can occur, when auth + disabling ES plugin in settings
        if (!boxKeypair.boxPk || !boxKeypair.boxSk) return;

        var record = {
          issuer: csWallet.data.pubkey,
          nonce: CryptoUtils.util.encode_base58(nonce),
          time: time
        };

        //console.debug("Will store settings remotely: ", filteredData);
        var json = JSON.stringify(filteredData);

        return CryptoUtils.box.pack(json, nonce, boxKeypair.boxPk, boxKeypair.boxSk)
          .then(function(cypherText) {
            record.content = cypherText;
            // create or update
            return angular.isUndefined(data.time) ?
              that.add(record) :
              that.update(record, {id: record.issuer})
                .catch(function(err) {
                  // Workaround if update failed: try to add() instead
                  // Can occur when changing the cesium+ pod
                  if (err && err.ucode == 404) return that.add(record);
                  throw err;
                });
          })
          .then(function() {
            return true;
          });
      })
      .then(function(saved) {
        if (!saved) return;
        // Update settings version, then store (on local store only)
        data.time = time;
        previousRemoteData = filteredData;
        console.debug('[ES] [settings] Saved user settings remotely in ' + (esHttp.date.now() - time) + 'ms');
        return storeSettingsLocally();
      })
      .catch(function(err) {
        console.error(err);
        throw err;
      })
    ;
  }

  function removeListeners() {
    _.forEach(listeners, function(remove){
      remove();
    });
    listeners = [];
  }

  function addListeners() {
    // Extend csWallet.login()
    listeners = [
      csSettings.api.data.on.reset($rootScope, onSettingsReset, this),
      csWallet.api.data.on.auth($rootScope, onWalletAuth, this)
    ];
  }

  function stop() {
    removeListeners();
    esHttp.stop();
  }

  function refreshState() {
    var enable = that.isEnable();

    // Disable
    if (!enable && listeners && listeners.length > 0) {
      console.debug("[ES] [settings] Disable");
      removeListeners();

      // Force ES node to stop
      return esHttp.stop()
        .then(function() {
          // Emit event
          api.state.raise.changed(enable);
        });
    }

    // Enable
    else if (enable && (!listeners || listeners.length === 0 || !esHttp.isStarted()) ) {
      return esHttp.start()
        .then(function(alive) {
          if (!alive) {
            csSettings.data.plugins.es.enable = false;
            // Will ask user to enable ES plugins (WARN: if config.js allow it)
            csSettings.data.plugins.es.askEnable = true;
            failEnable = true;

            api.state.raise.changed(false);
            console.error('[ES] [settings] Disable, has ES node could not be started');
            return;
          }
          console.debug("[ES] [settings] Enable");
          addListeners();

          if (csWallet.isAuth()) {
            return onWalletAuth(csWallet.data)
              .then(function() {
                // Emit event
                api.state.raise.changed(enable);
              });
          }
          else {
            // Emit event
            api.state.raise.changed(enable);
          }
        });
    }
  }

  api.registerEvent('state', 'changed');

  csSettings.ready().then(function() {

    csSettings.api.data.on.changed($rootScope, onSettingsChanged, this);
    esHttp.api.node.on.stop($rootScope, function() {
      previousRemoteData = null;
    }, this);
    return refreshState();
  })

  .then(function() {
    // Ask (once) user to enable ES plugin
    if (!failEnable && // If NOT trying to start just before
      csConfig.plugins && csConfig.plugins.es && csConfig.plugins.es.askEnable && // AND if config ask enable
      !that.isEnable() && // AND user settings has disable plugin
      csSettings.data.plugins.es.askEnable // AND user has not yet answer 'NO'
    ) {

      return UIUtils.alert.confirm('ES_SETTINGS.CONFIRM.ASK_ENABLE', 'ES_SETTINGS.CONFIRM.ASK_ENABLE_TITLE',
        {
          cancelText: 'COMMON.BTN_NO',
          okText: 'COMMON.BTN_YES'
        })
        .then(function (confirm) {
          if (confirm) {
            csSettings.data.plugins.es.enable = true;
          }
          csSettings.data.plugins.es.askEnable = false;
          return csSettings.store();
        });
    }
  });

  return that;
}]);

angular.module('cesium.es.registry.services', ['ngResource', 'cesium.services', 'cesium.es.http.services'])
.config(['PluginServiceProvider', 'csConfig', function(PluginServiceProvider, csConfig) {
  'ngInject';

  var enable = csConfig.plugins && csConfig.plugins.es;
  if (enable) {
    // Will force to load this service
    PluginServiceProvider.registerEagerLoadingService('esRegistry');
  }

}])

.factory('esRegistry', ['$rootScope', '$q', 'csPlatform', 'csSettings', 'csWallet', 'csWot', 'esHttp', 'esComment', 'esGeo', function($rootScope, $q, csPlatform, csSettings, csWallet, csWot, esHttp, esComment, esGeo) {
  'ngInject';

  var
    fields = {
      commons: ["title", "description", "issuer", "time", "address", "city", "creationTime", "avatar._content_type",
        "picturesCount", "type", "category", "socials", "pubkey",
        "geoPoint"
      ]
    },
    that = this,
    listeners;

  that.raw = {
    count: esHttp.get('/page/record/_search?size=0&q=issuer::pubkey'),
    searchText: esHttp.get('/page/record/_search?q=:search'),
    search: esHttp.post('/page/record/_search'),
    get: esHttp.get('/page/record/:id'),
    getCommons: esHttp.get('/page/record/:id?_source=' + fields.commons.join(',')),
    category: {
      get: esHttp.get('/page/category/:id'),
      all: esHttp.get('/page/category/_search?sort=order&from=0&size=1000&_source=name,parent')
    }
  };

  function onWalletReset(data) {
    data.pages = null;
  }

  function onWalletLoad(data, deferred) {
    deferred = deferred || $q.defer();
    if (!data || !data.pubkey || !data.keypair) {
      deferred.resolve();
      return deferred.promise;
    }

    console.debug('[ES] [registry] Loading pages count...');

    // Load subscriptions count
    that.raw.count({pubkey: data.pubkey})
      .then(function(res) {
        data.pages = data.pages || {};
        data.pages.count = res && res.hits && res.hits.total;
        console.debug('[ES] [registry] Loaded pages count (' + data.pages.count  + ')');
        deferred.resolve(data);
      })
      .catch(function(err) {
        console.error('[ES] [registry] Error while counting page: ' + (err.message ? err.message : err));
        deferred.resolve(data);
      });

    return deferred.promise;
  }

  function getCategories() {
    if (that.raw.categories && that.raw.categories.length) {
      var deferred = $q.defer();
      deferred.resolve(that.raw.categories);
      return deferred.promise;
    }
    return that.raw.category.all()
      .then(function(res) {
        if (res.hits.total === 0) {
          that.raw.categories = [];
        }
        else {
          var categories = res.hits.hits.reduce(function(result, hit) {
            var cat = hit._source;
            cat.id = hit._id;
            return result.concat(cat);
          }, []);
          // add as map also
          _.forEach(categories, function(cat) {
            categories[cat.id] = cat;
          });
          that.raw.categories = categories;
        }
        return that.raw.categories;
      });
  }

  function getCategory(params) {
    return that.raw.category.get(params)
      .then(function(hit) {
        var res = hit._source;
        res.id = hit._id;
        return res;
      });
  }

  function readRecordFromHit(hit, categories) {
    if (!hit) return;
    var record = hit._source;
    if (record.category && record.category.id) {
      record.category = categories[record.category.id];
    }
    if (hit.highlight) {
      if (hit.highlight.title) {
        record.title = hit.highlight.title[0];
      }
      if (hit.highlight.description) {
        record.description = hit.highlight.description[0];
      }
      if (hit.highlight.location) {
        record.location = hit.highlight.location[0];
      }
      if (hit.highlight.tags) {
        record.tags = hit.highlight.tags.reduce(function(res, tag){
          return res.concat(tag.replace('<em>', '').replace('</em>', ''));
        },[]);
      }
    }

    // avatar
    record.avatar = esHttp.image.fromHit(hit, 'avatar');

    // pictures
    if (hit._source.pictures && hit._source.pictures.reduce) {
      record.pictures = hit._source.pictures.reduce(function(res, pic) {
        return res.concat(esHttp.image.fromAttachment(pic.file));
      }, []);
    }

    return record;
  }


  function search(request) {
    request = request || {};
    request.from = request.from || 0;
    request.size = request.size || 20;
    request._source = request._source || fields.commons;
    request.highlight = request.highlight || {
        fields : {
          title : {},
          description : {}
        }
    };

    return $q.all([
        // load categories
        getCategories(),
        // Do search
        that.raw.search(request)
      ])
      .then(function(res) {
        var categories = res[0];
        res = res[1];

        if (!res || !res.hits || !res.hits.total) {
          return {
            total: 0,
            hits: []
          };
        }

        // Get geo_distance filter
        var geoDistanceObj = esHttp.util.findObjectInTree(request.query, 'geo_distance');
        var geoPoint = geoDistanceObj && geoDistanceObj.geoPoint;
        var geoDistanceUnit = geoDistanceObj && geoDistanceObj.distance && geoDistanceObj.distance.replace(new RegExp("[0-9 ]+", "gm"), '');

        var hits = res.hits.hits.reduce(function(result, hit) {
          var record = readRecordFromHit(hit, categories);
          record.id = hit._id;

          // Add distance to point
          if (geoPoint && record.geoPoint && geoDistanceUnit) {
            record.distance = esGeo.point.distance(
              geoPoint.lat, geoPoint.lon,
              record.geoPoint.lat, record.geoPoint.lon,
              geoDistanceUnit
            );
          }
          return result.concat(record);
        }, []);

        return {
          total: res.hits.total,
          hits: hits
        };
      });
  }

  function loadData(id, options) {
    options = options || {};
    options.raw = angular.isDefined(options.raw) ? options.raw : false;
    options.fecthPictures = angular.isDefined(options.fetchPictures) ? options.fetchPictures : options.raw;

    return $q.all([

      // load categories
      getCategories(),

      // Do get source
      options.fecthPictures ?
        that.raw.get({id: id}) :
        that.raw.getCommons({id: id})
    ])
    .then(function(res) {
      var categories = res[0];
      var hit = res[1];
      var record = readRecordFromHit(hit, categories);

      // parse description as Html
      if (!options.raw) {
        record.description = esHttp.util.parseAsHtml(record.description, {
          tagState: 'app.wot_lookup.tab_registry'
        });
      }

      // Load issuer (avatar, name, uid, etc.)
      return csWot.extend({pubkey: record.issuer})
        .then(function(issuer) {
          return {
            id: hit._id,
            issuer: issuer,
            record: record
          };
        });
    });
  }

  function removeListeners() {
    _.forEach(listeners, function(remove){
      remove();
    });
    listeners = [];
  }

  function addListeners() {
    // Extend
    listeners = [
      csWallet.api.data.on.load($rootScope, onWalletLoad, this),
      csWallet.api.data.on.init($rootScope, onWalletReset, this),
      csWallet.api.data.on.reset($rootScope, onWalletReset, this)
    ];
  }

  function refreshState() {
    var enable = esHttp.alive;
    if (!enable && listeners && listeners.length > 0) {
      console.debug("[ES] [subscription] Disable");
      removeListeners();
      if (csWallet.isLogin()) {
        return onWalletReset(csWallet.data);
      }
    }
    else if (enable && (!listeners || listeners.length === 0)) {
      console.debug("[ES] [subscription] Enable");
      addListeners();
      if (csWallet.isLogin()) {
        return onWalletLoad(csWallet.data);
      }
    }
  }

  // Default actions
  csPlatform.ready().then(function() {
    esHttp.api.node.on.start($rootScope, refreshState, this);
    esHttp.api.node.on.stop($rootScope, refreshState, this);
    return refreshState();
  });

  that.category = {
      all: getCategories,
      get: getCategory
    };
  that.record = {
      search: search,
      load: loadData,
      add: esHttp.record.post('/page/record', {tagFields: ['title', 'description'], creationTime: true}),
      update: esHttp.record.post('/page/record/:id/_update', {tagFields: ['title', 'description']}),
      remove: esHttp.record.remove('page', 'record'),
      fields: {
        commons: fields.commons
      },
      picture: {
        all: esHttp.get('/page/record/:id?_source=pictures')
      },
      comment: esComment.instance('page')
    };
  that.currency = {
      all: esHttp.get('/currency/record/_search?_source=currencyName,peers.host,peers.port'),
      get: esHttp.get('/currency/record/:id/_source')
    };
  return that;
}])
;

angular.module('cesium.es.social.services', ['cesium.es.crypto.services'])

  .factory('SocialUtils', ['$filter', '$q', 'CryptoUtils', 'BMA', 'csWallet', 'esCrypto', function($filter, $q, CryptoUtils, BMA, csWallet, esCrypto) {
    'ngInject';

    function SocialUtils() {

      var
        regexp = {
          URI: "([a-zAâZ0-9]+)://[ a-zA-Z0-9-_:/;*?!^\\+=@&~#|<>%.]+",
          EMAIL: "[a-z0-9!#$%&\'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&\'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$",
          PHONE: "[+]?[0-9. ]{9,15}",
          socials: {
            facebook: "https?://((fb.me)|((www.)?facebook.com))",
            twitter: "https?://(www.)?twitter.com",
            googleplus: "https?://plus.google.com(/u)?",
            youtube: "https?://(www.)?youtube.com",
            github: "https?://(www.)?github.com",
            tumblr: "https?://(www.)?tumblr.com",
            snapchat: "https?://(www.)?snapchat.com",
            linkedin: "https?://(www.)?linkedin.com",
            vimeo: "https?://(www.)?vimeo.com",
            instagram: "https?://(www.)?instagram.com",
            wordpress: "https?://([a-z]+)?wordpress.com",
            diaspora: "https?://(www.)?((diaspora[-a-z]+)|(framasphere)).org",
            duniter: "duniter://[a-zA-Z0-9-_:/;*?!^\\+=@&~#|<>%.]+",
            bitcoin: "bitcoin://[a-zA-Z0-9-_:/;*?!^\\+=@&~#|<>%.]+",
            curve25519: "curve25519://(" + BMA.constants.regexp.PUBKEY + "):([a-zA-Z0-9]+)@([a-zA-Z0-9-_:/;*?!^\\+=@&~#|<>%.]+)"
          }
        }
        ;

      function exact(regexpContent) {
        return new RegExp("^" + regexpContent + "$");
      }

      regexp.URI = exact(regexp.URI);
      regexp.EMAIL = exact(regexp.EMAIL);
      regexp.PHONE = exact(regexp.PHONE);
      _.keys(regexp.socials).forEach(function(key){
        regexp.socials[key] = exact(regexp.socials[key]);
      });

      function getTypeFromUrl(url){
        var type;
        if (regexp.URI.test(url)) {
          var protocol = regexp.URI.exec(url)[1];
          var urlToMatch = url;
          if (protocol == 'http' || protocol == 'https') {
            var slashPathIndex = url.indexOf('/', protocol.length + 3);
            if (slashPathIndex > 0) {
              urlToMatch = url.substring(0, slashPathIndex);
            }
          }
          //console.log("match URI, try to match: " + urlToMatch);
          _.keys(regexp.socials).forEach(function(key){
            if (regexp.socials[key].test(urlToMatch)) {
              type = key;
              return false; // stop
            }
          });
          if (!type) {
            type = 'web';
          }
        }
        else if (regexp.EMAIL.test(url)) {
          type = 'email';
        }
        else if (regexp.PHONE.test(url)) {
          type = 'phone';
        }
        if (!type) {
          console.warn("[ES] [social] Unable to detect type of social URL: " + url);
        }
        return type;
      }

      function getFromUrl(url) {
        url = url ? url.trim() : url;
        if (url && url.length > 0) {
          if (url.startsWith('www.')) {
            url = 'http://' + url;
          }
          return {
            type: getTypeFromUrl(url),
            url: url
          };
        }
        return;
      }

      function reduceArray(socials) {
        if (!socials || !socials.length) return [];
        var map = {};
        socials.forEach(function(social) {
          if (social.type == 'curve25519') {
            delete social.issuer;
            if (social.valid) {
              angular.merge(social, getFromUrl(social.url));
            }
          }
          else {
            // Retrieve object from URL, to get the right type (e.g. if new regexp)
            social = getFromUrl(social.url);
          }
          if (social) {
            var id = $filter('formatSlug')(social.url);
            map[id] = social;
          }
        });
        return _.values(map);
      }

      function createSocialForEncryption(recipient, dataToEncrypt) {
        return {
          recipient: recipient,
          type: 'curve25519',
          url: dataToEncrypt
        };
      }

      function openArray(socials, issuer, recipient) {

        recipient = recipient || csWallet.data.pubkey;

        // Waiting to load crypto libs
        if (!CryptoUtils.isLoaded()) {
          console.debug('[socials] Waiting crypto lib loading...');
          return $timeout(function() {
            return openArray(socials, issuer, recipient);
          }, 100);
        }

        var socialsToDecrypt = _.filter(socials||[], function(social){
          var matches = social.url && social.type == 'curve25519' && regexp.socials.curve25519.exec(social.url);
          if (!matches) return false;
          social.recipient = matches[1];
          social.nonce = matches[2];
          social.url = matches[3];
          social.issuer = issuer;
          social.valid = (social.recipient === recipient);
          return social.valid;
        });
        if (!socialsToDecrypt.length) return $q.when(reduceArray(socials));

        return esCrypto.box.open(socialsToDecrypt, undefined/*=wallet keypair*/, 'issuer', 'url')
          .then(function() {
            // return all socials (encrypted or not)
            return reduceArray(socials);
          });
      }

      function packArray(socials) {
        // Waiting to load crypto libs
        if (!CryptoUtils.isLoaded()) {
          console.debug('[socials] Waiting crypto lib loading...');
          return $timeout(function() {
            return packArray(socials);
          }, 100);
        }

        var socialsToEncrypt = _.filter(socials||[], function(social){
          return social.type == 'curve25519' && social.url && social.recipient;
        });
        if (!socialsToEncrypt.length) return $q.when(socials);

        return CryptoUtils.util.random_nonce()
          .then(function(nonce) {
            return $q.all(socialsToEncrypt.reduce(function(res, social) {
              return res.concat(esCrypto.box.pack(social, undefined/*=wallet keypair*/, 'recipient', 'url', nonce));
            }, []));
          })
          .then(function(res){
            return res.reduce(function(res, social) {
              return res.concat({
                type: 'curve25519',
                url: 'curve25519://{0}:{1}@{2}'.format(social.recipient, social.nonce, social.url)
              });
            }, []);
          });
      }

      return {
        get: getFromUrl,
        reduce: reduceArray,
        // Encryption
        createForEncryption: createSocialForEncryption,
        open: openArray,
        pack: packArray
      };
    }

    var service = SocialUtils();
    service.instance = SocialUtils;

    return service;
  }])
;

angular.module('cesium.es.crypto.services', ['ngResource', 'cesium.services'])

.factory('esCrypto', ['$q', '$rootScope', 'CryptoUtils', function($q, $rootScope, CryptoUtils) {
  'ngInject';


  function getBoxKeypair(keypair) {
    if (!keypair) {
      throw new Error('Missing keypair');
    }
    if (keypair.boxPk && keypair.boxSk) {
      return $q.when(keypair);
    }

    return $q.all([
      CryptoUtils.box.keypair.skFromSignSk(keypair.signSk),
      CryptoUtils.box.keypair.pkFromSignPk(keypair.signPk)
    ])
      .then(function(res) {
        return {
          boxSk: res[0],
          boxPk: res[1]
        };
      });
  }

  function packRecordFields(record, keypair, recipientFieldName, cypherFieldNames, nonce) {

    recipientFieldName = recipientFieldName || 'recipient';
    if (!record[recipientFieldName]) {
      return $q.reject({message:'ES_WALLET.ERROR.RECIPIENT_IS_MANDATORY'});
    }

    cypherFieldNames = cypherFieldNames || 'content';
    if (typeof cypherFieldNames == 'string') {
      cypherFieldNames = [cypherFieldNames];
    }

    // Work on a copy, to keep the original record (as it could be use again - fix #382)
    record = angular.copy(record);

    // Get recipient
    var recipientPk = CryptoUtils.util.decode_base58(record[recipientFieldName]);

    return $q.all([
      getBoxKeypair(keypair),
      CryptoUtils.box.keypair.pkFromSignPk(recipientPk),
      nonce ? $q.when(nonce) : CryptoUtils.util.random_nonce()
    ])
      .then(function(res) {
        //var senderSk = res[0];
        var boxKeypair = res[0];
        var senderSk = boxKeypair.boxSk;
        var boxRecipientPk = res[1];
        var nonce = res[2];

        return $q.all(
          cypherFieldNames.reduce(function(res, fieldName) {
            if (!record[fieldName]) return res; // skip undefined fields
            return res.concat(
              CryptoUtils.box.pack(record[fieldName], nonce, boxRecipientPk, senderSk)
            );
          }, []))

          .then(function(cypherTexts){
            // Replace field values with cypher texts
            var i = 0;
            _.forEach(cypherFieldNames, function(cypherFieldName) {
              if (!record[cypherFieldName]) {
                // Force undefined fields to be present in object
                // This is better for ES storage, that always works on lazy update mode
                record[cypherFieldName] = null;
              }
              else {
                record[cypherFieldName] = cypherTexts[i++];
              }
            });

            // Set nonce
            record.nonce = CryptoUtils.util.encode_base58(nonce);

            return record;
          });
      });
  }

  function openRecordFields(records, keypair, issuerFieldName, cypherFieldNames) {

    issuerFieldName = issuerFieldName || 'issuer';
    cypherFieldNames = cypherFieldNames || 'content';
    if (typeof cypherFieldNames == 'string') {
      cypherFieldNames = [cypherFieldNames];
    }

    var now = new Date().getTime();
    var issuerBoxPks = {}; // a map used as cache

    var jobs = [getBoxKeypair(keypair)];
    return $q.all(records.reduce(function(jobs, message) {
      var issuer = message[issuerFieldName];
      if (!issuer) {throw 'Record has no ' + issuerFieldName;}
      if (issuerBoxPks[issuer]) return res;
      return jobs.concat(
        CryptoUtils.box.keypair.pkFromSignPk(CryptoUtils.util.decode_base58(issuer))
          .then(function(issuerBoxPk) {
            issuerBoxPks[issuer] = issuerBoxPk; // fill box pk cache
          }));
    }, jobs))
      .then(function(res){
        var boxKeypair = res[0];
        return $q.all(records.reduce(function(jobs, record) {
          var issuerBoxPk = issuerBoxPks[record[issuerFieldName]];
          var nonce = CryptoUtils.util.decode_base58(record.nonce);
          record.valid = true;

          return jobs.concat(
            cypherFieldNames.reduce(function(res, cypherFieldName) {
              if (!record[cypherFieldName]) return res;
              return res.concat(CryptoUtils.box.open(record[cypherFieldName], nonce, issuerBoxPk, boxKeypair.boxSk)
                .then(function(text) {
                  record[cypherFieldName] = text;
                })
                .catch(function(err){
                  console.error(err);
                  console.warn('[ES] [crypto] a record may have invalid cypher ' + cypherFieldName);
                  record.valid = false;
                }));
            }, []));
        }, []));
      })
      .then(function() {
        console.debug('[ES] [crypto] All record decrypted in ' + (new Date().getTime() - now) + 'ms');
        return records;
      });

  }

  // exports
  return {
    box: {
      getKeypair: getBoxKeypair,
      pack: packRecordFields,
      open: openRecordFields
    }
  };
}])
;

angular.module('cesium.es.profile.services', ['cesium.services', 'cesium.es.http.services'])
  .config(['PluginServiceProvider', 'csConfig', function(PluginServiceProvider, csConfig) {
    'ngInject';

    var enable = csConfig.plugins && csConfig.plugins.es;
    if (enable) {
      // Will force to load this service
      PluginServiceProvider.registerEagerLoadingService('esProfile');
    }

  }])

  .factory('esProfile', ['$rootScope', '$q', 'esHttp', 'SocialUtils', 'csWot', 'csWallet', 'csPlatform', 'esSettings', function($rootScope, $q, esHttp, SocialUtils, csWot, csWallet, csPlatform, esSettings) {
    'ngInject';

    var
      that = this,
      listeners;

    that.raw = {
      getFields: esHttp.get('/user/profile/:id?&_source_exclude=avatar._content&_source=:fields'),
      get: esHttp.get('/user/profile/:id?&_source_exclude=avatar._content'),
      getAll: esHttp.get('/user/profile/:id'),
      search: esHttp.post('/user/profile/_search'),
      mixedSearch: esHttp.post('/user,page,group/profile,record/_search')
    };

    function getAvatarAndName(pubkey) {
      return that.raw.getFields({id: pubkey, fields: 'title,avatar._content_type'})
        .then(function(res) {
          var profile;
          if (res && res._source) {
            // name
            profile = {name: res._source.title};
            // avatar
            profile.avatar = esHttp.image.fromHit(res, 'avatar');
          }
          return profile;
        })
        .catch(function(err){
          // no profile defined
          if (err && err.ucode && err.ucode == 404) {
            return null;
          }
          else {
            throw err;
          }
        });
    }

    function getProfile(pubkey, options) {
      options = options || {};

      var get = options.raw ? that.raw.getAll : that.raw.get;
      return get({id: pubkey})
        .then(function(res) {
          if (!res || !res.found || !res._source) return undefined;

          var profile = {
            name: res._source.title,
            source: res._source
          };

          // Avoid too long name (workaround for #308)
          if (profile.name && profile.name.length > 30) {
            profile.name = profile.name.substr(0, 27) + '...';
          }

          // avatar
          profile.avatar = esHttp.image.fromHit(res, 'avatar');

          // description
          if (!options.raw) {
            profile.description = esHttp.util.parseAsHtml(profile.source.description);
          }

          // Social url must be unique in socials links - Workaround for issue #306:
          if (profile.source.socials && profile.source.socials.length) {
            profile.source.socials = _.uniq(profile.source.socials, false, function (social) {
              return social.url;
            });
          }

          if (!csWallet.isLogin()) {
            // Exclude crypted socials
            profile.source.socials = _.filter(profile.source.socials, function(social) {
              return social.type != 'curve25519';
            });
          }
          else {
            // decrypt socials (if login)
            return SocialUtils.open(profile.source.socials, pubkey)
              .then(function(){
                // Exclude invalid decrypted socials
                //console.debug(profile.source.socials);
                //profile.source.socials = _.where(profile.source.socials, {valid: true});

                return profile;
              });
          }

          return profile;
        })
        .catch(function(err){
          // no profile defined
          if (err && err.ucode && err.ucode == 404) {
            return null;
          }
          else {
            throw err;
          }
        });
    }

    function fillAvatars(datas, pubkeyAtributeName) {
      return onWotSearch(null, datas, pubkeyAtributeName);
    }

    function _fillSearchResultFromHit(data, hit, avatarFieldName) {
      data.avatar = data.avatar || esHttp.image.fromHit(hit, avatarFieldName||'avatar');
      // name (basic or highlighted)
      data.name = hit._source.title;
      // Avoid too long name (workaround for #308)
      if (data.name && data.name.length > 30) {
        data.name = data.name.substr(0, 27) + '...';
      }
      data.description = hit._source.description || data.description;
      data.city = hit._source.city || data.city;

      if (hit.highlight) {
        if (hit.highlight.title) {
          data.name = hit.highlight.title[0];
        }
        if (hit.highlight.tags) {
          data.tags = hit.highlight.tags.reduce(function(res, tag){
            return res.concat(tag.replace('<em>', '').replace('</em>', ''));
          },[]);
        }
      }
    }

    function onWotSearch(text, datas, pubkeyAtributeName, deferred) {
      deferred = deferred || $q.defer();
      if (!text && (!datas || !datas.length)) {
        deferred.resolve(datas);
        return deferred.promise;
      }

      pubkeyAtributeName = pubkeyAtributeName || 'pubkey';
      text = text ? text.toLowerCase().trim() : text;
      var dataByPubkey;
      var tags = text ? esHttp.util.parseTags(text) : undefined;
      var request = {
        query: {},
        highlight: {fields : {title : {}, tags: {}}},
        from: 0,
        size: 100,
        _source: ["title", "avatar._content_type"]
      };

      var mixedSearch = text && esSettings.wot.isMixedSearchEnable();
      if (mixedSearch) {
        request._source = request._source.concat(["description", "city", "creationTime", "membersCount", "type"]);
        console.debug("[ES] [profile] Mixed search: enable");
      }

      if (datas.length > 0) {
        // collect pubkeys and fill values map
        dataByPubkey = {};
        _.forEach(datas, function(data) {
          var pubkey = data[pubkeyAtributeName];
          if (pubkey) {
            var values = dataByPubkey[pubkey];
            if (!values) {
              values = [data];
              dataByPubkey[pubkey] = values;
            }
            else {
              values.push(data);
            }
          }
        });
        var pubkeys = _.keys(dataByPubkey);
        // Make sure all results will be return
        request.size = (pubkeys.length <= request.size) ? request.size : pubkeys.length;
        if (!text) {
          delete request.highlight; // highlight not need
          request.query.constant_score = {
            filter: {
              terms : {_id : pubkeys}
            }
          };
        }
        else {
          request.query.constant_score = {
            filter: {bool: {should: [
              {terms : {_id : pubkeys}},
              {bool: {
                must: [
                  {match: {title: {query: text, boost: 2}}},
                  {prefix: {title: text}}
                ]}
              }
            ]}}
          };

          if (tags) {
            request.query.constant_score.filter.bool.should.push({terms: {tags: tags}});
          }
        }
      }
      else if (text){
        request.query.bool = {
          should: [
            {match: {title: {
              query: text,
              boost: 2
            }}},
            {prefix: {title: text}}
          ]
        };
        if (tags) {
          request.query.bool.should.push({terms: {tags: tags}});
        }
      }
      else {
        // nothing to search: stop here
        deferred.resolve(datas);
        return deferred.promise;
      }

      if (text && mixedSearch) {
        request.indices_boost = {
          "user" : 100,
          "page" : 1,
          "group" : 0.01
        };
      }

      var hits;

      var search = mixedSearch ? that.raw.mixedSearch : that.raw.search;
      search(request)
        .then(function(res) {
          hits = res.hits;
          if (hits.total > 0) {
            var indices = {};
            var values;
            _.forEach(hits.hits, function(hit) {

              var avatarFieldName = 'avatar';
              // User profile
              if (hit._index == "user") {
                values = dataByPubkey && dataByPubkey[hit._id];
                if (!values) {
                  var value = {};
                  value[pubkeyAtributeName] = hit._id;
                  values=[value];
                  datas.push(value);
                }
              }

              // Page or group
              else if (hit._index != "user") {
                if (!indices[hit._index]) {
                  indices[hit._index] = true;
                  // add a separator
                  datas.push({
                    id: 'divider-' + hit._index,
                    divider: true,
                    index: hit._index
                  });
                }
                var item = {
                  id: hit._index + '-' + hit._id, // unique id in list
                  index: hit._index,
                  templateUrl: 'plugins/es/templates/wot/lookup_item_{0}.html'.format(hit._index),
                  state: 'app.view_{0}'.format(hit._index),
                  stateParams: {id: hit._id, title: hit._source.title},
                  creationTime: hit._source.creationTime,
                  memberCount: hit._source.memberCount,
                  type: hit._source.type
                };
                values=[item];
                datas.push(item);
                avatarFieldName = 'avatar';
              }

              var avatar = esHttp.image.fromHit(hit, avatarFieldName);
              _.forEach(values, function(data) {
                data.avatar= avatar;
                _fillSearchResultFromHit(data, hit);
              });
            });

            // Add divider on top
            if (_.keys(indices).length) {
              datas.splice(0,0, {
                id: 'divider-identities',
                divider: true,
                index: 'profile'
              });
            }
          }
          deferred.resolve(datas);
        })
        .catch(function(err){
          if (err && err.ucode && err.ucode == 404) {
            deferred.resolve(datas);
          }
          else {
            deferred.reject(err);
          }
        });

      return deferred.promise;
    }

    function onWotLoad(data, deferred) {
      deferred = deferred || $q.defer();
      if (!data || !data.pubkey) {
        deferred.resolve();
        return deferred.promise;
      }

      $q.all([
        // Load full profile
        getProfile(data.pubkey)
          .then(function(profile) {
            if (profile) {
              data.name = profile.name;
              data.avatar = profile.avatar;
              data.profile = profile.source;
              data.profile.description = profile.description;
            }
            deferred.resolve(data);
          }),

        // Load avatar on certifications
        fillAvatars(
          (data.received_cert||[])
            .concat(data.received_cert_pending||[])
            .concat(data.given_cert||[])
            .concat(data.given_cert_pending||[])
        )
      ])
        .catch(function(err){
          deferred.reject(err);
        });
      return deferred.promise;
    }

    function removeListeners() {
      _.forEach(listeners, function(remove){
        remove();
      });
      listeners = [];
    }

    function addListeners() {
      // Extend csWot events
      listeners = [
        csWot.api.data.on.load($rootScope, onWotLoad, this),
        csWot.api.data.on.search($rootScope, onWotSearch, this)
      ];
    }

    function refreshState() {
      var enable = esHttp.alive;
      if (!enable && listeners && listeners.length > 0) {
        console.debug("[ES] [profile] Disable");
        removeListeners();
      }
      else if (enable && (!listeners || listeners.length === 0)) {
        console.debug("[ES] [profile] Enable");
        addListeners();
      }
    }

    // Default actions
    csPlatform.ready().then(function() {
      esHttp.api.node.on.start($rootScope, refreshState, this);
      esHttp.api.node.on.stop($rootScope, refreshState, this);
      return refreshState();
    });

    return {
      getAvatarAndName: getAvatarAndName,
      get: getProfile,
      add: esHttp.record.post('/user/profile', {tagFields: ['title', 'description']}),
      update: esHttp.record.post('/user/profile/:id/_update', {tagFields: ['title', 'description']}),
      avatar: esHttp.get('/user/profile/:id?_source=avatar'),
      fillAvatars: fillAvatars,
      remove: esHttp.record.remove("user","profile")
    };
  }])
;

angular.module('cesium.es.notification.services', ['cesium.platform', 'cesium.es.http.services'])
.config(['PluginServiceProvider', 'csConfig', function(PluginServiceProvider, csConfig) {
    'ngInject';

    var enable = csConfig.plugins && csConfig.plugins.es;
    if (enable) {
      // Will force to load this service
      PluginServiceProvider.registerEagerLoadingService('esNotification');
    }

  }])

.factory('esNotification', ['$rootScope', '$q', '$timeout', 'esHttp', 'csConfig', 'csSettings', 'csWallet', 'csWot', 'UIUtils', 'filterTranslations', 'BMA', 'CryptoUtils', 'csPlatform', 'Api', function($rootScope, $q, $timeout,
                                    esHttp, csConfig, csSettings, csWallet, csWot, UIUtils, filterTranslations,
                                    BMA, CryptoUtils, csPlatform, Api) {
  'ngInject';

  var
    constants = {
      MESSAGE_CODES: ['MESSAGE_RECEIVED'],
      INVITATION_CODES: ['INVITATION_TO_CERTIFY'],
      DEFAULT_LOAD_SIZE: 20
    },

    fields = {
      commons: ["type", "code", "params", "reference", "recipient", "time", "hash", "read_signature"]
    },
    that = this,
    listeners,
    wsUserEventCloseFn,
    api = new Api(this, 'esNotification')
  ;

  constants.EXCLUDED_CODES = constants.MESSAGE_CODES.concat(constants.INVITATION_CODES);

  that.raw = {
    postCount: esHttp.post('/user/event/_count'),
    postSearch: esHttp.post('/user/event/_search'),
    postReadById: esHttp.post('/user/event/:id/_read'),
    ws: {
      getUserEvent: esHttp.ws('/ws/event/user/:pubkey/:locale'),
      getChanges: esHttp.ws('/ws/_changes')
    }
  };

  // Create the filter query
  function createFilterQuery(pubkey, options) {
    options = options || {};
    options.codes = options.codes || {};
    options.codes.excludes = options.codes.excludes || constants.EXCLUDED_CODES;
    var query = {
      bool: {
        must: [
          {term: {recipient: pubkey}}
        ]
      }
    };

    // Includes codes
    if (options.codes && options.codes.includes) {
      query.bool.must.push({terms: { code: options.codes.includes}});
    }
    else {
      // Excludes codes
      var excludesCodes = [];
      if (!csSettings.getByPath('plugins.es.notifications.txSent', false)) {
        excludesCodes.push('TX_SENT');
      }
      if (!csSettings.getByPath('plugins.es.notifications.txReceived', true)) {
        excludesCodes.push('TX_RECEIVED');
      }
      if (!csSettings.getByPath('plugins.es.notifications.certSent', false)) {
        excludesCodes.push('CERT_SENT');
      }
      if (!csSettings.getByPath('plugins.es.notifications.certReceived', true)) {
        excludesCodes.push('CERT_RECEIVED');
      }
      if (options.codes.excludes) {
        _.forEach(options.codes.excludes, function(code) {
          excludesCodes.push(code);
        });
      }
      if (excludesCodes.length) {
        query.bool.must_not = {terms: { code: excludesCodes}};
      }
    }

    // Filter on time
    if (options.readTime) {
      query.bool.must.push({range: {time: {gt: options.readTime}}});
    }
    return query;
  }

  // Load unread notifications count
  function loadUnreadNotificationsCount(pubkey, options) {
    if (!pubkey) {
      return $q.reject('[ES] [notification] Unable to load - missing pubkey');
    }
    var request = {
      query: createFilterQuery(pubkey, options)
    };
    // Filter unread only
    request.query.bool.must.push({missing: { field : "read_signature" }});
    return that.raw.postCount(request)
      .then(function(res) {
        return res.count;
      });
  }

  // Load user notifications
  function loadNotifications(options) {
    options = options || {};
    if (!options.pubkey) {
      return $q.reject('[ES] [notification] Unable to load - missing options.pubkey');
    }
    options.from = options.from || 0;
    options.size = options.size || constants.DEFAULT_LOAD_SIZE;
    var wallet = options.wallet || csWallet;
    var request = {
      query: createFilterQuery(options.pubkey, options),
      sort : [
        { "time" : {"order" : "desc"}}
      ],
      from: options.from,
      size: options.size,
      _source: fields.commons
    };

    return that.raw.postSearch(request)
      .then(function(res) {
        if (!res.hits || !res.hits.total) return [];
        var events;

        // Add wallet events as notifications
        if (wallet.data.events && wallet.data.events.length) {
          var time = moment().utc().unix() - filterTranslations.MEDIAN_TIME_OFFSET;
          events = (wallet.data.events || []).reduce(function(res, event) {
            if (event.type != "warn") return res;
            var notification = new Notification({}, function(self) {
              if (!self.read) {
                self.read = true;
                if (wallet.data.notifications && wallet.data.notifications.warnCount > 0) {
                  wallet.data.notifications.warnCount--;
                }
              }
            });
            notification.id=event.code;
            notification.read = false;
            notification.state = 'app.view_wallet';
            notification.avatarIcon = 'ion-alert-circled';
            notification.icon = 'ion-alert-circled assertive';
            notification.time = time;
            notification.message = event.message;
            notification.messageParams = event.messageParams;
            return res.concat(notification);
          }, []);
        }

        var notifications = res.hits.hits.reduce(function(res, hit) {
          var item = new Notification(hit._source, markNotificationAsRead);
          item.id = hit._id;
          return res.concat(item);
        }, events || []);

        return csWot.extendAll(notifications);
      });
  }

  function onNewUserEvent(event) {
    if (!event || !csWallet.isLogin()) return;

    // If notification is an invitation
    if (_.contains(constants.INVITATION_CODES, event.code)) {
      api.event.raise.newInvitation(event);
      return;
    }

    // If notification is a message
    if (_.contains(constants.MESSAGE_CODES, event.code)) {
      api.event.raise.newMessage(event);
      return;
    }

    var notification = new Notification(event, markNotificationAsRead);

    // Extend the notification entity
    return csWot.extendAll([notification])
      .then(function() {
        if (!$rootScope.$$phase) {
          $rootScope.$applyAsync(function() {
            addNewNotification(notification);
          });
        }
        else {
          addNewNotification(notification);
        }
      });
  }

  function addNewNotification(notification) {
    csWallet.data.notifications = csWallet.data.notifications || {};
    csWallet.data.notifications.unreadCount++;
    api.data.raise.new(notification);
  }

  // Mark a notification as read
  function markNotificationAsRead(notification) {
    if (notification.read || !notification.id) return; // avoid multi call
    // Should never append (fix in Duniter4j issue #12)
    if (!notification.id) {
      console.error('[ES] [notification] Could not mark as read: no \'id\' found!', notification);
      return;
    }

    // user not auth: could not mark as read
    if (!csWallet.isAuth()) return;

    notification.read = true;
    return csWallet.getKeypair()
      .then(function(keypair) {
        return CryptoUtils.sign(notification.hash, keypair)
          .then(function(signature){
            return that.raw.postReadById(signature, {id:notification.id});
          })
          .catch(function(err) {
            console.error('[ES] [notification] Error while trying to mark event as read.', err);
          });

      });
  }

  function onWalletReset(data) {
    data.notifications = data.notifications || {};
    data.notifications.unreadCount = null;
    data.notifications.warnCount = null;
    data.notifications.time = null;
    // Stop listening notification
    if (wsUserEventCloseFn) {
      wsUserEventCloseFn();
      wsUserEventCloseFn = null;
    }
  }

  function onWalletLoad(data, deferred) {
    deferred = deferred || $q.defer();
    if (!data || !data.pubkey || !data.keypair) {
      deferred.resolve();
      return deferred.promise;
    }

    var now = new Date().getTime();
    var time = Math.trunc(now / 1000);

    // Skip if loaded less than 1 min ago
    // (This is need to avoid reload on login AND load phases)
    if (data.notifications && data.notifications.time && (time - data.notifications.time < 30 /*=30s*/)) {
      // update warn count
      data.notifications.warnCount = countWarnEvents(data);

      console.debug('[ES] [notification] Skipping load (loaded '+(time - data.notifications.time)+'s ago)');
      deferred.resolve();
      return deferred.promise;
    }

    console.debug('[ES] [notification] Loading count...');

    // Load unread notifications count
    loadUnreadNotificationsCount(
        data.pubkey, {
          readTime: data.notifications && data.notifications.readTime || 0,
          excludeCodes: constants.EXCLUDED_CODES
        })
      .then(function(unreadCount) {
        data.notifications = data.notifications || {};
        data.notifications.unreadCount = unreadCount;
        data.notifications.warnCount = countWarnEvents(data);

        console.debug('[ES] [notification] Loaded count (' + unreadCount + ') in '+(new Date().getTime()-now)+'ms');
        deferred.resolve(data);
      })
      .catch(deferred.reject);

    return deferred.promise;
  }

  function onWalletLogin(data, deferred) {
    // Call load
    return onWalletLoad(data, deferred)

      // then start listening new events
      .then(function(){
        console.debug('[ES] [notification] Starting listen user event...');
        var wsUserEvent = that.raw.ws.getUserEvent();
        wsUserEvent.on(
          onNewUserEvent,
          {pubkey: data.pubkey, locale: csSettings.data.locale.id}
        )
          .catch(function(err) {
            console.error('[ES] [notification] Unable to listen user event', err);

            // TODO : send a event to csHttp instead ?
            // And display such connectivity errors in UI
            UIUtils.alert.error('ACCOUNT.ERROR.WS_CONNECTION_FAILED');
          });
        wsUserEventCloseFn = wsUserEvent.close;
      });
  }

  function countWarnEvents(data){
    if (!data.events) return 0;
    return data.events.reduce(function(counter, event) {
      return (event.type == "warn") ? counter+1 : counter;
    }, 0);
  }

  function addListeners() {
    // Listen some events
    listeners = [
      csWallet.api.data.on.login($rootScope, onWalletLogin, this),
      csWallet.api.data.on.load($rootScope, onWalletLoad, this),
      csWallet.api.data.on.init($rootScope, onWalletReset, this),
      csWallet.api.data.on.reset($rootScope, onWalletReset, this)
    ];
  }

  function removeListeners() {
    _.forEach(listeners, function(remove){
      remove();
    });
    listeners = [];
  }

  function refreshState() {
    var enable = esHttp.alive;
    if (!enable && listeners && listeners.length > 0) {
      console.debug("[ES] [notification] Disable");
      removeListeners();
      if (csWallet.isLogin()) {
        onWalletReset(csWallet.data);
      }
    }
    else if (enable && (!listeners || listeners.length === 0)) {
      console.debug("[ES] [notification] Enable");
      addListeners();
      if (csWallet.isLogin()) {
        return onWalletLogin(csWallet.data);
      }
    }
  }

  // Register extension points
  api.registerEvent('data', 'new');
  api.registerEvent('event', 'newInvitation');
  api.registerEvent('event', 'newMessage');

  // Default actions
  csPlatform.ready().then(function() {
    esHttp.api.node.on.start($rootScope, refreshState, this);
    esHttp.api.node.on.stop($rootScope, refreshState, this);
    return refreshState();
  });

  // Exports
  that.load = loadNotifications;
  that.unreadCount = loadUnreadNotificationsCount;
  that.api = api;
  that.websocket = {
      event: that.raw.ws.getUserEvent,
      change: that.raw.ws.getChanges
    };
  that.constants = constants;

  return that;
}])
;

angular.module('cesium.es.message.services', ['ngResource', 'cesium.platform',
  'cesium.es.http.services', 'cesium.es.wallet.services', 'cesium.es.notification.services'])
  .config(['PluginServiceProvider', 'csConfig', function(PluginServiceProvider, csConfig) {
    'ngInject';

    var enable = csConfig.plugins && csConfig.plugins.es;
    if (enable) {
      // Will force to load this service
      PluginServiceProvider.registerEagerLoadingService('esMessage');
    }

  }])

  .factory('esMessage', ['$q', '$rootScope', '$timeout', 'UIUtils', 'Api', 'CryptoUtils', 'csPlatform', 'csConfig', 'csSettings', 'esHttp', 'csWallet', 'esWallet', 'csWot', 'esNotification', function($q, $rootScope, $timeout, UIUtils, Api, CryptoUtils,
                                 csPlatform, csConfig, csSettings, esHttp, csWallet, esWallet, csWot, esNotification) {
    'ngInject';

    var
      constants = {
        DEFAULT_LOAD_SIZE: 10
      },
      fields = {
        commons: ["issuer", "recipient", "title", "content", "time", "nonce", "read_signature"],
        notifications: ["issuer", "time", "hash", "read_signature"]
      },
      raw = {
        postSearch: esHttp.post('/message/inbox/_search'),
        postSearchByType: esHttp.post('/message/:type/_search'),
        getByTypeAndId : esHttp.get('/message/:type/:id'),
        postReadById: esHttp.post('/message/inbox/:id/_read')
      },
      listeners,
      api = new Api(this, 'esMessage');

    function onWalletInit(data) {
      data.messages = data.messages || {};
      data.messages.unreadCount = null;
      data.messages.time = null;
    }

    function onWalletReset(data) {
      if (data.messages) {
        delete data.messages;
      }
    }

    function onWalletLoad(data, deferred) {
      deferred = deferred || $q.defer();

      if (!data || !data.pubkey) {
        deferred.resolve();
        return deferred.promise;
      }

      var now = new Date().getTime();
      var time = Math.trunc(now / 1000);

      // Skip if loaded less than 1 min ago
      // (This is need to avoid reload on login AND load phases)
      if (data.messages && data.messages.time && (time - data.messages.time < 30 /*=30s*/)) {
        console.debug('[ES] [message] Skipping load (loaded '+(time - data.messages.time)+'s ago)');
        deferred.resolve();
        return deferred.promise;
      }

      console.debug('[ES] [message] Loading count...');

      // Count unread messages
      countUnreadMessages(data.pubkey)
        .then(function(unreadCount){
          data.messages = data.messages || {};
          data.messages.unreadCount = unreadCount;
          data.messages.time = time;
          console.debug('[ES] [message] Loaded count (' + unreadCount + ') in '+(new Date().getTime()-now)+'ms');
          deferred.resolve(data);
        })
        .catch(function(err){
          console.error('Error while counting messages: ' + (err.message ? err.message : err));
          deferred.resolve(data);
        });
      return deferred.promise;
    }

    function countUnreadMessages(pubkey) {
      pubkey = pubkey || (csWallet.isLogin() ? csWallet.data.pubkey : pubkey);
      if (!pubkey) {
        throw new Error('no pubkey, and user not connected.');
      }

      var request = {
        query: {
          bool: {
            must: [
              {term: {recipient: pubkey}},
              {missing: { field : "read_signature" }}
            ]
          }
        }
      };

      return esHttp.post('/message/inbox/_count')(request)
        .then(function(res) {
          return res.count;
        });
    }

    // Listen message changes
    function onNewMessageEvent(event) {
      console.debug("[ES] [message] detected new message (from notification service)");

      var notification = new Notification(event);
      notification.issuer = notification.pubkey;
      delete notification.pubkey;

      csWot.extend(notification, 'issuer')
        .then(function() {

          csWallet.data.messages = csWallet.data.messages || {};
          csWallet.data.messages.unreadCount++;

          // Raise event
          api.data.raise.new(notification);
        });
    }

    function sendMessage(message, options) {
      options = options || {};
      var wallet = options.wallet || csWallet;
      return wallet.getKeypair()
        .then(function(keypair) {

          // Send to recipient inbox
          return doSendMessage(message, keypair)
            .then(function (res) {

              // Check if outbox is enable (in settings)
              var outbox = (csSettings.data.plugins.es.message &&
              angular.isDefined(csSettings.data.plugins.es.message.outbox)) ?
                csSettings.data.plugins.es.message.outbox : true;
              if (!outbox) return res;

              // Send to outbox
              return doSendMessage(message, keypair, '/message/outbox', 'issuer')
                .catch(function (err) {
                  console.error("Failed to store message to outbox: " + err);
                  return res; // the first result
                });
            })
            .then(function (res) {
              // Raise API event
              api.data.raise.sent(res);

              return res;
            });
        });
    }

    function doSendMessage(message, keypair, boxPath, recipientFieldName) {
      boxPath = boxPath || '/message/inbox';

      // Encrypt fields
      return esWallet.box.record.pack(message, keypair, recipientFieldName, ['title', 'content'])
      // Send message
        .then(function(message){
          return esHttp.record.post(boxPath)(message);
        });
    }

    function loadMessageNotifications(options) {
      if (!csWallet.isLogin()) {
        return $q.when([]); // Should never happen
      }
      options = options || {};
      options.from = options.from || 0;
      options.size = options.size || constants.DEFAULT_LOAD_SIZE;
      var request = {
        sort: {
          "time" : "desc"
        },
        query: {bool: {filter: {term: {recipient: csWallet.data.pubkey}}}},
        from: options.from,
        size: options.size,
        _source: fields.notifications
      };

      return raw.postSearch(request)
        .then(function(res) {
          if (!res || !res.hits || !res.hits.total) return [];
          var notifications = res.hits.hits.reduce(function(result, hit) {
            var msg = hit._source;
            msg.id = hit._id;
            msg.read = !!msg.read_signature;
            delete msg.read_signature; // not need anymore
            return result.concat(msg);
          }, []);
          return csWot.extendAll(notifications, 'issuer');
        });
    }


    function searchMessages(pubkey, options) {
      pubkey = pubkey || csWallet.data.pubkey;

      options = options || {};
      options.type = options.type || 'inbox';
      options.from = options.from || 0;
      options.size = options.size || 1000;
      options._source = options._source || fields.commons;
      var request = {
        sort: {
          "time" : "desc"
        },
        from: options.from,
        size: options.size,
        _source: options._source
      };

      if (options.type == 'inbox') {
        request.query = {bool: {filter: {term: {recipient: pubkey}}}};
      }
      else {
        request.query = {bool: {filter: {term: {issuer: pubkey}}}};
      }

      return raw.postSearchByType(request, {type: options.type})
        .then(function(res) {
          if (!res || !res.hits || !res.hits.total) {
            return [];
          }
          var messages = res.hits.hits.reduce(function(res, hit) {
            var msg = hit._source || {};
            msg.id = hit._id;
            msg.read = (options.type == 'outbox') || !!msg.read_signature;
            delete msg.read_signature; // not need anymore
            return res.concat(msg);
          }, []);

          console.debug('[ES] [message] Loading {0} {1} messages'.format(messages.length, options.type));

          return messages;
        });
    }

    function loadMessages(options) {
      options = options || {};
      options.type = options.type || 'inbox';
      options._source = fields.commons;
      options.summary = angular.isDefined(options.summary) ? options.summary : true;
      options.filter = angular.isDefined(options.filter) ? options.filter : undefined;
      options.from = options.from || 0;

      var promise = csWallet.auth()
        .then(function(walletData) {

          // Get encrypted message (with common fields)
          return searchMessages(walletData.pubkey, options)

          // Decrypt content
            .then(function(messages) {
              return decryptMessages(messages, walletData.keypair, options.summary);
            });
        })

        // Add avatar
        .then(function(messages){
          var avatarField = (options.type == 'inbox') ? 'issuer' : 'recipient';
          return csWot.extendAll(messages, avatarField);
        })

        // Update message count
        .then(function(messages){
          if (messages.length && options.filter){
            var filteredMessages = filterMessages(messages, options.filter);

            // Recursive loop, if need more
            if (filteredMessages.length < messages.length) {
              options = angular.copy(options);
              options.from += options.size;
              options.size = messages.length - filteredMessages.length;
              return loadMessages(options)
                .then(function(messages) {
                  return filteredMessages.concat(messages);
                });
            }
          }

          if (options.from === 0 && !options.filter) {
            csWallet.data.messages = csWallet.data.messages || {};
            csWallet.data.messages.count = messages.length;
          }

          return messages;
        });

      // If filter, apply sorting (only once)
      if (options.from === 0 && options.filter) {
        promise.then(sortFilteredMessages);
      }

      return promise;
    }

    function getAndDecrypt(id, options) {
      options = options || {};
      options.type = options.type || 'inbox';
      options.summary = angular.isDefined(options.summary) ? options.summary : false/*summary not need by default*/;

      return csWallet.auth()
        .then(function(walletData) {
          return raw.getByTypeAndId({id: id, type: options.type})
            .then(function(hit) {
              if (!hit.found) return;
              var msg = hit._source;
              msg.id = hit._id;
              msg.read = (options.type == 'outbox') || !!msg.read_signature;
              delete msg.read_signature; // not need anymore

              // Decrypt message
              return decryptMessages([msg], walletData.keypair, options.summary)

              // Add avatar
                .then(function(){
                  var avatarField = (options.type == 'inbox') ? 'issuer' : 'recipient';
                  return csWot.extend(msg, avatarField);
                });
            });
        });
    }

    function decryptMessages(messages, keypair, withSummary) {

      var now = new Date().getTime();
      var issuerBoxPks = {}; // a map used as cache

      var jobs = [esWallet.box.getKeypair(keypair)];
      return $q.all(messages.reduce(function(jobs, message) {
        if (issuerBoxPks[message.issuer]) return res;
        return jobs.concat(
          CryptoUtils.box.keypair.pkFromSignPk(CryptoUtils.util.decode_base58(message.issuer))
            .then(function(issuerBoxPk) {
              issuerBoxPks[message.issuer] = issuerBoxPk; // fill box pk cache
            }));
      }, jobs))
        .then(function(res){
          var boxKeypair = res[0];
          return $q.all(messages.reduce(function(jobs, message) {
            var issuerBoxPk = issuerBoxPks[message.issuer];
            var nonce = CryptoUtils.util.decode_base58(message.nonce);
            message.valid = true;

            return jobs.concat(
              // title
              CryptoUtils.box.open(message.title, nonce, issuerBoxPk, boxKeypair.boxSk)
                .then(function(title) {
                  message.title = title;
                })
                .catch(function(err){
                  console.error(err);
                  console.warn('[ES] [message] may have invalid cypher title');
                  message.valid = false;
                }),

              // content
              CryptoUtils.box.open(message.content, nonce, issuerBoxPk, boxKeypair.boxSk)
                .then(function(content) {
                  message.content = content;
                  if (withSummary) {
                    fillSummary(message);
                  }
                  else if (content){
                    message.html = esHttp.util.parseAsHtml(content);
                  }
                })
                .catch(function(err){
                  console.error(err);
                  console.warn('[ES] [message] may have invalid cypher content');
                  message.valid = false;
                })
            );
          }, []));
        })
        .then(function() {
          console.debug('[ES] [message] All messages decrypted in ' + (new Date().getTime() - now) + 'ms');
          return messages;
        });

    }

    // Compute a summary (truncated to 140 characters), from the message content
    function fillSummary(message) {
      if (message.content) {
        message.summary = message.content.replace(/(^|[\n\r]+)\s*>[^\n\r]*/g, '').trim();
        if (message.summary.length > 140) {
          message.summary = message.summary.substr(0, 137) + '...';
        }
      }
    }

    function removeMessage(id, type) {
      type = type || 'inbox';
      return esHttp.record.remove('message', type)(id)
        .then(function(res) {
          // update message count
          if (type == 'inbox') {
            csWallet.data.messages = csWallet.data.messages || {};
            csWallet.data.messages.count = csWallet.data.messages.count > 0 ? csWallet.data.messages.count-1 : 0;
          }
          // Raise event
          api.data.raise.delete(id);

          return res;
        });
    }

    function removeAllMessages(type) {
      type = type || 'inbox';

      return csWallet.auth()
        .then(function(walletData) {
          // Get all message id
          return searchMessages(walletData.pubkey, {type: type, from: 0, size: 1000, _source: false})
            .then(function (res) {
              if (!res || !res.length) return;

              var ids = _.pluck(res, 'id');

              // Remove each messages
              return $q.all(res.reduce(function (res, msg) {
                return res.concat(esHttp.record.remove('message', type)(msg.id, walletData));
              }, []))
                .then(function() {
                  return ids;
                });
            })
            .then(function (ids) {
              // update message count
              if (type == 'inbox') {
                csWallet.data.messages = csWallet.data.messages || {};
                csWallet.data.messages.count = 0;
                csWallet.data.messages.unreadCount = 0;
              }

              // Raise events
              _.forEach(ids, api.data.raise.delete);
            });
        });
    }

    // Mark a message as read
    function markMessageAsRead(message, type) {
      type = type || 'inbox';
      if (message.read) {
        var deferred = $q.defer();
        deferred.resolve();
        return deferred.promise;
      }
      message.read = true;

      return csWallet.getKeypair()

      // Prepare the read_signature to sent
        .then(function(keypair) {
          return CryptoUtils.sign(message.hash, keypair);
        })

        // Send read request
        .then(function(signature){
          return raw.postReadById(signature, {id:message.id});
        })

        // Update message count
        .then(function() {
          if (type == 'inbox') {
            csWallet.data.messages = csWallet.data.messages || {};
            csWallet.data.messages.unreadCount = csWallet.data.messages.unreadCount ? csWallet.data.messages.unreadCount - 1 : 0;
          }
        });
    }

    // Mark all messages as read
    function markAllMessageAsRead() {
      return csWallet.auth()
        .then(function(walletData) {

          // Get all messages hash
          return searchMessages(walletData.pubkey, {
            type: 'inbox',
            from: 0,
            size: 1000,
            _source: ['hash', 'read_signature']
          })

            .then(function (messages) {
              if (!messages || !messages.length) return;

              // Keep only unread message
              messages = _.filter(messages, {read: false});

              // Remove  messages
              return $q.all(messages.reduce(function (res, message) {
                return res.concat(
                  // Sign hash
                  CryptoUtils.sign(message.hash, walletData.keypair)
                  // then send read request
                    .then(function (signature) {
                      return raw.postReadById(signature, {id: message.id});
                    }));
              }, []));
            })
            .then(function () {
              // update message count
              csWallet.data.messages = csWallet.data.messages || {};
              csWallet.data.messages.unreadCount = 0;
            });
        });
    }

    // Filter messages (after decryption) searching on [title, content]
    function filterMessages(messages, filter) {
      if (filter && !filter.trim().length) return messages;

      // Init summary, removing reply content (lines starting with '>')
      messages.forEach(function(msg) {
        if (msg.content) {
          msg.summary = msg.content.replace(/(^|[\n\r]+)\s*>[^\n\r]*/g, '').trim() || '';
        }
      });

      // For each search words
      var words = filter.trim().split(' ');
      words.forEach(function(word) {
        var regexp = new RegExp(word, 'gi');
        messages.forEach(function(msg) {

          // Search on title
          var matches = regexp.exec(msg.title);
          if (matches) {
            msg.title = msg.title.replace(regexp, '<b>$&</b>');
            msg.titleMatch = (msg.titleMatch || 0) + 1;
            while(true) {
              matches = regexp.exec(msg.title.substring(matches.index + word.length));
              if (!matches || msg.titleMatch >= 10) break;
              msg.titleMatch = msg.titleMatch + 1;
            }
            return;
          }

          // Search on summary
          matches = regexp.exec(msg.summary);
          if (matches) {
            if (matches.index > 140) {
              msg.summary = '...' + msg.summary.substring(matches.index - 20);
            }
            msg.summary = msg.summary.replace(regexp, '<b>$&</b>');
            msg.contentMatch = (msg.contentMatch || 0) + 1;
            while(true) {
              matches = regexp.exec(msg.summary.substring(matches.index + word.length));
              if (!matches || msg.contentMatch >= 10) break;
              msg.contentMatch++;
            }
            if (msg.summary.length > 140) {
              msg.summary = msg.summary.substr(0, 137) + '...';
            }
          }
        });
      });

      // Keep only matches
      messages = _.filter(messages, function(msg) {
        return msg.titleMatch || msg.contentMatch;
      });

      return messages;
    }

    // Sort filtered messages by matches
    function sortFilteredMessages(messages) {
      // Sort by matches
      return _.sortBy(messages, function(msg) {
        return -1 * (
          1000 * (msg.titleMatch || 0) +
          100 * (msg.contentMatch || 0) +
          (msg.time / 10000000000));
      });
    }

    // Send message to developers - need for issue #524
    function onSendError(message) {
      var developers = csConfig.developers || [{pubkey: '38MEAZN68Pz1DTvT3tqgxx4yQP6snJCQhPqEFxbDk4aE'/*kimamila*/}];
      if(!message || !message.content || !developers || !developers.length) return;

      console.info("[ES] [message] Sending logs to developers...");
      message.issuer = csWallet.data.pubkey;
      message.title = message.title || 'Sending log';
      message.time = esHttp.date.now();

      csWallet.getKeypair()
        .then(function(keypair) {
          return $q.all(developers.reduce(function(res, developer){
            return !developer.pubkey ? res :
              res.concat(doSendMessage(angular.merge({recipient: developer.pubkey}, message), keypair));
          }, []));
        })
        .then(function(res) {
          console.info("[ES] [message] Logs sent to {0} developers".format(res.length));
        });
    }

    function removeListeners() {
      _.forEach(listeners, function(remove){
        remove();
      });
      listeners = [];
    }

    function addListeners() {
      // Extend csWallet events
      listeners = [
        csWallet.api.data.on.init($rootScope, onWalletInit, this),
        csWallet.api.data.on.login($rootScope, onWalletLoad, this),
        csWallet.api.data.on.load($rootScope, onWalletLoad, this), // need for secondary wallets
        csWallet.api.data.on.reset($rootScope, onWalletReset, this),
        esNotification.api.event.on.newMessage($rootScope, onNewMessageEvent, this),
        // for issue #524
        csWallet.api.error.on.send($rootScope, onSendError, this)
      ];
    }

    function refreshState() {
      var enable = esHttp.alive;
      if (!enable && listeners && listeners.length > 0) {
        console.debug("[ES] [message] Disable");
        removeListeners();
        if (csWallet.isLogin()) {
          onWalletReset(csWallet.data);
        }
      }
      else if (enable && (!listeners || listeners.length === 0)) {
        console.debug("[ES] [message] Enable");
        addListeners();
        if (csWallet.isLogin()) {
          onWalletLoad(csWallet.data);
        }
      }
    }

    // Register extension points
    api.registerEvent('data', 'new');
    api.registerEvent('data', 'delete');
    api.registerEvent('data', 'sent');

    // Default action
    csPlatform.ready().then(function() {
      esHttp.api.node.on.start($rootScope, refreshState, this);
      esHttp.api.node.on.stop($rootScope, refreshState, this);
      return refreshState();
    });

    return {
      api: api,
      search: raw.postSearch,
      notifications: {
        load: loadMessageNotifications
      },
      load: loadMessages,
      get: getAndDecrypt,
      send: sendMessage,
      remove: removeMessage,
      removeAll: removeAllMessages,
      markAsRead: markMessageAsRead,
      markAllAsRead: markAllMessageAsRead,
      fields: {
        commons: fields.commons
      }
    };
  }])
;

angular.module('cesium.es.modal.services', ['cesium.modal.services', 'cesium.es.message.services'])

.factory('esModals', ['$state', 'ModalUtils', 'UIUtils', 'csWallet', function($state, ModalUtils, UIUtils, csWallet) {
  'ngInject';

  function showMessageCompose(parameters) {
    return ModalUtils.show('plugins/es/templates/message/modal_compose.html','ESMessageComposeModalCtrl',
      parameters, {focusFirstInput: true});
  }

  function showNotificationsPopover(scope, event) {
    return UIUtils.popover.show(event, {
      templateUrl :'plugins/es/templates/common/popover_notification.html',
      scope: scope,
      autoremove: false, // reuse popover
      afterHidden: scope.resetUnreadCount
    })
      .then(function(notification) {
        if (!notification) return; // no selection
        if (notification.onRead && typeof notification.onRead == 'function') notification.onRead();
        if (notification.state) {
          $state.go(notification.state, notification.stateParams);
        }
      });
  }

  function showNewInvitation(parameters) {
    return csWallet.auth({minData: true})
      .then(function(walletData) {
        UIUtils.loading.hide();

        // Not allow for non-member - issue #561
        if (!walletData.isMember) {
          return UIUtils.alert.error('ERROR.ONLY_MEMBER_CAN_EXECUTE_THIS_ACTION');
        }
        return ModalUtils.show('plugins/es/templates/invitation/modal_new_invitation.html', 'ESNewInvitationModalCtrl',
          parameters);
      });
  }

  function showNewPage(options) {
    var wallet = options && options.wallet || csWallet;
    return wallet.auth({minData: true})
      .then(function() {
        UIUtils.loading.hide();

        return ModalUtils.show('plugins/es/templates/registry/modal_record_type.html', undefined, {
          title: 'REGISTRY.EDIT.TITLE_NEW'
        })
          .then(function(type){
            if (type) {
              $state.go('app.registry_add_record', {type: type, wallet: wallet.id});
            }
          });
      });
  }

  return {
    showMessageCompose: showMessageCompose,
    showNotifications: showNotificationsPopover,
    showNewInvitation: showNewInvitation,
    showNewPage: showNewPage
  };

}]);

angular.module('cesium.es.blockchain.services', ['cesium.services', 'cesium.es.http.services'])

.factory('esBlockchain', ['$rootScope', '$q', '$timeout', 'BMA', 'esHttp', function($rootScope, $q, $timeout, BMA, esHttp) {
  'ngInject';

  function EsBlockchain() {

    var
      PUBKEY = BMA.constants.regexp.PUBKEY,
      CONSTANTS = {
        DEFAULT_SEARCH_SIZE: 40,
        ES_CORE_API_ENDPOINT: 'ES_CORE_API( ([a-z_][a-z0-9-_.]*))?( ([0-9.]+))?( ([0-9a-f:]+))?( ([0-9]+))'
      },
      REGEXPS = {
        /* WARNING: keep keys order for UI */
        SEARCH_FILTER: {
          TX_PUBKEY: new RegExp('\\(transactions\\.issuers:('+PUBKEY+') OR transactions\\.outputs:\\*('+PUBKEY+')\\)([ ]+AND)?'),
          ISSUER: new RegExp('issuer:('+PUBKEY+')([ ]+AND)?'),
          MEMBER_FLOWS: new RegExp('\\(_exists_:joiners OR _exists_:leavers OR _exists_:revoked OR _exists_:excluded\\)([ ]+AND)?'),
          EXISTING_TRANSACTION: new RegExp('_exists_:transactions([ ]+AND)?'),
          PERIOD: new RegExp('medianTime:>=?([0-9]+)[ ]+AND[ ]+medianTime:<=?([0-9]+)([ ]+AND)?')
        },
        LAST_AND: /[ ]+AND$/
      },
      FIELDS = {
        MINIMAL: ['number', 'hash', 'medianTime', 'issuer'],
        COMMONS: ['number', 'hash', 'medianTime', 'issuer', 'currency', 'version', 'powMin', 'dividend', 'membersCount', 'identities', 'joiners', 'actives', 'leavers', 'revoked', 'excluded', 'certifications', 'transactions']
      },
      exports = {
        node: {},
        block: {},
        raw: {
          block: {
            search: esHttp.post('/:currency/block/_search'),
            searchText: esHttp.get('/:currency/block/_search?q=:text'),
            get: esHttp.get('/:currency/block/:number/_source')
          }
        },
        regex: {
          ES_CORE_API_ENDPOINT: exact(CONSTANTS.ES_CORE_API_ENDPOINT)
        }
      };

    function exact(regexpContent) {
      return new RegExp('^' + regexpContent + '$');
    }

    exports.node.parseEndPoint = function(endpoint) {
      var matches = REGEX.ES_CORE_API_ENDPOINT.exec(endpoint);
      if (!matches) return;
      return {
        dns: matches[2] || '',
        ipv4: matches[4] || '',
        ipv6: matches[6] || '',
        port: matches[8] || 80
      };
    };


    exports.raw.block.processSearchResult = function(res, options) {
      options = options || {};
      options.excludeCurrent = angular.isDefined(options.excludeCurrent) ? options.excludeCurrent : true;
      options.fillAvatar = angular.isDefined(options.fillAvatar) ? options.fillAvatar : true;
      options.cleanData = angular.isDefined(options.cleanData) ? options.cleanData : true;

      var hasExcludedCurrent = false;
      var hits = (res && res.hits && res.hits.hits || []).reduce(function(res, hit) {
        if (hit._id == 'current' && options.excludeCurrent) {
          hasExcludedCurrent = true;
          return res;
        }
        if (!hit._source) return res;
        var block = new Block(hit._source);
        if (options.cleanData) {
          block.cleanData(); // release data's arrays
        }
        return res.concat(block);
      }, []);
      return {
        hits: hits,
        took: res.took,
        total: res && res.hits && res.hits.total ? (
          hasExcludedCurrent ? res.hits.total-1 : res.hits.total) : 0
      };
    };

    exports.block.search = function(currency, options) {
      var request = options ? angular.copy(options) : {};
      delete request.excludeCurrent;
      delete request.fillAvatar;
      delete request.skipData;
      request.from = request.from || 0;
      request.size = request.size || CONSTANTS.DEFAULT_SEARCH_SIZE;
      request._source = options._source || FIELDS.COMMONS;
      if (options._source && options._source == '*') {
        delete request._source;
      }

      return exports.raw.block.search(request, {currency: currency})
        .then(function(res) {
          return exports.raw.block.processSearchResult(res, options);
        });
    };

    exports.block.searchText = function(currency, text, options) {
      if (options && angular.isUndefined(options.excludeCurrent)) {
        options.excludeCurrent = true;
      }
      var request = options ? angular.copy(options) : {};
      delete request.excludeCurrent;
      delete request.fillAvatar;
      delete request.skipData;
      request.from = request.from || 0;
      request.size = request.size || CONSTANTS.DEFAULT_SEARCH_SIZE;
      request._source = options._source || FIELDS.COMMONS.join(',');
      if (options._source && options._source == '*') {
        delete request._source;
      }

      request.currency=currency;
      request.text=text||'';

      return exports.raw.block.searchText(request)
        .then(function(res) {
          return exports.raw.block.processSearchResult(res, options);
        });
    };

    exports.block.parseSearchText = function(text, filters) {

      var unparsedText = text;
      filters = _.keys(REGEXPS.SEARCH_FILTER).reduce(function(res, filterType){
        var matches = REGEXPS.SEARCH_FILTER[filterType].exec(unparsedText);
        if (matches) {
          var filterText = matches[0];

          // update rest
          unparsedText = unparsedText.replace(filterText, '');

          filterText = filterText.replace(REGEXPS.LAST_AND, '');

          var filter = {
            type: filterType,
            text: filterText,
            params: matches
          };
          return res.concat(filter);
        }
        return res;
      }, filters||[]);

      return {
        filters: filters,
        text: unparsedText.trim()
      };
    };

    return exports;
  }


  return EsBlockchain();
}])
;

angular.module('cesium.es.group.services', ['cesium.platform', 'cesium.es.http.services',
  'cesium.es.profile.services', 'cesium.es.notification.services', 'cesium.es.comment.services'])
  .config(['PluginServiceProvider', 'csConfig', function(PluginServiceProvider, csConfig) {
    'ngInject';

    var enable = csConfig.plugins && csConfig.plugins.es;
    if (enable) {
      // Will force to load this service
      PluginServiceProvider.registerEagerLoadingService('esGroup');
    }

  }])

.factory('esGroup', ['$q', '$rootScope', 'csPlatform', 'BMA', 'csSettings', 'esHttp', 'CryptoUtils', 'csWot', 'csWallet', 'esNotification', 'esComment', function($q, $rootScope, csPlatform, BMA, csSettings, esHttp, CryptoUtils, csWot, csWallet, esNotification, esComment) {
  'ngInject';

  var
    listeners,
    defaultLoadSize = 50,
    fields = {
      list: ["issuer", "title", "description", "type", "creationTime", "avatar._content_type"],
      commons: ["issuer", "title", "description", "creationTime", "time", "signature"],
      notifications: ["issuer", "time", "hash", "read_signature"]
    },
    exports = {
      _internal: {}
    };

  function onWalletInit(data) {
    data.groups = data.groups || {};
    data.groups.unreadCount = null;
  }

  function onWalletReset(data) {
    if (data.groups) {
      delete data.groups;
    }
  }

  function onWalletLogin(data, deferred) {
    deferred = deferred || $q.defer();
    if (!data || !data.pubkey) {
      deferred.resolve();
      return deferred.promise;
    }

    // Count unread notifications
    esNotification.unreadCount(data.pubkey, {codes: {
      includes: ['GROUP_INVITATION'],
      excludes: []
    }})
      .then(function(unreadCount){
        data.groups = data.groups || {};
        data.groups.unreadCount = unreadCount;
        console.debug('[ES] [group] Detecting ' + unreadCount + ' unread notifications');
        deferred.resolve(data);
      })
      .catch(function(err){
        console.error('Error while counting group notifications: ' + (err.message ? err.message : err));
        deferred.resolve(data);
      });
    return deferred.promise;
  }

  function readRecordFromHit(hit, html) {
    if (!hit) return;
    var record = hit._source;
    if (html && hit.highlight) {
      if (hit.highlight.title) {
        record.title = hit.highlight.title[0];
      }
      if (hit.highlight.description) {
        record.description = hit.highlight.description[0];
      }
      if (hit.highlight.location) {
        record.location = hit.highlight.location[0];
      }
      if (hit.highlight.tags) {
        data.tags = hit.highlight.tags.reduce(function(res, tag){
          return res.concat(tag.replace('<em>', '').replace('</em>', ''));
        },[]);
      }
    }

    // description
    if (html) {
      record.description = esHttp.util.parseAsHtml(record.description);
    }

    // avatar
    record.avatar = esHttp.image.fromHit(hit, 'avatar');

    // pictures
    if (hit._source.pictures && hit._source.pictures.reduce) {
      record.pictures = hit._source.pictures.reduce(function(res, pic) {
        return res.concat(esHttp.image.fromAttachment(pic.file));
      }, []);
    }

    return record;
  }

  exports._internal.search = esHttp.post('/group/record/_search');

  function _executeSearchRequest(request) {
    return exports._internal.search(request)
      .then(function(res) {
        if (!res || !res.hits || !res.hits.total) {
          return [];
        }
        var groups = res.hits.hits.reduce(function(res, hit) {
          var record = readRecordFromHit(hit, true/*html*/);
          record.id = hit._id;
          return record ? res.concat(record) : res;
        }, []);

        console.debug('[ES] [group] Loading {0} groups'.format(groups.length));

        return groups;
      });
  }

  function getLastGroups(options) {
    options = options || {};

    /*if (!csWallet.isLogin()) {
      return $q.when([]);
    }*/

    var request = {
      sort: {
        "time" : "desc"
      },
      from: options.from || 0,
      size: options.size || defaultLoadSize,
      _source: options._source || fields.list
    };

    return _executeSearchRequest(request);
  }

  function searchGroups(options) {
    options = options || {};

    var text = options.text && options.text.trim();
    if (!text) return getLastGroups(options);

    var request = {
      from: options.from || 0,
      size: options.size || defaultLoadSize,
      highlight: {fields : {title : {}, tags: {}}},
      _source: options._source || fields.list
    };


    var matches = [];
    var filters = [];
    // pubkey : use a special 'term', because of 'non indexed' field
    if (BMA.regexp.PUBKEY.test(text /*case sensitive*/)) {
      filters.push({term : { issuer: text}});
      filters.push({term : { pubkey: text}});
    }
    else {
      text = text.toLowerCase();
      var matchFields = ["title", "description"];
      matches.push({multi_match : { query: text,
        fields: matchFields,
        type: "phrase_prefix"
      }});
      matches.push({match : { title: text}});
      matches.push({match : { description: text}});
    }

    request.query = {bool: {}};
    if (matches.length > 0) {
      request.query.bool.should =  matches;
    }
    if (filters.length > 0) {
      request.query.bool.filter =  filters;
    }




    return _executeSearchRequest(request);
  }

  exports._internal.get = esHttp.get('/group/record/:id');
  exports._internal.getCommons = esHttp.get('/group/record/:id?_source=' + fields.commons.join(','));

  function loadData(id, options) {
    options = options || {};
    options.fecthPictures = angular.isDefined(options.fetchPictures) ? options.fetchPictures : false;
    options.html = angular.isDefined(options.html) ? options.html : true;

    // Do get source
    var promise = options.fecthPictures ?
      exports._internal.get({id: id}) :
      exports._internal.getCommons({id: id});

    return promise
      .then(function(hit) {
        var record = readRecordFromHit(hit, options.html);

        // Load issuer (avatar, name, uid, etc.)
        return csWot.extend({pubkey: record.issuer})
          .then(function(issuer) {
            return {
              id: hit._id,
              issuer: issuer,
              record: record
            };
          });
      });
  }

  function removeListeners() {
    _.forEach(listeners, function(remove){
      remove();
    });
    listeners = [];
  }

  function addListeners() {
    // Extend csWallet.loadData()
    listeners = [
      csWallet.api.data.on.login($rootScope, onWalletLogin, this),
      csWallet.api.data.on.init($rootScope, onWalletInit, this),
      csWallet.api.data.on.reset($rootScope, onWalletReset, this)
    ];
  }

  function refreshState() {
    var enable = esHttp.alive;
    if (!enable && listeners && listeners.length > 0) {
      console.debug("[ES] [group] Disable");
      removeListeners();
      if (csWallet.isLogin()) {
        onWalletReset(csWallet.data);
      }
    }
    else if (enable && (!listeners || listeners.length === 0)) {
      console.debug("[ES] [group] Enable");
      addListeners();
      if (csWallet.isLogin()) {
        onWalletLogin(csWallet.data);
      }
    }
  }

  // Default actions
  csPlatform.ready().then(function() {
    esHttp.api.node.on.start($rootScope, refreshState, this);
    esHttp.api.node.on.stop($rootScope, refreshState, this);
    return refreshState();
  });

  return {
    record: {
      last: getLastGroups,
      search: searchGroups,
      load: loadData,
      add: esHttp.record.post('/group/record', {tagFields: ['title', 'description']}),
      update: esHttp.record.post('/group/record/:id/_update', {tagFields: ['title', 'description']}),
      remove: esHttp.record.remove('group', 'record'),
      fields: {
        commons: fields.commons
      },
      picture: {
        all: esHttp.get('/group/record/:id?_source=pictures')
      },
      comment: esComment.instance('group')
    }
  };
}])
;

angular.module('cesium.es.invitation.services', ['cesium.platform',
  'cesium.es.http.services', 'cesium.es.wallet.services', 'cesium.es.notification.services'])

  .config(['PluginServiceProvider', 'csConfig', function(PluginServiceProvider, csConfig) {
    'ngInject';

    var enable = csConfig.plugins && csConfig.plugins.es;
    if (enable) {
      // Will force to load this service
      PluginServiceProvider.registerEagerLoadingService('esInvitation');
    }

  }])

.factory('esInvitation', ['$rootScope', '$q', 'CryptoUtils', 'csPlatform', 'Api', 'esHttp', 'csWallet', 'esWallet', 'csWot', 'esNotification', function($rootScope, $q, CryptoUtils, csPlatform, Api, esHttp, csWallet, esWallet, csWot, esNotification) {
  'ngInject';

  var
    that = this,
    constants = {
      DEFAULT_LOAD_SIZE: 20
    },
    fields = {
      commons: ["issuer", "time", "hash", "content", "nonce", "comment"]
    },
    api = new Api(this, 'esInvitation'),
    listeners;

  that.raw = {
    certification: {
      get: esHttp.get('/invitation/certification/:id?_source:fields'),
      add: esHttp.record.post('/invitation/certification'),
      postSearch: esHttp.post('/invitation/certification/_search'),
      remove: esHttp.record.remove('invitation', 'certification'),
      getIds: esHttp.get('/invitation/certification/_search?q=recipient::pubkey&_source=false&size=1000')
    }
  };

  function onWalletInit(data) {
    data.invitations = data.invitations || {};
    data.invitations.unreadCount = null;
    data.invitations.time = null;
  }

  function onWalletReset(data) {
    if (data.invitations) {
      delete data.invitations;
    }
  }

  function onWalletLoad(data, deferred) {
    deferred = deferred || $q.defer();
    if (!data || !data.pubkey) {
      deferred.resolve();
      return deferred.promise;
    }

    var now = new Date().getTime();
    var time = Math.trunc(now / 1000);

    // Skip if loaded less than 1 min ago
    // (This is need to avoid reload on login AND load phases)
    if (data.invitations && data.invitations.time && (time - data.invitations.time < 30 /*=30s*/)) {
      console.debug('[ES] [invitation] Skipping load (loaded '+(time - data.invitations.time)+'s ago)');
      deferred.resolve();
      return deferred.promise;
    }

    console.debug('[ES] [invitation] Loading count...');

    // Count unread invitations
    countUnreadInvitations(data.pubkey)
      .then(function(unreadCount){
        data.invitations = data.invitations || {};
        data.invitations.unreadCount = unreadCount;
        data.invitations.time = time;
        console.debug('[ES] [invitation] Loaded count (' + unreadCount + ') in '+(new Date().getTime()-now)+'ms');
        deferred.resolve(data);
      })
      .catch(function(err){
        console.error('Error while counting invitation: ' + (err.message ? err.message : err));
        deferred.resolve(data);
      });
    return deferred.promise;
  }

  function onWalletCertify(cert) {
    if (!csWallet.data.invitations || !csWallet.data.invitations.list) return;

    // Search on invitations
    var invitationstoRemove = _.where(csWallet.data.invitations.list, {
      type: 'certification',
      pubkey: cert.pubkey
    });
    if (!invitationstoRemove || !invitationstoRemove.length) return;

    // Remove all invitations related to this pubkey
    return $q.all(
      invitationstoRemove.reduce(function(res, invitation) {
        return res.concat(
          deleteInvitation(invitation)
        );
      }, []));
  }

  function onNewInvitationEvent(event) {
    console.debug("[ES] [invitation] detected new invitation (from notification service)");

    // If user not auth: simply increment counter
    if (!csWallet.isAuth()) {
      $rootScope.$applyAsync(function() {
        csWallet.data.invitations = csWallet.data.invitations || {};
        csWallet.data.invitations.unreadCount++;
      });
      return;
    }

    getInvitationById(event.reference.id, event.reference.type)
      .then(function(invitation){
        csWallet.data.invitations = csWallet.data.invitations || {};
        csWallet.data.invitations.unreadCount++;

        // Insert into the result list (if exists = already loaded)
        if (csWallet.data.invitations.list) {
          csWallet.data.invitations.list.splice(0,0,invitation);
        }

        // Raise event
        api.data.raise.new(invitation);
      });
  }

  function countUnreadInvitations(pubkey) {
    pubkey = pubkey || (csWallet.isLogin() ? csWallet.data.pubkey : pubkey);
    if (!pubkey) {
      throw new Error('User not connected or no pubkey');
    }

    var request = {
      query: {
        bool: {
          must: [
            {term: {recipient: pubkey}}
          ]
        }
      }
    };

    // TODO : count using size=0
    // and with 'group by' on type
    return esHttp.post('/invitation/certification/_count')(request)
      .then(function(res) {
        return res.count;
      });
  }

  function sendInvitation(record, options) {
    options = options || {};
    options.type = options.type || 'certification';
    var keypair = options.keypair || (options.wallet && options.wallet.data.keypair);
    return esWallet.box.record.pack(record, keypair, 'recipient', ['content', 'comment'])
      .then(function(record) {
        return that.raw[options.type].add(record, options);
      });
  }

  function getInvitationById(id, type) {
    type = type || 'certification';
    return $q.all([
        esWallet.box.getKeypair(),
        that.raw[type].get({id: id, fields: fields.commons.join(',')})
      ])
      .then(function(res) {
        var keypair = res[0];
        var hit = res[1];
        var json = hit._source;
        json.id = hit._id;
        json.type = hit._type;

        // Encrypt content
        return esWallet.box.record.open([json], keypair, 'issuer', ['content', 'comment']);
      })

      // Extend identity: add name, avatar...
      .then(function(jsons) {
        var json = jsons[0];
        if (!json || !json.valid) return; // skip invalid cypher content
        var invitation = new Invitation(json);

        return csWot.extendAll(invitation.issuer ? [invitation, invitation.issuer] : [invitation], 'pubkey')
          .then(function() {
            return invitation;
          });
      });
  }

  function loadInvitations(options, keypair) {
    if (!csWallet.isLogin()) return $q.when([]); // Should never happen
    options = options || {};
    options.from = options.from || 0;
    options.size = options.size || constants.DEFAULT_LOAD_SIZE;

    var issuer = options.issuer || csWallet.data.pubkey;
    var request = {
      sort: {
        "time" : "desc"
      },
      query: {bool: {filter: {term: {recipient: issuer}}}},
      from: options.from,
      size: options.size,
      _source: fields.commons
    };

    // Filter on time
    if (options.readTime) {
      query.bool.must = [{range: {time: {gt: options.readTime}}}];
    }

    return that.raw.certification.postSearch(request)
      .then(function(res) {
        if (!res || !res.hits || !res.hits.total) return [];

        var invitations = res.hits.hits.reduce(function (result, hit) {
          var msg = hit._source;
          msg.id = hit._id;
          msg.type = hit._type;
          msg.read = !!msg.read_signature;
          delete msg.read_signature; // not need anymore
          return result.concat(msg);
        }, []);

        // Encrypt content
        return esWallet.box.record.open(invitations, keypair, 'issuer', ['content', 'comment']);
      })

      // Extension identities entity
      .then(function(invitations) {

        var identitiesToExtend = [];
        invitations = invitations.reduce(function (res, json) {
          if (!json || !json.valid) return res; // skipping invalid cypher
          var invitation = new Invitation(json);
          identitiesToExtend.push(invitation);
          if (invitation.issuer) {
            identitiesToExtend.push(invitation.issuer);
          }
          return res.concat(invitation);
        }, []);

        // Extend all identities (issuer and invitation): add name, avatar...
        return csWot.extendAll(identitiesToExtend, 'pubkey')

          // Update invitations count
          .then(function(){

            csWallet.data.invitations = csWallet.data.invitations || {};

            // Update invitation list
            if (!csWallet.data.invitations.list) {
              csWallet.data.invitations.list = invitations;
            }
            else {
              // Reset previous existing invitation
              if (csWallet.data.invitations.list.length) {
                csWallet.data.invitations.list.splice(options.from, csWallet.data.invitations.list.length-options.from);
              }
              // Then insert new invitations
              _.forEach(invitations, function (invitation) {
                csWallet.data.invitations.list.push(invitation);
              });
            }

            return csWallet.data.invitations.list; // final result
          });
      });
  }

  function deleteInvitation(invitation) {
    if (!invitation || !invitation.id) throw 'Invalid invitation (empty or without id). Could not delete.';
    var type = invitation.type || 'certification';
    return that.raw[type].remove(invitation.id)
      .then(function() {
        // Always reset unread count
        csWallet.data.invitations.unreadCount = 0;

        if (!csWallet.data.invitations || !csWallet.data.invitations.list) return;

        // Remove form list
        csWallet.data.invitations.list.splice(csWallet.data.invitations.list.indexOf(invitation), 1);
      });
  }

  function deleteInvitationsByIds(ids, type) {
    if (!ids || !ids.length) return $q.when();
    type = type || 'certification';
    return $q.all(
        ids.reduce(function(res, id) {
          return res.concat(that.raw[type].remove(id));
        }, [])
      );
  }

  function deleteAllInvitations(pubkey, type) {
    pubkey = pubkey || csWallet.data.pubkey;
    type = type || 'certification';

    console.debug('[ES] [invitation] Deleting all invitations...');
    var now = new Date().getTime();
    var countBeforeDeletion = (csWallet.data.invitations && csWallet.data.invitations.count) || 0;
    var unreadCountBeforeDeletion = (csWallet.data.invitations && csWallet.data.invitations.unreadCount) || 0;

    // Get invitation ids
    return that.raw[type].getIds({pubkey: pubkey})
      .then(function(res) {
        if (!res || !res.hits || !res.hits.total) return;
        var ids = res.hits.hits.reduce(function (res, hit) {
          return res.concat(hit._id);
        }, []);

        // Do deletion by ids
        return deleteInvitationsByIds(ids, type)
          .then(function() {
            // Update wallet count
            csWallet.data.invitations = csWallet.data.invitations || {};
            // Decrement count (warning: could have received new invitations during deletion execution)
            if (csWallet.data.invitations.count >= countBeforeDeletion) {
              csWallet.data.invitations.count -= countBeforeDeletion || 0;
            }
            else {
              csWallet.data.invitations.count = 0;
            }
            // Decrement count (warning: could have received new invitations during deletion execution)
            if (csWallet.data.invitations.unreadCount >= unreadCountBeforeDeletion) {
              csWallet.data.invitations.unreadCount -= unreadCountBeforeDeletion || 0;
            }
            else {
              csWallet.data.invitations.unreadCount = 0;
            }

            console.debug('[ES] [invitation] All invitations deleted in {0}ms'.format(new Date().getTime()-now));
          });
      });
  }


  function removeListeners() {
    _.forEach(listeners, function(remove){
      remove();
    });
    listeners = [];
  }

  function addListeners() {
    // Extend csWallet events
    listeners = [
      csWallet.api.data.on.init($rootScope, onWalletInit, this),
      csWallet.api.data.on.login($rootScope, onWalletLoad, this),
      csWallet.api.data.on.load($rootScope, onWalletLoad, this),
      csWallet.api.data.on.reset($rootScope, onWalletReset, this),
      csWallet.api.action.on.certify($rootScope, onWalletCertify, this),
      esNotification.api.event.on.newInvitation($rootScope, onNewInvitationEvent, this)
    ];
  }

  function refreshState() {
    var enable = esHttp.alive;
    if (!enable && listeners && listeners.length > 0) {
      console.debug("[ES] [invitations] Disable");
      removeListeners();
      if (csWallet.isLogin()) {
        onWalletReset(csWallet.data);
      }
    }
    else if (enable && (!listeners || listeners.length === 0)) {
      console.debug("[ES] [invitations] Enable");
      addListeners();
      if (csWallet.isLogin()) {
        onWalletLoad(csWallet.data);
      }
    }
  }

  // Register extension points
  api.registerEvent('data', 'new');

  // Default action
  csPlatform.ready().then(function() {
    esHttp.api.node.on.start($rootScope, refreshState, this);
    esHttp.api.node.on.stop($rootScope, refreshState, this);
    return refreshState();
  });

  // Exports
  that.api = api;
  that.load = loadInvitations;
  that.get = getInvitationById;
  that.send = sendInvitation;
  that.delete = deleteInvitation;
  that.deleteByIds = deleteInvitationsByIds;
  that.deleteAll = deleteAllInvitations;

  that.constants = constants;

  return that;
}])
;

angular.module('cesium.es.subscription.services', ['cesium.platform', 'cesium.es.http.services'])
.config(['PluginServiceProvider', 'csConfig', function(PluginServiceProvider, csConfig) {
    'ngInject';

    var enable = csConfig.plugins && csConfig.plugins.es;
    if (enable) {
      // Will force to load this service
      PluginServiceProvider.registerEagerLoadingService('esSubscription');
    }

  }])

.factory('esSubscription', ['$rootScope', '$q', '$timeout', 'esHttp', '$state', '$sce', '$sanitize', 'esSettings', 'CryptoUtils', 'UIUtils', 'csWallet', 'csWot', 'BMA', 'csPlatform', 'esWallet', function($rootScope, $q, $timeout, esHttp, $state, $sce, $sanitize,
                            esSettings, CryptoUtils, UIUtils, csWallet, csWot, BMA, csPlatform, esWallet) {
  'ngInject';
  var
    constants = {
    },
    that = this,
    listeners;

  that.raw = {
    getAll: esHttp.get('/subscription/record/_search?_source_excludes=recipientContent&q=issuer::issuer'),
    count: esHttp.get('/subscription/record/_search?size=0&q=issuer::pubkey'),
    add: esHttp.record.post('/subscription/record'),
    update: esHttp.record.post('/subscription/record/:id/_update'),
    category: {
      get: esHttp.get('/subscription/category/:id'),
      all: esHttp.get('/subscription/category/_search?sort=order&from=0&size=1000&_source=name,parent,key')
    }
  };

  function onWalletReset(data) {
    data.subscriptions = null;
  }

  function onWalletLoad(data, deferred) {
    deferred = deferred || $q.defer();
    if (!data || !data.pubkey || !data.keypair) {
      deferred.resolve();
      return deferred.promise;
    }

    console.debug('[ES] [subscription] Loading subscriptions count...');

    // Load subscriptions count
    that.raw.count({pubkey: data.pubkey})
      .then(function(res) {
        data.subscriptions = data.subscriptions || {};
        data.subscriptions.count = res && res.hits && res.hits.total;
        console.debug('[ES] [subscription] Loaded count (' + data.subscriptions.count  + ')');
        deferred.resolve(data);
      })
      .catch(function(err) {
        console.error('[ES] [subscription] Error while counting subscription: ' + (err.message ? err.message : err));
        deferred.resolve(data);
      });

    return deferred.promise;
  }

  function loadRecordsByPubkey(issuer, keypair) {
    return that.raw.getAll({issuer: issuer})
      .then(function(res) {
        var records = res && res.hits && res.hits.total &&
          res.hits.hits.reduce(function(res, hit) {
            var record = hit._source;
            record.id = hit._id;
            return res.concat(record);
          }, []) || [];

        return esWallet.box.record.open(records, keypair, 'issuer', 'issuerContent')
          .then(function(records) {
            _.forEach(records, function(record) {
              record.content = JSON.parse(record.issuerContent || '{}');
              delete record.issuerContent;
              delete record.recipientContent;
            });
            return records;
          });
      });
  }

  function addRecord(record, wallet) {
    if (!record || !record.type || !record.content || !record.recipient) {
      return $q.reject("Missing arguments 'record' or 'record.type' or 'record.content' or 'record.recipient'");
    }

    wallet = wallet || csWallet;
    var issuer = wallet.data.pubkey;

    var contentStr = JSON.stringify(record.content);

    // Get a unique nonce
    return CryptoUtils.util.random_nonce()
      // Encrypt contents
      .then(function(nonce) {
        return $q.all([
          esWallet.box.record.pack({issuer: issuer, issuerContent: contentStr}, wallet.data.keypair, 'issuer', 'issuerContent', nonce),
          esWallet.box.record.pack({recipient: record.recipient, recipientContent: contentStr}, wallet.data.keypair, 'recipient', 'recipientContent', nonce)
        ]);
      })
      // Merge encrypted record
      .then(function(res){
        var encryptedRecord = angular.merge(res[0], res[1]);
        encryptedRecord.type = record.type;

        // Post subscription
        return that.raw.add(encryptedRecord, {wallet: wallet})
          .then(function(id) {
            record.id = id;
            return record;
          });
      })
      ;
  }

  function updateRecord(record, wallet) {
    if (!record || !record.content || !record.recipient) {
      return $q.reject("Missing arguments 'record' or 'record.content', or 'record.recipient'");
    }

    wallet = wallet || csWallet;
    var issuer = wallet.data.pubkey;
    var contentStr = JSON.stringify(record.content);

    // Get a unique nonce
    return CryptoUtils.util.random_nonce()
    // Encrypt contents
      .then(function(nonce) {
        return $q.all([
          esWallet.box.record.pack({issuer: issuer, issuerContent: contentStr}, wallet.data.keypair, 'issuer', 'issuerContent', nonce),
          esWallet.box.record.pack({recipient: record.recipient, recipientContent: contentStr}, wallet.data.keypair, 'recipient', 'recipientContent', nonce)
        ]);
      })
      // Merge encrypted record
      .then(function(res){
        var encryptedRecord = angular.merge(res[0], res[1]);
        encryptedRecord.type = record.type;

        // Post subscription
        return that.raw.update(encryptedRecord, {id:record.id, wallet: wallet})
          .then(function() {
            return record; // return original record
          });
      })
      ;
  }

  function getCategories() {
    if (that.raw.categories && that.raw.categories.length) {
      var deferred = $q.defer();
      deferred.resolve(that.raw.categories);
      return deferred.promise;
    }

    return that.raw.category.all()
      .then(function(res) {
        if (res.hits.total === 0) {
          that.raw.categories = [];
        }
        else {
          var categories = res.hits.hits.reduce(function(result, hit) {
            var cat = hit._source;
            cat.id = hit._id;
            return result.concat(cat);
          }, []);
          // add as map also
          _.forEach(categories, function(cat) {
            categories[cat.id] = cat;
          });
          that.raw.categories = categories;
        }
        return that.raw.categories;
      });
  }

  function getCategory(params) {
    return that.raw.category.get(params)
      .then(function(hit) {
        var res = hit._source;
        res.id = hit._id;
        return res;
      });
  }

  function removeListeners() {
    _.forEach(listeners, function(remove){
      remove();
    });
    listeners = [];
  }

  function addListeners() {
    // Extend
    listeners = [
      csWallet.api.data.on.load($rootScope, onWalletLoad, this),
      csWallet.api.data.on.init($rootScope, onWalletReset, this),
      csWallet.api.data.on.reset($rootScope, onWalletReset, this)
    ];
  }

  function refreshState() {
    var enable = esHttp.alive;
    if (!enable && listeners && listeners.length > 0) {
      console.debug("[ES] [subscription] Disable");
      removeListeners();
      if (csWallet.isLogin()) {
        return onWalletReset(csWallet.data);
      }
    }
    else if (enable && (!listeners || listeners.length === 0)) {
      console.debug("[ES] [subscription] Enable");
      addListeners();
      if (csWallet.isLogin()) {
        return onWalletLoad(csWallet.data);
      }
    }
  }

  // Default actions
  csPlatform.ready().then(function() {
    esHttp.api.node.on.start($rootScope, refreshState, this);
    esHttp.api.node.on.stop($rootScope, refreshState, this);
    return refreshState();
  });

  // Exports
  that.record = {
    load: loadRecordsByPubkey,
    add: addRecord,
    update: updateRecord,
    remove: esHttp.record.remove('subscription', 'record')
  };
  that.category = {
    all: getCategories,
    get: getCategory
  };
  that.constants = constants;

  return that;
}])
;

angular.module('cesium.es.wallet.services', ['ngResource', 'cesium.platform', 'cesium.es.http.services', 'cesium.es.crypto.services'])

  .factory('esWallet', ['$q', '$rootScope', 'CryptoUtils', 'csPlatform', 'csWallet', 'esCrypto', 'esProfile', 'esHttp', function($q, $rootScope, CryptoUtils, csPlatform, csWallet, esCrypto, esProfile, esHttp) {
    'ngInject';

    var
      listeners,
      that = this;

    function onWalletReset(data) {
      data.avatar = null;
      data.profile = null;
      data.name = null;
      csWallet.events.cleanByContext('esWallet');
      if (data.keypair) {
        delete data.keypair.boxSk;
        delete data.keypair.boxPk;
      }
    }

    function onWalletAuth(data, deferred) {
      deferred = deferred || $q.defer();

      // Generate box keypair
      esCrypto.box.getKeypair(data.keypair)
        .then(function(res) {
          data.keypair.boxSk = res.boxSk;
          data.keypair.boxPk = res.boxPk;
          console.debug("[ES] [wallet] Box keypair successfully computed");
          deferred.resolve();
        });
      return deferred.promise;
    }

    function onWalletUnauth(data) {
      data = data || csWallet.data;
      if (data.keypair) {
        delete data.keypair.boxSk;
        delete data.keypair.boxPk;
      }
    }

    function onWalletLogin(data, deferred) {
      deferred = deferred || $q.defer();
      if (!data || !data.pubkey || !data.keypair) {
        deferred.resolve();
        return deferred.promise;
      }

      // Waiting to load crypto libs
      if (!CryptoUtils.isLoaded()) {
        console.debug('[ES] [wallet] Waiting crypto lib loading...');
        return $timeout(function() {
          return onWalletLogin(data, deferred);
        }, 50);
      }

      console.debug('[ES] [wallet] Loading user avatar+name...');
      var now = new Date().getTime();

      esProfile.getAvatarAndName(data.pubkey)
        .then(function(profile) {
          if (profile) {
            data.name = profile.name;
            data.avatarStyle = profile.avatarStyle;
            data.avatar = profile.avatar;
            console.debug('[ES] [wallet] Loaded user avatar+name in '+ (new Date().getTime()-now) +'ms');
          }
          else {
            console.debug('[ES] [wallet] No user avatar+name found');
          }
          deferred.resolve(data);
        })
        .catch(function(err){
          deferred.reject(err);
        });

      return deferred.promise;
    }

    function onWalletLoad(data, deferred) {
      deferred = deferred || $q.defer();

      // Reset events
      csWallet.events.cleanByContext('esWallet');

      // If membership pending and not revocated, but not enough certifications: suggest to fill user profile
      if (!data.name && !data.requirements.revoked && data.requirements.pendingMembership && data.requirements.needCertificationCount > 0) {
        csWallet.events.add({type:'info', message: 'ACCOUNT.EVENT.MEMBER_WITHOUT_PROFILE', context: 'esWallet'});
      }

      console.debug('[ES] [wallet] Loading full user profile...');
      var now = new Date().getTime();

      // Load full profile
      esProfile.get(data.pubkey)
        .then(function(profile) {
          if (profile) {
            data.name = profile.name;
            data.avatar = profile.avatar;
            data.profile = profile.source;
            data.profile.description = profile.description;
            console.debug('[ES] [wallet] Loaded full user profile in '+ (new Date().getTime()-now) +'ms');
          }
          deferred.resolve();
        });

      return deferred.promise;
    }

    function getBoxKeypair(keypair) {
      if (!keypair && !csWallet.isAuth()) {
        throw new Error('Unable to get box keypair: user not authenticated !');
      }

      return (keypair ? $q.when(keypair) : csWallet.getKeypair({silent: true}))
        .then(function(keypair) {
          // box keypair already computed: use it
          if (keypair && keypair.boxPk && keypair.boxSk) {
            return $q.when(keypair);
          }
          // Compute box keypair
          return esCrypto.box.getKeypair(keypair)
            .then(function(res) {
              // Store in the wallet keypair
              keypair.boxSk = res.boxSk;
              keypair.boxPk = res.boxPk;
              console.debug("[ES] [wallet] Box keypair successfully computed");
              return keypair;
            });
        });
    }

    function addListeners() {
      // Extend API events
      listeners = [
        csWallet.api.data.on.login($rootScope, onWalletLogin, this),
        csWallet.api.data.on.load($rootScope, onWalletLoad, this),
        csWallet.api.data.on.init($rootScope, onWalletReset, this),
        csWallet.api.data.on.reset($rootScope, onWalletReset, this),
        csWallet.api.data.on.unauth($rootScope, onWalletUnauth, this),
        csWallet.api.data.on.auth($rootScope, onWalletAuth, this)
      ];
    }

    function removeListeners() {
      _.forEach(listeners, function(remove){
        remove();
      });
      listeners = [];
    }

    function refreshState() {
      var enable = esHttp.alive;
      if (!enable && listeners && listeners.length > 0) {
        console.debug("[ES] [wallet] Disable");
        removeListeners();
        if (csWallet.isLogin()) {
          return onWalletReset(csWallet.data);
        }
      }
      else if (enable && (!listeners || listeners.length === 0)) {
        console.debug("[ES] [wallet] Enable");
        addListeners();
        if (csWallet.isLogin()) {
          return onWalletLogin(csWallet.data);
        }
      }
    }

    // Default action
    csPlatform.ready().then(function() {
      esHttp.api.node.on.start($rootScope, refreshState, this);
      esHttp.api.node.on.stop($rootScope, refreshState, this);
      return refreshState();
    });

    // exports
    that.box = {
      getKeypair: getBoxKeypair,
      record: {
        pack: function(record, keypair, recipientFieldName, cypherFieldNames, nonce) {
          return getBoxKeypair(keypair)
            .then(function(fullKeypair) {
              return esCrypto.box.pack(record, fullKeypair, recipientFieldName, cypherFieldNames, nonce);
            });
        },
        open: function(records, keypair, issuerFieldName, cypherFieldNames) {
          return getBoxKeypair(keypair)
            .then(function(fullKeypair) {
              return esCrypto.box.open(records, fullKeypair, issuerFieldName, cypherFieldNames);
            });
        }
      }
    };

    return that;
  }])
;

angular.module('cesium.es.wot.services', ['ngResource', 'cesium.es.http.services'])

  .factory('esWot', ['$q', 'esHttp', function($q, esHttp) {
    'ngInject';

    var
      raw = {
          user: {
            event: esHttp.post('/user/event/_search?pretty')
          }
        },

      loadMemberships = function(pubkey) {

        // Get user events on membership state
        var request = {
          "size": 1000,
          "query": {
            "bool": {
              "filter": [
                {"term": {"recipient" : pubkey }},
                {"terms": {"code" : ["MEMBER_JOIN","MEMBER_ACTIVE","MEMBER_LEAVE","MEMBER_EXCLUDE","MEMBER_REVOKE"] }}
              ]
            }
          },
          "sort" : [
            { "time" : {"order" : "asc"}}
          ],
          _source: ["code", "time"]
        };

        return raw.user.event(request)

          .then(function(res) {
            if (!res.hits || !res.hits.total) return;

            // Compute member periods
            var lastJoinTime;
            var result = res.hits.hits.reduce(function(res, hit){
              var isMember = hit._source.code == 'MEMBER_JOIN' || hit._source.code == 'MEMBER_ACTIVE';
              // If join
              if (isMember && !lastJoinTime) {
                lastJoinTime = hit._source.time;
              }
              // If leave
              else if (!isMember && lastJoinTime) {
                // Add an entry
                res = res.concat({
                  joinTime: lastJoinTime,
                  leaveTime: hit._source.time
                });
                lastJoinTime = 0; // reset
              }
              return res;
            }, []);

            if (lastJoinTime) {
              // Add last entry if need
              result.push({
                joinTime: lastJoinTime,
                leaveTime: moment().utc().unix()
              });
            }

            return result;
          });
      };

    return {
      memberships: loadMemberships
    };
  }]);

angular.module('cesium.es.tx.services', ['ngResource', 'cesium.services', 'cesium.es.http.services', 'cesium.es.wot.services'])

  .config(['PluginServiceProvider', 'csConfig', function(PluginServiceProvider, csConfig) {
    'ngInject';

    var enable = csConfig.plugins && csConfig.plugins.es;
    if (enable) {
      // Will force to load this service
      PluginServiceProvider.registerEagerLoadingService('esTx');
    }

  }])

  .factory('esTx', ['$q', '$rootScope', 'csCurrency', 'csTx', 'esHttp', 'esWot', function($q, $rootScope, csCurrency, csTx, esHttp, esWot) {
    'ngInject';

    var
      raw = {
        block: {
          search: esHttp.post('/:currency/block/_search')
        }
      };

    function _powBase(amount, base) {
      return base <= 0 ? amount : amount * Math.pow(10, base);
    }

    function onLoadUDs(options, deferred) {
      deferred = deferred || $q.defer();

      options = options || {};
      if (!options.pubkey) deferred.reject('Missing [pubkey] when calling [loadUDs] extension point');

      $q.all([
          // Get currency
          csCurrency.get(),

          // Get user memberships
          esWot.memberships(options.pubkey)
        ])
        .then(function(res) {
          var currency = res[0] && res[0].name;
          var memberships =  res[1];
          if (!currency || !memberships || !memberships.length) return;

          // Filter memberships using options.fromTime
          if (options.fromTime !== -1) {
            memberships = memberships.reduce(function(res, membership) {
              if (membership.leaveTime < options.fromTime) return res;
              membership.joinTime = Math.max(membership.joinTime, options.fromTime);
              return res.concat(membership);
            }, []);
          }

          return $q.all(memberships.reduce(function(res, membership) {
            var request = {
              query: {
                filtered: {
                  filter: {
                    bool: {
                      must: [
                        {
                          exists: {
                            field: 'dividend'
                          }
                        },
                        {
                          range: {
                            medianTime: {
                              from: membership.joinTime,
                              to: membership.leaveTime
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              size: options.size || 10000, // TODO: use scroll ?
              from: options.from || 0,
              sort: {"medianTime" : "desc"},
              _source: ["medianTime", "number", "dividend", "unitbase"]
            };
            return res.concat(raw.block.search(request, {currency: currency}));
          }, []));
        })
        .then(function(res){
          if (!res || !res.length) return;
          return res.reduce(function(uds, res){

            if (!res.hits.total || !res.hits.hits.length) return res;

            return uds.concat(res.hits.hits.reduce(function(res, hit){
              var block = hit._source;
              return res.concat({
                time: block.medianTime,
                amount: _powBase(block.dividend, block.unitbase),
                isUD: true,
                block_number: block.number
              });
            }, []));

          }, []);

        })
        .then(function(res){
          deferred.resolve(res);
        })
        .catch(function(err) {
          deferred.reject(err);
        });

      return deferred.promise;
    }

    // Register extensions
    csTx.api.data.on.loadUDs($rootScope, onLoadUDs, this);

    // Exports
    return {};
  }]);

angular.module('cesium.es.geo.services', ['cesium.services', 'cesium.es.http.services'])
  .config(['PluginServiceProvider', 'csConfig', function(PluginServiceProvider, csConfig) {
    'ngInject';

    var enable = csConfig.plugins && csConfig.plugins.es;
    if (enable) {
      // Will force to load this service
      PluginServiceProvider.registerEagerLoadingService('esGeo');
    }

  }])

  .factory('esGeo', ['$rootScope', '$q', 'csConfig', 'csSettings', 'csHttp', function($rootScope, $q, csConfig, csSettings, csHttp) {
    'ngInject';

    var
      that = this;

    that.raw = {
      osm: {
        search: csHttp.get('nominatim.openstreetmap.org', 443, '/search.php?format=json'),
        license: {
          name: 'OpenStreetMap',
          url: 'https://www.openstreetmap.org/copyright'
        }
      },
      google: {
        apiKey: undefined,
        search: csHttp.get('maps.google.com', 443, '/maps/api/geocode/json')
      },
      freegeoip: {
        search: csHttp.get('freegeoip.net', 443, '/json/:ip'),
        license: {
          name: 'freegeoip',
          url: 'https://freegeoip.net'
        }
      }
    };

    function _normalizeAddressString(text) {
      // Remove line break
      var searchText = text.trim().replace(/\n/g, ',');
      // Remove zip code
      searchText = searchText.replace(/(?:^|[\t\n\r\s ])([AâZ09-]+)(?:$|[\t\n\r\s ])/g, '');
      // Remove redundant comma
      searchText = searchText.replace(/,[ ,]+/g, ', ');
      return searchText;
    }

    function googleSearchPositionByString(address) {

      return that.raw.google.search({address: address, key: that.raw.google.apiKey})
        .then(function(res) {
          if (!res || !res.results || !res.results.length) return;
          return res.results.reduce(function(res, hit) {
            return res.concat({
              display_name: hit.address_components && hit.address_components.reduce(function(res, address){
                return address.long_name ? res.concat(address.long_name) : res;
              }, []).join(', '),
              lat: hit.geometry && hit.geometry.location && hit.geometry.location.lat,
              lon: hit.geometry && hit.geometry.location && hit.geometry.location.lng
            });
          }, []);
        });
    }

    function _fallbackSearchPositionByString(osmErr, address) {

      console.debug('[ES] [geo] Search position failed on [OSM]. Trying [google] service');

      return googleSearchPositionByString(address)
        .catch(function(googleErr) {
          console.debug('[ES] [geo] Search position failed on [google] service');
          throw osmErr || googleErr; // throw first OMS error if exists
        });
    }

    function searchPositionByAddress(query) {

      if (typeof query == 'string') {
        query = {q: query};
      }

      // Normalize query string
      if (query.q) {
        query.q = _normalizeAddressString(query.q);
      }

      query.addressdetails = 1; // need address field

      var now = new Date();
      //console.debug('[ES] [geo] Searching position...', query);

      return that.raw.osm.search(query)
        .then(function(res) {
          //console.debug('[ES] [geo] Received {0} results from OSM'.format(res && res.length || 0), res);
          if (!res) return; // no result

          // Filter on city/town/village
          res = res.reduce(function(res, hit){
            if (hit.class == 'waterway' || hit.class == 'railway' ||!hit.address) return res;
            hit.address.city =  hit.address.city || hit.address.village || hit.address.town || hit.address.postcode;
            hit.address.road =  hit.address.road || hit.address.suburb || hit.address.hamlet;
            if (hit.address.postcode && hit.address.city == hit.address.postcode) {
              delete hit.address.postcode;
            }
            if (!hit.address.city) return res;
            return res.concat({
              id: hit.place_id,
              name: hit.display_name,
              address: hit.address,
              lat: hit.lat,
              lon: hit.lon,
              class: hit.class,
              license: that.raw.osm.license
            });
          }, []);

          console.debug('[ES] [geo] Found {0} address position(s)'.format(res && res.length || 0, new Date().getTime() - now.getTime()), res);

          return res.length ? res : undefined;
        })

        // Fallback service
        .catch(function(err) {
          var address = query.q ? query.q : ((query.street ? query.street +', ' : '') + query.city +  (query.country ? ', '+ query.country : ''));
          return _fallbackSearchPositionByString(err, address);
        });
    }

    function getCurrentPosition() {
      var defer = $q.defer();
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function(position) {
          if (!position || !position.coords) {
            console.error('[ES] [geo] navigator geolocation > Unknown format:', position);
            return;
          }
          defer.resolve({
            lat: position.coords.latitude,
            lon: position.coords.longitude
          });
        }, function(error) {
          defer.reject(error);
        },{timeout:5000});
      }else{
        defer.reject();
      }
      return defer.promise;
    }

    function searchPositionByIP(ip) {

      //var now = new Date();
      //console.debug('[ES] [geo] Searching IP position [{0}]...'.format(ip));

      return that.raw.freegeoip.search({ip: ip})
        .then(function(res) {
          //console.debug('[ES] [geo] Found IP {0} position in {0}ms'.format(res ? 1 : 0, new Date().getTime() - now.getTime()));
          return res ? {
            lat: res.latitude,
            lng: res.longitude
          } : undefined;
        });
    }

    // Source: http://www.geodatasource.com/developers/javascript
    // Unit: 'M' is statute miles (default),  'Km' is kilometers, 'N' is nautical miles
    function getDistance(lat1, lon1, lat2, lon2, unit) {
      var radlat1 = Math.PI * lat1/180;
      var radlat2 = Math.PI * lat2/180;
      var theta = lon1-lon2;
      var radtheta = Math.PI * theta/180;
      var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);
      dist = Math.acos(dist);
      dist = dist * 180/Math.PI;
      dist = dist * 60 * 1.1515;
      // nautical miles
      if (unit == "km") { return dist * 1.609344; }
      // nautical miles
      if (unit == "N") return dist * 0.8684;
      // statute miles
      return dist;
    }

    that.raw.google.apiKey = csConfig.plugins && csConfig.plugins.es && csConfig.plugins.es.googleApiKey;
    var hasConfigApiKey = !!that.raw.google.apiKey;
    csSettings.ready()
      .then(function() {

        // Listen settings changed
        function onSettingsChanged(data){
          if (!hasConfigApiKey) {
            // If no google api key in config, use in settings
            that.raw.google.apiKey = data.plugins.es.googleApiKey;
          }
          that.raw.google.enable = that.raw.google.apiKey && data.plugins && data.plugins.es && data.plugins.es.enableGoogleApi;
        }
        csSettings.api.data.on.changed($rootScope, onSettingsChanged, this);

        onSettingsChanged(csSettings.data);
      });

    return {
      point: {
        current: getCurrentPosition,
        searchByAddress: searchPositionByAddress,
        distance: getDistance,
        ip: {
          search: searchPositionByIP,
          license: that.raw.freegeoip.license
        }
      },
      google: {
        isEnable: function() {
          return that.raw.google.enable && that.raw.google.apiKey;
        },
        searchByAddress: googleSearchPositionByString
      }
    };
  }]);

angular.module('cesium.es.document.services', ['ngResource', 'cesium.platform', 'cesium.es.http.services'])
  .config(['PluginServiceProvider', 'csConfig', function(PluginServiceProvider, csConfig) {
    'ngInject';

    var enable = csConfig.plugins && csConfig.plugins.es;
    if (enable) {
      // Will force to load this service
      PluginServiceProvider.registerEagerLoadingService('esDocument');
    }

  }])

  .factory('esDocument', ['$q', '$rootScope', '$timeout', 'UIUtils', 'Api', 'CryptoUtils', 'csPlatform', 'csConfig', 'csSettings', 'csWot', 'csWallet', 'esHttp', function($q, $rootScope, $timeout, UIUtils, Api, CryptoUtils,
                                 csPlatform, csConfig, csSettings, csWot, csWallet, esHttp) {
    'ngInject';

    var
      constants = {
        DEFAULT_LOAD_SIZE: 40
      },
      fields = {
        commons: ["issuer", "pubkey", "hash", "time", "recipient", "nonce", "read_signature"],
        peer: ["*"],
        movement: ["*"]
      },
      raw = {
        search: esHttp.post('/:index/:type/_search'),
        searchText: esHttp.get('/:index/:type/_search?q=:text')
      };

    function _readSearchHits(res, options) {
      options.issuerField = options.issuerField || 'pubkey';

      var hits = (res && res.hits && res.hits.hits || []).reduce(function(res, hit) {
        var doc = hit._source || {};
        doc.index = hit._index;
        doc.type = hit._type;
        doc.id = hit._id;
        doc.pubkey = doc.issuer || options.issuerField && doc[options.issuerField]; // need to call csWot.extendAll()
        doc.time = doc.time || options.getTimeFunction && options.getTimeFunction(doc);
        return res.concat(doc);
      }, []);


      var recipients = hits.reduce(function(res, doc) {
        if (doc.recipient) {
          doc.recipient = {
            pubkey: doc.recipient
          };
          return res.concat(doc.recipient);
        }
        return res;
      }, []);

      return csWot.extendAll(hits.concat(recipients))
        .then(function() {
          return  {
            hits: hits,
            took: res.took,
            total: res && res.hits && res.hits.total || 0
          };
        });
    }

    function search(options) {
      options = options || {};

      var sortParts, side;
      if (options.type == 'movement') {
        if (!options.sort) {
          options.sort = 'stats.medianTime:desc';
        }
        else {
          sortParts = options.sort.split(':');
          side = sortParts.length > 1 ? sortParts[1] : 'desc';

          options.sort = [
            {'stats.medianTime': {
              nested_path : 'stats',
              order: side
            }}
          ];
          options._source = fields.peer;
          options.getTimeFunction = function(doc) {
            doc.time = doc.stats && doc.stats.medianTime;
            return doc.time;
          };
        }
      }
      else if (options.type == 'movement') {
        if (!options.sort) {
          options.sort = 'medianTime:desc';
        }
        else {
          sortParts = options.sort.split(':');
          side = sortParts.length > 1 ? sortParts[1] : 'desc';

          options.sort = [
            {'medianTime': {
              order: side
            }}
          ];
          options._source = fields.movement;
          options.getTimeFunction = function(doc) {
            doc.time = doc.medianTime;
            return doc.time;
          };
        }
      }


      if (!options || !options.index || !options.type) throw new Error('Missing mandatory options [index, type]');
      var request = {
        from: options.from || 0,
        size: options.size || constants.DEFAULT_LOAD_SIZE,
        sort: options.sort || {time:'desc'},
        _source: options._source || fields.commons
      };
      if (options.query) {
        request.query = options.query;
      }

      return raw.search(request, {
          index: options.index,
          type: options.type
        })
        .then(function(res) {
          return _readSearchHits(res, options);
        });
    }

    function searchText(queryString, options) {

      options = options || {};

      var request = {
        text: queryString,
        index: options.index || 'user',
        type: options.type || 'event',
        from: options.from || 0,
        size: options.size || constants.DEFAULT_LOAD_SIZE,
        sort: options.sort || 'time:desc',
        _source: options._source || fields.commons.join(',')
      };

      console.debug('[ES] [wallet] [document] [{0}/{1}] Loading documents...'.format(
        options.index,
        options.type
      ));
      var now = new Date().getTime();

      return raw.searchText(request)
        .then(function(res) {
          return _readSearchHits(res, options);
        })
        .then(function(res) {
          console.debug('[ES] [document] [{0}/{1}] Loading {2} documents in {3}ms'.format(
            options.index,
            options.type,
            res && res.hits && res.hits.length || 0,
            new Date().getTime() - now
          ));
          return res;
        });
    }

    function remove(document) {
      if (!document || !document.index || !document.type || !document.id) return $q.reject('Could not remove document: missing mandatory fields');
      return esHttp.record.remove(document.index, document.type)(document.id);
    }

    function removeAll(documents) {
      if (!documents || !documents.length) return;

      return csWallet.auth()
        .then(function(walletData) {
          // Remove each doc
          return $q.all(documents.reduce(function (res, doc) {
            return res.concat(esHttp.record.remove(doc.index, doc.type)(doc.id, walletData));
          }, []));
        });
    }

    return {
      search: search,
      searchText: searchText,
      remove: remove,
      removeAll: removeAll,
      fields: {
        commons: fields.commons
      }
    };
  }])
;


ESPicturesEditController.$inject = ['$scope', 'UIUtils', '$q', 'Device'];
ESSocialsEditController.$inject = ['$scope', '$focus', '$filter', 'UIUtils', 'SocialUtils'];
ESSocialsViewController.$inject = ['$scope'];
ESCommentsController.$inject = ['$scope', '$filter', '$state', '$focus', 'UIUtils'];
ESCategoryModalController.$inject = ['$scope', 'UIUtils', '$timeout', 'parameters'];
ESAvatarModalController.$inject = ['$scope'];
ESPositionEditController.$inject = ['$scope', 'csConfig', 'esGeo', 'ModalUtils'];
ESLookupPositionController.$inject = ['$scope', '$q', 'csConfig', 'esGeo', 'ModalUtils'];
ESSearchPositionItemController.$inject = ['$scope', '$q', '$timeout', 'ModalUtils', 'csConfig', 'esGeo'];
ESSearchPositionModalController.$inject = ['$scope', '$q', '$translate', 'esGeo', 'parameters'];angular.module('cesium.es.common.controllers', ['ngResource', 'cesium.es.services'])

  .controller('ESPicturesEditCtrl', ESPicturesEditController)

  .controller('ESPicturesEditCtrl', ESPicturesEditController)

  .controller('ESSocialsEditCtrl', ESSocialsEditController)

  .controller('ESSocialsViewCtrl', ESSocialsViewController)

  .controller('ESCommentsCtrl', ESCommentsController)

  .controller('ESCategoryModalCtrl', ESCategoryModalController)

  .controller('ESAvatarModalCtrl', ESAvatarModalController)

  .controller('ESPositionEditCtrl', ESPositionEditController)

  .controller('ESLookupPositionCtrl', ESLookupPositionController)

  .controller('ESSearchPositionItemCtrl', ESSearchPositionItemController)

  .controller('ESSearchPositionModalCtrl', ESSearchPositionModalController)
;


function ESPicturesEditController($scope, UIUtils, $q, Device) {
  'ngInject';

  $scope.selectNewPicture = function(inputSelector) {
    if (Device.enable){
      $scope.openPicturePopup();
    }
    else {
      var fileInput = angular.element(document.querySelector(inputSelector||'#pictureFile'));
      if (fileInput && fileInput.length > 0) {
        fileInput[0].click();
      }
    }
  };

  $scope.openPicturePopup = function() {
    Device.camera.getPicture()
      .then(function(imageData) {
        $scope.pictures.push({
          src: "data:image/png;base64," + imageData,
          isnew: true // use to prevent visibility hidden (if animation)
        });
      })
      .catch(UIUtils.onError('ERROR.TAKE_PICTURE_FAILED'));
  };

  $scope.fileChanged = function(event) {
    UIUtils.loading.show();
    return $q(function(resolve, reject) {
      var file = event.target.files[0];
      UIUtils.image.resizeFile(file)
        .then(function(imageData) {
          $scope.pictures.push({
            src: imageData,
            isnew: true // use to prevent visibility hidden (if animation)
          });
          UIUtils.loading.hide(100);
          resolve();
        });
    });
  };

  $scope.removePicture = function(index){
    $scope.pictures.splice(index, 1);
  };

  $scope.favoritePicture = function(index){
    if (index > 0) {
      var item = $scope.pictures[index];
      $scope.pictures.splice(index, 1);
      $scope.pictures.splice(0, 0, item);
    }
  };

  $scope.rotatePicture = function(index){
    var item = $scope.pictures[index];
    UIUtils.image.rotateSrc(item.src)
      .then(function(dataURL){
        item.src = dataURL;
      });
  };
}


function ESCategoryModalController($scope, UIUtils, $timeout, parameters) {
  'ngInject';

  $scope.loading = true;
  $scope.allCategories = [];
  $scope.categories = [];
  this.searchText = '';

  // modal title
  this.title = parameters && parameters.title;

  $scope.afterLoad = function(result) {
    $scope.categories = result;
    $scope.allCategories = result;
    $scope.loading = false;
    $timeout(function() {
      UIUtils.ink();
    }, 10);
  };

  this.doSearch = function() {
    var searchText = this.searchText.toLowerCase().trim();
    if (searchText.length > 1) {
      $scope.loading = true;
      $scope.categories = $scope.allCategories.reduce(function(result, cat) {
        if (cat.parent && cat.name.toLowerCase().search(searchText) != -1) {
          return result.concat(cat);
        }
        return result;
      }, []);

      $scope.loading = false;
    }
    else {
      $scope.categories = $scope.allCategories;
    }
  };

  // load categories
  if (parameters && parameters.categories) {
    $scope.afterLoad(parameters.categories);
  }
  else if (parameters && parameters.load) {
    parameters.load()
      .then(function(res){
        $scope.afterLoad(res);
      });
  }

}



function ESCommentsController($scope, $filter, $state, $focus, UIUtils) {
  'ngInject';

  $scope.loading = true;
  $scope.defaultCommentSize = 5;
  $scope.formData = {};
  $scope.comments = {};

  $scope.$on('$recordView.enter', function(e, state) {
    // second call (when using cached view)
    if (!$scope.loading && $scope.id) {
      $scope.load($scope.id, {animate: false});
    }
  });

  $scope.$on('$recordView.load', function(event, id, service) {
    $scope.id = id || $scope.id;
    $scope.service = service || $scope.service;
    console.debug("[ES] [comment] Initialized service with: " + service.id);
    if ($scope.id) {
      $scope.load($scope.id);
    }
  });

  $scope.load = function(id, options) {
    options = options || {};
    options.from = options.from || 0;
    options.size = options.size || $scope.defaultCommentSize;
    options.animate = angular.isDefined(options.animate) ? options.animate : true;
    options.loadAvatarAllParent = angular.isDefined(options.loadAvatarAllParent) ? options.loadAvatarAllParent : true;
    $scope.loading = true;
    return $scope.service.load(id, options)
      .then(function(data) {
        if (!options.animate && data.result.length) {
          _.forEach(data.result, function(cmt) {
            cmt.isnew = true;
          });
        }
        $scope.comments = data;
        $scope.comments.hasMore = (data.total > data.result.length);
        $scope.loading = false;
        $scope.service.changes.start(id, data, $scope);

        // Set Motion
        $scope.motion.show({
          selector: '.comments .item',
          ink: false
        });
      });
  };

  $scope.$on('$recordView.beforeLeave', function(){
    if ($scope.comments) {
      if (!$scope.service) {
        console.error('[comment] Comment controller has no service ! Unable to listen changes...');
        return;
      }
      $scope.service.changes.stop($scope.comments);
    }
  });

  $scope.showMore = function(){
    var from = 0;
    var size = -1;
    $scope.load($scope.id, {from: from, size: size, loadAvatarAllParent: false})
      .then(function() {
        // Set Motion
        $scope.motion.show({
          selector: '.card-avatar'
        });
      });
  };

  $scope.onKeypress = function(event) {
    // If Ctrl + Enter: submit
    if (event && event.charCode == 10 && event.ctrlKey) {
      $scope.save();
      event.preventDefault();
    }
  };

  $scope.save = function() {
    if (!$scope.formData.message || !$scope.formData.message.length) return;

    $scope.loadWallet({minData: true, auth: true})
      .then(function() {
        UIUtils.loading.hide();
        var comment = $scope.formData;
        $scope.formData = {};
        $scope.focusNewComment();
        return $scope.service.save($scope.id, $scope.comments, comment);
      })
      .then(function() {
        $scope.comments.total++;
      })
      .catch(UIUtils.onError('COMMENTS.ERROR.FAILED_SAVE_COMMENT'));
  };

  $scope.share = function(event, comment) {
    var params = angular.copy($state.params);
    var stateUrl;
    if (params.anchor) {
      params.anchor= $filter('formatHash')(comment.id);
      stateUrl = $state.href($state.current.name, params, {absolute: true});
    }
    else {
      stateUrl = $state.href($state.current.name, params, {absolute: true}) + '/' + $filter('formatHash')(comment.id);
    }
    var index = _.findIndex($scope.comments.result, {id: comment.id});
    var url = stateUrl + '?u=' + (comment.uid||$filter('formatPubkey')(comment.issuer));
    UIUtils.popover.show(event, {
      templateUrl: 'templates/common/popover_share.html',
      scope: $scope,
      bindings: {
        titleKey: 'COMMENTS.POPOVER_SHARE_TITLE',
        titleValues: {number: index ? index + 1 : 1},
        date: comment.creationTime,
        value: url,
        postUrl: stateUrl,
        postMessage: comment.message
      },
      autoselect: '.popover-share input'
    });
  };

  $scope.edit = function(comment) {
    var newComment = new Comment();
    newComment.copy(comment);
    $scope.formData = newComment;
  };

  $scope.remove = function(comment) {
    if (!comment) {return;}
    comment.remove();
    $scope.comments.total--;
  };

  $scope.reply = function(parent) {
    if (!parent || !parent.id) {return;}

    $scope.formData = {
      parent: parent
    };

    $scope.focusNewComment(true);
  };

  $scope.cancel = function() {
    $scope.formData = {};
    $scope.focusNewComment();
  };

  $scope.focusNewComment = function(forceIfSmall) {
    if (!UIUtils.screen.isSmall()) {
      $focus('comment-form-textarea');
    }
    else {
      if (forceIfSmall) $focus('comment-form-input');
    }
  };

  $scope.removeParentLink = function() {
    delete $scope.formData.parent;
    delete $scope.formData.reply_to;
    $scope.focusNewComment();
  };

  $scope.toggleExpandedReplies = function(comment, index) {
    comment.expandedReplies = comment.expandedReplies || {};
    comment.expandedReplies[index] = !comment.expandedReplies[index];
  };

  $scope.toggleExpandedParent = function(comment, index) {
    comment.expandedParent = comment.expandedParent || {};
    comment.expandedParent[index] = !comment.expandedParent[index];
  };
}

function ESSocialsEditController($scope, $focus, $filter, UIUtils, SocialUtils)  {
  'ngInject';

  $scope.socialData = {
    url: null,
    reorder: false
  };

  $scope.addSocialNetwork = function() {
    if (!$scope.socialData.url || $scope.socialData.url.trim().length === 0) {
      return;
    }

    $scope.formData.socials = $scope.formData.socials || [];
    var url = $scope.socialData.url.trim();

    var exists = _.findWhere($scope.formData.socials, {url: url});
    if (exists) { // duplicate entry
      $scope.socialData.url = '';
      return;
    }

    var social = SocialUtils.get(url);
    if (!social) {
      UIUtils.alert.error('PROFILE.ERROR.INVALID_SOCIAL_NETWORK_FORMAT');
      $focus('socialUrl');
      return; // stop here
    }
    $scope.formData.socials.push(social);
    $scope.socialData.url = '';

    // Set Motion
    $scope.motion.show({
      selector: '#social-' + $filter('formatSlug')(social.url),
      startVelocity: 10000
    });


  };

  $scope.editSocialNetwork = function(index) {
    var social = $scope.formData.socials[index];
    $scope.formData.socials.splice(index, 1);
    $scope.socialData.url = social.url;
    $focus('socialUrl');
  };


  $scope.reorderSocialNetwork = function(social, fromIndex, toIndex) {
    if (!social || fromIndex == toIndex) return; // no changes
    $scope.formData.socials.splice(fromIndex, 1);
    $scope.formData.socials.splice(toIndex, 0, social);
  };

  $scope.filterFn = function(social) {
    return !social.recipient || social.valid;
  };
}

function ESSocialsViewController($scope)  {
  'ngInject';

  $scope.openSocial = function($event, social) {
    $event.stopPropagation();
    return $scope.openLink($event, social.url, {
      type: social.type
    });
  };


  $scope.filterFn = function(social) {
    return !social.recipient || social.valid;
  };

}



function ESAvatarModalController($scope) {

  $scope.formData = {
    initCrop: false,
    imageCropStep: 0,
    imgSrc: undefined,
    result: undefined,
    resultBlob: undefined
  };

  $scope.openFileSelector = function() {
    var fileInput = angular.element(document.querySelector('.modal-avatar #fileInput'));
    if (fileInput && fileInput.length > 0) {
      fileInput[0].click();
    }
  };

  $scope.fileChanged = function(e) {

    var files = e.target.files;
    var fileReader = new FileReader();
    fileReader.readAsDataURL(files[0]);

    fileReader.onload = function(e) {
      var res = this.result;
      $scope.$applyAsync(function() {
        $scope.formData.imgSrc = res;
      });
    };
  };

  $scope.doNext = function() {
    if ($scope.formData.imageCropStep == 2) {
      $scope.doCrop();
    }
    else if ($scope.formData.imageCropStep == 3) {
      $scope.closeModal($scope.formData.result);
    }
  };

  $scope.doCrop = function() {
    $scope.formData.initCrop = true;
  };

  $scope.clear = function() {
    $scope.formData = {
      initCrop: false,
      imageCropStep: 1,
      imgSrc: undefined,
      result: undefined,
      resultBlob: undefined
    };
  };

}


function ESPositionEditController($scope, csConfig, esGeo, ModalUtils) {
  'ngInject';

  // The default country used for address localisation
  var defaultCountry = csConfig.plugins && csConfig.plugins.es && csConfig.plugins.es.defaultCountry;

  var loadingCurrentPosition = false;
  $scope.formPosition = {
    loading: false,
    enable: undefined
  };

  $scope.tryToLocalize = function() {
    if ($scope.formPosition.loading || loadingCurrentPosition) return;

    var searchText = $scope.getAddressToSearch();

    // No address, so try to localize by device
    if (!searchText) {
      loadingCurrentPosition = true;
      return esGeo.point.current()
        .then($scope.updateGeoPoint)
        .then(function() {
          loadingCurrentPosition = false;
        })
        .catch(function(err) {
          console.error(err); // Silent
          loadingCurrentPosition = false;
          //$scope.form.geoPoint.$setValidity('required', false);
        });
    }

    $scope.formPosition.loading = true;
    return esGeo.point.searchByAddress(searchText)
      .then(function(res) {
        if (res && res.length == 1) {
          return $scope.updateGeoPoint(res[0]);
        }
        return $scope.openSearchLocationModal({
          text: searchText,
          results: res||[],
          forceFallback: !res || !res.length // force fallback search first
        });
      })
      .then(function() {
        $scope.formPosition.loading = false;
      })
      .catch(function(err) {
        console.error(err); // Silent
        $scope.formPosition.loading = false;
      });
  };

  $scope.onCityChanged = function() {
    if ($scope.loading) return;
    if ($scope.form) {
      $scope.form.$valid = undefined;
    }
    if ($scope.formPosition.enable) {
      return $scope.tryToLocalize();
    }
  };

  $scope.onUseGeopointChanged = function() {
    if ($scope.loading) return;
    if (!$scope.formPosition.enable) {
      if ($scope.formData.geoPoint) {
        $scope.formData.geoPoint = null;
        //$scope.form.geoPoint.$setValidity('required', true);
        $scope.dirty = true;
      }
    }
    else {
      $scope.tryToLocalize();
    }
  };

  $scope.onGeopointChanged = function() {
    if ($scope.loading) {
      $scope.formPosition.enable = $scope.formData.geoPoint && !!$scope.formData.geoPoint.lat && !!$scope.formData.geoPoint.lon;
    }
  };
  $scope.$watch('formData.geoPoint', $scope.onGeopointChanged);

  $scope.getAddressToSearch = function() {
    return $scope.formData.address && $scope.formData.city ?
      [$scope.formData.address.trim(), $scope.formData.city.trim()].join(', ') :
    $scope.formData.city || $scope.formData.address || $scope.formData.location ;
  };

  $scope.updateGeoPoint = function(res) {
    // user cancel
    if (!res || !res.lat || !res.lon) {
      // nothing to do
      return;
    }

    $scope.dirty = true;
    $scope.formData.geoPoint = $scope.formData.geoPoint || {};
    $scope.formData.geoPoint.lat =  parseFloat(res.lat);
    $scope.formData.geoPoint.lon =  parseFloat(res.lon);

    if (res.address && res.address.city) {
      var cityParts = [res.address.city];
      if (res.address.postcode) {
        cityParts.push(res.address.postcode);
      }
      if (res.address.country != defaultCountry) {
        cityParts.push(res.address.country);
      }
      $scope.formData.city = cityParts.join(', ');
    }
  };

  /* -- modal -- */

  $scope.openSearchLocationModal = function(options) {

    options = options || {};

    var parameters = {
      text: options.text || $scope.getAddressToSearch(),
      results: options.results,
      fallbackText: options.fallbackText || $scope.formData.city,
      forceFallback: angular.isDefined(options.forceFallback) ? options.forceFallback : undefined
    };

    return ModalUtils.show(
      'plugins/es/templates/common/modal_location.html',
      'ESSearchPositionModalCtrl',
      parameters,
      {
        focusFirstInput: true
        //,scope: $scope
      }
    )
      .then($scope.updateGeoPoint);
  };
}


function ESLookupPositionController($scope, $q, csConfig, esGeo, ModalUtils) {
  'ngInject';

  // The default country used for address localisation
  var defaultCountry = csConfig.plugins && csConfig.plugins.es && csConfig.plugins.es.defaultCountry;
  var loadingPosition = false;

  $scope.geoDistanceLabels = [5,10,20,50,100,250,500].reduce(function(res, distance){
    res[distance] = {
      labelKey: 'LOCATION.DISTANCE_OPTION',
      labelParams: {value: distance}
    };
    return res;
  }, {});
  $scope.geoDistances = _.keys($scope.geoDistanceLabels);

  $scope.searchPosition = function(searchText) {
    if (loadingPosition) return $q.when();

    loadingPosition = true;

    // No address, so try to localize by device
    var promise = !searchText ?
      esGeo.point.current() :
      esGeo.point.searchByAddress(searchText)
      .then(function(res) {
        if (res && res.length == 1) {
          res[0].exact = true;
          return res[0];
        }
        return $scope.openSearchLocationModal({
          text: searchText,
          results: res||[],
          forceFallback: !res || !res.length // force fallback search first
        })
          .then(function(res) {
            // Compute point name
            if (res && res.address && res.address.city) {
              var cityParts = [res.address.city];
              if (res.address.postcode) {
                cityParts.push(res.address.postcode);
              }
              if (res.address.country != defaultCountry) {
                cityParts.push(res.address.country);
              }
              res.shortName = cityParts.join(', ');
            }
            return res;
          });
      });

    promise
      .then(function(res) {

        loadingPosition = false;

        // user cancel
        if (!res || !res.lat || !res.lon) return;

        return {
          lat: parseFloat(res.lat),
          lon: parseFloat(res.lon),
          name: res.shortName,
          exact: res.exact
        };

      })
      .catch(function(err) {
        console.error(err); // Silent
        loadingPosition = false;
      });

    return promise;
  };


  /* -- modal -- */

  $scope.openSearchLocationModal = function(options) {

    options = options || {};

    var parameters = {
      text: options.text || $scope.getAddressToSearch(),
      results: options.results,
      fallbackText: options.fallbackText || $scope.search.location,
      forceFallback: angular.isDefined(options.forceFallback) ? options.forceFallback : undefined
    };

    return ModalUtils.show(
      'plugins/es/templates/common/modal_location.html',
      'ESSearchPositionModalCtrl',
      parameters,
      {
        focusFirstInput: true
        //,scope: $scope
      }
    );
  };
}

function ESSearchPositionItemController($scope, $q, $timeout, ModalUtils, csConfig, esGeo) {
  'ngInject';

  // The default country used for address localisation
  var defaultCountry = csConfig.plugins && csConfig.plugins.es && csConfig.plugins.es.defaultCountry;
  //$scope.smallscreen = angular.isDefined($scope.smallscreen) ? $scope.smallscreen : UIUtils.screen.isSmall();

  var loadingPosition = false;
  var minLength = 3;
  $scope.locations = undefined;
  $scope.selectLocationIndex = -1;

  $scope.onKeydown = function(e) {

    switch(e.keyCode)
    {
      case 27://Esc
        $scope.hideDropdown();
        break;
      case 13://Enter
        if($scope.locations && $scope.locations.length)
          $scope.onEnter();
        break;
      case 38://Up
        $scope.onArrowUpOrDown(-1);
        e.preventDefault();
        break;
      case 40://Down
        $scope.onArrowUpOrDown(1);
        e.preventDefault();
        break;
      case  8://Backspace
      case 45://Insert
      case 46://Delete
        break;
      case 37://Left
      case 39://Right
      case 16://Shift
      case 17://Ctrl
      case 35://End
      case 36://Home
        break;
      default://All keys
        $scope.showDropdown();
    }
  };

  $scope.onEnter = function() {
    if ($scope.selectLocationIndex > -1) {
      $scope.selectLocation($scope.locations[$scope.selectLocationIndex]);
    }
    else {
      $scope.selectLocation($scope.locations[0]);
    }
  };

  $scope.onArrowUpOrDown = function(velocity) {
    if (!$scope.locations) return;

    $scope.selectLocationIndex+=velocity;
    if ($scope.selectLocationIndex >= $scope.locations.length) {
      $scope.selectLocationIndex = 0;
    }
    if ($scope.selectLocationIndex < 0) {
      $scope.selectLocationIndex = $scope.locations.length-1;
    }

    _.forEach($scope.locations||[], function(item, index) {
      item.selected = (index == $scope.selectLocationIndex);
    });

    // TODO: scroll to item ?
  };

  $scope.onLocationChanged = function() {
    if (loadingPosition || $scope.search.loading) return;
    $scope.search.geoPoint = undefined; // reset geo point

    $scope.showDropdown();
  };

  $scope.showDropdown = function() {
    var text = $scope.search.location && $scope.search.location.trim();
    if (!text || text.length < minLength) {
      $scope.locations = undefined;
      return $q.when(); // nothing to search
    }

    loadingPosition = true;

    // Execute the given query
    return esGeo.point.searchByAddress(text)
      .then(function(res) {
        loadingPosition = false;
        $scope.locations = res||[];
        $scope.license = res && res.length && res[0].license;
      })
      .catch(function(err) {
        $scope.hideDropdown();
        throw err;
      });
  };

  $scope.hideDropdown = function(force) {
    if (force) {
      $scope.locations = undefined;
      $scope.selectLocationIndex = -1;
      $scope.license = undefined;
      loadingPosition = false;
      return;
    }

    return $timeout(function() {
      if (loadingPosition) return;
      $scope.locations = undefined;
      $scope.license = undefined;
      loadingPosition = false;
    }, 500);
  };

  $scope.selectLocation = function(res, exactMatch) {
    loadingPosition = true; // avoid event
    if (res) {
      // Update position
      $scope.search.geoPoint = $scope.search.geoPoint || {};
      $scope.search.geoPoint.lat =  parseFloat(res.lat);
      $scope.search.geoPoint.lon =  parseFloat(res.lon);

      if (exactMatch) {
        $scope.search.geoPoint.exact = true;
      }
      else {
        // Update location name
        if (res && res.address && res.address.city) {
          var cityParts = [res.address.city];
          if (res.address.postcode) {
            cityParts.push(res.address.postcode);
          }
          if (res.address.country != defaultCountry) {
            cityParts.push(res.address.country);
          }
          $scope.search.location = cityParts.join(', ');
        }
      }
    }

    $scope.hideDropdown(true);
  };

  /* -- modal -- */

  $scope.openSearchLocationModal = function(options) {

    options = options || {
      text: $scope.search.location
    };

    var parameters = {
      text: options.text || $scope.search.location
    };

    return ModalUtils.show(
        'plugins/es/templates/common/modal_location.html',
        'ESSearchPositionModalCtrl',
        parameters,
        {
          focusFirstInput: true
        }
      )
      .then($scope.selectLocation);
  };

}

function ESSearchPositionModalController($scope, $q, $translate, esGeo, parameters) {
  'ngInject';

  $scope.search = {
    text: parameters.text || '',
    fallbackText: parameters.fallbackText || undefined,
    forceFallback: angular.isDefined(parameters.forceFallback) ? parameters.forceFallback : false,
    loading: false,
    results: parameters.results || undefined
  };

  $scope.$on('modal.shown', function() {
    // Load search
    $scope.doSearch(true/*first search*/);
  });

  $scope.doSearch = function(firstSearch) {

    var text = $scope.search.text && $scope.search.text.trim();
    if (!text) {
      return $q.when(); // nothing to search
    }

    $scope.search.loading = true;

    // Compute alternative query text
    var fallbackText = firstSearch && $scope.search.fallbackText && $scope.search.fallbackText.trim();
    fallbackText = fallbackText && fallbackText != text ? fallbackText : undefined;

    // Execute the given query
    return ((firstSearch && $scope.search.forceFallback && $scope.search.results) ?
        $q.when($scope.search.results) :
        esGeo.point.searchByAddress(text)
      )
      .then(function(res) {
        if (res && res.length || !fallbackText) return res;

        // Fallback search
        return $q.all([
          $translate('LOCATION.MODAL.ALTERNATIVE_RESULT_DIVIDER', {address: fallbackText}),
          esGeo.point.searchByAddress(fallbackText)
        ])
          .then(function (res) {
            var dividerText = res[0];
            res = res[1];
            if (!res || !res.length) return res;

            return [{name: dividerText}].concat(res);
          });
      })
      .then(function(res) {
        $scope.search.loading = false;
        $scope.search.results = res||[];

        $scope.license = res && res.length && res[0].license;
      })
      .catch(function(err) {
        $scope.search.loading = false;
        $scope.search.results = [];
        $scope.license = undefined;
        throw err;
      })
      ;
  };

}


ESExtensionController.$inject = ['$scope', 'esSettings', 'PluginService'];
ESMenuExtendController.$inject = ['$scope', '$state', '$controller', 'UIUtils', 'csWallet'];
ESProfilePopoverExtendController.$inject = ['$scope', '$q', '$state', 'esSettings', 'csWallet'];angular.module('cesium.es.app.controllers', ['ngResource', 'cesium.es.services'])

  // Configure menu items
  .config(['PluginServiceProvider', 'csConfig', function(PluginServiceProvider, csConfig) {
    'ngInject';

    var enable = csConfig.plugins && csConfig.plugins.es;
    if (enable) {
      // Menu extension points
      PluginServiceProvider.extendState('app', {
         points: {
           // removeIf(device)
           'nav-buttons-right': {
             templateUrl: "plugins/es/templates/menu_extend.html",
             controller: "ESMenuExtendCtrl"
           },
           // endRemoveIf(device)
           'menu-user': {
             templateUrl: "plugins/es/templates/menu_extend.html",
             controller: "ESMenuExtendCtrl"
           }
         }
        });

      // Profile popover extension points
      PluginServiceProvider.extendState('app', {
        points: {
          'profile-popover-user': {
            templateUrl: "plugins/es/templates/common/popover_profile_extend.html",
            controller: "ESProfilePopoverExtendCtrl"
          }
        }
      });
    }
  }])

 .controller('ESExtensionCtrl', ESExtensionController)

 .controller('ESMenuExtendCtrl', ESMenuExtendController)

 .controller('ESProfilePopoverExtendCtrl', ESProfilePopoverExtendController)


;


/**
 * Generic controller, that enable/disable depending on esSettings enable/disable
 */
function ESExtensionController($scope, esSettings, PluginService) {
  'ngInject';
  $scope.extensionPoint = PluginService.extensions.points.current.get();
  $scope.enable = esSettings.isEnable();
  esSettings.api.state.on.changed($scope, function(enable) {
    $scope.enable = enable;
    $scope.$broadcast('$$rebind::state');
  });
}

/**
 * Control menu extension
 */
function ESMenuExtendController($scope, $state, $controller, UIUtils, csWallet) {
  'ngInject';

  // Initialize the super class and extend it.
  angular.extend(this, $controller('ESExtensionCtrl', {$scope: $scope}));

  $scope.showRegistryLookupView = function() {
    $state.go(UIUtils.screen.isSmall() ? 'app.registry_lookup': 'app.registry_lookup_lg');
  };

  $scope.showNotificationsPopover = function(event) {
    return UIUtils.popover.show(event, {
        templateUrl :'plugins/es/templates/notification/popover_notification.html',
        scope: $scope,
        autoremove: false // reuse popover
      });
  };

  $scope.showMessagesPopover = function(event) {
    // Make sure tobe auth before opening this popover
    if (!csWallet.isAuth()) {
      return csWallet.auth({minData: true}).then(function(){
        UIUtils.loading.hide();
        return $scope.showMessagesPopover(event); // loop
      });
    }

    return UIUtils.popover.show(event, {
      templateUrl :'plugins/es/templates/message/popover_message.html',
      scope: $scope,
      autoremove: false // reuse popover
    });
  };

  $scope.showInvitationsPopover = function(event) {
    // Make sure tobe auth before opening this popover
    if (!csWallet.isAuth()) {
      return csWallet.auth().then(function(){
        UIUtils.loading.hide();
        return $scope.showInvitationsPopover(event); // loop
      });
    }

    return UIUtils.popover.show(event, {
      templateUrl :'plugins/es/templates/invitation/popover_invitation.html',
      scope: $scope,
      autoremove: false, // reuse popover
      // Auto-close if open when un-authenticate
      afterShow: function(popover) {
        csWallet.api.data.on.unauth(popover.scope, function() {
          popover.scope.closePopover();
        });
      }
    });
  };
}

/**
 * Control profile popover extension
 */
function ESProfilePopoverExtendController($scope, $q, $state, esSettings, csWallet) {
  'ngInject';

  $scope.updateView = function() {
    $scope.enable = csWallet.isLogin() && esSettings.isEnable();
  };

  $scope.showEditUserProfile = function() {
    $scope.closeProfilePopover();
    $state.go('app.edit_profile');
  };

  esSettings.api.state.on.changed($scope, $scope.updateView);
  csWallet.api.data.on.login($scope, function(data, deferred){
    $scope.enable = esSettings.isEnable();
    return deferred && deferred.resolve() || $q.when();
  });
  csWallet.api.data.on.logout($scope, function() {
    $scope.enable = false;
  });

  // Default action
  $scope.updateView();

}


ESExtendSettingsController.$inject = ['$scope', 'PluginService'];
ESPluginSettingsController.$inject = ['$scope', '$q', '$translate', '$ionicPopup', 'UIUtils', 'Modals', 'csHttp', 'csSettings', 'esHttp', 'esSettings'];angular.module('cesium.es.settings.controllers', ['cesium.es.services'])

  // Configure menu items
  .config(['PluginServiceProvider', '$stateProvider', 'csConfig', function(PluginServiceProvider, $stateProvider, csConfig) {
    'ngInject';

    var enable = csConfig.plugins && csConfig.plugins.es;
    if (enable) {
      // Extend settings via extension points
      PluginServiceProvider.extendState('app.settings', {
        points: {
          'plugins': {
            templateUrl: "plugins/es/templates/settings/settings_extend.html",
            controller: "ESExtensionCtrl"
          }
        }
      });

      $stateProvider
      .state('app.es_settings', {
        url: "/settings/es",
        views: {
          'menuContent': {
            templateUrl: "plugins/es/templates/settings/plugin_settings.html",
            controller: 'ESPluginSettingsCtrl'
          }
        }
      });
    }
  }])

 .controller('ESExtendSettingsCtrl', ESExtendSettingsController)

 .controller('ESPluginSettingsCtrl', ESPluginSettingsController)

;

/*
 * Settings extend controller
 */
function ESExtendSettingsController ($scope, PluginService) {
  'ngInject';

  $scope.extensionPoint = PluginService.extensions.points.current.get();

}

/*
 * Settings extend controller
 */
function ESPluginSettingsController ($scope, $q,  $translate, $ionicPopup, UIUtils, Modals, csHttp, csSettings, esHttp, esSettings) {
  'ngInject';

  $scope.formData = {};
  $scope.popupData = {}; // need for the node popup
  $scope.loading = true;

  $scope.enter= function(e, state) {
    $scope.load();
  };
  $scope.$on('$ionicView.enter', $scope.enter);

  $scope.load = function(keepEnableState) {
    $scope.loading = true;

    var wasEnable = $scope.formData.enable;
    $scope.formData = csSettings.data.plugins && csSettings.data.plugins.es ?
      angular.copy(csSettings.data.plugins.es) : {
      enable: false,
      host: undefined,
      port: undefined
    };
    if (keepEnableState && wasEnable) {
      $scope.formData.enable = wasEnable;
    }

    $scope.isFallbackNode = $scope.formData.enable && esHttp.node.isFallback();
    $scope.server = $scope.getServer(esHttp);

    $scope.loading = false;
  };

  esSettings.api.state.on.changed($scope, function(enable) {
    $scope.load(true);
  });

  $scope.setPopupForm = function(popupForm) {
    $scope.popupForm = popupForm;
  };

  // Change ESnode
  $scope.changeEsNode= function(node) {
    node = node || {
        host: $scope.formData.host,
        port: $scope.formData.port && $scope.formData.port != 80 && $scope.formData.port != 443 ? $scope.formData.port : undefined,
        wsPort: $scope.formData.wsPort && $scope.formData.wsPort != $scope.formData.port ? $scope.formData.wsPort : undefined,
        useSsl: angular.isDefined($scope.formData.useSsl) ?
          $scope.formData.useSsl :
          ($scope.formData.port == 443)
      };

    $scope.showNodePopup(node)
    .then(function(newNode) {
      if (newNode.host == $scope.formData.host &&
        newNode.port == $scope.formData.port &&
        newNode.wsPort == $scope.formData.wsPort &&
        newNode.useSsl == $scope.formData.useSsl) {
        UIUtils.loading.hide();
        return; // same node = nothing to do
      }
      UIUtils.loading.show();

      var newEsNode = esHttp.instance(newNode.host, newNode.port, newNode.wsPort, newNode.useSsl);
      return newEsNode.isAlive() // ping the node
        .then(function(alive) {
          if (!alive) {
            UIUtils.loading.hide();
            return UIUtils.alert.error('ERROR.INVALID_NODE_SUMMARY')
              .then(function(){
                $scope.changeEsNode(newNode); // loop
              });
          }

          $scope.formData.host = newEsNode.host;
          $scope.formData.port = newEsNode.port;
          $scope.formData.wsPort = newEsNode.wsPort;
          $scope.formData.useSsl = newEsNode.useSsl;

          return esHttp.copy(newEsNode);
        })
        .then(function() {
          $scope.server = $scope.getServer(esHttp);
          $scope.isFallbackNode = false;
          UIUtils.loading.hide();
        });
    });
  };

  // Show node popup
  $scope.showNodePopup = function(node) {
    return $q(function(resolve, reject) {
      var parts = [node.host];
      if (node.wsPort && node.wsPort != (node.port||80)) {
        parts.push(node.port||80);
        parts.push(node.wsPort);
      }
      else if (node.port && node.port != 80) {
        parts.push(node.port);
      }
      $scope.popupData.newNode = parts.join(':');
      $scope.popupData.useSsl = angular.isDefined(node.useSsl) ? node.useSsl : (node.port == 443);
      if (!!$scope.popupForm) {
        $scope.popupForm.$setPristine();
      }
      $translate(['ES_SETTINGS.POPUP_PEER.TITLE', 'ES_SETTINGS.POPUP_PEER.HELP', 'COMMON.BTN_OK', 'COMMON.BTN_CANCEL'])
        .then(function (translations) {
          // Choose UID popup
          $ionicPopup.show({
            templateUrl: 'templates/settings/popup_node.html',
            title: translations['ES_SETTINGS.POPUP_PEER.TITLE'],
            subTitle: translations['ES_SETTINGS.POPUP_PEER.HELP'],
            scope: $scope,
            buttons: [
              { text: translations['COMMON.BTN_CANCEL'] },
              {
                text: translations['COMMON.BTN_OK'],
                type: 'button-positive',
                onTap: function(e) {
                  $scope.popupForm.$submitted=true;
                  if(!$scope.popupForm.$valid || !$scope.popupForm.newNode) {
                    //don't allow the user to close unless he enters a node
                    e.preventDefault();
                  } else {
                    return $scope.popupData.newNode;
                  }
                }
              }
            ]
          })
          .then(function(node) {
            if (!node) { // user cancel
              UIUtils.loading.hide();
              return;
            }
            var parts = node.split(':');
            var useSsl = $scope.popupData.useSsl || (parts[1] == 443);
            resolve({
              host: parts[0],
              port: parts[1] || (useSsl ? 443 : 80),
              wsPort: parts[2] || parts[1] || (useSsl ? 443 : 80),
              useSsl: useSsl
            });
          });
        });
    });
  };

  $scope.showNodeList = function() {
    $ionicPopup._popupStack[0].responseDeferred.promise.close();
    return Modals.showNetworkLookup({
      enableFilter: true,
      endpointFilter: esHttp.constants.ES_USER_API_ENDPOINT
    })
      .then(function (peer) {
        if (!peer) return;
          var esEps = peer.getEndpoints().reduce(function(res, ep){
            var esEp = esHttp.node.parseEndPoint(ep);
            return esEp ? res.concat(esEp) : res;
          }, []);
          if (!esEps.length) return;
          var ep = esEps[0];
          return {
            host: (ep.dns ? ep.dns :
                   (peer.hasValid4(ep) ? ep.ipv4 : ep.ipv6)),
            port: ep.port || 80
          };
      })
      .then(function(newEsNode) {
        if (!newEsNode) {
          UIUtils.alert.error('ERROR.INVALID_NODE_SUMMARY');
          return;
        }
        $scope.changeEsNode(newEsNode);
      });
  };

  $scope.onFormChanged = function() {
    if ($scope.loading) return;

    $scope.loading = true;
    csSettings.data.plugins = csSettings.data.plugins || {};
    csSettings.data.plugins.es = csSettings.data.plugins.es ?
      angular.merge(csSettings.data.plugins.es, $scope.formData) :
      $scope.formData;

    // Fix old settings (unused)
    delete csSettings.data.plugins.es.newNode;

    csSettings.store()
      .then(function() {
        $scope.loading = false;
      });
  };
  $scope.$watch('formData', $scope.onFormChanged, true);

  $scope.getServer = function(node) {
    node = node || $scope.formData;
    if (!node.host) return undefined;
    var server = csHttp.getServer(node.host, node.port);
    return server + (node.wsPort && node.wsPort != node.port ? ':' + node.wsPort : '');
  };
}

angular.module('cesium.es.currency.controllers', ['ngResource', 'cesium.es.services'])

  .config(['PluginServiceProvider', 'csConfig', function(PluginServiceProvider, csConfig) {
    'ngInject';

    var enable = csConfig.plugins && csConfig.plugins.es;
    if (enable) {
      PluginServiceProvider.extendState('app.currency.tab_blocks', {
        points: {
          'nav-buttons': {
            templateUrl: "plugins/es/templates/currency/tab_blocks_extend.html",
            controller: 'ESExtensionCtrl'
          }
        }
      })
      ;
    }
  }])
;



ESWalletController.$inject = ['$scope', '$controller', '$state', 'esModals', 'csWallet'];angular.module('cesium.es.wallet.controllers', ['cesium.es.services'])

  .config(['PluginServiceProvider', 'csConfig', function(PluginServiceProvider, csConfig) {
    'ngInject';

    var enable = csConfig.plugins && csConfig.plugins.es;
    if (enable) {
      PluginServiceProvider
        .extendStates(['app.view_wallet', 'app.view_wallet_by_id'], {
          points: {
            'after-general': {
              templateUrl: "plugins/es/templates/wallet/view_wallet_extend.html",
              controller: 'ESWalletCtrl'
            }
          }
        })
      ;
    }

  }])


  .controller('ESWalletCtrl', ESWalletController)

;

function ESWalletController($scope, $controller, $state, esModals, csWallet) {
  'ngInject';

  // Initialize the super class and extend it.
  angular.extend(this, $controller('ESExtensionCtrl', {$scope: $scope}));

  $scope.showProfileHelp = false;

  /* -- modals -- */

  $scope.showNewPageModal = function() {
    var wallet = ($state.params && $state.params.id) ? csWallet.children.get($state.params.id) : csWallet;
    if (!wallet) {
      UIUtils.alert.error('ERROR.UNKNOWN_WALLET_ID');
      return;
    }

    return esModals.showNewPage({wallet: wallet});
  };
}



ESWotLookupExtendController.$inject = ['$scope', '$controller', '$state'];
ESWotIdentityViewController.$inject = ['$scope', '$ionicPopover', '$q', '$controller', 'UIUtils', 'Modals', 'csWallet', 'esModals', 'esHttp', 'esWallet', 'esInvitation'];angular.module('cesium.es.wot.controllers', ['cesium.es.services'])

  .config(['$stateProvider', 'PluginServiceProvider', 'csConfig', function($stateProvider, PluginServiceProvider, csConfig) {
    'ngInject';

    var enable = csConfig.plugins && csConfig.plugins.es;
    if (enable) {
      PluginServiceProvider

        .extendState('app.wot_lookup', {
          points: {
            'tabs': {
              templateUrl: "plugins/es/templates/wot/lookup_extend.html",
              controller: "ESExtensionCtrl"
            }
          }
        })

        .extendState('app.wot_lookup_lg', {
          points: {
            'top': {
              templateUrl: "plugins/es/templates/wot/lookup_lg_extend.html",
              controller: "ESWotLookupExtendCtrl"
            }
          }
        })

        .extendStates(['app.wot_identity', 'app.wot_identity_uid'], {
          points: {
            'after-general': {
              templateUrl: "plugins/es/templates/wot/view_identity_extend.html",
              controller: 'ESWotIdentityViewCtrl'
            },
            'buttons': {
              templateUrl: "plugins/es/templates/wot/view_identity_extend.html",
              controller: 'ESWotIdentityViewCtrl'
            }
          }
        })

        .extendStates(['app.wot_cert', 'app.wot_cert_lg', 'app.wallet_cert', 'app.wallet_cert_lg'], {
          points: {
            'nav-buttons': {
              templateUrl: "plugins/es/templates/wot/view_certifications_extend.html",
              controller: 'ESWotIdentityViewCtrl'
            },
            'buttons': {
              templateUrl: "plugins/es/templates/wot/view_certifications_extend.html",
              controller: 'ESWotIdentityViewCtrl'
            }
          }
        })
      ;


    }

  }])


 .controller('ESWotLookupExtendCtrl', ESWotLookupExtendController)

 .controller('ESWotIdentityViewCtrl', ESWotIdentityViewController)

;

function ESWotLookupExtendController($scope, $controller, $state) {
  'ngInject';

  // Initialize the super class and extend it.
  angular.extend(this, $controller('ESExtensionCtrl', {$scope: $scope}));

  $scope.openRegistryLookup = function() {

    var text = $scope.search.text && $scope.search.text.trim() || '';
    var location = $scope.search.location && $scope.search.location.trim() || '';
    var stateParams = {
      q: text.length ? text : undefined,
      location: location.length ? location : undefined
    };

    $state.go('app.registry_lookup', stateParams);
  };
}

function ESWotIdentityViewController($scope, $ionicPopover, $q, $controller, UIUtils, Modals, csWallet,
                                     esModals, esHttp, esWallet, esInvitation) {
  'ngInject';

  // Initialize the super class and extend it.
  angular.extend(this, $controller('ESExtensionCtrl', {$scope: $scope}));

  $scope.canCertify = false; // disable certity on the popover (by default - override by the wot map controller)

  /* -- modals -- */

  $scope.showNewMessageModal = function(confirm) {

    return csWallet.login({minData: true, method: 'default'})
      .then(function() {
        UIUtils.loading.hide();

        // Ask confirmation, if user has no Cesium+ profil
        if (!confirm && !$scope.formData.profile) {
          return UIUtils.alert.confirm('MESSAGE.CONFIRM.USER_HAS_NO_PROFILE')
            .then(function (confirm) {
              // Recursive call (with confirm flag)
              if (confirm) return true;
            });
        }
        return true;
      })
      // Open modal
      .then(function(confirm) {
        if (!confirm) return false;

        return esModals.showMessageCompose({
          destPub: $scope.formData.pubkey,
          destUid: $scope.formData.name||$scope.formData.uid
        })
        .then(function(send) {
          if (send) UIUtils.toast.show('MESSAGE.INFO.MESSAGE_SENT');
        });
      });
  };

  $scope.showSuggestCertificationModal = function() {

    $scope.hideCertificationActionsPopover();

    var identities;

    return csWallet.auth({minData: true})
      .then(function(walletData) {
        UIUtils.loading.hide();
        if (!walletData) return;

        // Not allow for non-member - issue #561
        if (!walletData.isMember) {
          return UIUtils.alert.error('ERROR.ONLY_MEMBER_CAN_EXECUTE_THIS_ACTION');
        }

        return Modals.showWotLookup({
          allowMultiple: true,
          enableFilter: true,
          title: 'WOT.SUGGEST_CERTIFICATIONS_MODAL.TITLE',
          help: 'WOT.SUGGEST_CERTIFICATIONS_MODAL.HELP',
          okText: 'COMMON.BTN_NEXT',
          okType: 'button-positive'
        })
        .then(function(res) {
          if (!res || !res.length) return; // user cancelled
          identities = res;

          return $q.all([
            // Get keypair only once (if not done here, certification.send() with compute it many times)
            esWallet.box.getKeypair(walletData.keypair),
            // Ask confirmation
            UIUtils.alert.confirm('WOT.CONFIRM.SUGGEST_CERTIFICATIONS', undefined, {okText: 'COMMON.BTN_SEND'})
          ])
            .then(function(res) {
              if (!res) return;
              var keypair = res[0];
              var confirm = res[1];
              if (!confirm) return;
              var time = esHttp.date.now(); // use same date for each invitation
              return $q.all(
                identities.reduce(function(res, identity){
                  return res.concat(
                    esInvitation.send({
                      issuer: walletData.pubkey,
                      recipient: $scope.formData.pubkey,
                      time: time,
                      content: [identity.uid, identity.pubkey].join('-')
                    }, keypair, 'certification')
                  );
                }, [])
              );
            })
            .then(function() {
              UIUtils.toast.show('INVITATION.INFO.INVITATION_SENT');
            })
            .catch(UIUtils.onError('INVITATION.ERROR.SEND_INVITATION_FAILED'));
        });
      });
  };

  $scope.showAskCertificationModal = function() {

    $scope.hideCertificationActionsPopover();

    var identities;
    return (csWallet.children.count() ? Modals.showSelectWallet({displayBalance: false}) : $q.when(csWallet))
      .then(function(wallet) {
        return wallet.auth({minData: true});
      })
      .then(function(walletData) {
        UIUtils.loading.hide();
        if (!walletData) return;

        // Not allow for non-member - issue #561
        if (!walletData.isMember) {
          return UIUtils.alert.error('ERROR.ONLY_MEMBER_CAN_EXECUTE_THIS_ACTION');
        }

        return Modals.showWotLookup({
          allowMultiple: true,
          enableFilter: false,
          title: 'WOT.ASK_CERTIFICATIONS_MODAL.TITLE',
          help: 'WOT.ASK_CERTIFICATIONS_MODAL.HELP',
          okText: 'COMMON.BTN_NEXT',
          okType: 'button-positive'
        })
        .then(function(res) {
          if (!res || !res.length) return; // user cancelled
          identities = res;

          return $q.all([
            // Get keypair only once (if not done here, certification.send() with compute it many times)
            esWallet.box.getKeypair(walletData.keypair),
            // Ask confirmation
            UIUtils.alert.confirm('WOT.CONFIRM.ASK_CERTIFICATIONS', undefined, {okText: 'COMMON.BTN_SEND'})
          ])
            .then(function(res) {
              var keypair = res && res[0];
              var confirm = res && res[1];
              if (!keypair || !confirm) return;
              var time = esHttp.date.now(); // use same date for each invitation
              return $q.all(identities.reduce(function(res, identity){
                return res.concat(
                  esInvitation.send({
                    issuer: walletData.pubkey,
                    recipient: identity.pubkey,
                    time: time,
                    content: [walletData.uid, walletData.pubkey].join('-')
                  }, keypair, 'certification')
                );
              }, []))
                .then(function() {
                  UIUtils.toast.show('INVITATION.INFO.INVITATION_SENT');
                })
                .catch(UIUtils.onError('INVITATION.ERROR.SEND_INVITATION_FAILED'));
            });
          });
      });
  };

  $scope.askCertification = function() {
    $scope.hideCertificationActionsPopover();

    return (csWallet.children.count() ? Modals.showSelectWallet({displayBalance: false}) : $q.when(csWallet))
      .then(function(wallet) {
        return wallet.auth({minData: true});
      })
      .then(function(walletData) {
        UIUtils.loading.hide();
        if (!walletData) return;

        // Not allow for non-member - issue #561
        if (!walletData.isMember) {
          return UIUtils.alert.error('ERROR.ONLY_MEMBER_CAN_EXECUTE_THIS_ACTION');
        }
        // ask confirmation
        return UIUtils.alert.confirm('WOT.CONFIRM.ASK_CERTIFICATION', undefined, {
          okText: 'COMMON.BTN_SEND'
        })
          .then(function(confirm) {
            if (!confirm) return;
            return esInvitation.send({
                issuer: walletData.pubkey,
                recipient: $scope.formData.pubkey,
                content: [walletData.uid, walletData.pubkey].join('-')
              },
              {
                type: 'certification',
                keypair: walletData.keypair
              })
              .then(function() {
                UIUtils.toast.show('INVITATION.INFO.INVITATION_SENT');
              })
              .catch(UIUtils.onError('INVITATION.ERROR.SEND_INVITATION_FAILED'));
          });
      });
  };

  /* -- Popover -- */

  $scope.showCertificationActionsPopover = function(event) {
    if (!$scope.certificationActionsPopover) {
      $ionicPopover.fromTemplateUrl('plugins/es/templates/wot/popover_certification_actions.html', {
        scope: $scope
      }).then(function(popover) {
        $scope.certificationActionsPopover = popover;
        //Cleanup the popover when we're done with it!
        $scope.$on('$destroy', function() {
          $scope.certificationActionsPopover.remove();
        });
        $scope.certificationActionsPopover.show(event);
      });
    }
    else {
      $scope.certificationActionsPopover.show(event);
    }
  };

  $scope.hideCertificationActionsPopover = function() {
    if ($scope.certificationActionsPopover) {
      $scope.certificationActionsPopover.hide();
    }
  };

  // TODO : for DEV only
  /*$timeout(function() {
    if ($scope.extensionPoint != 'buttons') return;
    $scope.showSuggestCertificationModal();
  }, 1000);*/
}



ESRegistryLookupController.$inject = ['$scope', '$focus', '$timeout', '$filter', '$controller', '$location', '$translate', '$ionicPopover', 'Device', 'UIUtils', 'ModalUtils', 'BMA', 'csSettings', 'csWallet', 'esModals', 'esRegistry', 'esHttp'];
ESWalletPagesController.$inject = ['$scope', '$controller', '$timeout', 'UIUtils', 'esModals', 'csWallet'];
ESRegistryRecordViewController.$inject = ['$scope', '$rootScope', '$state', '$q', '$timeout', '$ionicPopover', '$ionicHistory', '$translate', '$anchorScroll', 'csConfig', 'csWallet', 'esRegistry', 'UIUtils', 'esHttp'];
ESRegistryRecordEditController.$inject = ['$scope', '$timeout', '$state', '$q', '$ionicHistory', '$focus', '$translate', '$controller', 'Device', 'UIUtils', 'ModalUtils', 'csWallet', 'esHttp', 'esRegistry'];angular.module('cesium.es.registry.controllers', ['cesium.es.services', 'cesium.es.common.controllers'])

  .config(['$stateProvider', function($stateProvider) {
    'ngInject';

    $stateProvider

    .state('app.wot_lookup.tab_registry', {
      url: "/page?q&type&hash&category&location&issuer&reload&lat&lon&d&last",
      views: {
        'tab_registry': {
          templateUrl: "plugins/es/templates/registry/tabs/tab_registry.html",
          controller: 'ESRegistryLookupCtrl'
        }
      },
      data: {
        large: 'app.registry_lookup_lg',
        silentLocationChange: true
      }
    })

    .state('app.registry_lookup_lg', {
      url: "/wot/page/lg?q&type&hash&category&location&issuer&reload&lat&lon&d&last",
      views: {
        'menuContent': {
          templateUrl: "plugins/es/templates/registry/lookup_lg.html",
          controller: 'ESRegistryLookupCtrl'
        }
      },
      data: {
        silentLocationChange: true
      }
    })

    .state('app.wallet_pages', {
      url: "/account/pages?refresh",
      views: {
        'menuContent': {
          templateUrl: "plugins/es/templates/registry/view_wallet_pages.html",
          controller: 'ESWalletPagesCtrl'
        }
      },
      data: {
        login: true,
        minData: true,
        silentLocationChange: true
      }
    })

    .state('app.wallet_pages_by_id', {
      url: "/wallets/:id/pages?refresh",
      views: {
        'menuContent': {
          templateUrl: "plugins/es/templates/registry/view_wallet_pages.html",
          controller: 'ESWalletPagesCtrl'
        }
      },
      data: {
        login: true,
        minData: true,
        silentLocationChange: true
      }
    })

    .state('app.view_page', {
      url: "/page/view/:id/:title?refresh",
      views: {
        'menuContent': {
          templateUrl: "plugins/es/templates/registry/view_record.html",
          controller: 'ESRegistryRecordViewCtrl'
        }
      }
    })

    .state('app.view_page_anchor', {
      url: "/page/view/:id/:title/:anchor",
      views: {
        'menuContent': {
          templateUrl: "plugins/es/templates/registry/view_record.html",
          controller: 'ESRegistryRecordViewCtrl'
        }
      }
    })

    .state('app.registry_add_record', {
      cache: false,
      url: "/page/add/:type?wallet",
      views: {
        'menuContent': {
          templateUrl: "plugins/es/templates/registry/edit_record.html",
          controller: 'ESRegistryRecordEditCtrl'
        }
      },
      data: {
        auth: true,
        minData: true
      }
    })

    .state('app.registry_edit_record', {
      cache: false,
      url: "/page/edit/:id/:title?wallet",
      views: {
        'menuContent': {
          templateUrl: "plugins/es/templates/registry/edit_record.html",
          controller: 'ESRegistryRecordEditCtrl'
        }
      },
      data: {
        auth: true,
        minData: true
      }
    })
    ;
  }])

 .controller('ESRegistryLookupCtrl', ESRegistryLookupController)

 .controller('ESWalletPagesCtrl', ESWalletPagesController)

 .controller('ESRegistryRecordViewCtrl', ESRegistryRecordViewController)

 .controller('ESRegistryRecordEditCtrl', ESRegistryRecordEditController)

;

function ESRegistryLookupController($scope, $focus, $timeout, $filter, $controller, $location, $translate, $ionicPopover,
                                    Device, UIUtils, ModalUtils, BMA, csSettings, csWallet, esModals, esRegistry, esHttp) {
  'ngInject';

  // Initialize the super class and extend it.
  angular.extend(this, $controller('ESLookupPositionCtrl', {$scope: $scope}));

  var defaultSearchLimit = 10;

  $scope.search = {
    text: '',
    results: [],
    loading: true,
    lastRecords: true,
    type: null,
    category: null,
    location: null,
    advanced: null,
    issuer: null,
    geoDistance: !isNaN(csSettings.data.plugins.es.geoDistance) ? csSettings.data.plugins.es.geoDistance : 20
  };
  $scope.searchTextId = 'registrySearchText';
  $scope.enableFilter = true;
  $scope.smallscreen = angular.isDefined($scope.smallscreen) ? $scope.smallscreen : UIUtils.screen.isSmall();

  $scope.options = angular.merge($scope.options||{}, {
    location: {
      show: true,
      help: 'REGISTRY.SEARCH.LOCATION_HELP'
    }
  });

  $scope.enter = function(e, state) {
    if (!$scope.entered || !$scope.search.results || $scope.search.results.length === 0) {

      // Resolve distance unit
      if (!$scope.geoUnit) {
        return $translate('LOCATION.DISTANCE_UNIT')
          .then(function(unit) {
            $scope.geoUnit = unit;
            return $scope.enter(e, state); // Loop
          });
      }

      var finishEntered = function() {
        // removeIf(device)
        // Focus on search text (only if NOT device, to avoid keyboard opening)
        if ($scope.searchTextId) {
          $focus($scope.searchTextId);
        }
        // endRemoveIf(device)

        $scope.entered = true;

        $scope.doSearch();
      };

      // Search by text
      if (state.stateParams && state.stateParams.q && (typeof state.stateParams.q == 'string')) {
        $scope.search.text=state.stateParams.q;
      }

      if (state.stateParams && state.stateParams.hash) { // hash tag parameter
        $scope.search.text = '#' + state.stateParams.hash;
      }

      // Search on location
      if (state.stateParams && state.stateParams.location) {
        $scope.search.location = state.stateParams.location;
        if (state.stateParams.lat && state.stateParams.lon) {
          $scope.search.geoPoint = {
            lat: parseFloat(state.stateParams.lat),
            lon: parseFloat(state.stateParams.lon)
          };
        }
        if (state.stateParams.d) {
          $scope.search.geoDistance = state.stateParams.d;
        }
      }
      else {
        var defaultSearch = csSettings.data.plugins.es.registry && csSettings.data.plugins.es.registry.defaultSearch;
        // Apply defaults from settings
        if (defaultSearch) {
          if (defaultSearch.location){
            angular.merge($scope.search, csSettings.data.plugins.es.registry.defaultSearch);
          }
          else {
            defaultSearch = undefined; // invalid
          }
        }
        // First time calling this view: apply profile location (if loaded)
        if (!defaultSearch && csWallet.isLogin() && csWallet.data.profile) {
          if (!csWallet.isDataLoaded()) {
            UIUtils.loading.show();
            return csWallet.loadData()
              .then(function() {
                UIUtils.loading.hide();
                return $scope.enter(e,state); // loop
              });
          }
          $scope.search.geoPoint = csWallet.data.profile.geoPoint;
          $scope.search.location = csWallet.data.profile.city||(csWallet.data.profile.geoPoint ? 'profile position' : undefined);
        }
      }

      // Search on type
      if (state.stateParams && (state.stateParams.type || state.stateParams.last)) {
        if (state.stateParams.last || state.stateParams.type == 'last') {
          $scope.search.lastRecords = true;
          $scope.search.type = undefined;
        }
        else {
          $scope.search.type = state.stateParams.type;
        }
      }
      else {
        $scope.search.lastRecords = false;
      }

      // Search on issuer
      if (state.stateParams && state.stateParams.issuer) {
        $scope.search.issuer = state.stateParams.issuer;
      }

      // Search on category
      if (state.stateParams && state.stateParams.category) {
        esRegistry.category.get({id: state.stateParams.category})
        .then(function(cat) {
          $scope.search.category = cat;
          finishEntered();
        })
        .catch(UIUtils.onError("REGISTRY.ERROR.LOAD_CATEGORY_FAILED"));
      }
      else {
        finishEntered();
      }
    }
    $scope.showFab('fab-add-registry-record');

  };
  $scope.$on('$ionicView.enter', function(e, state) {
    // WARN: do not set by reference
    // because it can be overrided by sub controller
    return $scope.enter(e, state);
  });

  // Store some search options as settings defaults
  $scope.leave = function() {
    var dirty = false;

    csSettings.data.plugins.es.registry = csSettings.data.plugins.es.registry || {};
    csSettings.data.plugins.es.registry.defaultSearch = csSettings.data.plugins.es.registry.defaultSearch || {};

    // Check if location changed
    var location = $scope.search.location && $scope.search.location.trim();
    var oldLocation = csSettings.data.plugins.es.registry.defaultSearch.location;
    if (!oldLocation || (oldLocation !== location)) {
      csSettings.data.plugins.es.registry.defaultSearch = {
        location: location,
        geoPoint: location && $scope.search.geoPoint ? angular.copy($scope.search.geoPoint) : undefined
      };
      dirty = true;
    }

    // Check if distance changed
    var odlDistance = csSettings.data.plugins.es.geoDistance;
    if (!odlDistance || odlDistance !== $scope.search.geoDistance) {
      csSettings.data.plugins.es.geoDistance = $scope.search.geoDistance;
      dirty = true;
    }

    // execute with a delay, for better UI perf
    if (dirty) {
      $timeout(function() {
        csSettings.store();
      });
    }
  };
  $scope.$on('$ionicView.leave', function() {
    // WARN: do not set by reference
    // because it can be overrided by sub controller
    return $scope.leave();
  });

  $scope.onGeoPointChanged = function() {
    if ($scope.search.loading) return;

    if ($scope.search.geoPoint && $scope.search.geoPoint.lat && $scope.search.geoPoint.lon && !$scope.search.geoPoint.exact) {
      $scope.doSearch();
      $scope.updateLocationHref();
    }
  };
  $scope.$watch('search.geoPoint', $scope.onGeoPointChanged, true);

  $scope.resolveLocationPosition = function() {
    if ($scope.search.loadingPosition) return;

    $scope.search.loadingPosition = true;
    return $scope.searchPosition($scope.search.location)
      .then(function(res) {
        if (!res) {
          $scope.search.loading = false;
          $scope.search.results = undefined;
          $scope.search.total = 0;
          $scope.search.loadingPosition = false;
          $scope.search.geoPoint = undefined;
          throw 'CANCELLED';
        }
        $scope.search.geoPoint = res;
        if (res.shortName && !res.exact) {
          $scope.search.location = res.shortName;
        }
        $scope.search.loadingPosition = false;
      });
  };

  $scope.doGetLastRecords = function(from) {
    $scope.hidePopovers();

    $scope.search.text = undefined;
    return $scope.doSearch(from);
  };

  $scope.doSearchText = function() {
    $scope.doSearch();

    // removeIf(no-device)
    Device.keyboard.close();
    // endRemoveIf(no-device)
  };

  $scope.doSearch = function(from) {
    $scope.search.loading = !from;

    // Resolve location position
    if ($scope.search.location && $scope.search.location.length >= 3 && !$scope.search.geoPoint) {
      return $scope.resolveLocationPosition()
        .then(function() {
          return $scope.doSearch(from); // Loop
        });
    }

    var text = $scope.search.text && $scope.search.text.trim() || '';
    $scope.search.lastRecords = !text || !text.length;
    var matches = [];
    var filters = [];
    if (text && text.length) {
      // pubkey : use a special 'term', because of 'non indexed' field
      if (BMA.regexp.PUBKEY.test(text /*case sensitive*/)) {
        filters.push({term : { pubkey: text}});
      }
      else {
        text = text.toLowerCase();
        var tags = text ? esHttp.util.parseTags(text) : undefined;
        var matchFields = ["title", "description", "city", "address"];
        matches.push({multi_match : { query: text,
          fields: matchFields,
          type: "phrase_prefix"
        }});
        matches.push({match : { title: {query: text, boost: 2}}});
        matches.push({prefix: {title: text}});
        matches.push({match : { description: text}});
        matches.push({
          nested: {
            path: "category",
            query: {
              bool: {
                filter: {
                  match: { "category.name": text}
                }
              }
            }
          }
        });
        if (tags && tags.length) {
          filters.push({terms: {tags: tags}});
        }
      }
    }
    // issuer: use only on filter
    else if ($scope.search.issuer) {
      filters.push({term : { issuer: $scope.search.issuer}});
    }
    if ($scope.search.type) {
      filters.push({term: { type: $scope.search.type}});
    }
    if ($scope.search.category) {
      filters.push({
        nested: {
          path: "category",
          query: {
            bool: {
              filter: {
                term: { "category.id": $scope.search.category.id}
              }
            }
          }
        }
      });
    }

    var location = $scope.search.location && $scope.search.location.trim().toLowerCase();
    if ($scope.search.geoPoint && $scope.search.geoPoint.lat && $scope.search.geoPoint.lon) {

      // match location OR geo distance
      if (location && location.length) {
        var locationCity = location.split(',')[0];
        filters.push({
          or : [
            // No position defined
            {
              and: [
                {not: {exists: { field : "geoPoint" }}},
                {match_phrase: { city: locationCity }}
              ]
            },
            // Has position
            {geo_distance: {
              distance: $scope.search.geoDistance + $scope.geoUnit,
              geoPoint: {
                lat: $scope.search.geoPoint.lat,
                lon: $scope.search.geoPoint.lon
              }
            }}
          ]
        });
      }

      else {
        filters.push(
          {geo_distance: {
            distance: $scope.search.geoDistance + $scope.geoUnit,
            geoPoint: {
              lat: $scope.search.geoPoint.lat,
              lon: $scope.search.geoPoint.lon
            }
          }});
      }
    }

    var request = {
      highlight: {fields : {title : {}, description: {}, tags: {}}},
      from: from
    };
    if (matches.length > 0) {
      request.query = request.query || {bool: {}};
      request.query.bool.should =  matches;
      // Exclude result with score=0
      request.query.bool.minimum_should_match = 1;
    }
    if (filters.length > 0) {
      request.query = request.query || {bool: {}};
      request.query.bool.filter =  filters;
    }
    if ($scope.search.lastRecords) {
      request.sort = {creationTime : "desc"};
    }

    // Update href location
    $scope.updateLocationHref();

    // Execute the request
    return $scope.doRequest(request);
  };

  $scope.doRequest = function(options) {
    options = options || {};
    options.from = options.from || 0;
    options.size = options.size || defaultSearchLimit;
    if (options.size < defaultSearchLimit) options.size = defaultSearchLimit;
    $scope.search.loading = (options.from === 0);

    var requestId = ($scope.requestId && $scope.requestId + 1) || 1;
    $scope.requestId = requestId;

    return esRegistry.record.search(options)
      .then(function(res) {
        if ($scope.requestId != requestId) return; // Skip apply if not same request:

        if (!res || !res.hits || !res.hits.length) {
          $scope.search.results = (options.from > 0) ? $scope.search.results : [];
          $scope.search.total = (options.from > 0) ? $scope.search.total : 0;
          $scope.search.loading = false;
          $scope.search.hasMore = false;
          return;
        }
        var formatSlug = $filter('formatSlug');
        _.forEach(res.hits, function(record) {
          // Compute title for url
          record.urlTitle = formatSlug(record.title);
        });

        // Replace results, or append if 'show more' clicked
        if (!options.from) {
          $scope.search.results = res.hits;
          $scope.search.total = res.total;
        }
        else {
          $scope.search.results = $scope.search.results.concat(res.hits);
        }
        $scope.search.hasMore = $scope.search.results.length < res.total;
        $scope.search.loading = false;

        $scope.motion.show({selector: '.list .item', ink: true});
      })
      .catch(function(err) {
        $scope.search.loading = false;
        $scope.search.results = (options.from > 0) ? $scope.search.results : [];
        $scope.search.total = (options.from > 0) ? $scope.search.total : 0;
        $scope.search.hasMore = false;
        UIUtils.onError('REGISTRY.ERROR.LOOKUP_RECORDS_FAILED')(err);
      });
  };

  $scope.showMore= function() {
    var from = $scope.search.results ? $scope.search.results.length : 0;

    $scope.search.loadingMore = true;

    var searchFunction = ($scope.search.lastRecords) ?
      $scope.doGetLastRecords :
      $scope.doSearch;

    return searchFunction(from)
      .then(function() {
        $scope.search.loadingMore = false;
        $scope.$broadcast('scroll.infiniteScrollComplete');
      })
      .catch(function(err) {
        console.error(err);
        $scope.search.loadingMore = false;
        $scope.search.hasMore = false;
        $scope.$broadcast('scroll.infiniteScrollComplete');
      });
  };

  $scope.removeType = function() {
    $scope.search.type = null;
    $scope.doSearch();
    $scope.updateLocationHref();
  };

  $scope.removeCategory = function() {
    $scope.search.category = null;
    $scope.category = null;
    $scope.doSearch();
    $scope.updateLocationHref();
  };

  $scope.removeLocation = function() {
    $scope.search.location = null;
    $scope.search.geoPoint = null;
    $scope.doSearch();
    $scope.updateLocationHref();
  };

  // Update location href
  $scope.updateLocationHref = function(from) {
    // removeIf(device)
    // Skip when "show more"
    if (from) return;

    $timeout(function() {
      var text = $scope.search.text && $scope.search.text.trim();
      var location = $scope.search.location && $scope.search.location.trim();
      var stateParams = {
        location: location && location.length ? location : undefined,
        category: $scope.search.category ? $scope.search.category.id : undefined,
        last: $scope.search.lastRecords ? true : undefined,
        type: $scope.search.type ? $scope.search.type : undefined,
        lat: $scope.search.geoPoint && $scope.search.geoPoint.lat || undefined,
        lon: $scope.search.geoPoint && $scope.search.geoPoint.lon || undefined,
        d: $scope.search.geoPoint && $scope.search.geoDistance || undefined
      };
      if (text && text.match(/^#\w+$/)) {
        stateParams.hash = text.substr(1);
      }
      else if (text && text.length){
        stateParams.q = text;
      }

      $location.search(stateParams).replace();
    });
    // endRemoveIf(device)
  };


  $scope.onToggleAdvanced = function() {
    if ($scope.search.entered && !$scope.search.lastRecords) {
      $scope.doSearch();
      $scope.updateLocationHref();
    }
  };
  $scope.$watch('search.advanced', $scope.onToggleAdvanced, true);

  $scope.toggleAdvanced = function() {
    $scope.search.advanced = !$scope.search.advanced;
    $timeout($scope.hidePopovers, 200);
  };

  /* -- modals -- */

  $scope.showRecordTypeModal = function(event) {
    $scope.hidePopovers();

    $timeout(function() {
      if (event.isDefaultPrevented()) return;

      ModalUtils.show('plugins/es/templates/registry/modal_record_type.html')
        .then(function(type){
          if (type) {
            $scope.search.type = type;
            $scope.doSearch();
            $scope.updateLocationHref();
          }
        });
    }, 350); // use timeout to allow event to be prevented in removeType()
  };

  $scope.showCategoryModal = function(event) {
    $timeout(function() {
      if (event.isDefaultPrevented()) return;

      // load categories
      esRegistry.category.all()
        .then(function (categories) {
          // open modal
          return ModalUtils.show('plugins/es/templates/common/modal_category.html', 'ESCategoryModalCtrl as ctrl',
            {categories: categories}, {focusFirstInput: true});
        })
        .then(function (cat) {
          if (cat && cat.parent) {
            $scope.search.category = cat;
            $scope.doSearch();
            $scope.updateLocationHref();
          }
        });
    }, 350); // use timeout to allow event to be prevented in removeCategory()
  };

  $scope.showNewPageModal = function() {
    $scope.hidePopovers();
    return esModals.showNewPage();
  };

  /* -- popovers -- */

  $scope.showActionsPopover = function(event) {
    if (!$scope.actionsPopover) {
      $ionicPopover.fromTemplateUrl('plugins/es/templates/registry/lookup_popover_actions.html', {
        scope: $scope
      }).then(function(popover) {
        $scope.actionsPopover = popover;
        //Cleanup the popover when we're done with it!
        $scope.$on('$destroy', function() {
          $scope.actionsPopover.remove();
        });
        $scope.actionsPopover.show(event);
      });
    }
    else {
      $scope.actionsPopover.show(event);
    }
  };

  $scope.hideActionsPopover = function() {
    if ($scope.actionsPopover) {
      $scope.actionsPopover.hide();
    }
  };

  $scope.showFiltersPopover = function(event) {
    if (!$scope.filtersPopover) {
      $ionicPopover.fromTemplateUrl('plugins/es/templates/registry/lookup_popover_filters.html', {
        scope: $scope
      }).then(function(popover) {
        $scope.filtersPopover = popover;
        //Cleanup the popover when we're done with it!
        $scope.$on('$destroy', function() {
          $scope.filtersPopover.remove();
        });
        $scope.filtersPopover.show(event);
      });
    }
    else {
      $scope.filtersPopover.show(event);
    }
  };

  $scope.hideFiltersPopover = function() {
    if ($scope.filtersPopover) {
      $scope.filtersPopover.hide();
    }
  };

  $scope.hidePopovers = function() {
    $scope.hideActionsPopover();
    $scope.hideFiltersPopover();
  };


  // TODO: remove auto add account when done
 /* $timeout(function() {
    $scope.search.text='lavenier';
    $scope.doSearch();
  }, 400);
  */
}


function ESWalletPagesController($scope, $controller, $timeout, UIUtils, esModals, csWallet) {
  'ngInject';

  // Initialize the super class and extend it.
  angular.extend(this, $controller('ESRegistryLookupCtrl', {$scope: $scope}));

  $scope.searchTextId = undefined; // avoid focus

  var wallet;

  // Override the default enter
  $scope.enter = function(e, state) {
    if (!$scope.entered) {

      wallet = (state.stateParams && state.stateParams.id) ? csWallet.children.get(state.stateParams.id) : csWallet;
      if (!wallet) {
        UIUtils.alert.error('ERROR.UNKNOWN_WALLET_ID');
        return $scope.showHome();
      }

      return wallet.login({minData: true})
        .then(function(walletData) {
          UIUtils.loading.hide();
          $scope.search.issuer = walletData.pubkey;
          $scope.search.advanced = true;
          $timeout($scope.doSearch, 100);
          $scope.showFab('fab-wallet-add-registry-record');
        });
    }
    else {
      // Asking refresh
      if (state.stateParams && state.stateParams.refresh) {
        return $timeout($scope.doSearch, 2000 /*waiting for propagation, if deletion*/);
      }
    }
  };

  $scope.doUpdate = function() {
    if (!wallet || !wallet.isLogin()) return;
    $scope.search.issuer = csWallet.data.pubkey;
    $scope.search.advanced = true;
    return $scope.doSearch();
  };

  // Override inherited, to pass the select wallet
  $scope.showNewPageModal = function() {
    $scope.hidePopovers();
    return esModals.showNewPage({wallet: wallet});
  };

}


function ESRegistryRecordViewController($scope, $rootScope, $state, $q, $timeout, $ionicPopover, $ionicHistory, $translate,
                                        $anchorScroll, csConfig, csWallet, esRegistry, UIUtils, esHttp) {
  'ngInject';

  $scope.formData = {};
  $scope.id = null;
  $scope.category = {};
  $scope.pictures = [];
  $scope.canEdit = false;
  $scope.showTransfer = false;
  $scope.loading = true;
  $scope.motion = UIUtils.motion.fadeSlideIn;

  $scope.$on('$ionicView.beforeEnter', function (event, viewData) {
    // Enable back button (workaround need for navigation outside tabs - https://stackoverflow.com/a/35064602)
    viewData.enableBack = UIUtils.screen.isSmall() ? true : viewData.enableBack;
  });

  $scope.$on('$ionicView.enter', function(e, state) {
    if (state.stateParams && state.stateParams.id) { // Load by id
      if ($scope.loading || state.stateParams.refresh) { // prevent reload if same id (if not forced)
        $scope.load(state.stateParams.id, state.stateParams.anchor);
      }
      $scope.$broadcast('$recordView.enter', state);
    }
    else {
      $state.go('app.registry_lookup');
    }
  });

  $scope.$on('$ionicView.beforeLeave', function(event, args){
    $scope.$broadcast('$recordView.beforeLeave', args);
  });

  $scope.load = function(id, anchor) {
    id = id || $scope.id;
    $scope.loading = true;

    return $q.all([
      esRegistry.record.load(id)
        .then(function (data) {
          $scope.id= data.id;
          $scope.formData = data.record;
          //console.debug('Loading record', $scope.formData);
          $scope.canEdit = csWallet.isUserPubkey($scope.formData.issuer) || csWallet.children.hasPubkey($scope.formData.issuer);
          $scope.showTransfer = !$scope.canEdit && $scope.formData.pubkey;
          $scope.issuer = data.issuer;
          // avatar
          $scope.avatar = $scope.formData.avatar;
          $scope.avatarStyle= $scope.formData.avatar && {'background-image':'url("'+$scope.avatar.src+'")'};

          UIUtils.loading.hide();
          $scope.loading = false;
          // Set Motion (only direct children, to exclude .lazy-load children)
          $scope.motion.show({selector: '.list > .item, .list > ng-if > .item'});
        })
        .catch(function(err) {
          // Retry (ES could have error)
          if (!$scope.secondTry) {
            $scope.secondTry = true;
            $q(function() {
              $scope.load(id);
            }, 100);
          }
          else {
            $scope.loading = false;
            if (err && err.ucode === 404) {
              UIUtils.toast.show('REGISTRY.ERROR.RECORD_NOT_EXISTS');
              $state.go('app.registry_lookup');
            }
            else {
              UIUtils.onError('REGISTRY.ERROR.LOAD_RECORD_FAILED')(err);
            }
          }
        }),

      // Load pictures
      esRegistry.record.picture.all({id: id})
        .then(function(hit) {

          $scope.pictures = hit._source.pictures && hit._source.pictures.reduce(function(res, pic) {
              return res.concat(esHttp.image.fromAttachment(pic.file));
            }, []);

          // Set Motion
          if ($scope.pictures.length > 0) {
            $scope.motion.show({
              selector: '.lazy-load .item.card-gallery',
              startVelocity: 3000
            });
          }
        })
        .catch(function() {
          $scope.pictures = [];
        }),

      // Load other data (from child controller)
      $timeout(function() {
        return $scope.$broadcast('$recordView.load', id, esRegistry.record.comment);
      })
    ])
    .then(function() {
      // Display items in technical parts
      $scope.motion.show({
        selector: '.lazy-load .item',
        startVelocity: 3000
      });

      // scroll (if comment anchor)
      if (anchor) $timeout(function() {
        $anchorScroll(anchor);
      }, 1000);
    });
  };

  // Edit click
  $scope.edit = function() {
    var wallet = csWallet.isUserPubkey($scope.formData.issuer) ? csWallet : csWallet.children.getByPubkey($scope.formData.issuer);
    if (!wallet) return;
    UIUtils.loading.show();
    return $state.go('app.registry_edit_record', {id: $scope.id, wallet: wallet.id});
  };

  $scope.delete = function() {
    $scope.hideActionsPopover();

    var wallet = csWallet.isUserPubkey($scope.formData.issuer) ? csWallet : csWallet.children.getByPubkey($scope.formData.issuer);
    if (!wallet) return;

    // translate
    var translations;
    $translate(['REGISTRY.VIEW.REMOVE_CONFIRMATION', 'REGISTRY.INFO.RECORD_REMOVED'])
    .then(function(res) {
      translations = res;
      return UIUtils.alert.confirm(res['REGISTRY.VIEW.REMOVE_CONFIRMATION']);
    })
    .then(function(confirm) {
      if (confirm) {
        esRegistry.record.remove($scope.id, {wallet: wallet})
        .then(function () {
          if (wallet.data.pages && wallet.data.pages.count) {
            wallet.data.pages.count--;
          }
          $ionicHistory.nextViewOptions({
            historyRoot: true
          });
          if (wallet.isDefault()) {
            $state.go('app.wallet_pages', {refresh: true});
          }
          else {
            $state.go('app.wallet_pages_by_id', {refresh: true, id: wallet.id});
          }

          UIUtils.toast.show(translations['REGISTRY.INFO.RECORD_REMOVED']);
        })
        .catch(UIUtils.onError('REGISTRY.ERROR.REMOVE_RECORD_FAILED'));
      }
    });
  };

  /* -- modals & popover -- */

  $scope.showActionsPopover = function(event) {
    if (!$scope.actionsPopover) {
      $ionicPopover.fromTemplateUrl('plugins/es/templates/registry/view_popover_actions.html', {
        scope: $scope
      }).then(function(popover) {
        $scope.actionsPopover = popover;
        //Cleanup the popover when we're done with it!
        $scope.$on('$destroy', function() {
          $scope.actionsPopover.remove();
        });
        $scope.actionsPopover.show(event);
      });
    }
    else {
      $scope.actionsPopover.show(event);
    }
  };

  $scope.hideActionsPopover = function() {
    if ($scope.actionsPopover) {
      $scope.actionsPopover.hide();
    }
  };

  $scope.showSharePopover = function(event) {
    $scope.hideActionsPopover();
    var title = $scope.formData.title;
    // Use shareBasePath (fix #530) or rootPath (fix #390)
    var url = (csConfig.shareBaseUrl || $rootScope.rootPath) + $state.href('app.view_page', {title: title, id: $scope.id});
    // Override default position, is small screen - fix #545
    if (UIUtils.screen.isSmall()) {
      event = angular.element(document.querySelector('#registry-share-anchor-'+$scope.id)) || event;
    }
    UIUtils.popover.share(event, {
      bindings: {
        url: url,
        titleKey: 'REGISTRY.VIEW.POPOVER_SHARE_TITLE',
        titleValues: {title: title},
        time: $scope.formData.time,
        postMessage: title
      }
    });
  };

}

function ESRegistryRecordEditController($scope, $timeout,  $state, $q, $ionicHistory, $focus, $translate, $controller,
                                        Device, UIUtils, ModalUtils, csWallet, esHttp, esRegistry) {
  'ngInject';

  // Initialize the super class and extend it.
  angular.extend(this, $controller('ESPositionEditCtrl', {$scope: $scope}));

  $scope.formData = {
    title: null,
    description: null,
    socials: [],
    geoPoint: null
  };

  $scope.loading = true;
  $scope.dirty = false;
  $scope.walletData = null;
  $scope.id = null;
  $scope.avatar = null;
  $scope.pictures = [];

  $scope.setForm =  function(form) {
    $scope.form = form;
  };

  var wallet;

  $scope.$on('$ionicView.enter', function(e, state) {

    if ($scope.loading) {
      wallet = (state.stateParams && state.stateParams.wallet && state.stateParams.wallet != 'default') ? csWallet.children.get(state.stateParams.wallet) : csWallet;
      if (!wallet) {
        UIUtils.alert.error('ERROR.UNKNOWN_WALLET_ID');
        return $scope.showHome();
      }

      return wallet.login({minData: true})
        .then(function(walletData) {
          $scope.walletData = walletData;
          if (state.stateParams && state.stateParams.id) { // Load by id
            $scope.load(state.stateParams.id);
          }
          else {
            if (state.stateParams && state.stateParams.type) {
              $scope.updateView({
                record: {
                  type: state.stateParams.type
                }
              });
            }
          }
          // removeIf(device)
          $focus('registry-record-title');
          // endRemoveIf(device)
        });
    }
  });

  $scope.$on('$stateChangeStart', function (event, next, nextParams, fromState) {
    if ($scope.dirty && !$scope.saving) {

      // stop the change state action
      event.preventDefault();

      if (!$scope.loading) {
        $scope.loading = true;
        return UIUtils.alert.confirm('CONFIRM.SAVE_BEFORE_LEAVE',
          'CONFIRM.SAVE_BEFORE_LEAVE_TITLE', {
            cancelText: 'COMMON.BTN_NO',
            okText: 'COMMON.BTN_YES_SAVE'
          })
          .then(function(confirmSave) {
            $scope.loading = false;
            if (confirmSave) {
              $scope.form.$submitted=true;
              return $scope.save(false/*silent*/, true/*haswait debounce*/)
                .then(function(saved){
                  if (saved) {
                    $scope.dirty = false;
                  }
                  return saved; // change state only if not error
                });
            }
            else {
              $scope.dirty = false;
              return true; // ok, change state
            }
          })
          .then(function(confirmGo) {
            if (confirmGo) {
              // continue to the order state
              $ionicHistory.nextViewOptions({
                historyRoot: true
              });
              $state.go(next.name, nextParams);
            }
          })
          .catch(function(err) {
            // Silent
          });
      }
    }
  });

  $scope.load = function(id) {
    $scope.loading = true;
    esRegistry.record.load(id, {
        raw: true
      })
      .then(function (data) {
        if (data && data.record) {
          $scope.updateView(data);
        }
        else {
          $scope.updateView({record: {}});
        }
      })
      .catch(function(err) {
        UIUtils.loading.hide(10);
        $scope.loading = false;
        UIUtils.onError('REGISTRY.ERROR.LOAD_RECORD_FAILED')(err);
      });
  };

  $scope.updateView = function(data) {
    $scope.formData = data.record || {};
    $scope.id= data.id;

    // avatar
    $scope.avatar = $scope.formData.avatar;
    if ($scope.avatar) {
      $scope.avatarStyle = $scope.avatar && {'background-image':'url("'+$scope.avatar.src+'")'};
      $scope.avatarClass = {};
    }
    else {
      $scope.avatarStyle = undefined;
      $scope.avatarClass = {};
      $scope.avatarClass['cion-page-' +  $scope.formData.type] = !$scope.avatar;
    }

    // pictures
    $scope.pictures = data.record && data.record.pictures || [];
    delete data.record.pictures; // remove, as already stored in $scope.pictures

    $scope.motion.show({
      selector: '.animate-ripple .item, .card-gallery',
      startVelocity: 3000
    });
    UIUtils.loading.hide();

    // Update loading - done with a delay, to avoid trigger onFormDataChanged()
    $timeout(function() {
      $scope.loading = false;
    }, 1000);
  };

  $scope.onFormDataChanged = function() {
    if ($scope.loading) return;
    $scope.dirty = true;
  };
  $scope.$watch('formData', $scope.onFormDataChanged, true);



  $scope.needCategory = function() {
    return $scope.formData.type && ($scope.formData.type=='company' || $scope.formData.type=='shop');
  };

  $scope.save = function(silent, hasWaitDebounce) {
    $scope.form.$submitted=true;
    if($scope.saving || // avoid multiple save
       !$scope.form.$valid ||
       (($scope.formData.type === 'shop' || $scope.formData.type === 'company') && (!$scope.formData.category || !$scope.formData.category.id))) {
      return $q.reject();
    }

    if (!hasWaitDebounce) {
      console.debug('[ES] [page] Waiting debounce end, before saving...');
      return $timeout(function() {
        return $scope.save(silent, true);
      }, 650);
    }

    $scope.saving = true;
    console.debug('[ES] [page] Saving record...');

    var showSuccessToast = function() {
      if (!silent) {
        // removeIf(no-device)
        UIUtils.loading.hide();
        // endRemoveIf(no-device)

        return $translate('REGISTRY.INFO.RECORD_SAVED')
          .then(function(message){
            UIUtils.toast.show(message);
          });
      }
    };

    var promise = $q.when();
    // removeIf(no-device)
    if (!silent) {
      promise = UIUtils.loading.show();
    }
    // endRemoveIf(no-device)

    return promise
      .then(function(){
        var json = $scope.formData;
        if (!$scope.needCategory()) {
          delete json.category;
        }
        json.time = esHttp.date.now();

        // geo point
        if (json.geoPoint && json.geoPoint.lat && json.geoPoint.lon) {
          json.geoPoint.lat =  parseFloat(json.geoPoint.lat);
          json.geoPoint.lon =  parseFloat(json.geoPoint.lon);
        }
        else{
          json.geoPoint = null;
        }

        // Social url must be unique in socials links - Fix #306:
        if (json.socials && json.socials.length) {
          json.socials = _.uniq(json.socials, false, function(social) {
            return social.url;
          });
        }

        // Pictures
        json.picturesCount = $scope.pictures.length;
        if (json.picturesCount > 0) {
          json.pictures = $scope.pictures.reduce(function (res, pic) {
            return res.concat({file: esHttp.image.toAttachment(pic)});
          }, []);
        }
        else {
          json.pictures = [];
        }

        // Avatar
        if ($scope.avatar && $scope.avatar.src) {
          return UIUtils.image.resizeSrc($scope.avatar.src, true) // resize to avatar
            .then(function(imageSrc) {
              json.avatar = esHttp.image.toAttachment({src: imageSrc});
              return json;
            });
        }
        else {
          // Workaround to allow content deletion, because of a bug in the ES attachment-mapper:
          // get error (in ES node) : MapperParsingException[No content is provided.] - AttachmentMapper.parse(AttachmentMapper.java:471
          json.avatar = {
            _content: '',
            _content_type: ''
          };
          return json;
        }
      })
      .then(function(json){
        // Create
        if (!$scope.id) {
          return esRegistry.record.add(json, {wallet: wallet});
        }
        // Update
        return esRegistry.record.update(json, {id: $scope.id, wallet: wallet});
      })

      .then(function(id) {
        console.info("[ES] [page] Record successfully saved.");
        if (!$scope.id && wallet.data.pages && wallet.data.pages.count) {
          csWallet.data.pages.count++;
        }
        $scope.id = $scope.id || id;
        $scope.saving = false;
        $scope.dirty = false;

        showSuccessToast();

        $ionicHistory.clearCache($ionicHistory.currentView().stateId); // clear current view
        $ionicHistory.nextViewOptions({historyRoot: true});
        return $state.go('app.view_page', {id: $scope.id, refresh: true});
      })

      .catch(function(err) {
        $scope.saving = false;
        UIUtils.onError('REGISTRY.ERROR.SAVE_RECORD_FAILED')(err);
      });
  };

  $scope.openPicturePopup = function() {
    Device.camera.getPicture()
    .then(function(imageData) {
      if (imageData) {
        $scope.pictures.push({src: "data:image/png;base64," + imageData});
      }
    })
    .catch(UIUtils.onError('ERROR.TAKE_PICTURE_FAILED'));
  };

  $scope.rotateAvatar = function(){
    if (!$scope.avatar || !$scope.avatar.src || $scope.rotating) return;

    $scope.rotating = true;

    return UIUtils.image.rotateSrc($scope.avatar.src)
      .then(function(imageData){
        $scope.avatar.src = imageData;
        $scope.avatarStyle={'background-image':'url("'+imageData+'")'};
        $scope.dirty = true;
        $scope.rotating = false;
      })
      .catch(function(err) {
        console.error(err);
        $scope.rotating = false;
      });
  };

  $scope.fileChanged = function(event) {
    UIUtils.loading.show();
    return $q(function(resolve, reject) {
      var file = event.target.files[0];
      UIUtils.image.resizeFile(file)
      .then(function(imageData) {
        $scope.pictures.push({src: imageData});
        UIUtils.loading.hide();
        resolve();
      });
    });
  };

  $scope.removePicture = function(index){
    $scope.pictures.splice(index, 1);
  };

  $scope.favoritePicture = function(index){
    if (index > 0) {
      var item = $scope.pictures[index];
      $scope.pictures.splice(index, 1);
      $scope.pictures.splice(0, 0, item);
    }
  };

  $scope.cancel = function() {
    $ionicHistory.goBack();
  };

  /* -- modals -- */
  $scope.showAvatarModal = function() {
    if (Device.camera.enable) {
      return Device.camera.getPicture()
        .then(function(imageData) {
          if (!imageData) return;
          $scope.avatar = {src: "data:image/png;base64," + imageData};
          $scope.avatarStyle={'background-image':'url("'+imageData+'")'};
          $scope.dirty = true;
          $scope.avatarClass = {};
        })
        .catch(UIUtils.onError('ERROR.TAKE_PICTURE_FAILED'));
    }
    else {
      return ModalUtils.show('plugins/es/templates/common/modal_edit_avatar.html','ESAvatarModalCtrl',
        {})
        .then(function(imageData) {
          if (!imageData) return;
          $scope.avatar = {src: imageData};
          $scope.avatarStyle={'background-image':'url("'+imageData+'")'};
          $scope.dirty = true;
          $scope.avatarClass = {};
        });
    }
  };

  $scope.showRecordTypeModal = function() {
    ModalUtils.show('plugins/es/templates/registry/modal_record_type.html')
    .then(function(type){
      if (type) {
        $scope.formData.type = type;
        if (!$scope.avatar) {
          $scope.avatarClass['cion-page-' + type] = true;
        }
        $scope.doSearch();
        $scope.updateLocationHref();
      }
    });
  };

  $scope.showCategoryModal = function(parameters) {
    // load categories
    esRegistry.category.all()
    .then(function(categories){
      // open modal
      return ModalUtils.show('plugins/es/templates/common/modal_category.html', 'ESCategoryModalCtrl as ctrl',
             {categories: categories}, {focusFirstInput: true});
    })
    .then(function(cat){
      if (cat && cat.parent) {
        $scope.formData.category = cat;
        $scope.doSearch();
        $scope.updateLocationHref();
      }
    });
  };
}


ESViewEditProfileController.$inject = ['$scope', '$q', '$timeout', '$state', '$focus', '$translate', '$controller', '$ionicHistory', '$ionicPopover', 'UIUtils', 'csWallet', 'esHttp', 'esProfile', 'ModalUtils', 'Device'];angular.module('cesium.es.profile.controllers', ['cesium.es.services'])

  .config(['$stateProvider', function($stateProvider) {

    $stateProvider
      .state('app.edit_profile', {
        url: "/wallet/profile/edit",
        views: {
          'menuContent': {
            templateUrl: "plugins/es/templates/user/edit_profile.html",
            controller: 'ESViewEditProfileCtrl'
          }
        },
        cache: false,
        data: {
          auth: true
        }
      })

      .state('app.edit_profile_by_id', {
        url: "/wallets/:id/profile/edit",
        views: {
          'menuContent': {
            templateUrl: "plugins/es/templates/user/edit_profile.html",
            controller: 'ESViewEditProfileCtrl'
          }
        },
        cache: false,
        data: {
          login: true
        }
      });

  }])

 .controller('ESViewEditProfileCtrl', ESViewEditProfileController)


;

function ESViewEditProfileController($scope, $q, $timeout, $state, $focus, $translate, $controller,
                                     $ionicHistory, $ionicPopover,
                                     UIUtils, csWallet, esHttp, esProfile, ModalUtils, Device) {
  'ngInject';

  // Initialize the super class and extend it.
  angular.extend(this, $controller('ESPositionEditCtrl', {$scope: $scope}));

  $scope.formData = {
    title: null,
    description: null,
    socials: [],
    geoPoint: null
  };
  $scope.loading = true;
  $scope.dirty = false;
  $scope.walletData = null;
  $scope.avatar = null;
  $scope.existing = false;
  $scope.socialData = {
    url: null
  };
  $scope.socialReorder = true;

  var wallet;

  $scope.enter = function(e, state) {

    wallet = (state.stateParams && state.stateParams.id) ? csWallet.children.get(state.stateParams.id) : csWallet;
    if (!wallet) {
      UIUtils.alert.error('ERROR.UNKNOWN_WALLET_ID');
      return $scope.showHome();
    }

    return wallet.auth({
        minData: true
      })
      .then($scope.load)
      .catch(function(err){
        if (err == 'CANCELLED') {
          UIUtils.loading.hide(10);
          $scope.cancel();
          return;
        }
        UIUtils.onError('PROFILE.ERROR.LOAD_PROFILE_FAILED')(err);
      });
  };
  $scope.$on('$ionicView.enter', $scope.enter);

  $scope.$on('$stateChangeStart', function (event, next, nextParams, fromState) {
    if ($scope.dirty && !$scope.saving) {

      // stop the change state action
      event.preventDefault();

      if (!$scope.loading) {
        $scope.loading = true;
        return UIUtils.alert.confirm('CONFIRM.SAVE_BEFORE_LEAVE',
          'CONFIRM.SAVE_BEFORE_LEAVE_TITLE', {
            cancelText: 'COMMON.BTN_NO',
            okText: 'COMMON.BTN_YES_SAVE'
          })
          .then(function(confirmSave) {
            $scope.loading = false;
            if (confirmSave) {
              $scope.form.$submitted=true;
              return $scope.save(false/*silent*/, true/*haswait debounce*/)
                .then(function(saved){
                  if (saved) {
                    $scope.dirty = false;
                  }
                  return saved; // change state only if not error
                });
            }
            else {
              $scope.dirty = false;
              return true; // ok, change state
            }
          })
          .then(function(confirmGo) {
            if (confirmGo) {
              // continue to the order state
              $ionicHistory.nextViewOptions({
                historyRoot: true
              });
              $state.go(next.name, nextParams);
            }
          })
          .catch(function(err) {
            // Silent
          });
      }
    }
  });

  $scope.load = function(walletData) {
    $scope.loading = true; // to avoid the call of doSave()
    return esProfile.get(walletData.pubkey, {
        raw: true
      })
      .then(function(profile) {
        if (profile) {
          $scope.avatar = esHttp.image.fromAttachment(profile.source.avatar);
          $scope.existing = true;
          $scope.updateView(walletData, profile.source);
        }
        else {
          $scope.avatar = undefined;
          $scope.existing = false;
          $scope.updateView(walletData, {});
        }

        UIUtils.loading.hide();

        // Update loading - done with a delay, to avoid trigger onFormDataChanged()
        return $timeout(function() {
          $scope.loading = false;
        }, 1000);
      })
      .then(function() {
        // removeIf(device)
        $focus('profile-name');
        // endRemoveIf(device)
      })
      .catch(UIUtils.onError('PROFILE.ERROR.LOAD_PROFILE_FAILED'));
  };

  $scope.setForm = function(form) {
    $scope.form = form;
  };

  $scope.updateView = function(walletData, profile) {
    $scope.walletData = walletData;
    $scope.formData = profile;
    if (profile.avatar) {
      $scope.avatarStyle={'background-image':'url("'+$scope.avatar.src+'")'};
    }
    $scope.motion.show();
  };

  $scope.onFormDataChanged = function() {
    if ($scope.loading) return;
    $scope.dirty = true;
  };
  $scope.$watch('formData', $scope.onFormDataChanged, true);

  $scope.save = function(silent, hasWaitDebounce) {
    if($scope.form.$invalid || !$scope.walletData || ($scope.saving && !hasWaitDebounce)) {
      return $q.reject();
    }

    if (!hasWaitDebounce) {
      $scope.saving = true;
      return $timeout(function() {
        return $scope.save(silent, true);
      }, 650);
    }

    console.debug('[ES] [profile] Saving user profile...');

    // removeIf(no-device)
    if (!silent) {
      UIUtils.loading.show();
    }
    // endRemoveIf(no-device)

    var onError = function(message) {
      return function(err) {
        $scope.saving = false;
        UIUtils.onError(message)(err);
      };
    };

    var updateWallet = function(formData) {
      if (formData) {
        $scope.walletData.name = formData.title;
        if ($scope.avatar) {
          $scope.walletData.avatar = $scope.avatar;
        }
        else {
          delete $scope.walletData.avatar;
        }

        $scope.walletData.profile = angular.copy(formData);
        $scope.walletData.profile.description = esHttp.util.parseAsHtml(formData.description);
      }
    };

    var showSuccessToast = function() {
      if (!silent) {
        // removeIf(no-device)
        UIUtils.loading.hide();
        // endRemoveIf(no-device)

        return $translate('PROFILE.INFO.PROFILE_SAVED')
          .then(function(message){
            UIUtils.toast.show(message);
          });
      }
    };

    var doFinishSave = function(formData) {
      // Social url must be unique in socials links - Fix #306:
      if (formData.socials && formData.socials.length) {
        formData.socials = _.uniq(formData.socials, false, function(social) {
          return social.url;
        });
      }

      // Workaround for old data
      if (formData.position) {
        formData.position = null;
      }

      // Make sure to convert lat/lon to float
      if (formData.geoPoint && formData.geoPoint.lat && formData.geoPoint.lon) {
        formData.geoPoint.lat =  parseFloat(formData.geoPoint.lat);
        formData.geoPoint.lon =  parseFloat(formData.geoPoint.lon);
      }
      else{
        formData.geoPoint = null; // force to null, need by ES update request
      }

      if (!$scope.existing) {
        return esProfile.add(formData, {wallet: wallet})
          .then(function() {
            console.info("[ES] [profile] Successfully created.");
            $scope.existing = true;
            $scope.saving = false;
            $scope.dirty = false;
            updateWallet(formData);
            showSuccessToast();
            return true;
          })
          .catch(onError('PROFILE.ERROR.SAVE_PROFILE_FAILED'));
      }
      else {
        return esProfile.update(formData, {id: $scope.walletData.pubkey, wallet: wallet})
          .then(function() {
            console.info("[ES] Profile successfully updated.");
            $scope.saving = false;
            $scope.dirty = false;
            updateWallet(formData);
            showSuccessToast();
            return true;
          })
          .catch(onError('PROFILE.ERROR.SAVE_PROFILE_FAILED'));
      }
    }; // end of doFinishSave

    if ($scope.avatar && $scope.avatar.src) {
      return UIUtils.image.resizeSrc($scope.avatar.src, true) // resize to thumbnail
        .then(function(imageSrc) {
          $scope.formData.avatar = esHttp.image.toAttachment({src: imageSrc});
          return doFinishSave($scope.formData);
        });
    }
    else {
      delete $scope.formData.avatar;
      return doFinishSave($scope.formData);
    }
  };

  $scope.saveAndClose = function() {
    return $scope.save()
      .then(function(saved) {
        if (saved) $scope.close();
      });
  };

  $scope.submitAndSaveAndClose = function() {
    $scope.form.$submitted=true;
    $scope.saveAndClose();
  };

  $scope.cancel = function() {
    $scope.dirty = false; // force not saved
    if (wallet.isDefault()) {
      $ionicHistory.nextViewOptions({
        historyRoot: true
      });
      return $state.go('app.view_wallet');
    }
    else {
      return $state.go('app.view_wallet_by_id', {id: wallet.id});
    }
  };

  $scope.close = function() {
    if (wallet.isDefault()) {
      $ionicHistory.nextViewOptions({
        historyRoot: true
      });
      return $state.go('app.view_wallet', {refresh: true});
    }
    else {
      return $state.go('app.view_wallet_by_id', {refresh: true, id: wallet.id});
    }
  };

  $scope.showAvatarModal = function() {
    if (Device.camera.enable) {
      return Device.camera.getPicture()
        .then(function(imageData) {
          if (!imageData) return;
          $scope.avatar = {src: "data:image/png;base64," + imageData};
          $scope.avatarStyle={'background-image':'url("'+imageData+'")'};
          $scope.dirty = true;
        })
        .catch(UIUtils.onError('ERROR.TAKE_PICTURE_FAILED'));
    }
    else {
      return ModalUtils.show('plugins/es/templates/common/modal_edit_avatar.html','ESAvatarModalCtrl',
        {})
        .then(function(imageData) {
          if (!imageData) return;
          $scope.avatar = {src: imageData};
          $scope.avatarStyle={'background-image':'url("'+imageData+'")'};
          $scope.dirty = true;
        });
    }
  };

  $scope.rotateAvatar = function(){
    if (!$scope.avatar || !$scope.avatar.src || $scope.rotating) return;

    $scope.rotating = true;

    return UIUtils.image.rotateSrc($scope.avatar.src)
      .then(function(imageData){
        $scope.avatar.src = imageData;
        $scope.avatarStyle={'background-image':'url("'+imageData+'")'};
        $scope.dirty = true;
        $scope.rotating = false;
      })
      .catch(function(err) {
        console.error(err);
        $scope.rotating = false;
      });
  };

  $scope.removeProfile = function(){
    // Hide popover if need
    $scope.hideActionsPopover();

    return $scope.existing && wallet.auth({minData: true})
        .then(function(walletData) {

          UIUtils.loading.hide();
          UIUtils.alert.confirm('PROFILE.CONFIRM.DELETE', undefined, {okText: 'COMMON.BTN_DELETE'})
            .then(function(confirm) {
              if (confirm){

                console.debug('[ES] [profile] Deleting user profile...');
                // removeIf(no-device)
                UIUtils.loading.show();
                // endRemoveIf(no-device)
                return esProfile.remove(walletData.pubkey, {
                    wallet: wallet
                  })
                  .then(function () {
                    if (wallet.isDefault()) {
                      walletData.name=null; // keep local name, on children wallets
                    }
                    walletData.profile = null;
                    walletData.avatar = null;
                    console.debug('[ES] [profile] Successfully deleted');
                    $scope.dirty = false;
                    return $scope.close();
                  })
                  .then(function() {
                    return $timeout(function() {
                      UIUtils.toast.show('PROFILE.INFO.PROFILE_REMOVED');
                    }, 750);
                  })
                  .catch(UIUtils.onError('PROFILE.ERROR.REMOVE_PROFILE_FAILED'));
              }
            });
        });
  };

  /* -- Popover -- */

  $scope.showActionsPopover = function(event) {
    if (!$scope.actionsPopover) {
      $ionicPopover.fromTemplateUrl('plugins/es/templates/user/edit_popover_actions.html', {
        scope: $scope
      }).then(function(popover) {
        $scope.actionsPopover = popover;
        //Cleanup the popover when we're done with it!
        $scope.$on('$destroy', function() {
          $scope.actionsPopover.remove();
        });
        $scope.actionsPopover.show(event);
      });
    }
    else {
      $scope.actionsPopover.show(event);
    }
  };

  $scope.hideActionsPopover = function() {
    if ($scope.actionsPopover) {
      $scope.actionsPopover.hide();
    }
  };
}




ESMessageAbstractListController.$inject = ['$scope', '$state', '$translate', '$ionicHistory', '$ionicPopover', '$timeout', 'csWallet', 'esModals', 'UIUtils', 'esMessage'];
ESMessageInboxListController.$inject = ['$scope', '$controller'];
ESMessageOutboxListController.$inject = ['$scope', '$controller'];
ESMessageComposeController.$inject = ['$scope', '$controller'];
ESMessageComposeModalController.$inject = ['$scope', 'Modals', 'UIUtils', 'csWallet', 'esHttp', 'esMessage', 'parameters'];
ESMessageViewController.$inject = ['$scope', '$state', '$timeout', '$translate', '$ionicHistory', '$ionicPopover', 'UIUtils', 'esModals', 'esMessage'];
PopoverMessageController.$inject = ['$scope', 'UIUtils', '$state', 'csWallet', 'esHttp', 'esMessage', 'esModals'];angular.module('cesium.es.message.controllers', ['cesium.es.services'])

  .config(['$stateProvider', function($stateProvider) {
    'ngInject';

    $stateProvider

      .state('app.user_message', {
        url: "/user/message",
        views: {
          'menuContent': {
            templateUrl: "plugins/es/templates/message/lookup.html"
          }
        }
      })

      .state('app.user_message.tab_inbox', {
        url: "/inbox",
        views: {
          'tab_inbox': {
            controller: 'ESMessageInboxListCtrl',
            templateUrl: "plugins/es/templates/message/tabs/tab_list.html"
          }
        },
        data: {
          auth: true,
          minData: true,
          large: 'app.user_messages_lg_inbox'
        }
      })

      .state('app.user_message.tab_outbox', {
        url: "/outbox",
        views: {
          'tab_outbox': {
            controller: 'ESMessageOutboxListCtrl',
            templateUrl: "plugins/es/templates/message/tabs/tab_list.html"
          }
        },
        data: {
          auth: true,
          minData: true,
          large: 'app.user_messages_lg_outbox'
        }
      })

      .state('app.user_messages_lg_inbox', {
        url: "/user/message/lg/inbox",
        views: {
          'menuContent': {
            templateUrl: "plugins/es/templates/message/lookup_lg.html",
            controller: 'ESMessageInboxListCtrl'
          }
        },
        data: {
          auth: true,
          minData: true
        }
      })

      .state('app.user_messages_lg_outbox', {
        url: "/user/message/lg/outbox",
        views: {
          'menuContent': {
            templateUrl: "plugins/es/templates/message/lookup_lg.html",
            controller: 'ESMessageOutboxListCtrl'
          }
        },
        data: {
          auth: true,
          minData: true
        }
      })

      .state('app.user_new_message', {
        cache: false,
        url: "/user/message/new?pubkey&uid&title&content",
        views: {
          'menuContent': {
            templateUrl: "plugins/es/templates/message/compose.html",
            controller: 'ESMessageComposeCtrl'
          }
        }
      })

      .state('app.user_view_message', {
        cache: false,
        url: "/user/message/view/:type/:id",
        views: {
          'menuContent': {
            templateUrl: "plugins/es/templates/message/view_message.html",
            controller: 'ESMessageViewCtrl'
          }
        },
        data: {
          auth: true,
          minData: true
        }
      })

    ;
  }])

  .controller('ESMessageAbstractListCtrl', ESMessageAbstractListController)

  .controller('ESMessageInboxListCtrl', ESMessageInboxListController)

  .controller('ESMessageOutboxListCtrl', ESMessageOutboxListController)

  .controller('ESMessageComposeCtrl', ESMessageComposeController)

  .controller('ESMessageComposeModalCtrl', ESMessageComposeModalController)

  .controller('ESMessageViewCtrl', ESMessageViewController)

  .controller('PopoverMessageCtrl', PopoverMessageController)

;

function ESMessageAbstractListController($scope, $state, $translate, $ionicHistory, $ionicPopover, $timeout,
                                 csWallet, esModals, UIUtils, esMessage) {
  'ngInject';

  var defaultSearchLimit = 40;

  $scope.search = {
    loading: true,
    results: [],
    hasMore : false,
    loadingMore : false,
    limit: defaultSearchLimit,
    type: 'last',
    text: null,
    options: {
    }
  };

  $scope.fabButtonNewMessageId = undefined;

  $scope.$on('$ionicView.enter', function(e, state) {

    $scope.loadWallet({minData: true})
      .then(function() {
        if (!$scope.entered) {
          $scope.entered = true;
          $scope.type = $scope.type || state.stateParams && state.stateParams.type || 'inbox';
          $scope.load();
        }

        if ($scope.fabButtonNewMessageId) {
          $scope.showFab($scope.fabButtonNewMessageId);
        }
      })
      .catch(function(err) {
        if ('CANCELLED' === err) {
          $ionicHistory.nextViewOptions({
            historyRoot: true
          });
          $state.go('app.home');
        }
    });
  });

  $scope.refresh = function(silent) {
    return $scope.load(undefined, undefined, silent);
  };

  $scope.load = function(from, size, silent) {

    var options = angular.copy($scope.search.options);
    options.from = options.from || from || 0;
    options.size = options.size || size || defaultSearchLimit;
    options.type = $scope.type;
    options.summary = false;
    options.filter = ($scope.search.type == 'text' && $scope.search.text && $scope.search.text.trim().length > 0) ?
      $scope.search.text : undefined;

    $scope.search.loading = !silent;
    return esMessage.load(options)
      .then(function(res) {

        if (!options.from) {
          $scope.search.results = res || [];
        }
        else if (res){
          $scope.search.results = $scope.search.results.concat(res);
        }

        UIUtils.loading.hide();
        $scope.search.loading = false;
        $scope.search.hasMore = ($scope.search.results && $scope.search.results.length >= $scope.search.limit);
        $scope.updateView();
      })
      .catch(function(err) {
        $scope.search.loading = false;
        if (!options.from) {
          $scope.search.results = [];
        }
        $scope.search.hasMore = false;
        UIUtils.onError('MESSAGE.ERROR.LOAD_MESSAGES_FAILED')(err);
      });
  };

  $scope.setType = function(type) {
    $scope.type = type;
    $scope.load();
  };

  $scope.updateView = function() {
    if ($scope.motion && $scope.motion.ionListClass && $scope.search.results.length) {
      $scope.motion.show({selector: '.view-messages .list .item'});
    }
  };

  $scope.showMore = function() {
    $scope.search.limit = $scope.search.limit || defaultSearchLimit;
    $scope.search.limit += defaultSearchLimit;
    if ($scope.search.limit < defaultSearchLimit) {
      $scope.search.limit = defaultSearchLimit;
    }
    $scope.search.loadingMore = true;
    $scope.load(
      $scope.search.results.length, // from
      $scope.search.limit,
      true /*silent*/)
      .then(function() {
        $scope.search.loadingMore = false;
        $scope.$broadcast('scroll.infiniteScrollComplete');
      });
  };

  $scope.markAllAsRead = function() {
    $scope.hideActionsPopover();
    if (!$scope.search.results || !$scope.search.results.length) return;

    UIUtils.alert.confirm('MESSAGE.CONFIRM.MARK_ALL_AS_READ')
      .then(function(confirm) {
        if (confirm) {
          esMessage.markAllAsRead()
            .then(function () {
              _.forEach($scope.search.results, function(msg){
                msg.read = true;
              });
            })
            .catch(UIUtils.onError('MESSAGE.ERROR.MARK_ALL_AS_READ_FAILED'));
        }
      });
  };

  $scope.delete = function(index) {
    var message = $scope.search.results[index];
    if (!message) return;

    UIUtils.alert.confirm('MESSAGE.CONFIRM.REMOVE')
      .then(function(confirm) {
        if (confirm) {
          esMessage.remove(message.id, $scope.type)
            .then(function () {
              $scope.search.results.splice(index,1); // remove from messages array
              UIUtils.toast.show('MESSAGE.INFO.MESSAGE_REMOVED');
            })
            .catch(UIUtils.onError('MESSAGE.ERROR.REMOVE_MESSAGE_FAILED'));
        }
      });
  };

  $scope.deleteAll = function() {
    $scope.hideActionsPopover();
    if (!$scope.search.results || !$scope.search.results.length) return;

    UIUtils.alert.confirm('MESSAGE.CONFIRM.REMOVE_ALL')
      .then(function(confirm) {
        if (confirm) {
          esMessage.removeAll($scope.type)
            .then(function () {
              $scope.search.results.splice(0,$scope.search.results.length); // reset array
              UIUtils.toast.show('MESSAGE.INFO.All_MESSAGE_REMOVED');
            })
            .catch(UIUtils.onError('MESSAGE.ERROR.REMOVE_All_MESSAGES_FAILED'));
        }
      });
  };

  $scope.doSearchLast = function() {
    $scope.search.type='last';
    $scope.search.loadingMore=false;
    $scope.search.limit = defaultSearchLimit;
    return $scope.load();
  };

  $scope.doSearch = function() {
    if (!$scope.search.text || $scope.search.text.length < 3) {
      return;
    }
    $scope.search.type='text';
    $scope.search.loadingMore=false;
    $scope.search.results = [];
    $scope.search.limit = defaultSearchLimit;

    console.debug('[message] [{0}] Searching for: {1}'.format($scope.type, $scope.search.text));
    return $scope.load();
  };

  /* -- Modals -- */

  $scope.showNewMessageModal = function(parameters) {
    return $scope.loadWallet({minData: true})
      .then(function() {
        UIUtils.loading.hide();
        return esModals.showMessageCompose(parameters)
          .then(function(id) {
            if (id) UIUtils.toast.show('MESSAGE.INFO.MESSAGE_SENT');
          });
      });
  };

  $scope.showReplyModal = function(index) {
    var message = $scope.search.results[index];
    if (!message) return;

    $translate('MESSAGE.REPLY_TITLE_PREFIX')
      .then(function (prefix) {
        var content = message.content ? message.content.replace(/^/g, ' > ') : null;
        content = content ? content.replace(/\n/g, '\n > ') : null;
        content = content ? content +'\n' : null;
        return esModals.showMessageCompose({
          destPub: message.issuer,
          destUid: message.name||message.uid,
          title: prefix + message.title,
          content: content,
          isReply: true
        });
      })
      .then(function(sent) {
        if (sent) UIUtils.toast.show('MESSAGE.INFO.MESSAGE_SENT');
      });
  };

  /* -- Popover -- */

  $scope.showActionsPopover = function(event) {
    if (!$scope.actionsPopover) {
      $ionicPopover.fromTemplateUrl('plugins/es/templates/message/lookup_popover_actions.html', {
        scope: $scope
      }).then(function(popover) {
        $scope.actionsPopover = popover;
        //Cleanup the popover when we're done with it!
        $scope.$on('$destroy', function() {
          $scope.actionsPopover.remove();
        });
        $scope.actionsPopover.show(event);
      });
    }
    else {
      $scope.actionsPopover.show(event);
    }
  };

  $scope.hideActionsPopover = function() {
    if ($scope.actionsPopover) {
      $scope.actionsPopover.hide();
    }
  };

  /* -- watch events (delete, received, sent) -- */

  // Message deletion
  $scope.onMessageDelete = function(id) {
    var index = _.findIndex($scope.search.results, function(msg) {
      return msg.id == id;
    });
    if (index) {
      $scope.search.results.splice(index,1); // remove from messages array
    }
  };
  esMessage.api.data.on.delete($scope, $scope.onMessageDelete);

  // Watch user sent message
  $scope.onNewOutboxMessage = function(id) {
    if ($scope.type != 'outbox') return;
    // Add message sent to list
    $scope.loading = true;
    return $timeout(function() {
       // Load the message sent
        return esMessage.get(id, {type: $scope.type, summary: true});
      }, 500 /*waiting ES propagation*/)
      .then(function(msg) {
        $scope.search.results.splice(0,0,msg);
        $scope.loading = false;
        $scope.motion.show({selector: '.view-messages .list .item'});
      })
      .catch(function() {
        $scope.loading = false;
      });
  };
  esMessage.api.data.on.sent($scope, $scope.onNewOutboxMessage);

  // Watch received message
  $scope.onNewInboxMessage = function(notification) {
    if ($scope.type != 'inbox' || !$scope.entered) return;
    // Add message sent to list
    $scope.loading = true;
    // Load the the message
    return esMessage.get(notification.id, {type: $scope.type, summary: true})
      .then(function(msg) {
        $scope.search.results.splice(0,0,msg);
        $scope.search.loading = false;
        $scope.motion.show({selector: '.view-messages .list .item'});
      })
      .catch(function() {
        $scope.search.loading = false;
      });
  };
  esMessage.api.data.on.new($scope, $scope.onNewInboxMessage);

  // Watch unauth
  $scope.onUnauth = function() {
    // Reset all data
    $scope.search.results = undefined;
    $scope.search.loading = false;
    $scope.entered = false;
  };
  csWallet.api.data.on.unauth($scope, $scope.onUnauth);

  // for DEV only
  /*$timeout(function() {
    $scope.showNewMessageModal();
   }, 900);
   */
}

function ESMessageInboxListController($scope, $controller) {
  'ngInject';

  // Initialize the super class and extend it.
  angular.extend(this, $controller('ESMessageAbstractListCtrl', {$scope: $scope}));

  $scope.type = 'inbox';
  $scope.fabButtonNewMessageId = 'fab-add-message-record-inbox';

}


function ESMessageOutboxListController($scope, $controller) {
  'ngInject';

  // Initialize the super class and extend it.
  angular.extend(this, $controller('ESMessageAbstractListCtrl', {$scope: $scope}));

  $scope.type = 'outbox';
  $scope.fabButtonNewMessageId = 'fab-add-message-record-outbox';
}

function ESMessageComposeController($scope, $controller) {
  'ngInject';

  // Initialize the super class and extend it.
  angular.extend(this, $controller('ESMessageComposeModalCtrl', {$scope: $scope, parameters: {}}));


  $scope.enter = function(e, state) {

    // Apply state parameters
    if (state && state.stateParams) {
      $scope.setParameters(state.stateParams);
    }

    // Load wallet
    return $scope.load()
      .then(UIUtils.loading.hide);
  };
  $scope.$on('$ionicView.enter',$scope.enter);

  $scope.cancel = function() {
    $scope.showHome();
  };

  $scope.setForm = function(form) {
    $scope.form = form;
  };

  $scope.closeModal = function() {
    $scope.showHome();
  };

}

function ESMessageComposeModalController($scope, Modals, UIUtils, csWallet, esHttp, esMessage, parameters) {
  'ngInject';

  var wallet;

  $scope.formData = {
    title: null,
    content: null,
    destPub: null,
    walletId: null
  };
  $scope.destUid = null;
  $scope.destPub = null;
  $scope.isResponse = false;
  $scope.enableSelectWallet = true;

  $scope.setParameters = function(parameters) {
    if (!parameters) return;

    if (parameters.pubkey || parameters.destPub) {
      $scope.formData.destPub = parameters.pubkey || parameters.destPub;
      if (parameters.uid || parameters.destUid) {
        $scope.destUid = parameters.uid || parameters.destUid;
        $scope.destPub = '';
      }
      else {
        $scope.destUid = '';
        $scope.destPub = $scope.formData.destPub;
      }
    }

    if (parameters.title) {
      $scope.formData.title = parameters.title;
    }

    if (parameters.content) {
      $scope.formData.content = parameters.content;
    }

    $scope.isResponse = parameters.isResponse || false;

    if (parameters.wallet) {
      $scope.formData.walletId = parameters.wallet;
    }
  };

  // Read default parameters
  $scope.setParameters(parameters);

  $scope.load = function() {
    $scope.enableSelectWallet = csWallet.children.count() > 0;

    wallet = $scope.enableSelectWallet && ($scope.formData.walletId ? csWallet.children.get($scope.formData.walletId) : csWallet) || csWallet;
    if (!wallet.isDefault()) {
      console.debug("[message] Using {" + wallet.id + "} wallet");
    }

    return wallet.login({minData: true, silent: true})
      .then(function(data) {
        $scope.walletData = data;
      })
      .catch(function(err){
        if (err === 'CANCELLED') {
          $scope.cancel();
        }
      });
  };
  $scope.$on('modal.shown', $scope.load);

  $scope.doSend = function(forceNoContent) {
    $scope.form.$submitted=true;
    if(!$scope.form.$valid) {
      return;
    }

    // Ask user confirmation if no content
    if (!forceNoContent && (!$scope.formData.content || !$scope.formData.content.trim().length)) {
      return UIUtils.alert.confirm('MESSAGE.COMPOSE.CONTENT_CONFIRMATION')
        .then(function(confirm) {
          if (confirm) {
            $scope.doSend(true);
          }
        });
    }

    UIUtils.loading.show();
    var data = {
      issuer: wallet.data.pubkey,
      recipient: $scope.formData.destPub,
      title: $scope.formData.title,
      content: $scope.formData.content,
      time: esHttp.date.now()
    };

    esMessage.send(data, {wallet: wallet})
      .then(function(id) {
        $scope.id=id;
        UIUtils.loading.hide();
        $scope.closeModal(id);
      })
      .catch(UIUtils.onError('MESSAGE.ERROR.SEND_MSG_FAILED'));
  };


  $scope.cancel = function() {
    $scope.closeModal();
  };

  /* -- Modals -- */

  $scope.showWotLookupModal = function() {
    Modals.showWotLookup()
      .then(function(result){
        if (result) {
          if (result.uid) {
            $scope.destUid = result.uid;
            $scope.destPub = '';
          }
          else {
            $scope.destUid = '';
            $scope.destPub = result.pubkey;
          }
          $scope.formData.destPub = result.pubkey;
          // TODO focus on title field
          //$focus('');
        }
      });
  };

  $scope.showSelectWalletModal = function() {
    if (!$scope.enableSelectWallet) return;

    return Modals.showSelectWallet({
      showDefault: true,
      showBalance: false
    })
      .then(function(newWallet) {
        if (!newWallet || (wallet && wallet.id === newWallet.id)) return;
        wallet = newWallet;
        $scope.walletData = wallet.data;
        console.debug("[message] Using {" + wallet.id + "} wallet");
      });
  };



  // TODO : for DEV only
  /*$timeout(function() {
    $scope.formData.destPub = 'G2CBgZBPLe6FSFUgpx2Jf1Aqsgta6iib3vmDRA1yLiqU';
    $scope.formData.title = 'test';
    $scope.formData.content = 'test';
    $scope.destPub = $scope.formData.destPub;

    $timeout(function() {
      //$scope.doSend();
    }, 800);
  }, 100);
  */
}


function ESMessageViewController($scope, $state, $timeout, $translate, $ionicHistory, $ionicPopover,
                                 UIUtils, esModals, esMessage) {
  'ngInject';

  $scope.formData = {};
  $scope.id = null;
  $scope.loading = true;

  $scope.$on('$ionicView.beforeEnter', function (event, viewData) {
    // Enable back button (workaround need for navigation outside tabs - https://stackoverflow.com/a/35064602)
    viewData.enableBack = UIUtils.screen.isSmall() ? true : viewData.enableBack;
  });

  $scope.$on('$ionicView.enter', function (e, state) {
    if (state.stateParams && state.stateParams.id) { // Load by id
      if ($scope.loading) { // prevent reload if same id
        $scope.type = state.stateParams.type || 'inbox';

        $scope.load(state.stateParams.id, $scope.type)
          .then(function(message) {
            $scope.loading = false;
            UIUtils.loading.hide();
            if (!message) return;

            $scope.id = message.id;
            $scope.formData = message;
            $scope.canDelete = true;
            $scope.motion.show({selector: '.view-message .list .item'});
            // Mark as read
            if (!message.read) {
              $timeout(function() {
                // Message has NOT changed
                if ($scope.id === message.id) {
                  esMessage.markAsRead(message, $scope.type)
                    .then(function() {
                      console.debug("[message] marked as read");
                    })
                    .catch(UIUtils.onError('MESSAGE.ERROR.MARK_AS_READ_FAILED'));
                }
              }, 2000); // 2s
            }
          });
      }

      $scope.showFab('fab-view-message-reply');
    }
    else {
      $state.go('app.user_message');
    }
  });

  $scope.load = function(id, type) {
    type = type || 'inbox';

    return $scope.loadWallet({minData: true})
      .then(function() {
        return esMessage.get(id, {type: type});
      })
      .catch(UIUtils.onError('MESSAGE.ERROR.LOAD_MESSAGE_FAILED'))
      .then(function(message) {
        if (!message.valid) {
          return UIUtils.alert.error(!$scope.isUserPubkey(message.recipient) ? 'MESSAGE.ERROR.USER_NOT_RECIPIENT' : 'MESSAGE.ERROR.NOT_AUTHENTICATED_MESSAGE',
            'MESSAGE.ERROR.MESSAGE_NOT_READABLE')
            .then(function () {
              $state.go('app.user_message', {type: type});
            });
        }
        return message;
      });
  };

  $scope.delete = function() {
    if ($scope.actionsPopover) {
      $scope.actionsPopover.hide();
    }

    UIUtils.alert.confirm('MESSAGE.CONFIRM.REMOVE')
      .then(function(confirm) {
        if (confirm) {
          return esMessage.remove($scope.id, $scope.type)
            .then(function () {
              $ionicHistory.nextViewOptions({
                historyRoot: true
              });
              $state.go($scope.type == 'inbox' ? 'app.user_message.tab_inbox' : 'app.user_message.tab_outbox',
                {type: $scope.type}
              );
              UIUtils.toast.show('MESSAGE.INFO.MESSAGE_REMOVED');
            })
            .catch(UIUtils.onError('MESSAGE.ERROR.REMOVE_MESSAGE_FAILED'));
        }
      });
  };

  /* -- Popover -- */

  $scope.showActionsPopover = function(event) {
    if (!$scope.actionsPopover) {
      $ionicPopover.fromTemplateUrl('plugins/es/templates/message/view_popover_actions.html', {
        scope: $scope
      }).then(function(popover) {
        $scope.actionsPopover = popover;
        //Cleanup the popover when we're done with it!
        $scope.$on('$destroy', function() {
          $scope.actionsPopover.remove();
        });
        $scope.actionsPopover.show(event);
      });
    }
    else {
      $scope.actionsPopover.show(event);
    }
  };

  $scope.hideActionsPopover = function() {
    if ($scope.actionsPopover) {
      $scope.actionsPopover.hide();
    }
  };

  /* -- Modals -- */

  $scope.showReplyModal = function() {
    var recipientField = ($scope.type == 'inbox') ? 'issuer' : 'recipient';
    $translate('MESSAGE.REPLY_TITLE_PREFIX')
      .then(function (prefix) {
        var content = $scope.formData.content ? $scope.formData.content.replace(/^/g, ' > ') : null;
        content = content ? content.replace(/\n/g, '\n > ') : null;
        content = content ? content +'\n' : null;
        return esModals.showMessageCompose({
            destPub: $scope.formData[recipientField],
            destUid: $scope.formData.name||$scope.formData.uid,
            title: prefix + $scope.formData.title,
            content: content,
            isReply: true
          });
      })
      .then(function(sent) {
        if (sent) {
          UIUtils.toast.show('MESSAGE.INFO.MESSAGE_SENT')
            .then(function() {
              $ionicHistory.goBack();
            });
        }
      })
    ;
  };
}

function PopoverMessageController($scope, UIUtils, $state, csWallet, esHttp, esMessage, esModals) {
  'ngInject';

  var defaultSearchLimit = 40;

  $scope.search = {
    loading : true,
    results: null,
    hasMore : false,
    loadingMore : false,
    limit: defaultSearchLimit
  };

  $scope.$on('popover.shown', function() {
    if ($scope.search.loading) {
      $scope.load();
    }
  });

  $scope.load = function(from, size) {
    var options = {};
    options.from = from || 0;
    options.size = size || defaultSearchLimit;
    return esMessage.notifications.load(options)
      .then(function(notifications) {
        if (!from) {
          $scope.search.results = notifications;
        }
        else {
          $scope.search.results = $scope.search.results.concat(notifications);
        }
        $scope.search.loading = false;
        $scope.search.hasMore = ($scope.search.results && $scope.search.results.length >= $scope.search.limit);
        $scope.updateView();
      })
      .catch(function(err) {
        $scope.search.loading = false;
        if (!from) {
          $scope.search.results = [];
        }
        $scope.search.hasMore = false;
        UIUtils.onError('MESSAGE.ERROR.LOAD_NOTIFICATIONS_FAILED')(err);
      });
  };

  $scope.updateView = function() {
    if ($scope.motion && $scope.search.results && $scope.search.results.length) {
      $scope.motion.show({selector: '.popover-notification .item'});
    }
  };

  $scope.showMore = function() {
    $scope.search.limit = $scope.search.limit || defaultSearchLimit;
    $scope.search.limit = $scope.search.limit * 2;
    if ($scope.search.limit < defaultSearchLimit) {
      $scope.search.limit = defaultSearchLimit;
    }
    $scope.search.loadingMore = true;
    $scope.load(
      $scope.search.results.length, // from
      $scope.search.limit)
      .then(function() {
        $scope.search.loadingMore = false;
        $scope.$broadcast('scroll.infiniteScrollComplete');
      });
  };

  // Listen notifications changes
  $scope.onNewMessageNotification = function(notification) {
    if ($scope.search.loading || $scope.search.loadingMore) return;
    $scope.search.results.splice(0,0,notification);
    $scope.updateView();
  };

  $scope.select = function(notification) {
    if (!notification.read) notification.read = true;
    $state.go('app.user_view_message', {id: notification.id});
    $scope.closePopover(notification);
  };

  $scope.resetData = function() {
    if ($scope.search.loading) return;
    console.debug("[ES] [messages] Resetting data (settings or account may have changed)");
    $scope.search.hasMore = false;
    $scope.search.results = [];
    $scope.search.loading = true;
    delete $scope.search.limit;
  };


  /* -- Modals -- */

  $scope.showNewMessageModal = function(parameters) {
    $scope.closePopover();
    return esModals.showMessageCompose(parameters)
      .then(function(id) {
        if (id) UIUtils.toast.show('MESSAGE.INFO.MESSAGE_SENT');
      });
  };

  /* -- listeners -- */

  csWallet.api.data.on.logout($scope, $scope.resetData);
  esHttp.api.node.on.stop($scope, $scope.resetData);
  esHttp.api.node.on.start($scope, $scope.load);
  esMessage.api.data.on.new($scope, $scope.onNewMessageNotification);

}


NotificationsController.$inject = ['$scope', '$ionicPopover', '$state', '$timeout', 'UIUtils', 'esHttp', 'csWallet', 'esNotification'];
PopoverNotificationsController.$inject = ['$scope', '$timeout', '$controller', '$state', 'UIUtils', 'csWallet'];
angular.module('cesium.es.notification.controllers', ['cesium.es.services'])


  .config(['$stateProvider', function($stateProvider) {
    'ngInject';

    $stateProvider

      .state('app.view_notifications', {
        url: "/notifications",
        views: {
          'menuContent': {
            templateUrl: "plugins/es/templates/notification/view_notifications.html",
            controller: 'NotificationsCtrl'
          }
        },
        data: {
          login: true
        }
      })
    ;
  }])

  .controller('NotificationsCtrl', NotificationsController)

  .controller('PopoverNotificationsCtrl', PopoverNotificationsController)

;

function NotificationsController($scope, $ionicPopover, $state, $timeout, UIUtils, esHttp, csWallet, esNotification) {
  'ngInject';

  var defaultSearchLimit = 40;

  $scope.preventSelect = false;
  $scope.search = {
    loading : true,
    results: null,
    hasMore : false,
    loadingMore : false,
    limit: defaultSearchLimit,
    options: {
      codes: {
        excludes: esNotification.constants.EXCLUDED_CODES
      }
    }
  };
  $scope.listeners = [];

  var wallet;

  $scope.setWallet = function(aWallet) {
    wallet = aWallet;
  };

  $scope.$on('$ionicView.enter', function(e, state) {
    if ($scope.search.loading) {

      wallet = (state.stateParams && state.stateParams.id) ? csWallet.children.get(state.stateParams.id) : csWallet;
      if (!wallet) {
        UIUtils.alert.error('ERROR.UNKNOWN_WALLET_ID');
        return $scope.showHome();
      }

      $scope.loadWallet({
        wallet: wallet,
        minData: true
      })
        .then(function() {
          $scope.load();
          UIUtils.loading.hide();

          $scope.addListeners();

          // Reset unread counter
          return $timeout(function() {
            $scope.resetUnreadCount();
          }, 1000);
        });
    }
  });

  $scope.refresh = function(silent) {
    return $scope.load(undefined, undefined, silent);
  };

  $scope.load = function(from, size, silent) {
    // Make sure wallet is init (need by PopoverInvitationCtrl)
    wallet = wallet || csWallet;

    if (!wallet.data.pubkey) {
      $scope.search.loading = true;
      return;
    }

    $scope.search.preventSelect = true;

    var options = angular.copy($scope.search.options);
    options.from = options.from || from || 0;
    options.size = options.size || size || defaultSearchLimit;
    options.pubkey = wallet.data.pubkey;
    $scope.search.loading = !silent;
    return esNotification.load(options)
      .then(function(res) {
        if (!options.from) {
          $scope.search.results = res || [];
        }
        else if (res){
          $scope.search.results = $scope.search.results.concat(res);
        }
        $scope.search.loading = false;
        $scope.search.preventSelect = false;
        $scope.search.hasMore = $scope.search.results.length >= $scope.search.limit;
        $scope.updateView();
      })
      .catch(function(err) {
        $scope.search.loading = false;
        if (!options.from) {
          $scope.search.results = [];
        }
        $scope.search.preventSelect = false;
        $scope.search.hasMore = false;
        UIUtils.onError('COMMON.NOTIFICATIONS.LOAD_NOTIFICATIONS_FAILED')(err);
      });
  };

  $scope.updateView = function() {
    if ($scope.motion && $scope.motion.ionListClass && $scope.search.results.length) {
      $scope.motion.show({selector: '.view-notification .item'});
    }
  };

  $scope.markAllAsRead = function() {
    // Make sure to be auth before doing this
    if (!wallet.isAuth()) {
      return wallet.auth().then(function(){
        UIUtils.loading.hide();
        return $scope.markAllAsRead(); // loop
      });
    }

    $scope.hideActionsPopover();

    if (!$scope.search.results.length) return;

    UIUtils.loading.show()
      .then(function() {
        wallet.data.notifications.unreadCount = 0;
        var lastNotification = $scope.search.results[0];
        wallet.data.notifications.readTime = lastNotification ? lastNotification.time : 0;
        _.forEach($scope.search.results, function (item) {
          if (item.markAsRead && typeof item.markAsRead == 'function') item.markAsRead();
        });

        return UIUtils.loading.hide();
      });
  };

  $scope.resetUnreadCount = function() {
    if ($scope.search.loading || !wallet.data.notifications) {
      return $timeout($scope.resetUnreadCount, 2000);
    }
    if (!wallet.data.notifications.unreadCount || !$scope.search.results || !$scope.search.results.length) return;
    wallet.data.notifications.unreadCount = 0;
    var lastNotification = $scope.search.results[0];
    var readTime = lastNotification.time ? lastNotification.time : 0;
    if (readTime && (!wallet.data.notifications.readTime || wallet.data.notifications.readTime != readTime)) {
      wallet.data.notifications.readTime = readTime;
      wallet.storeData();
    }
  };

  $scope.select = function(event, item) {

    if ($scope.search.loading || event.preventDefault() || $scope.search.preventSelect) return;

    if (item.markAsRead && typeof item.markAsRead == 'function') {
      $timeout(item.markAsRead);
    }
    if (item.state) {
      $state.go(item.state, item.stateParams);
    }
  };

  $scope.showMore = function() {
    $scope.search.limit = $scope.search.limit || defaultSearchLimit;
    $scope.search.limit += defaultSearchLimit;
    if ($scope.search.limit < defaultSearchLimit) {
      $scope.search.limit = defaultSearchLimit;
    }
    $scope.search.loadingMore = true;
    $scope.load(
      $scope.search.results.length, // from
      $scope.search.limit)
      .then(function() {
        $scope.search.loadingMore = false;
        $scope.$broadcast('scroll.infiniteScrollComplete');
      });
  };

  // Listen notifications changes
  $scope.onNewNotification = function(notification) {
    if ($scope.search.loading || $scope.search.loadingMore) return;

    // Retrieve insertion index
    var nextIndex = _.findIndex($scope.search.results, function(n) {
      return notification.time > n.time;
    });
    if (nextIndex < 0) nextIndex = 0;

    // Update the array
    $scope.search.results.splice(nextIndex,0,notification);
    $scope.updateView();
  };

  $scope.resetData = function() {
    if ($scope.search.loading) return;
    console.debug("[ES] [notifications] Resetting data (settings or account may have changed)");
    $scope.search.hasMore = false;
    $scope.search.results = [];
    $scope.search.loading = true;
    delete $scope.search.limit;
  };

  /* -- Popover -- */

  $scope.showActionsPopover = function(event) {
    if (!$scope.actionsPopover) {
      $ionicPopover.fromTemplateUrl('plugins/es/templates/notification/popover_actions.html', {
        scope: $scope
      }).then(function(popover) {
        $scope.actionsPopover = popover;
        //Cleanup the popover when we're done with it!
        $scope.$on('$destroy', function() {
          $scope.actionsPopover.remove();
        });
        $scope.actionsPopover.show(event);
      });
    }
    else {
      $scope.actionsPopover.show(event);
    }
  };

  $scope.hideActionsPopover = function() {
    if ($scope.actionsPopover) {
      $scope.actionsPopover.hide();
    }
  };

  /* -- listeners -- */

  $scope.addListeners = function() {
    if (!wallet) throw "Controller wallet not set !";

    $scope.listeners = [
      esHttp.api.node.on.stop($scope, $scope.resetData),
      esHttp.api.node.on.start($scope, $scope.load),
      wallet.api.data.on.logout($scope, $scope.resetData)
    ];

    if (wallet.isDefault()) {
      // Subscribe to new notification
      $scope.listeners.push(
        esNotification.api.data.on.new($scope, $scope.onNewNotification)
      );
    }
  };

  $scope.removeListeners = function() {
    _.forEach($scope.listeners, function(remove){
      remove();
    });
    $scope.listeners = [];
  };
}

function PopoverNotificationsController($scope, $timeout, $controller, $state,
                                        UIUtils, csWallet) {
  'ngInject';

  // Initialize the super class and extend it.
  angular.extend(this, $controller('NotificationsCtrl', {$scope: $scope}));

  // Disable list motion
  $scope.motion = null;

  // Set the wallet to use
  $scope.setWallet(csWallet);

  $scope.$on('popover.shown', function() {
    if ($scope.search.loading) {
      $scope.addListeners();
      $scope.load();
    }
  });

  $scope.updateView = function() {
    if (!$scope.search.results.length) return;

    // Set Ink
    $timeout(function() {
      UIUtils.ink({selector: '.popover-notification .item.ink'});
    }, 100);
  };

  $scope.$on('popover.hidden', $scope.resetUnreadCount);

  $scope.select = function($event, notification) {
    if ($event.preventDefault() || !notification) return; // no selection
    if (notification.markAsRead && typeof notification.markAsRead == 'function') notification.markAsRead();
    if (notification.state) {
      $state.go(notification.state, notification.stateParams);
    }
    $scope.closePopover(notification);
  };
}


ESBlockLookupController.$inject = ['$scope', '$controller', '$ionicPopover', '$location', 'UIUtils', 'esBlockchain'];
angular.module('cesium.es.blockchain.controllers', ['cesium.es.services'])

  .config(['$stateProvider', function($stateProvider) {
    'ngInject';

    $stateProvider

      .state('app.lookup_blocks_currency', {
        url: "/currencies/:currency/blocks?q",
        views: {
          'menuContent': {
            templateUrl: "plugins/es/templates/blockchain/lookup.html",
            controller: 'ESBlockLookupCtrl'
          }
        }
      })

      .state('app.blockchain_search', {
        url: "/blockchain/search?q&type",
        views: {
          'menuContent': {
            templateUrl: "plugins/es/templates/blockchain/lookup.html",
            controller: 'ESBlockLookupCtrl'
          }
        },
        data: {
          silentLocationChange: true
        }
      })
    ;
  }])

  .controller('ESBlockLookupCtrl', ESBlockLookupController)
;


function ESBlockLookupController($scope, $controller, $ionicPopover, $location, UIUtils, esBlockchain) {
  'ngInject';

  // Initialize the super class and extend it.
  angular.extend(this, $controller('BlockLookupCtrl', {$scope: $scope}));

  $scope.search.text = null;
  $scope.search.type = 'last';
  $scope.search.sort = undefined;
  $scope.search.asc = true;
  $scope.searchTextId = 'blockchainSearchText';
  $scope.compactMode = true;
  $scope.enableFilter = true;

  $scope.doSearchText = function() {
    if ((!$scope.search.text || !$scope.search.text.trim().length) &&
      (!$scope.search.filters || !$scope.search.filters.length) ) {
      return $scope.doSearchLast();
    }

    $scope.search.type = 'text';

    $scope.doSearch();

    // Update location href
    $location.search({q: $scope.search.query}).replace();
  };

  $scope.doSearchLast = function() {
    $scope.hideActionsPopover();

    $scope.search.type = 'last';
    $scope.search.sort = undefined;
    $scope.doSearch();

    $location.search({q: undefined}).replace();
  };


  // This method override the base class method
  $scope.doSearch = function(from) {
    if ($scope.search.error) return;

    from = angular.isDefined(from) ? from : 0;
    var promise;
    var request = {};

    $scope.search.loading = (from === 0);
    request.size = $scope.defaultSizeLimit;

    // last block
    if ($scope.search.type == 'last') {
      // Add '+1' to skip the indexed block with _id='current'
      request.from = (from === 0) ? 0 : from+1;
      // add sort
      if ($scope.search.sort) {
        request.sort = {};
        request.sort[$scope.search.sort] = !$scope.search.asc ? "desc" : "asc";
      }
      else { // default sort
        request.sort = {
          "number": "desc"
        };
      }
      request.excludeCurrent = (from === 0);

      promise = esBlockchain.block.search($scope.currency, request);
    }

    // Full text search
    else if ($scope.search.type == 'text') {

      // Parse text search into filters array
      var res = esBlockchain.block.parseSearchText($scope.search.text, $scope.search.filters);
      $scope.search.filters = res.filters;
      var query = $scope.search.filters.reduce(function(query, filter){
        return query + ' AND ' + filter.text;
      }, '');
      if (res.text.length) {
        query += ' AND ' + res.text;
      }

      $scope.search.query = query.substr(5);
      $scope.search.text = res.text;

      request.from = from;

      // add sort
      if ($scope.search.sort) {
        request.sort = $scope.search.sort + ':' + (!$scope.search.asc ? "desc" : "asc");
      }
      else { // default sort
        request.sort = "number:desc";
      }
      request.excludeCurrent = true;

      promise = esBlockchain.block.searchText($scope.currency, $scope.search.query, request);
    }

    var time = new Date().getTime();
    return promise
      .then(function(result) {
        // Apply transformation need by UI (e.g add avatar and name...)
        return $scope.doPrepareResult(result.hits)
          .then(function() {
            return result;
          });
      })
      .then(function(result) {
        $scope.showPubkey = ($scope.search.sort == 'issuer');
        // Compute time only once (on first page)
        $scope.search.took = (from === 0) ? (new Date().getTime() - time) : $scope.search.took;
        // Keep previous total, when already computed (because of current, that is excluded only in the first page)
        var total = (from === 0) ? result.total : $scope.search.total;
        $scope.doDisplayResult(result.hits, from, total);
        $scope.search.loading = false;
      })
      .catch(function(err) {
        $scope.search.error = true;
        $scope.search.loading = false;
        UIUtils.onError('BLOCKCHAIN.ERROR.SEARCH_BLOCKS_FAILED')(err)
          .then(function() {
            $scope.search.error = false;
          });
      });
  };

  $scope.toggleSort = function(sort){
    if ($scope.search.sort === sort && !$scope.search.asc) {
      $scope.search.asc = undefined;
      $scope.search.sort = undefined;
    }
    else {
      $scope.search.asc = ($scope.search.sort === sort) ? !$scope.search.asc : true;
      $scope.search.sort = sort;
    }
    $scope.doSearch();
  };

  $scope.showHelpTip = function() {

  };

  /* -- popups -- */

  $scope.showActionsPopover = function(event) {
    if (!$scope.actionsPopover) {
      $ionicPopover.fromTemplateUrl('plugins/es/templates/blockchain/lookup_popover_actions.html', {
        scope: $scope
      }).then(function(popover) {
        $scope.actionsPopover = popover;
        //Cleanup the popover when we're done with it!
        $scope.$on('$destroy', function() {
          $scope.actionsPopover.remove();
        });
        $scope.actionsPopover.show(event);
      });
    }
    else {
      $scope.actionsPopover.show(event);
    }
  };

  $scope.hideActionsPopover = function() {
    if ($scope.actionsPopover) {
      $scope.actionsPopover.hide();
    }
  };

  /* -- manage click -- */


  // Cancel search filter
  $scope.itemRemove = function(index) {
    $scope.search.filters.splice(index, 1);
    $scope.doSearchText();
  };

  //Show the query
  $scope.toggleShowQuery = function() {
    $scope.showQuery = !$scope.showQuery;
  };
}



angular.module('cesium.es.network.controllers', ['cesium.es.services'])

  .config(['PluginServiceProvider', 'csConfig', function(PluginServiceProvider, csConfig) {
    'ngInject';

    var enable = csConfig.plugins && csConfig.plugins.es;
    if (enable) {
      PluginServiceProvider.extendState('app.network', {
        points: {
          'buttons': {
            templateUrl: "plugins/es/templates/network/view_network_extend.html",
            controller: 'ESExtensionCtrl'
          }
        }
      })
      ;
    }
  }]);



ESGroupListController.$inject = ['$scope', 'UIUtils', '$state', 'csWallet', 'esGroup', 'ModalUtils'];
ESGroupViewController.$inject = ['$scope', '$state', '$ionicPopover', '$ionicHistory', '$translate', 'UIUtils', 'csConfig', 'esGroup', 'csWallet'];
ESGroupEditController.$inject = ['$scope', 'esGroup', 'UIUtils', '$state', '$q', 'Device', '$ionicHistory', 'ModalUtils', '$focus', 'esHttp'];angular.module('cesium.es.group.controllers', ['cesium.es.services'])

  .config(['$stateProvider', function($stateProvider) {
    'ngInject';

    $stateProvider

      .state('app.groups', {
        url: "/group?type&location",
        views: {
          'menuContent': {
            templateUrl: "plugins/es/templates/group/lookup.html",
            controller: 'ESGroupListCtrl'
          }
        }
      })

      .state('app.add_group', {
        url: "/group/add/:type",
        views: {
          'menuContent': {
            templateUrl: "plugins/es/templates/group/edit_group.html",
            controller: 'ESGroupEditCtrl'
          }
        }
      })

      .state('app.edit_group', {
        url: "/group/edit/:id",
        views: {
          'menuContent': {
            templateUrl: "plugins/es/templates/group/edit_group.html",
            controller: 'ESGroupEditCtrl'
          }
        }
      })


      .state('app.view_group', {
        url: "/group/view/:id",
        views: {
          'menuContent': {
            templateUrl: "plugins/es/templates/group/view_record.html",
            controller: 'ESGroupViewCtrl'
          }
        }
      })

    ;
  }])

  .controller('ESGroupListCtrl', ESGroupListController)

  .controller('ESGroupViewCtrl', ESGroupViewController)

  .controller('ESGroupEditCtrl', ESGroupEditController)

;

function ESGroupListController($scope, UIUtils, $state, csWallet, esGroup, ModalUtils) {
  'ngInject';

  var defaultSearchLimit = 40;

  $scope.search = {
    loading : true,
    results: null,
    type: 'last',
    hasMore : false,
    loadingMore : false,
    limit: defaultSearchLimit
  };
  $scope.enableFilter = !UIUtils.screen.isSmall();
  $scope.ionItemClass = 'item-border-large';

  $scope.$on('$ionicView.enter', function() {
    if ($scope.search.loading) {
      $scope.doSearch();
    }
  });

  $scope.doSearchText = function() {
    var text = $scope.search.text && $scope.search.text.trim();
    if (!text || !text.length) {
      return $scope.doSearchLast();
    }
    $scope.search.type='text';
    return $scope.doSearch();
  };

  $scope.doSearchLast = function() {
    $scope.search.type = 'last';
    return $scope.doSearch();
  };

  $scope.doSearch = function(from, size) {
    var options = {};
    options.from = from || 0;
    options.size = size || defaultSearchLimit;

    options.text = $scope.search.type == 'text' && $scope.search.text && $scope.search.text.trim();

    $scope.search.loading = true;
    return esGroup.record.search(options)
      .then(function(res) {
        if (!from) {
          $scope.search.results = res || [];
        }
        else if (res){
          $scope.search.results = $scope.search.results.concat(res);
        }
        $scope.search.loading = false;
        $scope.search.hasMore = $scope.search.results.length >= $scope.search.limit;
        $scope.updateView();
      })
      .catch(function(err) {
        $scope.search.loading = false;
        if (!from) {
          $scope.search.results = [];
        }
        $scope.search.hasMore = false;
        UIUtils.onError('GROUP.ERROR.SEARCH_GROUPS_FAILED')(err);
      });
  };

  $scope.updateView = function() {

    $scope.$broadcast('$$rebind::rebind'); // notify binder
    $scope.motion.show({selector: '.list.{0} .item'.format($scope.motion.ionListClass)});
  };

  $scope.select = function(item) {
    if (item && item.id) $state.go('app.view_group', {id: item.id});
  };

  $scope.showMore = function() {
    $scope.search.limit = $scope.search.limit || defaultSearchLimit;
    $scope.search.limit += defaultSearchLimit;
    if ($scope.search.limit < defaultSearchLimit) {
      $scope.search.limit = defaultSearchLimit;
    }
    $scope.search.loadingMore = true;
    $scope.load(
      $scope.search.results.length, // from
      $scope.search.limit)
      .then(function() {
        $scope.search.loadingMore = false;
        $scope.$broadcast('scroll.infiniteScrollComplete');
      });
  };

  $scope.resetData = function() {
    if ($scope.search.loading) return;
    console.debug("[ES] [group] Resetting data (settings or account may have changed)");
    $scope.search.hasMore = false;
    $scope.search.results = [];
    $scope.search.loading = true;
    delete $scope.search.limit;
  };
  // When logout: force reload
  csWallet.api.data.on.logout($scope, $scope.resetData);

  /* -- modals and views -- */

  $scope.showNewRecordModal = function() {
    $scope.loadWallet({minData: true})
      .then(function(walletData) {
        UIUtils.loading.hide();
        $scope.walletData = walletData;
        ModalUtils.show('plugins/es/templates/group/modal_record_type.html')
          .then(function(type){
            if (type) {
              $state.go('app.add_group', {type: type});
            }
          });
      });
  };
}


function ESGroupViewController($scope, $state, $ionicPopover, $ionicHistory, $translate,
                               UIUtils, csConfig, esGroup, csWallet) {
  'ngInject';

  $scope.formData = {};
  $scope.id = null;
  $scope.pictures = [];
  $scope.canEdit = false;
  $scope.loading = true;
  $scope.motion = UIUtils.motion.fadeSlideIn;

  $scope.$on('$ionicView.enter', function(e, state) {
    if (state.stateParams && state.stateParams.id) { // Load by id
      if ($scope.loading || state.stateParams.refresh) { // prevent reload if same id (if not forced)
        $scope.load(state.stateParams.id, state.stateParams.anchor);
      }
      UIUtils.loading.hide();
      $scope.$broadcast('$recordView.enter', state);
    }
    else {
      $state.go('app.groups');
    }
  });

  $scope.load = function(id) {
    esGroup.record.load(id, {
      fetchPictures: true
    })
      .then(function (data) {
        $scope.id = data.id;
        $scope.formData = data.record;
        $scope.issuer= data.issuer;
        $scope.canEdit = csWallet.isUserPubkey($scope.formData.issuer) || csWallet.children.hasPubkey($scope.formData.issuer);

        $scope.pictures = data.record.pictures || [];
        delete data.record.pictures; // remove, as already stored in $scope.pictures

        // Load other data (from child controller)
        $scope.$broadcast('$recordView.load', id, esGroup.record.comment);

        $scope.loading = false;
        UIUtils.loading.hide();
        $scope.updateView();

      })
      .catch(UIUtils.onError('GROUP.ERROR.LOAD_RECORD_FAILED'));
  };

  $scope.updateView = function() {
    $scope.motion.show();
  };

  // Edit click
  $scope.edit = function() {
    UIUtils.loading.show();
    $state.go('app.edit_group', {id: $scope.id});
  };

  $scope.delete = function() {
    $scope.hideActionsPopover();

    // translate
    var translations;
    $translate(['GROUP.VIEW.REMOVE_CONFIRMATION', 'GROUP.INFO.RECORD_REMOVED'])
      .then(function(res) {
        translations = res;
        return UIUtils.alert.confirm(res['GROUP.VIEW.REMOVE_CONFIRMATION']);
      })
      .then(function(confirm) {
        if (confirm) {
          esGroup.record.remove($scope.id)
            .then(function () {
              $ionicHistory.nextViewOptions({
                historyRoot: true
              });
              $state.go('app.groups');
              UIUtils.toast.show(translations['GROUP.INFO.RECORD_REMOVED']);
            })
            .catch(UIUtils.onError('GROUP.ERROR.REMOVE_RECORD_FAILED'));
        }
      });
  };

  /* -- modals & popover -- */

  $scope.showActionsPopover = function(event) {
    if (!$scope.actionsPopover) {
      $ionicPopover.fromTemplateUrl('plugins/es/templates/group/view_popover_actions.html', {
        scope: $scope
      }).then(function(popover) {
        $scope.actionsPopover = popover;
        //Cleanup the popover when we're done with it!
        $scope.$on('$destroy', function() {
          $scope.actionsPopover.remove();
        });
        $scope.actionsPopover.show(event);
      });
    }
    else {
      $scope.actionsPopover.show(event);
    }
  };

  $scope.hideActionsPopover = function() {
    if ($scope.actionsPopover) {
      $scope.actionsPopover.hide();
    }
  };

  $scope.showSharePopover = function(event) {
    $scope.hideActionsPopover();

    var title = $scope.formData.title;
    // Use shareBasePath (fix #530) or rootPath (fix #390)
    var url = (csConfig.shareBaseUrl || $rootScope.rootPath) + $state.href('app.view_group', {id: $scope.id});
    // Override default position, is small screen - fix #545
    if (UIUtils.screen.isSmall()) {
      event = angular.element(document.querySelector('#group-share-anchor-'+$scope.id)) || event;
    }
    UIUtils.popover.share(event, {
      bindings: {
        url: url,
        titleKey: 'GROUP.VIEW.POPOVER_SHARE_TITLE',
        titleValues: {title: title},
        time: $scope.formData.time,
        postMessage: title
      }
    });
  };
}

function ESGroupEditController($scope, esGroup, UIUtils, $state, $q, Device,
                               $ionicHistory, ModalUtils, $focus, esHttp) {
  'ngInject';

  $scope.walletData = {};
  $scope.formData = {};
  $scope.id = null;
  $scope.pictures = [];
  $scope.loading = true;

  $scope.setForm =  function(form) {
    $scope.form = form;
  };

  $scope.$on('$ionicView.enter', function(e, state) {
    $scope.loadWallet({minData: true})
      .then(function(walletData) {
        $scope.walletData = walletData;
        if (state.stateParams && state.stateParams.id) { // Load by id
          $scope.load(state.stateParams.id);
        }
        else {
          if (state.stateParams && state.stateParams.type) {
            $scope.formData.type=state.stateParams.type;
          }
          $scope.loading = false;
          UIUtils.loading.hide();
          $scope.updateView();
        }
        // removeIf(device)
        $focus('group-record-title');
        // endRemoveIf(device)
      });
  });

  $scope.load = function(id) {
    esGroup.record.load(id, {
      fetchPictures: true,
      html: false
    })
      .then(function (data) {
        $scope.formData = data.record;
        $scope.issuer= data.issuer;
        $scope.id= data.id;

        $scope.pictures = data.record.pictures || [];
        delete data.record.pictures; // remove, as already stored in $scope.pictures

        $scope.loading = false;
        UIUtils.loading.hide();
        $scope.updateView();

      })
      .catch(UIUtils.onError('GROUP.ERROR.LOAD_RECORD_FAILED'));
  };

  $scope.updateView = function() {
    $scope.motion.show({selector: '.list.{0} .item, .card-gallery'.format($scope.motion.ionListClass)});
  };

  $scope.save = function() {
    $scope.form.$submitted=true;
    if($scope.saving || // avoid multiple save
      !$scope.form.$valid ||
      ($scope.formData.type !== 'managed' && $scope.formData.type !== 'open')) {
      return;
    }
    $scope.saving = true;
    return UIUtils.loading.show()

      .then(function(){
        var json = $scope.formData;
        json.time = esHttp.date.now();

        // Resize pictures
        json.picturesCount = $scope.pictures.length;
        if (json.picturesCount > 0) {
          json.pictures = $scope.pictures.reduce(function(res, pic) {
            return res.concat({file: esHttp.image.toAttachment(pic)});
          }, []);
          return UIUtils.image.resizeSrc($scope.pictures[0].src, true) // resize avatar
            .then(function(imageSrc) {
              json.avatar = esHttp.image.toAttachment({src: imageSrc});
              return json;
            });
        }
        else {
          if (json.avatar) {
            // FIXME: this is a workaround to allow content deletion
            // Is it a bug in the ES attachment-mapper ?
            json.avatar = {
              _content: '',
              _content_type: ''
            };
          }
          json.pictures = [];
          return json;
        }
      })
      .then(function(json){
        // Create
        if (!$scope.id) {
          json.creationTime = esHttp.date.now();
          return esGroup.record.add(json);
        }
        // Update
        return esGroup.record.update(json, {id: $scope.id});
      })

      .then(function(id) {
        $scope.id = $scope.id || id;
        $scope.saving = false;
        $ionicHistory.clearCache($ionicHistory.currentView().stateId); // clear current view
        $ionicHistory.nextViewOptions({historyRoot: true});
        return $state.go('app.view_group', {id: $scope.id, refresh: true});
      })

      .catch(function(err) {
        $scope.saving = false;
        UIUtils.onError('GROUP.ERROR.SAVE_RECORD_FAILED')(err);
      });
  };

  $scope.openPicturePopup = function() {
    Device.camera.getPicture()
      .then(function(imageData) {
        $scope.pictures.push({src: "data:image/png;base64," + imageData});
      })
      .catch(UIUtils.onError('ERROR.TAKE_PICTURE_FAILED'));
  };

  $scope.fileChanged = function(event) {
    UIUtils.loading.show();
    return $q(function(resolve, reject) {
      var file = event.target.files[0];
      UIUtils.image.resizeFile(file)
        .then(function(imageData) {
          $scope.pictures.push({src: imageData});
          UIUtils.loading.hide();
          resolve();
        });
    });
  };

  $scope.removePicture = function(index){
    $scope.pictures.splice(index, 1);
  };

  $scope.favoritePicture = function(index){
    if (index > 0) {
      var item = $scope.pictures[index];
      $scope.pictures.splice(index, 1);
      $scope.pictures.splice(0, 0, item);
    }
  };

  $scope.cancel = function() {
    $ionicHistory.goBack();
  };

  /* -- modals -- */
  $scope.showRecordTypeModal = function() {
    ModalUtils.show('plugins/es/templates/group/modal_record_type.html')
      .then(function(type){
        if (type) {
          $scope.formData.type = type;
        }
      });
  };

}


InvitationsController.$inject = ['$scope', '$q', '$ionicPopover', '$state', '$timeout', 'UIUtils', 'csSettings', 'csWallet', 'esHttp', 'esModals', 'esNotification', 'esInvitation'];
PopoverInvitationController.$inject = ['$scope', '$controller', 'csWallet'];
NewInvitationModalController.$inject = ['$scope', '$q', 'Modals', 'UIUtils', 'csWallet', 'esHttp', 'esWallet', 'esInvitation', 'parameters'];angular.module('cesium.es.invitation.controllers', ['cesium.es.services'])

  .config(['$stateProvider', function($stateProvider) {
    'ngInject';

    $stateProvider

      .state('app.view_invitations', {
        url: "/invitations?id",
        views: {
          'menuContent': {
            templateUrl: "plugins/es/templates/invitation/view_invitations.html",
            controller: 'InvitationsCtrl'
          }
        },
        data: {
          auth: true
        }
      })

      .state('app.view_invitations_by_id', {
        url: "/wallets/:id/invitations",
        views: {
          'menuContent': {
            templateUrl: "plugins/es/templates/invitation/view_invitations.html",
            controller: 'InvitationsCtrl'
          }
        },
        data: {
          login: true
        }
      })
    ;
  }])

  .controller('InvitationsCtrl', InvitationsController)

  .controller('PopoverInvitationCtrl', PopoverInvitationController)

  .controller('ESNewInvitationModalCtrl', NewInvitationModalController)
;

function InvitationsController($scope, $q, $ionicPopover, $state, $timeout, UIUtils, csSettings, csWallet,
                               esHttp, esModals, esNotification, esInvitation) {
  'ngInject';

  var defaultSearchLimit = esInvitation.constants.DEFAULT_LOAD_SIZE;

  $scope.search = {
    loading : true,
    results: null,
    hasMore : false,
    loadingMore : false,
    limit: defaultSearchLimit,
    options: {
      codes: {
        includes: esNotification.constants.INVITATION_CODES
      }
    }
  };

  var wallet;

  $scope.setWallet = function(aWallet) {
    wallet = aWallet;
  };

  $scope.$on('$ionicView.enter', function(e, state) {
    if ($scope.search.loading) {
      wallet = (state.stateParams && state.stateParams.id) ? csWallet.children.get(state.stateParams.id) : csWallet;
      if (!wallet) {
        UIUtils.alert.error('ERROR.UNKNOWN_WALLET_ID');
        return $scope.showHome();
      }

      $scope.loadWallet({
        wallet: wallet,
        minData: true
      })
      .then(function() {

        $scope.addListeners();

        if (esHttp.isAlive()) {
          $scope.load();

          // Reset unread counter
          $scope.resetUnreadCount();

          $scope.showFab('fab-new-invitation');
        }
      });
    }
  });

  $scope.load = function(from, size) {
    var options = angular.copy($scope.search.options);
    options.from = options.from || from || 0;
    options.size = options.size || size || defaultSearchLimit;

    // Make sure wallet is init (need by PopoverInvitationCtrl)
    wallet = wallet || csWallet;

    return esInvitation.load(options, wallet.data.keypair)
      .then(function(invitations) {
        $scope.search.results = invitations;
        $scope.search.loading = false;
        $scope.search.hasMore = ($scope.search.results && $scope.search.results.length >= $scope.search.limit);
        $scope.updateView();
        UIUtils.loading.hide();
      })
      .catch(function(err) {
        if (err == 'CANCELLED') return $scope.cancel();
        $scope.search.loading = false;
        if (!from) {
          $scope.search.results = [];
        }
        $scope.search.hasMore = false;
        UIUtils.onError('INVITATION.ERROR.LOAD_INVITATIONS_FAILED')(err);
      });
  };

  $scope.cancel = function() {

  };

  $scope.updateView = function() {
    if ($scope.motion && $scope.search.results && $scope.search.results.length) {
      $scope.motion.show({selector: '.view-invitation .item'});
    }
  };
  $scope.$watchCollection('search.results', $scope.updateView);

  $scope.showMore = function() {
    $scope.search.limit = $scope.search.limit || defaultSearchLimit;
    $scope.search.limit = $scope.search.limit * 2;
    if ($scope.search.limit < defaultSearchLimit) {
      $scope.search.limit = defaultSearchLimit;
    }
    $scope.search.loadingMore = true;
    $scope.load(
      $scope.search.results.length, // from
      $scope.search.limit)
      .then(function() {
        $scope.search.loadingMore = false;
        $scope.$broadcast('scroll.infiniteScrollComplete');
      });
  };

  $scope.onNewInvitation = function(invitation) {
    if ($scope.search.loading || $scope.search.loadingMore) return;

    // Insert the new invitation (ONLY if not already done by service. May occur when using same array instance)
    if (!$scope.search.results[0] || $scope.search.results[0] !== invitation) {
      $scope.search.results.splice(0,0,invitation);
    }
  };

  $scope.resetData = function() {
    if ($scope.search.loading) return;
    console.debug("[ES] [invitation] Resetting data (settings or account may have changed)");
    $scope.search.hasMore = false;
    $scope.search.results = [];
    $scope.search.loading = true;
    delete $scope.search.limit;
  };

  $scope.resetUnreadCount = function() {
    if ($scope.search.loading || !wallet.data.invitations) {
      return $timeout($scope.resetUnreadCount, 2000);
    }
    if (!wallet.data.invitations.unreadCount) return;
    console.debug('[ES] [invitation] Resetting unread count');
    wallet.data.invitations.unreadCount = 0;
    if (!$scope.search.results || !$scope.search.results.length) return;
    var lastNotification = $scope.search.results[0];
    var readTime = lastNotification.time ? lastNotification.time : 0;
    if (readTime && (!wallet.data.invitations.readTime || wallet.data.invitations.readTime != readTime)) {
      wallet.data.invitations.readTime = readTime;
      wallet.storeData();
    }
  };

  $scope.deleteAll = function(confirm) {
    $scope.hideActionsPopover();
    if (!$scope.search.results.length) return;

    if (!confirm) {
      return UIUtils.alert.confirm('INVITATION.CONFIRM.DELETE_ALL_CONFIRMATION')
        .then(function(confirm) {
          if (confirm) return $scope.deleteAll(confirm); // recursive call
        });
    }

    return $q.all([
        UIUtils.loading.show(),
        esInvitation.deleteAll(wallet.data.pubkey)
      ])
      .then(function() {
        $scope.search.results.splice(0, $scope.search.results.length); // update list
        return UIUtils.loading.hide();
      })
      .catch(UIUtils.onError('INVITATION.ERROR.REMOVE_ALL_INVITATIONS_FAILED'));
  };

  $scope.delete = function(index) {
    var invitation = $scope.search.results[index];
    if (!invitation) return;

    return esInvitation.delete(invitation)
      .then(function() {
        // Remove from list (ONLY if not already done by service. May occur when using same array instance)
        if ($scope.search.results[index] && $scope.search.results[index] === invitation) {
          $scope.search.results.splice(index,1);
        }
      })
      .catch(UIUtils.onError('INVITATION.ERROR.REMOVE_INVITATION_FAILED'));
  };

  $scope.accept = function(invitation) {
    $scope.hideActionsPopover(); // need when PopoverInvitationController

    if (invitation.state) {
     $state.go(invitation.state, invitation.stateParams || {});
    }
  };

  /* -- Modal -- */

  $scope.showNewInvitationModal = function() {
    $scope.hideActionsPopover();

    return esModals.showNewInvitation({});
  };

  /* -- Popover -- */

  $scope.showActionsPopover = function(event) {
    if (!$scope.actionsPopover) {
      $ionicPopover.fromTemplateUrl('plugins/es/templates/invitation/popover_actions.html', {
        scope: $scope
      }).then(function(popover) {
        $scope.actionsPopover = popover;
        //Cleanup the popover when we're done with it!
        $scope.$on('$destroy', function() {
          $scope.actionsPopover.remove();
        });
        $scope.actionsPopover.show(event);
      });
    }
    else {
      $scope.actionsPopover.show(event);
    }
  };

  $scope.hideActionsPopover = function() {
    if ($scope.actionsPopover) {
      $scope.actionsPopover.hide();
    }
  };


  // Listeners
  $scope.addListeners = function() {
    if (!wallet) throw "Controller wallet not set !";

    $scope.listeners = [
      esHttp.api.node.on.stop($scope, $scope.resetData),
      esHttp.api.node.on.start($scope, $scope.load),
      wallet.api.data.on.logout($scope, $scope.resetData)
    ];

    if (wallet.isDefault()) {
      // Subscribe to new invitation
      $scope.listeners.push(
        esInvitation.api.data.on.new($scope, $scope.onNewInvitation)
      );
    }
  };
}

function PopoverInvitationController($scope, $controller, csWallet) {
  'ngInject';

  // Initialize the super class and extend it.
  angular.extend(this, $controller('InvitationsCtrl', {$scope: $scope}));

  // Disable list effects
  $scope.motion = null;

  // Set the wallet to use
  $scope.setWallet(csWallet);

  $scope.$on('popover.shown', function() {
    if ($scope.search.loading) {
      $scope.addListeners();
      $scope.load();
    }
  });

  $scope.updateView = function() {
    // no animation
  };

  $scope.$on('popover.hidden', $scope.resetUnreadCount);

  $scope.hideActionsPopover = function() {
    $scope.closePopover();
  };

  $scope.cancel = function() {
    $scope.closePopover();
  };
}


function NewInvitationModalController($scope, $q, Modals, UIUtils, csWallet, esHttp, esWallet, esInvitation, parameters) {
  'ngInject';

  // Controller var
  var wallet;

  // Scope var
  $scope.recipients = [];
  $scope.suggestions = [];
  $scope.formData = {
    useComment: false,
    walletId: null
  };
  $scope.enableSelectWallet = true;

  /* -- scope functions -- */

  $scope.setParameters = function(parameters) {
    if (!parameters) return;
    if (!parameters.wallet || parameters.wallet === "default") {
      $scope.formData.walletId = csWallet.id;
    }
    else {
      $scope.formData.walletId = parameters.wallet;
    }
  };
  // Read default parameters
  $scope.setParameters(parameters);

  $scope.load = function() {
    $scope.enableSelectWallet = csWallet.children.count() > 0;

    wallet = $scope.enableSelectWallet && ($scope.formData.walletId ? csWallet.children.get($scope.formData.walletId) : csWallet) || csWallet;
    $scope.formData.walletId = wallet.id; // update the walletId (could have changed)
    if (!wallet.isDefault()) {
      console.debug("[transfer] Using {" + wallet.id + "} wallet");
    }

    // Make to sure to load full wallet data (balance)
    return wallet.login({sources: true, silent: true})
      .then(function(data) {
        $scope.walletData = data;
        UIUtils.ink({selector: '.modal-invitation .ink'});

        if (!$scope.destPub || $scope.destUid) {
          $scope.loading = false;
        }
        else {
          // Fill the uid from the pubkey
          return csWot.extend({pubkey: $scope.destPub})
            .then(function(res) {
              $scope.destUid = res && (res.name || res.uid);
              if ($scope.destUid) {
                $scope.destPub = '';
              }
              $scope.loading = false;
            });
        }
      })
      .catch(function(err){
        if (err == 'CANCELLED') return $scope.cancel(); // close the modal
        UIUtils.onError('ERROR.LOGIN_FAILED')(err);
      });
  };
  $scope.$on('modal.shown', $scope.load);

  // When changing use comment
  $scope.onUseCommentChanged = function() {
    if (!$scope.formData.useComment) {
      $scope.formData.comment = null; // reset comment only when disable
    }
  };
  $scope.$watch('formData.useComment', $scope.onUseCommentChanged, true);


  $scope.removeRecipient= function(index, e) {
    $scope.recipients.splice(index, 1);
    e.preventDefault();
  };

  $scope.removeSuggestion = function(index, e) {
    $scope.suggestions.splice(index, 1);
    e.preventDefault();
  };

  $scope.cancel = function() {
    $scope.closeModal();
  };

  $scope.doSend = function() {
    $scope.form.$submitted=true;
    if(!$scope.form.$valid || !$scope.recipients.length || !$scope.suggestions.length) {
      return;
    }

    if (!wallet.isLogin()) return $scope.closeModal(); // should never happen

    // Make sure user is still authenticated
    return wallet.auth({silent: true})
      .then(function() {
        return $q.all([
          // Get keypair only once (if not done here, esInvitation.send() with compute it many times)
          esWallet.box.getKeypair(wallet.data.keypair),
          // Ask confirmation
          UIUtils.alert.confirm('INVITATION.CONFIRM.SEND_INVITATIONS_TO_CERTIFY', undefined, {okText: 'COMMON.BTN_SEND'})
        ]);
      })
      .then(function(res) {
        var keypair = res && res[0];
        var confirm = res && res[1];
        if (!keypair || !confirm) return;
        UIUtils.loading.show();
        var time = esHttp.date.now(); // use same date for each invitation
        var comment = $scope.formData.useComment && $scope.formData.comment && $scope.formData.comment.trim();
        return $q.all(
          $scope.recipients.reduce(function (res, recipient) {
            return res.concat($scope.suggestions.reduce(function (res, identity) {
              if (!identity.uid || !identity.pubkey) {
                console.error('Unable to send suggestion for this identity (no uid or pubkey)', identity);
                return res;
              }
              var invitation = {
                issuer: wallet.data.pubkey,
                recipient: recipient.pubkey,
                time: time,
                content: [identity.uid, identity.pubkey].join('-'),
                comment: comment
              };
              return res.concat(
                esInvitation.send(invitation, {
                  wallet: wallet,
                  type: 'certification'
                }));
            }, []));
          }, []))
          .then(function() {
            $scope.closeModal();
            return UIUtils.loading.hide();
          })
          .then(function() {
            UIUtils.toast.show('INVITATION.INFO.INVITATION_SENT');
          })
          .catch(UIUtils.onError('INVITATION.ERROR.SUGGEST_CERTIFICATIONS_FAILED'));
      });
  };

  /* -- Modals -- */

  $scope.showSelectRecipientModal = function(e) {
    if (e.isDefaultPrevented()) return;

    return Modals.showWotLookup({
      allowMultiple: true,
      enableFilter: true,
      title: 'INVITATION.NEW.RECIPIENTS_MODAL_TITLE',
      help: 'INVITATION.NEW.RECIPIENTS_MODAL_HELP',
      okText: 'COMMON.BTN_OK',
      okType: 'button-positive',
      selection: angular.copy($scope.recipients)
    })
      .then(function(res) {
        if (!res) return; // user cancel
        $scope.recipients = res;
      });

  };

  $scope.showSelectSuggestionModal = function(e) {
    if (e.isDefaultPrevented()) return;

    return Modals.showWotLookup({
      allowMultiple: true,
      enableFilter: true,
      title: 'INVITATION.NEW.SUGGESTION_IDENTITIES_MODAL_TITLE',
      help: 'INVITATION.NEW.SUGGESTION_IDENTITIES_MODAL_HELP',
      okText: 'COMMON.BTN_OK',
      okType: 'button-positive',
      selection: angular.copy($scope.suggestions)
    })
      .then(function(res) {
        if (!res) return; // user cancel
        $scope.suggestions = res;
      });
  };


  $scope.showSelectWalletModal = function() {
    if (!$scope.enableSelectWallet) return;

    return Modals.showSelectWallet()
      .then(function(wallet) {
        if (!wallet || $scope.formData.walletId === wallet.id) return;
        console.debug("[transfer] Using {" + wallet.id + "} wallet");
        $scope.wallet = wallet;
        $scope.walletData = wallet.data;
        $scope.formData.walletId = wallet.id;
        $scope.onAmountChanged();
      });
  };
}



ViewSubscriptionsController.$inject = ['$scope', '$q', '$ionicHistory', 'csWot', 'csWallet', 'UIUtils', 'ModalUtils', 'esSubscription'];
ModalEmailSubscriptionsController.$inject = ['$scope', 'Modals', 'csSettings', 'esHttp', 'csWot', 'parameters'];angular.module('cesium.es.subscription.controllers', ['cesium.es.services'])

  .config(['$stateProvider', function($stateProvider) {

    $stateProvider
      .state('app.edit_subscriptions', {
        cache: false,
        url: "/wallet/subscriptions",
        views: {
          'menuContent': {
            templateUrl: "plugins/es/templates/subscription/edit_subscriptions.html",
            controller: 'ViewSubscriptionsCtrl'
          }
        },
        data: {
          auth: true,
          minData: true
        }
      })

      .state('app.edit_subscriptions_by_id', {
        cache: false,
        url: "/wallets/:id/subscriptions",
        views: {
          'menuContent': {
            templateUrl: "plugins/es/templates/subscription/edit_subscriptions.html",
            controller: 'ViewSubscriptionsCtrl'
          }
        },
        data: {
          login: true,
          minData: true
        }
      });

  }])

 .controller('ViewSubscriptionsCtrl', ViewSubscriptionsController)

 .controller('ModalEmailSubscriptionsCtrl', ModalEmailSubscriptionsController)

;

function ViewSubscriptionsController($scope, $q, $ionicHistory, csWot, csWallet, UIUtils, ModalUtils, esSubscription) {
  'ngInject';

  $scope.loading = true;
  $scope.popupData = {}; // need for the node popup
  $scope.search = {
    results: [],
    loading: true
  };
  $scope.emailFrequencies = [
    {id: "daily", label: "daily"},
    {id: "weekly", label: "weekly"}
  ];

  var wallet;

  $scope.enter = function(e, state) {

    // First load
    if ($scope.loading) {

      wallet = (state.stateParams && state.stateParams.id) ? csWallet.children.get(state.stateParams.id) : csWallet;
      if (!wallet) {
        UIUtils.alert.error('ERROR.UNKNOWN_WALLET_ID');
        return $scope.showHome();
      }

      $scope.loadWallet({
        wallet: wallet,
        auth: true,
        minData: true
      })
        .then(function() {
          UIUtils.loading.hide();
          return $scope.load();
        })
        .catch(function(err){
          if (err == 'CANCELLED') {
            UIUtils.loading.hide(10);
            $ionicHistory.goBack();
            return;
          }
          UIUtils.onError('SUBSCRIPTION.ERROR.LOAD_SUBSCRIPTIONS_FAILED')(err);
        });
    }

  };
  $scope.$on('$ionicView.enter', $scope.enter);

  $scope.load = function() {
    $scope.loading = true; // to avoid the call of doSave()
    return esSubscription.record.load(wallet.data.pubkey, wallet.data.keypair)
      .then(function(results) {
        // Group by type
        var groups = _.groupBy((results || []), function (record) {
          return [record.type, record.recipient].join('|');
        });
        return _.keys(groups).reduce(function (res, key) {
          var parts = key.split('|');
          return res.concat({
            type: parts[0],
            recipient: parts[1],
            items: groups[key]
          });
        }, []);
      })
      .then(function(results) {
        return csWot.extendAll(results, 'recipient');
      })
      // Display result
      .then($scope.updateView)
      .catch(function(err){
        UIUtils.loading.hide(10);
        if (err && err.ucode == 404) {
          $scope.updateView([]);
          $scope.existing = false;
        }
        else {
          UIUtils.onError('PROFILE.ERROR.LOAD_PROFILE_FAILED')(err);
        }
      });
  };

  $scope.updateView = function(results) {
    if (results) {
      $scope.search.results = results;
    }

    if ($scope.search.results && $scope.search.results.length) {
      $scope.motion.show();
    }
    $scope.search.loading = false;
  };

  $scope.addSubscription = function() {
    var type;
    $scope.showCategoryModal()
      .then(function(cat) {
        if (!cat) return;
        type = cat.id;
        // get subscription parameters
        if (type == 'email') {
          return $scope.showEmailModal();
        }
        else {
          UIUtils.alert.notImplemented();
        }
      })
      .then(function(record) {
        if (!record) return;
        UIUtils.loading.show();
        esSubscription.record.add(record, wallet)
          .then($scope.addToUI)
          .then(function() {
            wallet.data.subscriptions = wallet.data.subscriptions || {count: 0};
            wallet.data.subscriptions.count++;
            UIUtils.loading.hide();
            $scope.updateView();
          })
          .catch(UIUtils.onError('SUBSCRIPTION.ERROR.ADD_SUBSCRIPTION_FAILED'));
      });
  };

  $scope.editSubscription = function(record) {

    // get subscription parameters
    var promise;
    var oldRecord = angular.copy(record);
    if (record.type == 'email') {
      promise = $scope.showEmailModal(record);
    }
    if (!promise) return;
    return promise
      .then(function(res) {
        if (!res) return;
        UIUtils.loading.show();
        record.id = oldRecord.id;
        return esSubscription.record.update(record, wallet)
          .then(function() {
            // If recipient change, update in results
            if (oldRecord.type != record.type ||
              oldRecord.recipient != record.recipient) {
              $scope.removeFromUI(oldRecord);
              return $scope.addToUI(record);
            }
          })
          .then(function() {
            UIUtils.loading.hide();
            $scope.updateView();
          })
          .catch(UIUtils.onError('SUBSCRIPTION.ERROR.UPDATE_SUBSCRIPTION_FAILED'));
      });
  };

  $scope.deleteSubscription = function(record, confirm) {
    if (!record || !record.id) return;

    if (!confirm) {
      return UIUtils.alert.confirm('SUBSCRIPTION.CONFIRM.DELETE_SUBSCRIPTION')
        .then(function(confirm) {
          if (confirm) return $scope.deleteSubscription(record, confirm);
        });
    }

    UIUtils.loading.show();
    esSubscription.record.remove(record.id, {wallet: wallet})
      .then(function() {
        wallet.data.subscriptions = wallet.data.subscriptions || {count: 1};
        wallet.data.subscriptions.count--;
        $scope.removeFromUI(record);
        UIUtils.loading.hide();
      })
      .catch(UIUtils.onError('SUBSCRIPTION.ERROR.DELETE_SUBSCRIPTION_FAILED'));
  };

  $scope.removeFromUI = function(record) {
    var subscriptions = _.findWhere($scope.search.results, {type: record.type, recipient: record.recipient});
    var index = _.findIndex(subscriptions.items, record);
    if (index >= 0) {
      subscriptions.items.splice(index, 1);
    }
    if (!subscriptions.items.length) {
      index = _.findIndex($scope.search.results, subscriptions);
      $scope.search.results.splice(index, 1);
    }
  };

  $scope.addToUI = function(record) {
    $scope.search.results = $scope.search.results || [];
    var subscriptions = _.findWhere($scope.search.results,
      {type: record.type, recipient: record.recipient});

    if (!subscriptions) {
      subscriptions = {type: record.type, recipient: record.recipient, items: []};
      return csWot.extendAll([subscriptions], 'recipient')
        .then(function(){
          subscriptions.items.push(record);
          $scope.search.results.push(subscriptions);
          return record;
        });
    }

    subscriptions.items.push(record);
    return $q.when(record);
  };

  /* -- modals -- */

  $scope.showCategoryModal = function() {
    // load categories
    return esSubscription.category.all()
      .then(function(categories){
        return ModalUtils.show('plugins/es/templates/common/modal_category.html', 'ESCategoryModalCtrl as ctrl',
          {categories : categories},
          {focusFirstInput: true}
        );
      })
      .then(function(cat){
        if (cat && cat.parent) {
           return cat;
        }
      });
  };

  $scope.showEmailModal = function(parameters) {
    return ModalUtils.show('plugins/es/templates/subscription/modal_email.html','ModalEmailSubscriptionsCtrl',
      parameters, {focusFirstInput: true});
  };
}


function ModalEmailSubscriptionsController($scope, Modals, csSettings, esHttp, csWot, parameters) {
  'ngInject';

  $scope.frequencies = [
    {id: "daily", label: "daily"},
    {id: "weekly", label: "weekly"}
  ];
  $scope.formData = parameters || {};
  $scope.formData.content = $scope.formData.content || {};
  $scope.formData.content.frequency = $scope.formData.content.frequency || $scope.frequencies[0].id; // set to first value
  $scope.recipient = {};

  $scope.$on('modal.shown', function() {
    // Load recipient (uid, name, avatar...)
    if ($scope.formData.recipient) {
      $scope.recipient = {pubkey: $scope.formData.recipient};
      return csWot.extendAll([$scope.recipient]);
    }
  });

  // Submit
  $scope.doSubmit = function() {
    $scope.form.$submitted = true;
    if (!$scope.form.$valid || !$scope.formData.content.email || !$scope.formData.content.frequency) return;

    var record = {
      type: 'email',
      recipient: $scope.formData.recipient,
      content: {
        email: $scope.formData.content.email,
        locale: csSettings.data.locale.id,
        frequency: $scope.formData.content.frequency
      }
    };
    $scope.closeModal(record);
  };

  $scope.cancel = function() {
    $scope.closeModal();
  };

  if (!!$scope.subscriptionForm) {
    $scope.subscriptionForm.$setPristine();
  }

  $scope.showNetworkLookup = function() {
    return Modals.showNetworkLookup({
      enableFilter: true,
      endpointFilter: esHttp.constants.ES_USER_API_ENDPOINT
    })
      .then(function (peer) {
        if (peer) {
          $scope.recipient = peer;
          $scope.formData.recipient = peer.pubkey;
        }
      });

  };
}


ESDocumentLookupController.$inject = ['$scope', '$ionicPopover', '$location', '$timeout', 'csSettings', 'csWallet', 'UIUtils', 'esHttp', 'esDocument'];angular.module('cesium.es.document.controllers', ['cesium.es.services'])

  .config(['$stateProvider', function($stateProvider) {
    'ngInject';

    $stateProvider

      .state('app.document_search', {
        url: "/data/search/:index/:type?q",
        views: {
          'menuContent': {
            templateUrl: "plugins/es/templates/document/lookup.html",
            controller: 'ESDocumentLookupCtrl'
          }
        },
        data: {
          silentLocationChange: true
        }
      })
    ;
  }])

  .controller('ESDocumentLookupCtrl', ESDocumentLookupController)

;

function ESDocumentLookupController($scope, $ionicPopover, $location, $timeout,
                                    csSettings, csWallet, UIUtils, esHttp, esDocument) {
  'ngInject';

  $scope.search = {
    loading: true,
    hasMore: true,
    text: undefined,
    index: 'invitation',
    type: 'certification',
    results: undefined,
    sort: 'time',
    asc: false
  };
  $scope.entered = false;
  $scope.searchTextId = 'documentSearchText';
  $scope.ionItemClass = 'item-border-large';
  $scope.defaultSizeLimit = UIUtils.screen.isSmall() ? 50 : 100;
  $scope.helptipPrefix = 'helptip-document';

  $scope.$on('$ionicView.enter', function(e, state) {

    if (!$scope.entered) {
      $scope.entered = true;
      $scope.search.index = state.stateParams && state.stateParams.index || $scope.search.index;
      $scope.search.type = state.stateParams && state.stateParams.type || $scope.search.type;
      $scope.search.text = state.stateParams && state.stateParams.q || $scope.search.text;

      $scope.search.last = !$scope.search.text;
      $scope.load();
    }
    $scope.expertMode = angular.isDefined($scope.expertMode) ? $scope.expertMode : !UIUtils.screen.isSmall() && csSettings.data.expertMode;
  });

  $scope.load = function(size, offset) {
    if ($scope.search.error) return;

    var options  = {
      index: $scope.search.index,
      type: $scope.search.type,
      from: offset || 0,
      size: size || $scope.defaultSizeLimit
    };

    // add sort
    if ($scope.search.sort) {
      options.sort = {};
      options.sort[$scope.search.sort] = (!$scope.search.asc ? "desc" : "asc");
    }
    else { // default sort
      options.sort = {time:'desc'};
    }

    $scope.search.loading = true;

    var searchFn =  $scope.search.last ?
      esDocument.search(options) :
      esDocument.searchText($scope.search.text||'', options);
    return searchFn
      .then(function(res) {
        $scope.search.results = res.hits;
        $scope.search.total = res.total;
        $scope.search.took = res.took;

        UIUtils.loading.hide();
        $scope.search.loading = false;

        if (res.hits && res.hits.length > 0) {
          $scope.motion.show({selector: '.list .item.item-document'});
          $scope.search.hasMore = res.total > $scope.search.results.length;
        }
        else {
          $scope.search.hasMore = false;
        }

        $scope.$broadcast('$$rebind::rebind'); // notify binder
      })
      .catch(function(err) {
        $scope.search.results = [];
        $scope.search.loading = false;
        $scope.search.error = true;
        UIUtils.onError('DOCUMENT.ERROR.LOAD_DOCUMENTS_FAILED')(err)
          .then(function() {
            $scope.search.error = false;
          });
      });
  };

  $scope.doSearchText = function() {
    $scope.search.last = $scope.search.text ? false : true;
    return $scope.load()
      .then(function() {
        // Update location href
        $location.search({q: $scope.search.text}).replace();
      });
  };

  $scope.doSearchLast = function() {
    $scope.search.last = true;
    $scope.search.text = undefined;
    return $scope.load();
  };

  $scope.removeAll = function() {
    $scope.hideActionsPopover();
    if (!$scope.search.results || !$scope.search.results.length) return;

    return UIUtils.alert.confirm('DOCUMENT.CONFIRM.REMOVE_ALL')
      .then(function(confirm) {
        if (!confirm) return;
        UIUtils.loading.show();
        return esDocument.removeAll($scope.search.results)
          .then(function() {
            $scope.search.loading = false;
            return $timeout(function() {
              UIUtils.toast.show('DOCUMENT.INFO.REMOVED'); // toast
              return $scope.load();
            }, 1000 /*waiting propagation*/);
          })
          .catch(UIUtils.onError('DOCUMENT.ERROR.REMOVE_ALL_FAILED'));
      });
  };

  $scope.remove = function(index) {
    var doc = $scope.search.results[index];
    if (!doc) return;

    UIUtils.alert.confirm('DOCUMENT.CONFIRM.REMOVE')
      .then(function(confirm) {
        if (!confirm) return;
        return esDocument.remove(doc)
          .then(function () {
            $scope.search.results.splice(index,1); // remove from messages array
            $scope.$broadcast('$$rebind::rebind'); // notify binder
            UIUtils.toast.show('DOCUMENT.INFO.REMOVED'); // toast
          })
          .catch(UIUtils.onError('MESSAGE.ERROR.REMOVE_FAILED'));
      });
  };

  $scope.selectDocument = function(event, doc) {
    console.debug("Selected document: ", doc, esHttp);

    var url = esHttp.getUrl('/{0}/{1}/_search?pretty&q=_id:{2}'.format(doc.index, doc.type, doc.id));
    return $scope.openLink(event, url);
  };

  $scope.toggleSort = function(sort){
    if ($scope.search.sort === sort && !$scope.search.asc) {
      $scope.search.asc = undefined;
      $scope.search.sort = undefined;
    }
    else {
      $scope.search.asc = ($scope.search.sort === sort) ? !$scope.search.asc : true;
      $scope.search.sort = sort;
    }
    $scope.load();
  };

  /* -- Modals -- */

  /* -- Popover -- */

  $scope.showActionsPopover = function(event) {
    if (!$scope.actionsPopover) {
      $ionicPopover.fromTemplateUrl('plugins/es/templates/document/lookup_popover_actions.html', {
        scope: $scope
      }).then(function(popover) {
        $scope.actionsPopover = popover;
        //Cleanup the popover when we're done with it!
        $scope.$on('$destroy', function() {
          $scope.actionsPopover.remove();
        });
        $scope.actionsPopover.show(event);
      });
    }
    else {
      $scope.actionsPopover.show(event);
    }
  };

  $scope.hideActionsPopover = function() {
    if ($scope.actionsPopover) {
      $scope.actionsPopover.hide();
    }
  };

  /* -- watch events -- */

  // Watch unauth
  $scope.onUnauth = function() {
    // Reset all data
    $scope.search.results = undefined;
    $scope.search.loading = false;
    $scope.entered = false;
  };
  csWallet.api.data.on.unauth($scope, $scope.onUnauth);

  // for DEV only
  /*$timeout(function() {
    // launch default action fo DEV
   }, 900);
   */
}


angular.module('cesium.graph.plugin', [
    // Services
    'cesium.graph.services',
    // Controllers
    'cesium.graph.common.controllers',
    'cesium.graph.blockchain.controllers',
    'cesium.graph.network.controllers',
    'cesium.graph.currency.controllers',
    'cesium.graph.account.controllers',
    'cesium.graph.docstats.controllers',
    'cesium.graph.synchro.controllers'
  ])
;


angular.module('cesium.graph.services', [
    // Services
    'cesium.graph.color.services',
    'cesium.graph.data.services'
  ])
;

angular.module('cesium.graph.data.services', ['cesium.wot.services', 'cesium.es.http.services', 'cesium.es.wot.services'])

  .factory('gpData', ['$rootScope', '$q', '$timeout', 'esHttp', 'BMA', 'csWot', 'csCache', 'esWot', function($rootScope, $q, $timeout, esHttp, BMA, csWot, csCache, esWot) {
    'ngInject';

    var
      currencyCache = csCache.get('gpData-currency-', csCache.constants.SHORT),
      exports = {
        node: {},
        wot: {},
        blockchain: {},
        docstat: {},
        synchro: {
          execution: {}
        },
        raw: {
          block: {
            search: esHttp.post('/:currency/block/_search')
          },
          blockstat: {
            search: esHttp.post('/:currency/blockstat/_search')
          },
          movement: {
            search: esHttp.post('/:currency/movement/_search')
          },
          user: {
            event: esHttp.post('/user/event/_search?pretty')
          },
          docstat: {
            search: esHttp.post('/docstat/record/_search')
          },
          synchro: {
            search: esHttp.post('/:currency/synchro/_search')
          }
        },
        regex: {
        }
      };

    function _powBase(amount, base) {
      return base <= 0 ? amount : amount * Math.pow(10, base);
    }

    function _initRangeOptions(options) {
      options = options || {};
      options.maxRangeSize = options.maxRangeSize || 30;
      options.defaultTotalRangeCount = options.defaultTotalRangeCount || options.maxRangeSize*2;

      options.rangeDuration = options.rangeDuration || 'day';
      options.endTime = options.endTime || moment().utc().add(1, options.rangeDuration).unix();
      options.startTime = options.startTime ||
        moment.unix(options.endTime).utc().subtract(options.defaultTotalRangeCount, options.rangeDuration).unix();
      // Make to sure startTime is never before the currency starts - fix #483
      if (options.firstBlockTime && options.startTime < options.firstBlockTime) {
        options.startTime = options.firstBlockTime;
      }
      return options;
    }

    /**
     * Graph: "blocks count by issuer"
     * @param currency
     * @returns {*}
     */
    exports.blockchain.countByIssuer = function(currency) {

      var request = {
        size: 0,
        aggs: {
          blocksByIssuer: {
            terms: {
              field: 'issuer',
              size: 0
            }
          }
        }
      };

      return exports.raw.block.search(request, {currency: currency})
        .then(function(res) {
          var aggs = res.aggregations;
          if (!aggs.blocksByIssuer || !aggs.blocksByIssuer.buckets || !aggs.blocksByIssuer.buckets.length) return;

          var result = {
            blockCount: res.hits.total
          };
          result.data = (aggs.blocksByIssuer.buckets || []).reduce(function(res, agg) {
              return res.concat(agg.doc_count);
            }, []);
          result.issuers = (aggs.blocksByIssuer.buckets || []).reduce(function(res, agg) {
            return res.concat({pubkey: agg.key});
          }, []);

          return csWot.extendAll(result.issuers)
            .then(function() {
              // Set labels, using name, uid or pubkey
              result.labels = result.issuers.reduce(function(res, issuer) {
                return res.concat(issuer.name || issuer.uid || issuer.pubkey.substr(0,8));
              }, []);
              return result;
            });
        });
      };

    /**
     * All block with dividend
     * @param currency
     * @returns {*}
     */
    exports.blockchain.withDividend = function(currency, options) {
      options = options || {};
      var withCache = angular.isDefined(options.withCache) ? options.withCache : true; // enable by default

      var cachekKey = [currency, JSON.stringify(options)].join('-');
      if (withCache) {
        var result = currencyCache.get(cachekKey);
        if (result) {
          // should be already a promise (previous call still running)
          if (!result.blocks) {
            var deferred = $q.defer();
            result.then(function(res) {
              //console.debug("[graph] Detected a duplicated request on monetaryMass [" + currency + "]: will use same request result");
              deferred.resolve(res);
              return res;
            });
            return deferred.promise;
          }
          console.debug("[graph] monetaryMass for [" + currency + "] found in cache");
          return $q.when(result);
        }
      }

      var request = {
        query: {
          filtered: {
            filter: {
              bool: {
                must: [
                  {
                    exists: {
                      field: 'dividend'
                    }
                  }
                ]
              }
            }
          }
        },
        size: options.size || 10000,
        from: options.from || 0,
        _source: ["medianTime", "number", "dividend", "monetaryMass", "membersCount", "unitbase"],
        sort: {
          "medianTime" : "asc"
        }
      };

      var promise = $q.all([
        // Get the current block (if need)
        options.withCurrent ?
          BMA.blockchain.current()
          .catch(function(err) {
            // Special case when currency not started
            if (err && err.ucode == BMA.errorCodes.NO_CURRENT_BLOCK) return undefined;
            throw err;
          }) : $q.when(),
        // Send search request to the ES node
        exports.raw.block.search(request, {currency: currency})
      ])
        .then(function(res) {
          var currentBlock = res[0];
          res = res[1];
          if (!res.hits.total || !res.hits.hits.length) return;

          var result = {};
          result.blocks = res.hits.hits.reduce(function(res, hit){
            var block = hit._source;

            // Apply unitbase on dividend
            block.dividend = _powBase(block.dividend, block.unitbase);
            delete block.unitbase;

            return res.concat(block);
          }, []);

          // Add current block
          if (currentBlock) {
            var deltaWithLastDividend = result.blocks.length && (currentBlock.medianTime - result.blocks[result.blocks.length-1].medianTime);
            if (deltaWithLastDividend && deltaWithLastDividend >= 60*60) {
              // Apply unitbase on dividend
              currentBlock.dividend = _powBase(currentBlock.dividend, currentBlock.unitbase);
              delete currentBlock.unitbase;
              result.blocks.push(currentBlock);
            }
          }

          result.times = result.blocks.reduce(function(res, block){
            return res.concat(block.medianTime);
          }, []);

          // replace promise in cache, with data
          currencyCache.put(cachekKey, result);
          return result;
        });
      currencyCache.put(cachekKey, promise);

      return promise;
    };

    /**
     * Graph: "tx count"
     * @param currency
     * @returns {*}
     */
    exports.blockchain.txCount = function(currency, options) {

      options = _initRangeOptions(options);

      var jobs = [];

      var from = moment.unix(options.startTime).utc().startOf(options.rangeDuration);
      var to = moment.unix(options.endTime).utc().startOf(options.rangeDuration);
      var ranges = [];
      while(from.isBefore(to)) {

        ranges.push({
          from: from.unix(),
          to: from.add(1, options.rangeDuration).unix()
        });

        // Flush if max range count, or just before loop condition end (fix #483)
        var flush = (ranges.length === options.maxRangeSize) || !from.isBefore(to);
        if (flush) {
          var request = {
            size: 0,
            aggs: {
              tx: {
                range: {
                  field: "medianTime",
                  ranges: ranges
                },
                aggs: {
                  txCount : {
                    stats: {
                      field : "txCount"
                    }
                  },
                  txAmount : {
                    stats: {
                      field : "txAmount"
                    }
                  }
                }

              }
            }

          };

          if (options.issuer) {
            request.query = {bool: {filter: {term: {issuer: options.issuer}}}};
          }
          // prepare next loop
          ranges = [];

          if (jobs.length == 10) {
            console.error('Too many parallel jobs!');
            from = moment.unix(options.endTime).utc(); // stop while
          }
          else {
            jobs.push(
              exports.raw.blockstat.search(request, {currency: currency})
                .then(function (res) {
                  var aggs = res.aggregations;
                  if (!aggs.tx || !aggs.tx.buckets || !aggs.tx.buckets.length) return;
                  return (aggs.tx.buckets || []).reduce(function (res, agg) {
                    return res.concat({
                      from: agg.from,
                      to: agg.to,
                      count: agg.txCount.sum||0,
                      amount: agg.txAmount.sum || 0,
                      avgByBlock: Math.round(agg.txCount.avg * 100) / 100,
                      maxByBlock: agg.txCount.max
                    });
                  }, []);
                })
            );
          }
        }
      } // loop

      return $q.all(jobs)
        .then(function(res) {
          res = res.reduce(function(res, hits){
            if (!hits || !hits.length) return res;
            return res.concat(hits);
          }, []);

          res = _.sortBy(res, 'from');

          return {
            count: _.pluck(res, 'count'),
            avgByBlock: _.pluck(res, 'avgByBlock'),
            maxByBlock: _.pluck(res, 'maxByBlock'),
            amount:  res.reduce(function(res, hit){
              return res.concat(hit.amount/100);
            }, []),
            times: _.pluck(res, 'from')
          };
        });
    };

    /**
     * Graph: "block count"
     * @param currency
     * @returns {*}
     */
    exports.node.blockCount = function(currency, pubkey) {

      var request = {
        size: 0,
        query: {bool: {filter: {term: {issuer: pubkey}}}}
      };

      return exports.raw.block.search(request, {currency: currency})
        .then(function (res) {
          return res.hits.total;
        });
    };


    exports.raw.movement.getByRange = function(currency, pubkey, ranges) {
      if (!pubkey) {
        throw new Error('Missing \'pubkey\' argument!');
      }
      var request = {
        size: 0,
        query: {
          bool: {
            should: [
              {term: {recipient: pubkey}},
              {term: {issuer: pubkey}}
            ]
          }
        },
        aggs: {
          tx: {
            range: {
              field: "medianTime",
              ranges: ranges
            },
            aggs: {
              received: {
                filter: {term: {recipient: pubkey}},
                aggs: {
                  received_stats: {
                    stats: {
                      field: "amount"
                    }
                  }
                }
              },
              sent: {
                filter: {term: {issuer: pubkey}},
                aggs: {
                  sent_stats: {
                    stats: {
                      field: "amount"
                    }
                  }
                }
              }
            }

          }
        }
      };

      return exports.raw.movement.search(request, {currency: currency})
        .then(function(res) {
          var aggs = res.aggregations;
          if (!aggs.tx || !aggs.tx.buckets || !aggs.tx.buckets.length) return;
          return (aggs.tx.buckets || []).reduce(function (res, agg) {
            var sent = agg.sent.sent_stats;
            var received = agg.received.received_stats;
            return res.concat({
              from: agg.from,
              to: agg.to,
              sent: sent.sum ? (-sent.sum / 100) : 0,
              received: received.sum ? (received.sum / 100) : 0
            });
          }, []);
        });
    };

    exports.raw.movement.getUds = function(currency, ranges, fromMapping) {
      var request = {
        size: 0,
        query: {
          bool: {
            should: [
              {exists: {field: 'dividend'}}
            ]
          }
        },
        aggs: {
          ud: {
            range: {
              field: 'medianTime',
              ranges: ranges
            },
            aggs: {
              ud_stats: {
                stats: {
                  field: 'dividend'
                }
              },
              unitbase_stats: {
                stats: {
                  field: 'unitbase'
                }
              }
            }
          }
        }
      };

      return exports.raw.block.search(request, {currency: currency})
        .then(function(res) {
          var aggs = res.aggregations;
          if (!aggs.ud || !aggs.ud.buckets || !aggs.ud.buckets.length) return;
          return (aggs.ud.buckets || []).reduce(function (res, agg) {
            var from = fromMapping[agg.from];
            res[from] = _powBase(agg.ud_stats.sum, agg.unitbase_stats.min) / 100;
            return res;
          }, {});
        });
    };

    /**
     * Graph: "tx amount"
     * @param currency
     * @returns {*}
     */
    exports.blockchain.movement = function(currency, options) {

      options = _initRangeOptions(options);
      options.withUD = angular.isDefined(options.withUD) ? options.withUD : true;

      var jobs = [];

      // If need and missing: load membership periods
      if (options.withUD && !options.memberships) {
        return esWot.memberships(options.pubkey)
          .then(function(res) {
            options.memberships = res || [];
            // loop, with membership filled
            return exports.blockchain.movement(currency, options);
          });
      }

      var from = moment.unix(options.startTime).utc().startOf(options.rangeDuration);
      var to = moment.unix(options.endTime).utc().startOf(options.rangeDuration);

      var ranges = [];
      var udRanges = [];
      var udFromMapping = {};
      var memberships = angular.copy(options.memberships).reverse();
      var membership = memberships.pop();

      function addRange(range) {
        ranges.push(range);
        var member = membership && membership.joinTime < range.to;
        if (member) {
          var udRange = {
            from: Math.max(membership.joinTime, range.from),
            to: Math.min(membership.leaveTime, range.to)
          };
          udRanges.push(udRange);
          udFromMapping[udRange.from] = range.from;
          while (membership && (membership.leaveTime && membership.leaveTime < range.to)) {
            membership = memberships.pop();
          }
        }
      }

      // Add a range to get TX before startTime
      addRange({
        from: 0,
        to: from.unix()
      });

      while(from.isBefore(to)) {

        addRange({
          from: from.unix(),
          to: from.add(1, options.rangeDuration).unix()
        });

        // Flush if max range count, or just before loop condition end (fix #483)
        var flush = (!jobs.length && ranges.length == options.maxRangeSize+1) ||
          (jobs.length && ranges.length == options.maxRangeSize) ||
          !from.isBefore(to);
        if (flush) {
          if (udRanges.length) {
            jobs.push($q.all([
              exports.raw.movement.getUds(currency, udRanges, udFromMapping),
              exports.raw.movement.getByRange(currency, options.pubkey, ranges)
            ])
            .then(function(res){
              var udsMap = res[0];
              res = res[1];
              // fill UD
              res.forEach(function(hit){
                hit.ud = (udsMap[hit.from]) || 0;
              });
              return res;
            }));
          }
          else {
            jobs.push(exports.raw.movement.getByRange(currency, options.pubkey, ranges)
              .then(function(res){
                // fill UD
                res.forEach(function(hit){
                  hit.ud = 0;
                });
                return res;
              }));
          }

          // reset ranges for the next loop
          ranges = [];
        }
      } // loop

      return $q.all(jobs)
        .then(function(res) {
          // concat all results
          res = res.reduce(function(res, hits){
            if (!hits || !hits.length) return res;
            return res.concat(hits);
          }, []);

          if (!res.length) return;

          // Sort by 'from' field
          res = _.sortBy(res, 'from');

          // First item should be history (tx before startTime)
          var history = res.splice(0,1)[0];
          var balance = history.received + history.sent + history.ud;

          return {
            times: _.pluck(res, 'from'),
            ud: _.pluck(res, 'ud'),
            sent: _.pluck(res, 'sent'),
            received: _.pluck(res, 'received'),
            balance: res.reduce(function(res, hit){
              balance += hit.received + hit.sent + hit.ud;
              return res.concat(balance);
            }, [])
          };
        });
    };


    /**
     * Graph: "tx count"
     * @param currency
     * @returns {*}
     */
    exports.wot.certifications = function(options) {

      options = _initRangeOptions(options);

      return csWot.load(options.pubkey)
        .then(function(idty) {
          if (!idty) return;
          var res = {};
          _.forEach(idty.given_cert||[], function(cert){
            var truncTime = moment.unix(cert.time).utc().startOf(options.rangeDuration).unix();
            res[truncTime] = res[truncTime] || {time:truncTime,given:0,received:0};
            res[truncTime].given++;
          });
          _.forEach(idty.received_cert||[], function(cert){
            var truncTime = moment.unix(cert.time).utc().startOf(options.rangeDuration).unix();
            res[truncTime] = res[truncTime] || {time:truncTime,given:0,received:0};
            res[truncTime].received++;
          });

          // Sort by time
          res = _.sortBy(_.values(res), 'time');

          // create final result
          var result = {
            times: _.pluck(res, 'time'),
            deltaGiven: _.pluck(res, 'given'),
            deltaReceived: _.pluck(res, 'received')
          };
          var sum = 0;
          result.given = result.deltaGiven.reduce(function(res, delta) {
            sum += delta;
            return res.concat(sum);
          }, []);
          sum = 0;
          result.received = result.deltaReceived.reduce(function(res, delta) {
            sum += delta;
            return res.concat(sum);
          }, []);
          return result;

        });
    };


    exports.wot.memberships = function(options) {

      options = options || {};

      // Get user events on membership state
      var request = {
        "size": 1000,
        "query": {
          "bool": {
            "filter": [
              {"term": {"recipient" : options.pubkey }},
              {"terms": {"code" : ["MEMBER_JOIN","MEMBER_ACTIVE","MEMBER_LEAVE","MEMBER_EXCLUDE","MEMBER_REVOKE"] }}
            ]
          }
        },
        "sort" : [
          { "time" : {"order" : "asc"}}
        ],
        _source: ["code", "time"]
      };

      return exports.raw.user.event(request)

        .then(function(res) {
          if (!res.hits || !res.hits.total) return;

          // Compute member periods
          var lastJoinTime;
          var result = res.hits.hits.reduce(function(res, hit){
            var isMember = hit._source.code == 'MEMBER_JOIN' || hit._source.code == 'MEMBER_ACTIVE';
            // If join
            if (isMember && !lastJoinTime) {
              lastJoinTime = hit._source.time;
            }
            // If leave
            else if (!isMember && lastJoinTime) {
              // Add an entry
              res = res.concat({
                joinTime: lastJoinTime,
                leaveTime: hit._source.time
              });
              lastJoinTime = 0; // reset
            }
            return res;
          }, []);

          if (lastJoinTime) {
            // Add last entry if need
            result.push({
              joinTime: lastJoinTime,
              leaveTime: moment().utc().unix()
            });
          }

          return result;
        });
    };

    /**
     * Graph: "statictics on ES documents"
     * @param currency
     * @returns {*}
     */
    exports.docstat.get = function(options) {

      options = _initRangeOptions(options);

      var jobs = [];

      var from = moment.unix(options.startTime).utc().startOf(options.rangeDuration);
      var to = moment.unix(options.endTime).utc().startOf(options.rangeDuration);
      var ranges = [];
      while(from.isBefore(to)) {

        ranges.push({
          from: from.unix(),
          to: from.add(1, options.rangeDuration).unix()
        });

        // Flush if max range count, or just before loop condition end (fix #483)
        var flush = (ranges.length === options.maxRangeSize) || !from.isBefore(to);
        if (flush) {
          var request = {
            size: 0,
            aggs: {
              range: {
                range: {
                  field: "time",
                  ranges: ranges
                },
                aggs: {
                  index : {
                    terms: {
                      field: "index",
                      size: 0
                    },
                    aggs: {
                      type: {
                        terms: {
                          field: "indexType",
                          size: 0
                        },
                        aggs: {
                          max: {
                            max: {
                              field : "count"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }

          };

          // prepare next loop
          ranges = [];
          var indices = {};

          if (jobs.length == 10) {
            console.error('Too many parallel jobs!');
            from = moment.unix(options.endTime).utc(); // stop while
          }
          else {
            jobs.push(
              exports.raw.docstat.search(request)
                .then(function (res) {
                  var aggs = res.aggregations;
                  return (aggs.range && aggs.range.buckets || []).reduce(function (res, agg) {
                    var item = {
                      from: agg.from,
                      to: agg.to
                    };
                    _.forEach(agg.index && agg.index.buckets || [], function (agg) {
                      var index = agg.key;
                      _.forEach(agg.type && agg.type.buckets || [], function (agg) {
                        var key = (index + '_' + agg.key);
                        item[key] = agg.max.value;
                        if (!indices[key]) indices[key] = true;
                      });
                    });
                    return res.concat(item);
                  }, []);
                })
            );
          }
        }
      } // loop

      return $q.all(jobs)
        .then(function(res) {
          res = res.reduce(function(res, hits){
            if (!hits || !hits.length) return res;
            return res.concat(hits);
          }, []);

          res = _.sortBy(res, 'from');

          return _.keys(indices).reduce(function(series, index) {
            series[index] = _.pluck(res, index);
            return series;
          }, {
            times: _.pluck(res, 'from')
          });
        });
    };


    /**
     * Graph: "statictics on ES documents"
     * @param currency
     * @returns {*}
     */
    exports.synchro.execution.get = function(options) {

      options = _initRangeOptions(options);

      var jobs = [];

      var from = moment.unix(options.startTime).utc().startOf(options.rangeDuration);
      var to = moment.unix(options.endTime).utc().startOf(options.rangeDuration);
      var ranges = [];
      while(from.isBefore(to)) {

        ranges.push({
          from: from.unix(),
          to: from.add(1, options.rangeDuration).unix()
        });

        // Flush if max range count, or just before loop condition end (fix #483)
        var flush = (ranges.length === options.maxRangeSize) || !from.isBefore(to);
        if (flush) {
          var request = {
            size: 0,
            aggs: {
              range: {
                range: {
                  field: "time",
                  ranges: ranges
                },
                aggs: {
                  api: {
                    terms: {
                      field: "api",
                      size: 0
                    },
                    aggs: {
                      peer_count: {
                        cardinality: {
                          field: "peer"
                        }
                      }
                    }
                  },
                  duration: {
                    sum: {
                      field: "executionTime"
                    }
                  },
                  result: {
                    nested: {
                      path: "result"
                    },
                    aggs: {
                      inserts : {
                        sum: {
                          field : "result.inserts"
                        }
                      },
                      updates : {
                        sum: {
                          field : "result.updates"
                        }
                      },
                      deletes : {
                        sum: {
                          field : "result.deletes"
                        }
                      }
                    }
                  }
                }
              }
            }

          };

          // prepare next loop
          ranges = [];
          var apis = {};

          if (jobs.length == 10) {
            console.error('Too many parallel jobs!');
            from = moment.unix(options.endTime).utc(); // stop while
          }
          else {
            jobs.push(
              exports.raw.synchro.search(request, {currency: options.currency})
                .then(function (res) {
                  var aggs = res.aggregations;

                  return (aggs.range && aggs.range.buckets || []).reduce(function (res, agg) {
                    var item = {
                      from: agg.from,
                      to: agg.to,
                      inserts: agg.result.inserts.value,
                      updates: agg.result.inserts.value,
                      deletes: agg.result.deletes.value,
                      duration: agg.duration.value
                    };
                    _.forEach(agg.api && agg.api.buckets || [], function (api) {
                      item[api.key] = api.peer_count && api.peer_count.value || 0;
                      if (!apis[api.key]) apis[api.key] = true;
                    });

                    return res.concat(item);
                  }, []);
                })
            );
          }
        }
      } // loop

      return $q.all(jobs)
        .then(function(res) {
          res = res.reduce(function(res, hits){
            if (!hits || !hits.length) return res;
            return res.concat(hits);
          }, []);

          res = _.sortBy(res, 'from');

          var series = {
            times: _.pluck(res, 'from'),
            inserts: _.pluck(res, 'inserts'),
            updates: _.pluck(res, 'updates'),
            deletes: _.pluck(res, 'deletes'),
            duration: _.pluck(res, 'duration')
          };

          _.keys(apis).forEach(function(api) {
            series[api] = _.pluck(res, api);
          });

          return series;
        });
    };

    return exports;
  }])



;

angular.module('cesium.graph.color.services', [])

  .factory('gpColor', function() {
    'ngInject';

    var
      constants = {
        css2Rgb: {
          'white': [255, 255, 255],
          'assertive': [239, 71, 58], // ok
          'calm': [17, 193, 243], // ok
          'positive': [56, 126, 245], // ok
          'balanced': [51, 205, 95], // ok
          'energized': [255, 201, 0], // ok
          'royal': [136, 106, 234], // ok
          'gray': [150, 150, 150], // ok
          'stable': [248, 248, 248] // ok
        }
      },
      exports = {
        scale: {}
      };


    /**
     * Compute colors scale
     * @param count
     * @param opacity
     * @param startColor
     * @param startState
     * @returns {Array}
     */
    exports.scale.custom = function (count, opacity, startColor, startState) {

      function _state2side(state) {
        switch (state) {
          case 0:
            return 0;
          case 1:
            return -1;
          case 2:
            return 0;
          case 3:
            return 1;
        }
      }

      // From [0,1]
      opacity = opacity>0 && opacity|| 0.55;

      var defaultStateSize = Math.round(count / 2.5/*=4 states max*/);

      // Start color [r,v,b]
      var color = startColor && startColor.length == 3 ? angular.copy(startColor) : [255, 0, 0]; // Red

      // Colors state: 0=keep, 1=decrease, 2=keep, 3=increase
      var states = startState && startState.length == 3 ? angular.copy(startState) : [0, 2, 3]; // R=keep, V=keep, B=increase

      var steps = startColor ? [
        Math.round(255 / defaultStateSize),
        Math.round(255 / defaultStateSize),
        Math.round(255 / defaultStateSize)
      ] : [
        Math.round((color[0] - 50) / defaultStateSize),
        Math.round((255 - color[1]) / defaultStateSize),
        Math.round((255 - color[2]) / defaultStateSize)
      ];


      // Compute start sides (1=increase, 0=flat, -1=decrease)
      var sides = [
        _state2side(states[0]),
        _state2side(states[1]),
        _state2side(states[2])];

      // Use to detect when need to change a 'flat' state (when state = 0 or 2)
      var stateCounters = [0, 0, 0];

      var result = [];
      for (var i = 0; i < count; i++) {
        for (var j = 0; j < 3; j++) {
          color[j] += sides[j] * steps[j];
          stateCounters[j]++;
          // color has reach a limit
          if (((color[j] <= 0 || color[j] >= 255) && sides[j] !== 0) ||
            (sides[j] === 0 && stateCounters[j] == defaultStateSize)) {
            // Max sure not overflow limit
            if (color[j] <= 0) {
              color[j] = 0;
            }
            else if (color[j] >= 255) {
              color[j] = 255;
            }
            // Go to the next state, in [0..3]
            states[j] = (states[j] + 1) % 4;

            // Update side from this new state
            sides[j] = _state2side(states[j]);

            // Reset state counter
            stateCounters[j] = 0;
          }
        }

        // Add the color to result
        result.push('rgba(' + color[0] + ',' + color[1] + ',' + color[2] + ',' + opacity + ')');

      }
      return result;
    };

    exports.scale.default = function () {
      return exports.scale.custom(25);
    };

    /**
     * Create a array with the given color
     **/
    exports.scale.fix = function (length, color) {
      return Array.apply(null, Array(length||25))
        .map(String.prototype.valueOf, color||exports.rgba.calm(0.5));
    };

    // Create a function to generate a rgba string, from
    exports.rgba = _.mapObject(constants.css2Rgb, function(rgbArray){
      var prefix = 'rgba(' + rgbArray.join(',') + ',';
      return function(opacity){
        if (!opacity || opacity < 0) {
          return 'rgb(' + rgbArray.join(',') + ')';
        }
        return prefix + opacity + ')';
      };
    });

    exports.rgba.translucent = function() {
      return 'rgb(0,0,0,0)';
    };

    exports.constants = constants;

    return exports;
  })

;


GpCurrencyAbstractController.$inject = ['$scope', '$filter', '$ionicPopover', '$ionicHistory', '$state', 'csSettings', 'csCurrency', 'esHttp'];
angular.module('cesium.graph.common.controllers', ['cesium.services'])

  .controller('GpCurrencyAbstractCtrl', GpCurrencyAbstractController)
;

function GpCurrencyAbstractController($scope, $filter, $ionicPopover, $ionicHistory, $state, csSettings, csCurrency, esHttp) {
  'ngInject';

  $scope.loading = true;
  $scope.formData = $scope.formData || {
    useRelative: csSettings.data.useRelative,
    timePct: 100,
    rangeDuration: 'day',
    firstBlockTime: 0,
    scale: 'linear',
    hide: []
  };
  $scope.formData.useRelative = false; /*angular.isDefined($scope.formData.useRelative) ?
    $scope.formData.useRelative : csSettings.data.useRelative;*/
  $scope.scale = 'linear';
  $scope.height = undefined;
  $scope.width = undefined;
  $scope.maintainAspectRatio = true;
  $scope.times = [];

  function _truncDate(time) {
    return moment.unix(time).utc().startOf($scope.formData.rangeDuration).unix();
  }

  $scope.enter = function (e, state) {
    if ($scope.loading) {

      if (state && state.stateParams) {
        // remember state, to be able to refresh location
        $scope.stateName = state && state.stateName;
        $scope.stateParams = angular.copy(state && state.stateParams||{});

        if (!$scope.formData.currency && state && state.stateParams && state.stateParams.currency) { // Currency parameter
          $scope.formData.currency = state.stateParams.currency;
        }
        if (state.stateParams.t) {
          $scope.formData.timePct = state.stateParams.t;
        }
        else if (state.stateParams.timePct) {
          $scope.formData.timePct = state.stateParams.timePct;
        }
        if (state.stateParams.stepUnit) {
          $scope.formData.rangeDuration = state.stateParams.stepUnit;
        }
        if (state.stateParams.scale) {
          $scope.formData.scale = state.stateParams.scale;
        }
        // Allow to hide some dataset
        if (state.stateParams.hide) {
          $scope.formData.hide = state.stateParams.hide.split(',').reduce(function(res, index){
            return res.concat(parseInt(index));
          }, []);
        }
      }

      // Should be override by subclasses
      $scope.init(e, state);

      // Make sure there is currency, or load it not
      if (!$scope.formData.currency) {
        return csCurrency.get()
          .then(function (currency) {
            $scope.formData.currency = currency ? currency.name : null;
            $scope.formData.firstBlockTime = currency ? _truncDate(currency.firstBlockTime) : 0;
            if (!$scope.formData.firstBlockTime){
              console.warn('[graph] currency.firstBlockTime not loaded ! Should have been loaded by currrency service!');
            }
            $scope.formData.currencyAge = _truncDate(esHttp.date.now()) - $scope.formData.firstBlockTime;

            return $scope.enter(e, state);
          });
      }

      $scope.load()  // Should be override by subclasses
        .then(function () {
          // Update scale
          $scope.setScale($scope.formData.scale);
          // Hide some dataset by index (read from state params)
          $scope.updateHiddenDataset();

          $scope.loading = false;
        });
    }
  };
  $scope.$on('$csExtension.enter', $scope.enter);
  $scope.$on('$ionicParentView.enter', $scope.enter);

  $scope.updateLocation = function() {
    $ionicHistory.nextViewOptions({
      disableAnimate: true,
      disableBack: true,
      historyRoot: true
    });

    $scope.stateParams = $scope.stateParams || {};
    $scope.stateParams.t = ($scope.formData.timePct >= 0 && $scope.formData.timePct < 100) ? $scope.formData.timePct : undefined;
    $scope.stateParams.stepUnit = $scope.formData.rangeDuration != 'day' ? $scope.formData.rangeDuration : undefined;
    $scope.stateParams.hide = $scope.formData.hide && $scope.formData.hide.length ? $scope.formData.hide.join(',') : undefined;
    $scope.stateParams.scale = $scope.formData.scale != 'linear' ?$scope.formData.scale : undefined;

    $state.go($scope.stateName, $scope.stateParams, {
      reload: false,
      inherit: true,
      notify: false}
    );
  };

  // Allow to fixe size, form a template (e.g. in a 'ng-init' tag)
  $scope.setSize = function(height, width, maintainAspectRatio) {
    $scope.height = height;
    $scope.width = width;
    $scope.maintainAspectRatio = angular.isDefined(maintainAspectRatio) ? maintainAspectRatio : $scope.maintainAspectRatio;
  };

  // When parent view execute a refresh action
  $scope.$on('csView.action.refresh', function(event, context) {
    if (!context || context == 'currency') {
      return $scope.load();
    }
  });

  $scope.init = function(e, state) {
    // Should be override by subclasses
  };

  $scope.load = function() {
    // Should be override by subclasses
  };

  $scope.toggleScale = function() {
    $scope.setScale($scope.formData.scale === 'linear' ? 'logarithmic' : 'linear');
    $scope.updateLocation();
  };

  $scope.setScale = function(scale) {
    $scope.hideActionsPopover();
    $scope.formData.scale = scale;

    if (!$scope.options || !$scope.options.scales || !$scope.options.scales.yAxes) return;

    var format = $filter('formatInteger');

    _.forEach($scope.options.scales.yAxes, function(yAxe, index) {
      yAxe.type = scale;
      yAxe.ticks = yAxe.ticks || {};
      if (scale == 'linear') {
        yAxe.ticks.beginAtZero = true;
        delete yAxe.ticks.min;
        yAxe.ticks.callback = function(value) {
          return format(value);
        };
      }
      else {
        //yAxe.ticks.min = 0;
        delete yAxe.ticks.beginAtZero;
        delete yAxe.ticks.callback;
        yAxe.ticks.callback = function(value, index) {
          if (!value) return;
          if (Math.log10(value)%1 === 0 || Math.log10(value/3)%1 === 0) {
            return format(value);
          }
          return '';
        };
      }
    });
  };

  $scope.setRangeDuration = function(rangeDuration) {
    $scope.hideActionsPopover();
    if ($scope.formData && rangeDuration == $scope.formData.rangeDuration) return;

    $scope.formData.rangeDuration = rangeDuration;

    // Restore default values
    delete $scope.formData.startTime;
    delete $scope.formData.endTime;
    delete $scope.formData.rangeDurationSec;
    //$scope.formData.timePct = 100;

    // Reload data
    $scope.load();
    // Update location
    $scope.updateLocation();
  };

  $scope.updateHiddenDataset = function(datasetOverride) {
    datasetOverride = datasetOverride || $scope.datasetOverride || {};

    _.forEach($scope.formData.hide||[], function(index) {
      if (!datasetOverride[index]) return; // skip invalid index

      // Hide the dataset (stroke the legend)
      datasetOverride[index].hidden = true;

      // If this dataset has an yAxis, hide it (if not used elsewhere)
      var yAxisID = datasetOverride[index].yAxisID;
      var yAxe = yAxisID && $scope.options && $scope.options.scales && _.findWhere($scope.options.scales.yAxes||[], {id: yAxisID});
      if (yAxisID && yAxe) {
        var yAxisDatasetCount = _.filter(datasetOverride, function(dataset) {
          return dataset.yAxisID === yAxisID;
        }).length;
        if (yAxisDatasetCount == 1) {
          yAxe.display = false;
        }
      }

    });
  };

  $scope.onLegendClick = function(e, legendItem) {
    var index = legendItem.datasetIndex;
    var ci = this.chart;
    var meta = ci.getDatasetMeta(index);

    // Hide/show the dataset
    meta.hidden = meta.hidden === null? !ci.data.datasets[index].hidden : null;

    // Update yAxis display (if used by only ONE dataset)
    if (ci.config && ci.config.data && ci.config.data.datasets) {
      var yAxisDatasetCount = _.filter(ci.config.data.datasets, function(dataset) {
        return dataset.yAxisID && dataset.yAxisID === meta.yAxisID;
      }).length;
      if (yAxisDatasetCount === 1) {
        ci.scales[meta.yAxisID].options.display = !(meta.hidden === true);
      }
    }

    // We hid a dataset ... rerender the chart
    ci.update();

    // Update window location
    $scope.formData.hide = $scope.formData.hide||[];
    $scope.formData.hide = meta.hidden ?
      _.union($scope.formData.hide, [index]) :
      _.difference($scope.formData.hide, [index]);
    $scope.updateLocation();
  };

  $scope.goPreviousRange = function() {
    if ($scope.loadingRange) return;
    $scope.loadingRange = true;

    $scope.formData.startTime -= $scope.times.length * $scope.formData.rangeDurationSec;
    if ($scope.formData.startTime < $scope.formData.firstBlockTime) {
      $scope.formData.startTime = $scope.formData.firstBlockTime;
    }
    $scope.formData.endTime = $scope.formData.startTime + $scope.times.length * $scope.formData.rangeDurationSec;

    // Reload data
    $scope.load().then(function(){
      // Update location
      $scope.updateLocation();

      $scope.loadingRange = false;
    });
  };

  $scope.goNextRange = function() {
    if ($scope.loadingRange) return;
    $scope.loadingRange = true;
    $scope.formData.startTime += $scope.times.length * $scope.formData.rangeDurationSec;
    if ($scope.formData.startTime > $scope.formData.firstBlockTime + $scope.formData.currencyAge - $scope.formData.timeWindow) {
      $scope.formData.startTime = $scope.formData.firstBlockTime + $scope.formData.currencyAge - $scope.formData.timeWindow;
    }
    $scope.formData.endTime = $scope.formData.startTime + $scope.times.length * $scope.formData.rangeDurationSec;

    // Reload data
    $scope.load().then(function(){
      // Update location
      $scope.updateLocation();

      $scope.loadingRange = false;
    });
  };

  $scope.onRangeChanged = function() {
    if ($scope.loadingRange) return;
    $scope.loadingRange = true;

    $scope.formData.startTime = $scope.formData.firstBlockTime + (parseFloat($scope.formData.timePct) / 100) * ($scope.formData.currencyAge - $scope.formData.timeWindow) ;
    $scope.formData.endTime = $scope.formData.startTime + $scope.times.length * $scope.formData.rangeDurationSec;

    // Reload data
    $scope.load().then(function(){
      // Update location
      $scope.updateLocation();

      $scope.loadingRange = false;
    });
  };

  $scope.updateRange = function(startTime, endTime, updateTimePct) {
    updateTimePct = angular.isDefined(updateTimePct) ? updateTimePct : true;

    $scope.formData.startTime = startTime;
    $scope.formData.endTime = endTime;
    $scope.formData.timeWindow = $scope.formData.timeWindow || $scope.formData.endTime - $scope.formData.startTime;
    $scope.formData.rangeDurationSec = $scope.formData.rangeDurationSec || $scope.formData.timeWindow / ($scope.times.length-1);

    if (updateTimePct) {
      $scope.formData.timePct = Math.ceil(($scope.formData.startTime - $scope.formData.firstBlockTime) * 100 /
        ($scope.formData.currencyAge - $scope.formData.timeWindow));
    }
  };

  /* -- Popover -- */

  $scope.showActionsPopover = function(event) {
    $scope.hideActionsPopover();
    $ionicPopover.fromTemplateUrl('plugins/graph/templates/common/popover_range_actions.html', {
      scope: $scope
    }).then(function(popover) {
      $scope.actionsPopover = popover;
      //Cleanup the popover when we're done with it!
      $scope.$on('$destroy', function() {
        $scope.actionsPopover.remove();
      });
      $scope.actionsPopover.show(event);
    });
  };

  $scope.hideActionsPopover = function() {
    if ($scope.actionsPopover) {
      $scope.actionsPopover.hide();
    }
  };
}


GpBlockchainTxCountController.$inject = ['$scope', '$controller', '$q', '$state', '$filter', '$translate', 'gpData', 'gpColor'];
GpBlockchainIssuersController.$inject = ['$scope', '$controller', '$q', '$state', '$translate', 'gpColor', 'gpData'];
angular.module('cesium.graph.blockchain.controllers', ['chart.js', 'cesium.services', 'cesium.graph.services'])

  .config(['$stateProvider', function($stateProvider) {
    'ngInject';

    $stateProvider

      .state('app.blockchain_stats', {
        url: "/blockchain/stats?currency&stepUnit&t&hide&scale",
        views: {
          'menuContent': {
            templateUrl: "plugins/graph/templates/blockchain/view_stats.html"
          }
        }
      })

      .state('app.currency_blockchain_stats', {
        url: "/:currency/blockchain/stats",
        views: {
          'menuContent': {
            templateUrl: "plugins/graph/templates/blockchain/view_stats.html"
          }
        }
      })
    ;
  }])

  .controller('GpBlockchainTxCountCtrl', GpBlockchainTxCountController)
  .controller('GpBlockchainIssuersCtrl', GpBlockchainIssuersController)
;


function GpBlockchainTxCountController($scope, $controller, $q, $state, $filter, $translate, gpData, gpColor) {
  'ngInject';

  // Initialize the super class and extend it.
  angular.extend(this, $controller('GpCurrencyAbstractCtrl', {$scope: $scope}));

  $scope.displayRightAxis = true;

  $scope.init = function(e, state) {
    if (state && state.stateParams) {

      // get the pubkey
      if (!$scope.formData.issuer && state && state.stateParams && state.stateParams.pubkey) { // Currency parameter
        $scope.formData.issuer = state.stateParams.pubkey;
      }
    }
  };

  $scope.load = function(updateTimePct) {

    var formData = $scope.formData;

    return $q.all([

      $translate($scope.formData.issuer?
        'GRAPH.BLOCKCHAIN.TX_AMOUNT_PUBKEY_TITLE':
        'GRAPH.BLOCKCHAIN.TX_AMOUNT_TITLE', formData),

      // translate i18n keys
      $translate(['GRAPH.BLOCKCHAIN.TX_AMOUNT_LABEL',
        'GRAPH.BLOCKCHAIN.TX_COUNT_LABEL',
        'GRAPH.BLOCKCHAIN.TX_AVG_BY_BLOCK',
        'COMMON.DATE_PATTERN',
        'COMMON.DATE_SHORT_PATTERN',
        'COMMON.DATE_MONTH_YEAR_PATTERN']),

      // get data
      gpData.blockchain.txCount($scope.formData.currency, formData)
    ])
      .then(function(result) {

        var title = result[0];

        var translations = result[1];
        var datePatterns = {
          hour: translations['COMMON.DATE_PATTERN'],
          day: translations['COMMON.DATE_SHORT_PATTERN'],
          month: translations['COMMON.DATE_MONTH_YEAR_PATTERN']
        };

        result = result[2];

        if (!result || !result.times) return; // no data
        $scope.times = result.times;

        var formatInteger = $filter('formatInteger');
        var formatAmount =  $filter('formatDecimal');
        $scope.currencySymbol = $filter('currencySymbolNoHtml')($scope.formData.currency, $scope.formData.useRelative);

        // Data
        if ($scope.formData.rangeDuration != 'hour') {
          $scope.data = [
            result.amount,
            result.count
          ];
        }
        else {
          $scope.data = [
            result.amount,
            result.count
          ];
        }

        // Labels
        var labelPattern = datePatterns[$scope.formData.rangeDuration];
        $scope.labels = result.times.reduce(function(res, time) {
          return res.concat(moment.unix(time).local().format(labelPattern));
        }, []);

        // Colors
        $scope.colors = gpColor.scale.fix(result.times.length);

        // Update range options with received values
        $scope.updateRange(result.times[0], result.times[result.times.length-1], updateTimePct);

        // Options
        $scope.options = {
          responsive: true,
          maintainAspectRatio: true,
          title: {
            display: true,
            text: title
          },
          scales: {
            yAxes: [
              {
                id: 'y-axis-amount',
                position: 'left'
              },
              {
                id: 'y-axis-count',
                display: $scope.displayRightAxis,
                position: 'right',
                gridLines: {
                  drawOnChartArea: false
                }
              }
            ]
          },
          legend: {
            display: $scope.displayRightAxis,
            onClick: $scope.onLegendClick
          },
          tooltips: {
            enabled: true,
            mode: 'index',
            callbacks: {
              label: function(tooltipItems, data) {
                if (tooltipItems.datasetIndex === 0) {
                  return data.datasets[tooltipItems.datasetIndex].label +
                    ': ' + formatAmount(tooltipItems.yLabel) +
                    ' ' + $scope.currencySymbol;
                }
                return data.datasets[tooltipItems.datasetIndex].label +
                  ': ' + tooltipItems.yLabel;
              }
            }
          }
        };

        // Override dataset config
        $scope.datasetOverride = [
          {
            yAxisID: 'y-axis-amount',
            type: 'bar',
            label: translations['GRAPH.BLOCKCHAIN.TX_AMOUNT_LABEL'],
            hoverBackgroundColor: gpColor.rgba.calm(0.6)
          },
          {
            yAxisID: 'y-axis-count',
            type: 'line',
            label: translations['GRAPH.BLOCKCHAIN.TX_COUNT_LABEL'],
            fill: false,
            borderColor: gpColor.rgba.gray(0.5),
            borderWidth: 2,
            backgroundColor: gpColor.rgba.gray(0.5),
            pointBackgroundColor: gpColor.rgba.gray(0.5),
            pointBorderColor: gpColor.rgba.white(),
            pointHoverBackgroundColor: gpColor.rgba.gray(1),
            pointHoverBorderColor: gpColor.rgba.translucent(),
            pointRadius: 3
          }
        ];
      });
  };

  $scope.onChartClick = function(data, e, item) {
    if (!item) return;
    var from = $scope.times[item._index];
    var to = moment.unix(from).utc().add(1, $scope.formData.rangeDuration).unix();
    var query = '_exists_:transactions AND medianTime:>={0} AND medianTime:<{1}'.format(from, to);
    if ($scope.formData.issuer) {
      query += ' AND issuer:' + $scope.formData.issuer;
    }
    $state.go('app.blockchain_search', {q: query});
  };

}


function GpBlockchainIssuersController($scope, $controller, $q, $state, $translate, gpColor, gpData) {
  'ngInject';

  // Initialize the super class and extend it.
  angular.extend(this, $controller('GpCurrencyAbstractCtrl', {$scope: $scope}));

  $scope.load = function() {
    return $q.all([
      $translate([
        'GRAPH.BLOCKCHAIN.BLOCKS_ISSUERS_TITLE',
        'GRAPH.BLOCKCHAIN.BLOCKS_ISSUERS_LABEL'
      ]),
      gpData.blockchain.countByIssuer($scope.formData.currency)
    ])
      .then(function(result) {
        var translations =  result[0];
        result = result[1];
        if (!result || !result.data) return;

        // Data
        $scope.data = result.data;

        // Labels
        $scope.labels = result.labels;

        // Data to keep (for click or label)
        $scope.blockCount = result.blockCount;
        $scope.issuers = result.issuers;

        // Options
        $scope.barOptions = {
          responsive: true,
          maintainAspectRatio: $scope.maintainAspectRatio,
          title: {
            display: true,
            text: translations['GRAPH.BLOCKCHAIN.BLOCKS_ISSUERS_TITLE']
          },
          scales: {
            yAxes: [{
              type: 'linear',
              ticks: {
                beginAtZero: true
              }
            }]
          }
        };

        // Colors
        $scope.colors = gpColor.scale.custom(result.data.length);

      });
  };

  $scope.onChartClick = function(data, e, item) {
    if (!item) return;
    var issuer = $scope.issuers[item._index];
    $state.go('app.wot_identity', issuer);
  };
}


GpNetworkViewExtendController.$inject = ['$scope', 'PluginService', 'esSettings'];
GpPeerViewExtendController.$inject = ['$scope', '$timeout', 'PluginService', 'esSettings', 'csCurrency', 'gpData'];
angular.module('cesium.graph.network.controllers', ['chart.js', 'cesium.graph.services'])

  .config(['$stateProvider', 'PluginServiceProvider', 'csConfig', function($stateProvider, PluginServiceProvider, csConfig) {
    'ngInject';

    var enable = csConfig.plugins && csConfig.plugins.es;
    if (enable) {

      PluginServiceProvider
        .extendState('app.network', {
          points: {
            'buttons': {
              templateUrl: "plugins/graph/templates/network/view_network_extend.html",
              controller: 'GpNetworkViewExtendCtrl'
            }
          }
        })

        .extendState('app.view_peer', {
          points: {
            'general': {
              templateUrl: "plugins/graph/templates/network/view_peer_extend.html",
              controller: 'GpPeerViewExtendCtrl'
            }
          }
        })
      ;

      $stateProvider
        .state('app.view_peer_stats', {
          url: "/network/peer/:pubkey/stats",
          views: {
            'menuContent': {
              templateUrl: "plugins/graph/templates/network/view_peer_stats.html",
              controller: 'GpBlockchainTxCountCtrl'
            }
          }
        });
    }
  }])

  .controller('GpNetworkViewExtendCtrl', GpNetworkViewExtendController)

  .controller('GpPeerViewExtendCtrl', GpPeerViewExtendController)

;


function GpNetworkViewExtendController($scope, PluginService, esSettings) {
  'ngInject';

  $scope.extensionPoint = PluginService.extensions.points.current.get();
  $scope.enable = esSettings.isEnable();

  esSettings.api.state.on.changed($scope, function(enable) {
    $scope.enable = enable;
  });
}

function GpPeerViewExtendController($scope, $timeout, PluginService, esSettings, csCurrency, gpData) {
  'ngInject';

  $scope.extensionPoint = PluginService.extensions.points.current.get();
  $scope.enable = esSettings.isEnable();
  $scope.loading = true;
  $scope.node = $scope.node || {};

  esSettings.api.state.on.changed($scope, function(enable) {
    $scope.enable = enable;
  });

  /**
   * Enter into the view
   * @param e
   * @param state
   */
  $scope.enter = function(e, state) {

    if (!$scope.node.currency && state && state.stateParams && state.stateParams.currency) { // Currency parameter
      $scope.node.currency = state.stateParams.currency;
    }

    // Make sure there is currency, or load if not
    if (!$scope.node.currency) {
      return csCurrency.get()
        .then(function(currency) {
          $scope.node.currency = currency ? currency.name : null;
          return $scope.enter(e, state);
        });
    }

    // Make sure there is pubkey, or wait for parent load to be finished
    if (!$scope.node.pubkey) {
      return $timeout(function () {
        return $scope.enter(e, state);
      }, 500);
    }

    // load
    return $scope.load();
  };
  $scope.$on('$csExtension.enter', $scope.enter);

  $scope.load = function() {
    if (!$scope.node.currency && !$scope.node.pubkey) return;
    console.info("[Graph] [peer] Loading blocks count for [{0}]".format($scope.node.pubkey.substr(0, 8)));

    return gpData.node.blockCount($scope.node.currency, $scope.node.pubkey)
      .then(function(count) {
        $scope.blockCount = count;
        $scope.loading = false;
      });
  };
}


GpCurrencyViewExtendController.$inject = ['$scope', 'PluginService', 'UIUtils', 'esSettings'];
GpCurrencyMonetaryMassController.$inject = ['$scope', '$controller', '$q', '$state', '$translate', '$ionicPopover', 'gpColor', 'gpData', '$filter', 'csSettings'];
GpCurrencyDUController.$inject = ['$scope', '$q', '$controller', '$translate', 'gpColor', 'gpData', '$filter'];
GpCurrencyMembersCountController.$inject = ['$scope', '$controller', '$q', '$state', '$translate', 'gpColor', 'gpData', '$filter'];
angular.module('cesium.graph.currency.controllers', ['chart.js', 'cesium.graph.services', 'cesium.graph.common.controllers'])

  .config(['$stateProvider', 'PluginServiceProvider', 'csConfig', function($stateProvider, PluginServiceProvider, csConfig) {
    'ngInject';

    $stateProvider
      .state('app.currency.tab_parameters_stats', {
        url: "/parameters/stats",
        views: {
          'tab-parameters': {
            templateUrl: "plugins/graph/templates/currency/tabs/tab_parameters_stats.html",
            controller: 'GpCurrencyMonetaryMassCtrl'
          }
        }
      })
      .state('app.currency.tab_wot_stats', {
        url: "/community/stats",
        views: {
          'tab-wot': {
            templateUrl: "plugins/graph/templates/currency/tabs/tab_wot_stats.html",
            controller: 'GpCurrencyMembersCountCtrl'
          }
        }
      })
      .state('app.currency.tab_network_stats', {
        url: "/network/stats",
        views: {
          'tab-network': {
            templateUrl: "plugins/graph/templates/currency/tabs/tab_network_stats.html"
          }
        }
      })
      .state('app.currency.tab_blocks_stats', {
        url: "/blocks/stats",
        views: {
          'tab-blocks': {
            templateUrl: "plugins/graph/templates/currency/tabs/tab_blocks_stats.html"
          }
        }
      })
      .state('app.currency_stats_lg', {
        url: "/currency/stats/lg?hide&scale",
        views: {
          'menuContent': {
            templateUrl: "plugins/graph/templates/currency/view_stats_lg.html"
          }
        }
      });

    var enable = csConfig.plugins && csConfig.plugins.es;
    if (enable) {
      PluginServiceProvider
        .extendStates(['app.currency_name', 'app.currency', 'app.currency_name_lg', 'app.currency_lg'], {
          points: {
            'parameters-actual': {
              templateUrl: "plugins/graph/templates/currency/view_currency_extend.html",
              controller: 'GpCurrencyViewExtendCtrl'
            },
            'wot-actual': {
              templateUrl: "plugins/graph/templates/currency/view_currency_extend.html",
              controller: 'GpCurrencyViewExtendCtrl'
            },
            'network-actual': {
              templateUrl: "plugins/graph/templates/currency/view_currency_extend.html",
              controller: 'GpCurrencyViewExtendCtrl'
            }
          }
        })
        .extendStates(['app.currency.tab_blocks'], {
          points: {
            'buttons': {
              templateUrl: "plugins/graph/templates/currency/tab_blocks_extend.html",
              controller: 'GpCurrencyViewExtendCtrl'
            }
          }
        })
      ;
    }
  }])


  .controller('GpCurrencyViewExtendCtrl', GpCurrencyViewExtendController)

  .controller('GpCurrencyMonetaryMassCtrl', GpCurrencyMonetaryMassController)

  .controller('GpCurrencyDUCtrl', GpCurrencyDUController)

  .controller('GpCurrencyMembersCountCtrl', GpCurrencyMembersCountController)
;

function GpCurrencyViewExtendController($scope, PluginService, UIUtils, esSettings) {
  'ngInject';

  $scope.extensionPoint = PluginService.extensions.points.current.get();
  $scope.enable = esSettings.isEnable();
  $scope.smallscreen = UIUtils.screen.isSmall();

  esSettings.api.state.on.changed($scope, function(enable) {
    $scope.enable = enable;
  });
}

function GpCurrencyMonetaryMassController($scope, $controller, $q, $state, $translate, $ionicPopover, gpColor, gpData, $filter, csSettings) {
  'ngInject';

  // Initialize the super class and extend it.
  angular.extend(this, $controller('GpCurrencyAbstractCtrl', {$scope: $scope}));

  $scope.formData.useRelative = angular.isDefined($scope.formData.useRelative) ?
    $scope.formData.useRelative :
    csSettings.data.useRelative;
  $scope.displayShareAxis = true;
  $scope.hiddenDatasets = [];

  $scope.init = function(e, state) {
    // nothing to do here
  };

  $scope.onUseRelativeChanged = function() {
    if (!$scope.loading) {
      $scope.load();
    }
  };
  $scope.$watch('formData.useRelative', $scope.onUseRelativeChanged);

  var truncAmount = function(value) {
    return Math.trunc(value*100)/100;
  };

  $scope.load = function(from, size) {
    from = from || 0;
    size = size || 10000;

    return $q.all([
      $translate(['GRAPH.CURRENCY.MONETARY_MASS_TITLE',
        'GRAPH.CURRENCY.MONETARY_MASS_LABEL',
        'GRAPH.CURRENCY.MONETARY_MASS_SHARE_LABEL']),
      gpData.blockchain.withDividend($scope.formData.currency, {
        from: from,
        size: size
      })
    ])
      .then(function(result) {
        var translations = result[0];
        result = result[1];
        if (!result || !result.times) return;
        $scope.times = result.times;

        // Choose a date formatter, depending on the blocks period
        var blocksPeriod = result.times[result.times.length-1] - result.times[0];
        var formatDate;
        if (blocksPeriod < 31557600/* less than 1 year */) {
          formatDate = $filter('formatDateShort');
        }
        else {
          formatDate = $filter('formatDateMonth');
        }

        var formatAmount =  $filter('formatDecimal');
        $scope.currencySymbol = $filter('currencySymbolNoHtml')($scope.formData.currency, $scope.formData.useRelative);

        // Data: relative
        var data = [];
        if($scope.formData.useRelative) {

          // Mass
          data.push(
            result.blocks.reduce(function(res, block) {
              return res.concat(truncAmount(block.monetaryMass / block.dividend));
            }, []));

          // M/N
          data.push(
            result.blocks.reduce(function(res, block) {
              return res.concat(truncAmount(block.monetaryMass / block.dividend / block.membersCount));
            }, []));
        }

        // Data: quantitative
        else {
          // Mass
          data.push(
            result.blocks.reduce(function(res, block) {
              return res.concat(block.monetaryMass / 100);
            }, []));

          // M/N
          data.push(
            result.blocks.reduce(function(res, block) {
              return res.concat(truncAmount(block.monetaryMass / block.membersCount / 100));
            }, []));
        }
        $scope.data = data;

        // Labels
        $scope.labels = result.times.reduce(function(res, time) {
          return res.concat(formatDate(time));
        }, []);

        // Colors
        $scope.colors = gpColor.scale.fix(result.times.length);

        // Options
        $scope.options = {
          responsive: true,
          maintainAspectRatio: $scope.maintainAspectRatio,
          title: {
            display: true,
            text: translations['GRAPH.CURRENCY.MONETARY_MASS_TITLE']
          },
          legend: {
            display: $scope.displayShareAxis,
            onClick: $scope.onLegendClick
          },
          scales: {
            yAxes: [
              {
                id: 'y-axis-mass'
              },
              {
                id: 'y-axis-mn',
                display: $scope.displayShareAxis,
                position: 'right',
                gridLines: {
                  drawOnChartArea: false
                }
              }
            ]
          },
          tooltips: {
            enabled: true,
            mode: 'index',
            callbacks: {
              label: function(tooltipItems, data) {
                return data.datasets[tooltipItems.datasetIndex].label +
                  ': ' + formatAmount(tooltipItems.yLabel) +
                  ' ' + $scope.currencySymbol;
              }
            }
          }
        };

        $scope.datasetOverride = [
          {
            yAxisID: 'y-axis-mass',
            type: 'line',
            label: translations['GRAPH.CURRENCY.MONETARY_MASS_LABEL'],
            borderWidth: 2,
            pointRadius: 0,
            pointHitRadius: 4,
            pointHoverRadius: 3
          },
          {
            yAxisID: 'y-axis-mn',
            type: 'line',
            label: translations['GRAPH.CURRENCY.MONETARY_MASS_SHARE_LABEL'],
            fill: false,
            showLine: true,
            borderColor: gpColor.rgba.energized(),
            borderWidth: 1,
            backgroundColor: gpColor.rgba.energized(),
            pointBackgroundColor: gpColor.rgba.energized(),
            pointBorderColor: gpColor.rgba.energized(),
            pointHoverBackgroundColor: gpColor.rgba.energized(),
            pointHoverBorderColor: gpColor.rgba.energized(),
            pointRadius: 0,
            pointHitRadius: 4,
            pointHoverRadius: 3
          }];

        $scope.setScale($scope.scale);

        // Keep only block number (need for click)
        $scope.blocks = result.blocks.reduce(function(res, block) {
          return res.concat(block.number);
        }, []);
      });

  };

  $scope.onChartClick = function(data, e, item) {
    if (!item) return;
    var number = $scope.blocks[item._index];
    $state.go('app.view_block', {number: number});
  };

  /* -- Popover -- */

  $scope.showActionsPopover = function(event) {
    $scope.hideActionsPopover();
    $ionicPopover.fromTemplateUrl('plugins/graph/templates/currency/popover_monetary_mass_actions.html', {
      scope: $scope
    }).then(function(popover) {
      $scope.actionsPopover = popover;
      //Cleanup the popover when we're done with it!
      $scope.$on('$destroy', function() {
        $scope.actionsPopover.remove();
      });
      $scope.actionsPopover.show(event);
    });
  };

  $scope.hideActionsPopover = function() {
    if ($scope.actionsPopover) {
      $scope.actionsPopover.hide();
    }
  };
}


function GpCurrencyDUController($scope, $q, $controller, $translate, gpColor, gpData, $filter) {
  'ngInject';
  // Initialize the super class and extend it.
  angular.extend(this, $controller('GpCurrencyMonetaryMassCtrl', {$scope: $scope}));

  $scope.load = function(from, size) {
    from = from || 0;
    size = size || 10000;

    return $q.all([
      $translate([
        'GRAPH.CURRENCY.UD_TITLE',
        'COMMON.UNIVERSAL_DIVIDEND']),
      gpData.blockchain.withDividend($scope.formData.currency, {
        from: from,
        size: size
      })
    ])
      .then(function(result) {
        var translations = result[0];
        result = result[1];
        if (!result || !result.times) return;
        $scope.times = result.times;

        // Choose a date formatter, depending on the blocks period
        var blocksPeriod = result.times[result.times.length-1] - result.times[0];
        var dateFilter;
        if (blocksPeriod < 31557600/* less than 1 year */) {
          dateFilter = $filter('formatDateShort');
        }
        else {
          dateFilter = $filter('formatDateMonth');
        }

        var formatAmount =  $filter('formatDecimal');
        $scope.currencySymbol = $filter('currencySymbolNoHtml')($scope.formData.currency, false);

        // Data
        $scope.data = [
          result.blocks.reduce(function(res, block) {
            return res.concat(block.dividend / 100);
          }, [])
        ];

        // Labels
        $scope.labels = result.times.reduce(function(res, time) {
          return res.concat(dateFilter(time));
        }, []);

        // Colors
        $scope.colors = result.blocks.reduce(function(res) {
          return res.concat(gpColor.rgba.calm(0.5));
        }, []);

        // Options
        $scope.options = {
          responsive: true,
          maintainAspectRatio: $scope.maintainAspectRatio,
          title: {
            display: true,
            text: translations['GRAPH.CURRENCY.UD_TITLE']
          },
          scales: {
            yAxes: [
              {
                id: 'y-axis-ud',
                ticks: {
                  beginAtZero: false
                }
              }
            ]
          },
          tooltips: {
            enabled: true,
            mode: 'index',
            callbacks: {
              label: function(tooltipItems, data) {
                return data.datasets[tooltipItems.datasetIndex].label +
                  ': ' + formatAmount(tooltipItems.yLabel) +
                  ' ' + $scope.currencySymbol;
              }
            }
          }
        };
        $scope.setScale($scope.scale);

        $scope.datasetOverride = [
          {
            yAxisID: 'y-axis-ud',
            type: 'line',
            label: translations['COMMON.UNIVERSAL_DIVIDEND'],
            borderWidth: 2,
            pointRadius: 0,
            pointHitRadius: 4,
            pointHoverRadius: 3
          }];

        // Keep only block number (need for click)
        $scope.blocks = result.blocks.reduce(function(res, block) {
          return res.concat(block.number);
        }, []);
      });

  };
}


function GpCurrencyMembersCountController($scope, $controller, $q, $state, $translate, gpColor, gpData, $filter) {
  'ngInject';

  // Initialize the super class and extend it.
  angular.extend(this, $controller('GpCurrencyAbstractCtrl', {$scope: $scope}));

  $scope.load = function(from, size) {
    from = from || 0;
    size = size || 10000;

    return $q.all([
      $translate(['GRAPH.CURRENCY.MEMBERS_COUNT_TITLE', 'GRAPH.CURRENCY.MEMBERS_COUNT_LABEL']),
      gpData.blockchain.withDividend($scope.formData.currency, {
        from: from,
        size: size,
        withCurrent: true
      })
    ])
      .then(function(result) {
        var translations = result[0];
        result = result[1];

        if (!result || !result.times) return;
        $scope.times = result.times;

        // Choose a date formatter, depending on the blocks period
        var blocksPeriod = result.times[result.blocks.length-1] - result.times[0];
        var dateFilter;
        if (blocksPeriod < 31557600/* less than 1 year*/) {
          dateFilter = $filter('formatDateShort');
        }
        else {
          dateFilter = $filter('formatDateMonth');
        }

        // Format time
        $scope.labels = result.times.reduce(function(res, time) {
          return res.concat(dateFilter(time));
        }, []);

        // Members count graph: -------------------------
        $scope.options = {
            responsive: true,
            maintainAspectRatio: $scope.maintainAspectRatio,
            title: {
              display: true,
              text: translations['GRAPH.CURRENCY.MEMBERS_COUNT_TITLE']
            },
            scales: {
              xAxes: [{
                position: 'bottom'
              }],
              yAxes: [{
                id: 'y-axis-1',
                ticks: {
                  beginAtZero: false
                }
              }]
            }
          };
        $scope.datasetOverride = [{
            yAxisID: 'y-axis-1',
            type: 'line',
            label: translations['GRAPH.CURRENCY.MEMBERS_COUNT_LABEL'],
            borderWidth: 2,
            pointRadius: 0,
            pointHitRadius: 4,
            pointHoverRadius: 3
          }];

        // Data
        $scope.data = [
          result.blocks.reduce(function(res, block) {
            return res.concat(block.membersCount);
          }, [])
        ];

        // Colors
        $scope.colors = gpColor.scale.fix(result.blocks.length);
      });
  };

  $scope.onChartClick = function(data, e, item) {
    if (!item) return;
    if (!item._index) {
      $state.go('app.view_block', {number: 0});
      return;
    }
    var from = $scope.times[item._index-1];
    var to = moment.unix(from).utc().add(1, 'day').unix();
    $state.go('app.blockchain_search', {
      q: '(_exists_:joiners OR _exists_:leavers OR _exists_:revoked OR _exists_:excluded) AND medianTime:>{0} AND medianTime:<={1}'.format(from, to)
    });
  };
}


GpExtendController.$inject = ['$scope', 'PluginService', 'esSettings', '$state', 'csWallet'];
GpAccountBalanceController.$inject = ['$scope', '$controller', '$q', '$state', '$filter', '$translate', 'csWot', 'gpData', 'gpColor', 'csWallet'];
GpAccountSumTxController.$inject = ['$scope', '$controller', '$filter', '$state', 'csTx', 'gpColor'];
GpAccountCertificationController.$inject = ['$scope', '$controller', '$q', '$state', '$filter', '$translate', 'gpData', 'gpColor', 'csWallet'];
angular.module('cesium.graph.account.controllers', ['chart.js', 'cesium.graph.services'])

  .config(['$stateProvider', 'PluginServiceProvider', 'csConfig', function($stateProvider, PluginServiceProvider, csConfig) {
    'ngInject';

    var enable = csConfig.plugins && csConfig.plugins.es;
    if (enable) {

      PluginServiceProvider
        .extendState('app.view_wallet_tx', {
          points: {
            'buttons': {
              templateUrl: "plugins/graph/templates/account/view_wallet_tx_extend.html",
              controller: 'GpExtendCtrl'
            }
          }
        })

        .extendState('app.wot_identity', {
          points: {
            'buttons': {
              templateUrl: "plugins/graph/templates/account/view_identity_extend.html",
              controller: 'GpExtendCtrl'
            }
          }
        })

        .extendStates(['app.wot_identity_tx_uid', 'app.wot_identity_tx_uid_lg'], {
          points: {
            'buttons': {
              templateUrl: "plugins/graph/templates/account/view_identity_tx_extend.html",
              controller: 'GpExtendCtrl'
            }
          }
        })
      ;

      $stateProvider
        .state('app.view_wallet_stats', {
          url: "/wallet/stats?t&stepUnit&hide&scale",
          views: {
            'menuContent': {
              templateUrl: "plugins/graph/templates/account/view_stats.html"
            }
          },
          data: {
            auth: true
          }
        })

        .state('app.wot_identity_stats', {
          url: "/wot/:pubkey/stats?t&stepUnit&hide&scale",
          views: {
            'menuContent': {
              templateUrl: "plugins/graph/templates/account/view_stats.html"
            }
          }
        });
    }
  }])

  .controller('GpExtendCtrl', GpExtendController)

  .controller('GpAccountBalanceCtrl', GpAccountBalanceController)

  .controller('GpAccountSumTxCtrl', GpAccountSumTxController)

  .controller('GpAccountCertificationCtrl', GpAccountCertificationController)

;

function GpExtendController($scope, PluginService, esSettings, $state, csWallet) {
  'ngInject';

  $scope.extensionPoint = PluginService.extensions.points.current.get();
  $scope.enable = esSettings.isEnable();

  esSettings.api.state.on.changed($scope, function(enable) {
    $scope.enable = enable;
  });

  $scope.showIdentityStats = function() {
    if ($scope.formData && $scope.formData.pubkey) {
      $state.go('app.wot_identity_stats', {pubkey: $scope.formData.pubkey});
    }
  };

  $scope.showWalletStats = function() {
    if (csWallet.isLogin()) {
      $state.go('app.wot_identity_stats', {pubkey: csWallet.data.pubkey});
    }
  };
}


function GpAccountBalanceController($scope, $controller, $q, $state, $filter, $translate, csWot, gpData, gpColor, csWallet) {
  'ngInject';

  // Initialize the super class and extend it.
  angular.extend(this, $controller('GpCurrencyAbstractCtrl', {$scope: $scope}));

  $scope.init = function(e, state) {

      if (state && state.stateParams && state.stateParams.pubkey) { // Currency parameter
        $scope.formData.pubkey = state.stateParams.pubkey;
      }
      else if(csWallet.isLogin()) {
        $scope.formData.pubkey = csWallet.data.pubkey;
      }

  };

  var defaultSetScale = $scope.setScale;
  $scope.setScale = function(scale) {
    // linear scale: sent values as negative
    if (scale === 'linear') {
      $scope.data[$scope.data.length-2] = _.map($scope.data[$scope.data.length-2], function(value) {
        return -1 * Math.abs(value);
      });
    }
    // log scale: sent values as positive
    else {
      $scope.data[$scope.data.length-2] = _.map($scope.data[$scope.data.length-2], function(value) {
        return Math.abs(value);
      });
    }

    // call default implementation
    defaultSetScale(scale);
  };

  $scope.load = function(updateTimePct) {

    updateTimePct = angular.isDefined(updateTimePct) ? updateTimePct : true;

    var withUD = true;

    return csWot.load($scope.formData.pubkey)
      .then(function(identity) {
        $scope.identity = identity;
        withUD = $scope.identity.isMember || $scope.identity.wasMember;

        return $q.all([

          $translate('GRAPH.ACCOUNT.BALANCE_TITLE', $scope.formData),

          // translate i18n keys
          $translate(['GRAPH.ACCOUNT.UD_LABEL',
            'GRAPH.ACCOUNT.TX_RECEIVED_LABEL',
            'GRAPH.ACCOUNT.TX_SENT_LABEL',
            'GRAPH.ACCOUNT.UD_ACCUMULATION_LABEL',
            'GRAPH.ACCOUNT.TX_ACCUMULATION_LABEL',
            'GRAPH.ACCOUNT.BALANCE_LABEL',
            'COMMON.DATE_PATTERN',
            'COMMON.DATE_SHORT_PATTERN',
            'COMMON.DATE_MONTH_YEAR_PATTERN']),

          // get data
          gpData.blockchain.movement($scope.formData.currency, angular.copy($scope.formData))
        ]);
      })
      .then(function(result) {
        var title = result[0];
        var translations = result[1];
        result = result[2];

        if (!result || !result.times) return; // no data
        $scope.times = result.times;

        var formatInteger = $filter('formatInteger');
        var formatAmount =  $filter('formatDecimal');
        $scope.currencySymbol = $filter('currencySymbolNoHtml')($scope.formData.currency, $scope.formData.useRelative);

        // Data
        $scope.data = [
          result.ud,
          result.received,
          result.sent,
          result.balance
        ];

        var datePatterns = {
          hour: translations['COMMON.DATE_PATTERN'],
          day: translations['COMMON.DATE_SHORT_PATTERN'],
          month: translations['COMMON.DATE_MONTH_YEAR_PATTERN']
        };
        // Labels
        var labelPattern = datePatterns[$scope.formData.rangeDuration];
        $scope.labels = result.times.reduce(function(res, time) {
          return res.concat(moment.unix(time).local().format(labelPattern));
        }, []);

        // Colors
        $scope.colors = gpColor.scale.fix(result.times.length);

        // Update range with received values
        $scope.updateRange(result.times[0], result.times[result.times.length-1], updateTimePct);

        // Options
        $scope.options = {
          responsive: true,
          maintainAspectRatio: true,
          title: {
            display: true,
            text: title
          },
          scales: {
            xAxes: [{
              stacked: true
            }],
            yAxes: [
              {
                id: 'y-axis-left',
                type: 'linear',
                position: 'left',
                stacked: true
              }
            ]
          },
          legend: {
            display: true,
            onClick: $scope.onLegendClick
          },
          tooltips: {
            enabled: true,
            mode: 'index',
            callbacks: {
              label: function(tooltipItems, data) {
                return data.datasets[tooltipItems.datasetIndex].label +
                  ': ' +
                  (!tooltipItems.yLabel ? '0' :
                    (formatAmount(tooltipItems.yLabel) + ' ' + $scope.currencySymbol));
              }
            }
          }
        };

        $scope.datasetOverride = [
          {
            yAxisID: 'y-axis-left',
            type: 'bar',
            label: translations['GRAPH.ACCOUNT.UD_LABEL'],
            backgroundColor: gpColor.rgba.energized(0.3),
            hoverBackgroundColor: gpColor.rgba.energized(0.5),
            borderWidth: 1
          },
          {
            yAxisID: 'y-axis-left',
            type: 'bar',
            label: translations['GRAPH.ACCOUNT.TX_RECEIVED_LABEL'],
            backgroundColor: gpColor.rgba.positive(0.4),
            hoverBackgroundColor: gpColor.rgba.positive(0.6),
            borderWidth: 1
          },
          {
            yAxisID: 'y-axis-left',
            type: 'bar',
            label: translations['GRAPH.ACCOUNT.TX_SENT_LABEL'],
            backgroundColor: gpColor.rgba.assertive(0.4),
            hoverBackgroundColor: gpColor.rgba.assertive(0.6),
            borderWidth: 1
          },
          {
            yAxisID: 'y-axis-left',
            type: 'line',
            label: translations['GRAPH.ACCOUNT.BALANCE_LABEL'],
            fill: 'origin',
            borderColor: gpColor.rgba.calm(0.5),
            borderWidth: 2,
            pointBackgroundColor: gpColor.rgba.calm(0.5),
            pointBorderColor: gpColor.rgba.white(),
            pointHoverBackgroundColor: gpColor.rgba.calm(1),
            pointHoverBorderColor: 'rgba(0,0,0,0)',
            pointRadius: 3,
            lineTension: 0.1
          }
        ];


        if (!withUD) {
          // remove UD
          $scope.data.splice(0,1);
          $scope.datasetOverride.splice(0,1);
        }
        else {
          // FIXME: fund why UD data not working well
          // remove UD
          /*$scope.data.splice(0,1);
          $scope.datasetOverride.splice(0,1);*/
        }
      });
  };

  $scope.onChartClick = function(data, e, item) {
    if (!item) return;
    var from = $scope.times[item._index];
    var to = moment.unix(from).utc().add(1, $scope.formData.rangeDuration).unix();
    var query = 'medianTime:>={0} AND medianTime:<{1}'.format(from, to);
    if ($scope.formData.pubkey) {
      query += ' AND (transactions.issuers:' + $scope.formData.pubkey + ' OR transactions.outputs:*' + $scope.formData.pubkey + ')';
    }
    $state.go('app.blockchain_search', {q: query});
  };
}

//TODO : Avoid csTx loading, switch to Elasticsearch
function GpAccountSumTxController($scope, $controller, $filter, $state, csTx, gpColor) {
  'ngInject';

  // Initialize the super class and extend it.
  angular.extend(this, $controller('GpCurrencyAbstractCtrl', {$scope: $scope}));

  // When opening the view
  $scope.init= function(e, state) {

    // Get the pubkey (from URL params) and store it in the page context ($scope)
    $scope.pubkey = (state && state.stateParams && state.stateParams.pubkey);

  };

  // When opening the view
  $scope.load = function(e, state) {
    if (!$scope.pubkey) return;

    var formatDecimal = $filter('formatDecimal');

    // Load account TX data
    return csTx.load($scope.pubkey, -1)
      .then(function(result) {

        if (result && result.tx && result.tx.history) {
          //Charts data
          $scope.inputChart = $scope.computeChartData(_.filter(result.tx.history, function(tx) {
            return tx.amount > 0;
          }));
          $scope.outputChart = $scope.computeChartData(_.filter(result.tx.history, function(tx) {
            return tx.amount < 0;
          }));
        }
      });
  };

  // Load chart data: received amount by pubkey
  $scope.computeChartData = function(txArray) {

    var formatPubkey = $filter('formatPubkey');

    // Sum TX amount, with a group by pubkey
    var sumByPubkeys = {};
    _.forEach(txArray, function (tx) {
      sumByPubkeys[tx.pubkey] = sumByPubkeys[tx.pubkey] || {
          label: tx.name || tx.uid || formatPubkey(tx.pubkey),
          pubkey: tx.pubkey,
          sum: 0
        };
      sumByPubkeys[tx.pubkey].sum += Math.abs(tx.amount/100);
    });

    // Get values (from the map), then sort (desc) on sum
    var sumItems = _.sortBy(_.values(sumByPubkeys), 'sum').reverse();

    // Return arrays expected by angular-chart
    return {
      data: _.pluck(sumItems, 'sum'),
      labels: _.pluck(sumItems, 'label'),
      pubkeys: _.pluck(sumItems, 'pubkey'),
      colors: gpColor.scale.custom(
        Math.max(10, sumItems.length) // avoid strange colors
      )
    };
  };

  $scope.onInputChartClick = function(data, e, item) {
    if (!item) return;
    var pubkey = $scope.inputChart.pubkeys[item._index];
    $state.go('app.wot_identity', {pubkey: pubkey});
  };

  $scope.onOutputChartClick = function(data, e, item) {
    if (!item) return;
    var pubkey = $scope.outputChart.pubkeys[item._index];
    $state.go('app.wot_identity', {pubkey: pubkey});
  };
}


/**
 * Graph that display received/sent certification
 */
function GpAccountCertificationController($scope, $controller, $q, $state, $filter, $translate, gpData, gpColor, csWallet) {
  'ngInject';

  // Initialize the super class and extend it.
  angular.extend(this, $controller('GpCurrencyAbstractCtrl', {$scope: $scope}));

  $scope.init = function(e, state) {
      if (state && state.stateParams && state.stateParams.pubkey) { // Currency parameter
        $scope.formData.pubkey = state.stateParams.pubkey;
      }
      else if(csWallet.isLogin()) {
        $scope.formData.pubkey = csWallet.data.pubkey;
      }

      // for DEV only
      //$scope.formData.pubkey = '38MEAZN68Pz1DTvT3tqgxx4yQP6snJCQhPqEFxbDk4aE';
  };

  $scope.load = function(updateTimePct) {

    var formData = $scope.formData;

    return $q.all([

      $translate('GRAPH.ACCOUNT.CERTIFICATION_TITLE', formData),

      // translate i18n keys
      $translate(['GRAPH.ACCOUNT.GIVEN_CERT_LABEL',
        'GRAPH.ACCOUNT.RECEIVED_CERT_LABEL',
        'GRAPH.ACCOUNT.GIVEN_CERT_DELTA_LABEL',
        'GRAPH.ACCOUNT.RECEIVED_CERT_DELTA_LABEL',
        'COMMON.DATE_PATTERN',
        'COMMON.DATE_SHORT_PATTERN',
        'COMMON.DATE_MONTH_YEAR_PATTERN']),

      // get data
      gpData.wot.certifications(formData)
    ])
      .then(function(result) {

        var title = result[0];
        var translations = result[1];
        result = result[2];

        if (!result || !result.times) return; // no data
        $scope.times = result.times;

        var formatInteger = $filter('formatInteger');

        // Data
        $scope.data = [
          result.deltaReceived,
          result.received,
          result.deltaGiven,
          result.given
        ];

        // Labels
        $scope.labels = result.labels;

        var displayFormats = {
          hour: translations['COMMON.DATE_PATTERN'],
          day: translations['COMMON.DATE_SHORT_PATTERN'],
          month: translations['COMMON.DATE_MONTH_YEAR_PATTERN']
        };
        var displayFormat = displayFormats[$scope.formData.rangeDuration];
        // Labels
        $scope.labels = result.times.reduce(function(res, time) {
          return res.concat(moment.unix(time).local().format(displayFormat));
        }, []);

        // Colors
        $scope.colors = gpColor.scale.fix(result.times.length);

        // Update options with received values
        $scope.updateRange(result.times[0], result.times[result.times.length-1], updateTimePct);

        // Options
        $scope.options = {
          responsive: true,
          maintainAspectRatio: true,
          title: {
            display: true,
            text: title
          },
          scales: {
            yAxes: [
              {
                id: 'y-axis-left',
                type: 'linear',
                position: 'left'
              },
              {
                id: 'y-axis-hide',
                type: 'linear',
                display: false,
                position: 'right'
              }
            ]
          },
          legend: {
            display: true
          },
          tooltips: {
            enabled: true,
            mode: 'index',
            callbacks: {
              label: function(tooltipItems, data) {
                // Should add a '+' before value ?
                var addPlus = (tooltipItems.datasetIndex === 0 || tooltipItems.datasetIndex === 2) && tooltipItems.yLabel > 0;
                return data.datasets[tooltipItems.datasetIndex].label +
                  ': ' +
                  (addPlus ? '+' : '') +
                  !tooltipItems.yLabel ? '0' : formatInteger(tooltipItems.yLabel);
              }
            }
          }
        };

        $scope.datasetOverride = [
          {
            yAxisID: 'y-axis-left',
            type: 'bar',
            label: translations['GRAPH.ACCOUNT.RECEIVED_CERT_DELTA_LABEL'],
            borderColor: gpColor.rgba.positive(0.6),
            borderWidth: 1,
            backgroundColor: gpColor.rgba.positive(0.4),
            hoverBackgroundColor: gpColor.rgba.positive(0.6)
          },
          {
            yAxisID: 'y-axis-left',
            type: 'line',
            label: translations['GRAPH.ACCOUNT.RECEIVED_CERT_LABEL'],
            fill: false,
            borderColor: gpColor.rgba.positive(0.5),
            borderWidth: 2,
            backgroundColor: gpColor.rgba.positive(1),
            pointBackgroundColor: gpColor.rgba.positive(0.5),
            pointBorderColor: gpColor.rgba.white(),
            pointHoverBackgroundColor: gpColor.rgba.positive(1),
            pointHoverBorderColor: 'rgba(0,0,0,0)',
            pointRadius: 3
          },
          {
            yAxisID: 'y-axis-left',
            type: 'bar',
            label: translations['GRAPH.ACCOUNT.GIVEN_CERT_DELTA_LABEL'],
            borderColor: gpColor.rgba.assertive(0.6),
            borderWidth: 1,
            backgroundColor: gpColor.rgba.assertive(0.4),
            hoverBackgroundColor: gpColor.rgba.assertive(0.6)
          },
          {
            yAxisID: 'y-axis-left',
            type: 'line',
            label: translations['GRAPH.ACCOUNT.GIVEN_CERT_LABEL'],
            fill: false,
            borderColor: gpColor.rgba.assertive(0.4),
            borderWidth: 2,
            backgroundColor: gpColor.rgba.assertive(1),
            pointBackgroundColor: gpColor.rgba.assertive(0.4),
            pointBorderColor: gpColor.rgba.white(),
            pointHoverBackgroundColor: gpColor.rgba.assertive(1),
            pointHoverBorderColor: 'rgba(0,0,0,0)',
            pointRadius: 3,
            lineTension: 0.1
          }
        ];
      });
  };

  $scope.onChartClick = function(data, e, item) {
    if (!item) return;
    var from = $scope.times[item._index];
    var to = moment.unix(from).utc().add(1, $scope.formData.rangeDuration).unix();
    var query = '_exists_:transactions AND medianTime:>={0} AND medianTime:<{1}'.format(from, to);
    if ($scope.formData.pubkey) {
      query += ' AND (transactions.issuers:' + $scope.formData.pubkey + ' OR transactions.outputs:*' + $scope.formData.pubkey + ')';
    }
    $state.go('app.blockchain_search', {q: query});
  };
}


GpDocStatsController.$inject = ['$scope', '$state', '$controller', '$q', '$translate', 'gpColor', 'gpData', '$filter'];
angular.module('cesium.graph.docstats.controllers', ['chart.js', 'cesium.graph.services', 'cesium.graph.common.controllers'])

  .config(['$stateProvider', 'PluginServiceProvider', 'csConfig', function($stateProvider, PluginServiceProvider, csConfig) {
    'ngInject';

    $stateProvider
      .state('app.doc_stats_lg', {
        url: "/data/stats?stepUnit&t&hide&scale",
        views: {
          'menuContent': {
            templateUrl: "plugins/graph/templates/docstats/view_stats.html",
            controller: 'GpDocStatsCtrl'
          }
        }
      });

    var enable = csConfig.plugins && csConfig.plugins.es;
    if (enable) {
      // TODO: add buttons to link with doc stats
    }
  }])


  .controller('GpDocStatsCtrl', GpDocStatsController)
;

function GpDocStatsController($scope, $state, $controller, $q, $translate, gpColor, gpData, $filter) {
  'ngInject';

  // Initialize the super class and extend it.
  angular.extend(this, $controller('GpCurrencyAbstractCtrl', {$scope: $scope}));

  $scope.hiddenDatasets = [];

  $scope.chartIdPrefix = 'docstats-chart-';
  $scope.charts = [

    // User count
    {
      id: 'user',
      title: 'GRAPH.DOC_STATS.USER.TITLE',
      series: [
        {
          key: 'user_profile',
          label: 'GRAPH.DOC_STATS.USER.USER_PROFILE',
          color: gpColor.rgba.royal(),
          pointHoverBackgroundColor: gpColor.rgba.royal(),
          clickState: {
            name: 'app.document_search',
            params: {index:'user', type: 'profile'}
          }
        },
        {
          key: 'user_settings',
          label: 'GRAPH.DOC_STATS.USER.USER_SETTINGS',
          color: gpColor.rgba.gray(0.5),
          pointHoverBackgroundColor: gpColor.rgba.gray(),
          clickState: {
            name: 'app.document_search',
            params: {index:'user', type: 'settings'}
          }
        }
      ]
    },

    // Message & Co.
    {
      id: 'message',
      title: 'GRAPH.DOC_STATS.MESSAGE.TITLE',
      series: [
        {
          key: 'message_inbox',
          label: 'GRAPH.DOC_STATS.MESSAGE.MESSAGE_INBOX',
          color: gpColor.rgba.royal(),
          pointHoverBackgroundColor: gpColor.rgba.royal(),
          clickState: {
            name: 'app.document_search',
            params: {index:'message', type: 'inbox'}
          }
        },
        {
          key: 'message_outbox',
          label: 'GRAPH.DOC_STATS.MESSAGE.MESSAGE_OUTBOX',
          color: gpColor.rgba.calm(),
          pointHoverBackgroundColor: gpColor.rgba.calm(),
          clickState: {
            name: 'app.document_search',
            params: {index:'message', type: 'outbox'}
          }
        },
        {
          key: 'invitation_certification',
          label: 'GRAPH.DOC_STATS.MESSAGE.INVITATION_CERTIFICATION',
          color: gpColor.rgba.gray(0.5),
          pointHoverBackgroundColor: gpColor.rgba.gray(),
          clickState: {
            name: 'app.document_search',
            params: {index:'invitation', type: 'certification'}
          }
        }
      ]
    },

    // Social Page & group
    {
      id: 'social',
      title: 'GRAPH.DOC_STATS.SOCIAL.TITLE',
      series: [
        {
          key: 'page_record',
          label: 'GRAPH.DOC_STATS.SOCIAL.PAGE_RECORD',
          color: gpColor.rgba.royal(),
          pointHoverBackgroundColor: gpColor.rgba.royal(),
          clickState: {
            name: 'app.document_search',
            params: {index:'page', type: 'record'}
          }
        },
        {
          key: 'group_record',
          label: 'GRAPH.DOC_STATS.SOCIAL.GROUP_RECORD',
          color: gpColor.rgba.calm(),
          pointHoverBackgroundColor: gpColor.rgba.calm(),
          clickState: {
            name: 'app.document_search',
            params: {index:'group', type: 'record'}
          }
        },
        {
          key: 'page_comment',
          label: 'GRAPH.DOC_STATS.SOCIAL.PAGE_COMMENT',
          color: gpColor.rgba.gray(0.5),
          pointHoverBackgroundColor: gpColor.rgba.gray(),
          clickState: {
            name: 'app.document_search',
            params: {index:'page', type: 'comment'}
          }
        }
      ]
    },

    // Other: deletion, doc, etc.
    {
      id: 'other',
      title: 'GRAPH.DOC_STATS.OTHER.TITLE',
      series: [
        {
          key: 'history_delete',
          label: 'GRAPH.DOC_STATS.OTHER.HISTORY_DELETE',
          color: gpColor.rgba.gray(0.5),
          pointHoverBackgroundColor: gpColor.rgba.gray(),
          clickState: {
            name: 'app.document_search',
            params: {index:'history', type: 'delete'}
          }
        }
      ]
    }
  ];

  var formatInteger = $filter('formatInteger');

  $scope.defaultChartOptions = {
    responsive: true,
    maintainAspectRatio: $scope.maintainAspectRatio,
    title: {
      display: true
    },
    legend: {
      display: true,
      onClick: $scope.onLegendClick
    },
    scales: {
      xAxes: [{
        stacked: true
      }],
      yAxes: [
        {
          stacked: true,
          id: 'y-axis'
        }
      ]
    },
    tooltips: {
      enabled: true,
      mode: 'index',
      callbacks: {
        label: function(tooltipItems, data) {
          return data.datasets[tooltipItems.datasetIndex].label +
            ': ' + formatInteger(tooltipItems.yLabel);
        }
      }
    }
  };

  $scope.init = function(e, state) {
    if (state && state.stateParams) {
      // Manage URL parameters
    }
  };

  $scope.load = function(updateTimePct) {

    return $q.all([
      // Get i18n keys (chart title, series labels, date patterns)
      $translate($scope.charts.reduce(function(res, chart) {
        return res.concat(chart.series.reduce(function(res, serie) {
          return res.concat(serie.label);
        }, [chart.title]));
      }, [
        'COMMON.DATE_PATTERN',
        'COMMON.DATE_SHORT_PATTERN',
        'COMMON.DATE_MONTH_YEAR_PATTERN'
      ])),

      // get Data
      gpData.docstat.get($scope.formData)
    ])
    .then(function(result) {
      var translations = result[0];
      var datePatterns = {
        hour: translations['COMMON.DATE_PATTERN'],
        day: translations['COMMON.DATE_SHORT_PATTERN'],
        month: translations['COMMON.DATE_MONTH_YEAR_PATTERN']
      };

      result = result[1];
      if (!result || !result.times) return; // no data
      $scope.times = result.times;

      // Labels
      var labelPattern = datePatterns[$scope.formData.rangeDuration];
      $scope.labels = result.times.reduce(function(res, time) {
        return res.concat(moment.unix(time).local().format(labelPattern));
      }, []);

      // Update range options with received values
      $scope.updateRange(result.times[0], result.times[result.times.length-1], updateTimePct);

      $scope.setScale($scope.scale);

      // For each chart
      _.forEach($scope.charts, function(chart){

        // Data
        chart.data = [];
        _.forEach(chart.series, function(serie){
          chart.data.push(result[serie.key]||[]);
        });

        // Options (with title)
        chart.options = angular.copy($scope.defaultChartOptions);
        chart.options.title.text = translations[chart.title];

        // Series datasets
        chart.datasetOverride = chart.series.reduce(function(res, serie) {
          return res.concat({
            yAxisID: 'y-axis',
            type: serie.type || 'line',
            label: translations[serie.label],
            fill: true,
            borderWidth: 2,
            pointRadius: 0,
            pointHitRadius: 4,
            pointHoverRadius: 3,
            borderColor: serie.color,
            backgroundColor: serie.color,
            pointBackgroundColor: serie.color,
            pointBorderColor: serie.color,
            pointHoverBackgroundColor: serie.pointHoverBackgroundColor||serie.color,
            pointHoverBorderColor: serie.pointHoverBorderColor||gpColor.rgba.white()
          });
        }, []);
      });
    });

  };

  $scope.onChartClick = function(data, e, item) {
    if (!item) return;
    var chart = _.find($scope.charts , function(chart) {
      return ($scope.chartIdPrefix  + chart.id) == item._chart.canvas.id;
    });

    var serie = chart.series[item._datasetIndex];

    if (serie && serie.clickState && serie.clickState.name) {
      var stateParams = serie.clickState.params ? angular.copy(serie.clickState.params) : {};

      // Compute query
      var from = $scope.times[item._index];
      var to = moment.unix(from).utc().add(1, $scope.formData.rangeDuration).unix();
      stateParams.q = 'time:>={0} AND time:<{1}'.format(from, to);

      return $state.go(serie.clickState.name, stateParams);
    }
    else {
      console.debug('Click on item index={0} on range [{1},{2}]'.format(item._index, from, to));
    }
  };


}


GpSynchroController.$inject = ['$scope', '$controller', '$q', '$translate', 'gpColor', 'gpData', '$filter'];
angular.module('cesium.graph.synchro.controllers', ['chart.js', 'cesium.graph.services', 'cesium.graph.common.controllers'])

  .config(['$stateProvider', 'PluginServiceProvider', 'csConfig', function($stateProvider, PluginServiceProvider, csConfig) {
    'ngInject';

    $stateProvider
      .state('app.doc_synchro_lg', {
        url: "/data/synchro?stepUnit&t&hide&scale",
        views: {
          'menuContent': {
            templateUrl: "plugins/graph/templates/synchro/view_stats.html",
            controller: "GpSynchroCtrl"
          }
        }
      });

    var enable = csConfig.plugins && csConfig.plugins.es;
    if (enable) {
      // TODO: add buttons to link with doc stats
    }
  }])


  .controller('GpSynchroCtrl', GpSynchroController)
;

function GpSynchroController($scope, $controller, $q, $translate, gpColor, gpData, $filter) {
  'ngInject';

  // Initialize the super class and extend it.
  angular.extend(this, $controller('GpCurrencyAbstractCtrl', {$scope: $scope}));

  $scope.hiddenDatasets = [];

  $scope.charts = [

    // Execution: number of doc
    {
      id: 'count',
      title: 'GRAPH.SYNCHRO.COUNT.TITLE',
      series: [
        {
          key: 'inserts',
          type: 'bar',
          label: 'GRAPH.SYNCHRO.COUNT.INSERTS',
          color: gpColor.rgba.royal(),
          pointHoverBackgroundColor: gpColor.rgba.royal()
        },
        {
          key: 'updates',
          type: 'bar',
          label: 'GRAPH.SYNCHRO.COUNT.UPDATES',
          color: gpColor.rgba.calm(),
          pointHoverBackgroundColor: gpColor.rgba.calm()
        },
        {
          key: 'deletes',
          type: 'bar',
          label: 'GRAPH.SYNCHRO.COUNT.DELETES',
          color: gpColor.rgba.assertive(0.5),
          pointHoverBackgroundColor: gpColor.rgba.assertive()
        }
      ]
    },

    // Execution: number of peers
    {
      id: 'peer',
      title: 'GRAPH.SYNCHRO.PEER.TITLE',
      series: [
        {
          key: 'ES_USER_API',
          label: 'GRAPH.SYNCHRO.PEER.ES_USER_API',
          color: gpColor.rgba.royal(),
          pointHoverBackgroundColor: gpColor.rgba.royal()
        },
        {
          key: 'ES_SUBSCRIPTION_API',
          label: 'GRAPH.SYNCHRO.PEER.ES_SUBSCRIPTION_API',
          color: gpColor.rgba.gray(0.5),
          pointHoverBackgroundColor: gpColor.rgba.gray()
        }
      ]
    },

    // Execution: number of peers
    {
      id: 'performance',
      title: 'GRAPH.SYNCHRO.PERFORMANCE.TITLE',
      series: [
        {
          key: 'duration',
          type: 'bar',
          label: 'GRAPH.SYNCHRO.PERFORMANCE.DURATION',
          color: gpColor.rgba.gray(0.5),
          pointHoverBackgroundColor: gpColor.rgba.gray()
        }
      ]
    }
  ];

  var formatInteger = $filter('formatInteger');

  $scope.defaultChartOptions = {
    responsive: true,
    maintainAspectRatio: $scope.maintainAspectRatio,
    title: {
      display: true
    },
    legend: {
      display: true,
      onClick: $scope.onLegendClick
    },
    scales: {
      xAxes: [{
        stacked: true
      }],
      yAxes: [
        {
          stacked: true,
          id: 'y-axis'
        }
      ]
    },
    tooltips: {
      enabled: true,
      mode: 'index',
      callbacks: {
        label: function(tooltipItems, data) {
          return data.datasets[tooltipItems.datasetIndex].label +
            ': ' + formatInteger(tooltipItems.yLabel);
        }
      }
    }
  };

  $scope.init = function(e, state) {
    if (state && state.stateParams) {
      // Manage URL parameters
    }
  };

  $scope.load = function(updateTimePct) {

    return $q.all([
      // Get i18n keys (chart title, series labels, date patterns)
      $translate($scope.charts.reduce(function(res, chart) {
        return res.concat(chart.series.reduce(function(res, serie) {
          return res.concat(serie.label);
        }, [chart.title]));
      }, [
        'COMMON.DATE_PATTERN',
        'COMMON.DATE_SHORT_PATTERN',
        'COMMON.DATE_MONTH_YEAR_PATTERN'
      ])),

      // get Data
      gpData.synchro.execution.get($scope.formData)
    ])
    .then(function(result) {
      var translations = result[0];
      var datePatterns = {
        hour: translations['COMMON.DATE_PATTERN'],
        day: translations['COMMON.DATE_SHORT_PATTERN'],
        month: translations['COMMON.DATE_MONTH_YEAR_PATTERN']
      };

      result = result[1];
      if (!result || !result.times) return; // no data
      $scope.times = result.times;

      // Labels
      var labelPattern = datePatterns[$scope.formData.rangeDuration];
      $scope.labels = result.times.reduce(function(res, time) {
        return res.concat(moment.unix(time).local().format(labelPattern));
      }, []);

      // Update range options with received values
      $scope.updateRange(result.times[0], result.times[result.times.length-1], updateTimePct);

      $scope.setScale($scope.scale);

      // For each chart
      _.forEach($scope.charts, function(chart){

        // Data
        chart.data = [];
        _.forEach(chart.series, function(serie){
          chart.data.push(result[serie.key]||[]);
        });

        // Options (with title)
        chart.options = angular.copy($scope.defaultChartOptions);
        chart.options.title.text = translations[chart.title];

        // Series datasets
        chart.datasetOverride = chart.series.reduce(function(res, serie) {
          return res.concat({
            yAxisID: 'y-axis',
            type: serie.type || 'line',
            label: translations[serie.label],
            fill: true,
            borderWidth: 2,
            pointRadius: 0,
            pointHitRadius: 4,
            pointHoverRadius: 3,
            borderColor: serie.color,
            backgroundColor: serie.color,
            pointBackgroundColor: serie.color,
            pointBorderColor: serie.color,
            pointHoverBackgroundColor: serie.pointHoverBackgroundColor||serie.color,
            pointHoverBorderColor: serie.pointHoverBorderColor||gpColor.rgba.white()
          });
        }, []);
      });
    });
  };
}


angular.module('cesium.map.plugin', [
    'ui-leaflet',
    // Services
    'cesium.map.services',
    // Controllers
    'cesium.map.wot.controllers',
    'cesium.map.registry.controllers',
    'cesium.map.network.controllers',
    'cesium.map.user.controllers',
    'cesium.map.settings.controllers',
    'cesium.map.help.controllers'
  ])

  // Configure plugin
  .config(function() {
    'ngInject';

    // Define icon prefix for AwesomeMarker (a Leaflet plugin)
    L.AwesomeMarkers.Icon.prototype.options.prefix = 'ion';
  });




angular.module('cesium.map.services', [
    // Services
    'cesium.map.wot.services',
    'cesium.map.registry.services',
    'cesium.map.utils.services'
  ])
;


angular.module('cesium.map.wot.services', ['cesium.services'])

.factory('mapWot', ['$q', 'csHttp', 'esHttp', 'esSettings', 'csWot', 'BMA', 'esGeo', function($q, csHttp, esHttp, esSettings, csWot, BMA, esGeo) {
  'ngInject';

  var
    that = this,
    constants = {
      DEFAULT_LOAD_SIZE: 1000
    },
    fields = {
      min: ["title", "geoPoint"],
      profile: ["title", "geoPoint", "avatar._content_type", "address", "city"]
    };

  that.raw = {
    profile: {
      search: esHttp.post('/user/profile/_search'),
      mixedSearch: esHttp.post('/user,page,group/profile,record/_search')
      //FOR DEV ONLY mixedSearch: esHttp.post('/page/record/_search')
    }
  };

  function createFilterQuery(options) {
    options = options || {};
    var query = {
      bool: {}
    };

    // Limit to profile with geo point
    if (options.searchAddress) {
      query.bool.should = [
        {exists: {field: "geoPoint"}},
        {exists: {field: "city"}}
      ];
    }
    else {
      query.bool.must= [
        {exists: {field: "geoPoint"}}
      ];
    }

    // Filter on bounding box
    // see https://www.elastic.co/guide/en/elasticsearch/reference/2.4/geo-point.html
    if (options.bounds && options.bounds.northEast && options.bounds.southWest) {
      var boundingBox = {
        "geoPoint" : {
          "top_left" : {
            "lat" : Math.max(Math.min(options.bounds.northEast.lat, 90), -90),
            "lon" : Math.max(Math.min(options.bounds.southWest.lng, 180), -180)
          },
          "bottom_right" : {
            "lat" : Math.max(Math.min(options.bounds.southWest.lat, 90), -90),
            "lon" : Math.max(Math.min(options.bounds.northEast.lng, 180), -180)
          }
        }
      };
      console.debug("[map] [wot] Filtering on bounds: ", options.bounds);
      query.bool.must = query.bool.must || [];
      query.bool.must.push({geo_bounding_box:  boundingBox});
    }
    return query;
  }

  function load(options) {
    options = options || {};
    options.from = options.from || 0;
    options.size = options.size || constants.DEFAULT_LOAD_SIZE;
    options.searchAddress = esGeo.google.isEnable() && (angular.isDefined(options.searchAddress) ? options.searchAddress : true);

    options.fields = options.fields || {};
    options.fields.description = angular.isDefined(options.fields.description) ? options.fields.description : false;

    var request = {
      query: createFilterQuery(options),
      from: 0,
      size: options.size,
      _source: options.fields.description ? fields.profile.concat("description") : fields.profile
    };

    var mixedSearch = false;
    /*var mixedSearch = esSettings.wot.isMixedSearchEnable();
    if (mixedSearch) {
      // add special fields for page and group
      request._source = request._source.concat(["type", "pubkey", "issuer", "category"]);
      console.debug("[ES] [map] Mixed search: enable");
    }*/

    var search = mixedSearch ? that.raw.profile.mixedSearch : that.raw.profile.search;

    return $q.all([
        search(request),
        BMA.wot.member.uids(),
        BMA.wot.member.pending()
          .then(function(res) {
            return (res.memberships && res.memberships.length) ? res.memberships : [];
          })
      ])
      .then(function(res) {
        var uids = res[1];
        var memberships = res[2];
        var res = res[0];
        if (!res.hits || !res.hits.total) return [];

        // Transform pending MS into a map by pubkey
        memberships = memberships.reduce(function(res, ms){
          if (ms.membership == 'IN' && !uids[ms.pubkey]) {
            var idty = {
              uid: ms.uid,
              pubkey: ms.pubkey,
              block: ms.blockNumber,
              blockHash: ms.blockHash,
              pending: true
            };
            var otherIdtySamePubkey = res[ms.pubkey];
            if (otherIdtySamePubkey && idty.block > otherIdtySamePubkey.block) {
              return res; // skip
            }
            res[idty.pubkey] = idty;
          }
          return res;
        }, {});

        var jobs = [
          processLoadHits(options, uids, memberships, res)
        ];

        // Additional slice requests
        request.from += request.size;
        while (request.from < res.hits.total) {
          jobs.push(search(angular.copy(request))
            .then(function(res) {
              if (!res.hits || !res.hits.hits.length) return [];
              return processLoadHits(options, uids, memberships, res);
            }));
          request.from += request.size;
        }
        return $q.all(jobs)
          .then(function(res){
            return res.reduce(function(res, items) {
              return res.concat(items);
            }, []);
          });
      });
  }

  function processLoadHits(options, uids, memberships, res) {

    // Transform profile hits
    var commaRegexp = new RegExp('[,]');
    var searchAddressItems = [];
    var items = res.hits.hits.reduce(function(res, hit) {
      var pubkey =  hit._id;
      var uid = uids[pubkey];
      var item = uid && {uid: uid} || memberships[pubkey] || {};
      item.pubkey = pubkey;
      item.index = hit._index;

      // City & address
      item.city = hit._source.city;
      item.address = hit._source.address;

      // Set geo point
      item.geoPoint = hit._source.geoPoint;
      if (!item.geoPoint || !item.geoPoint.lat || !item.geoPoint.lon) {
        if (!options.searchAddress || !item.city) return res; // no city: exclude this item
        item.searchAddress = item.city && ((hit._source.address ? hit._source.address+ ', ' : '') + item.city);
        searchAddressItems.push(item);
      }
      else {
        // Convert lat/lon to float (if need)
        if (item.geoPoint.lat && typeof item.geoPoint.lat === 'string') {
          item.geoPoint.lat = parseFloat(item.geoPoint.lat.replace(commaRegexp, '.'));
        }
        if (item.geoPoint.lon && typeof item.geoPoint.lon === 'string') {
          item.geoPoint.lon = parseFloat(item.geoPoint.lon.replace(commaRegexp, '.'));
        }
      }

      // Avatar
      item.avatar = esHttp.image.fromHit(hit, 'avatar');

      // Name
      item.name = hit._source.title;
      // Avoid too long name (workaround for #308)
      if (item.name && item.name.length > 30) {
        item.name = item.name.substr(0, 27) + '...';
      }

      // Description
      item.description = hit._source.description && esHttp.util.parseAsHtml(hit._source.description);

      return item.geoPoint ? res.concat(item) : res;
    }, []);

    // Resolve missing positions by addresses (only if google API enable)
    if (searchAddressItems.length) {
      var now = new Date().getTime();
      console.debug('[map] [wot] Search positions of {0} addresses...'.format(searchAddressItems.length));
      var counter = 0;

      return $q.all(searchAddressItems.reduce(function(res, item) {
        return !item.city ? res : res.concat(esGeo.google.searchByAddress(item.searchAddress)
          .then(function(res) {
            if (!res || !res.length) return;
            item.geoPoint = res[0];
            // If search on city, add a randomized delta to avoid superposition
            if (item.city == item.searchAddress) {
              item.geoPoint.lon += Math.random() / 1000;
              item.geoPoint.lat += Math.random() / 1000;
            }
            delete item.searchAddress; // not need anymore
            items.push(item);
            counter++;
          })
          .catch(function() {/*silent*/}));
      }, []))
        .then(function(){
          console.debug('[map] [wot] Resolved {0}/{1} addresses in {2}ms'.format(counter, searchAddressItems.length, new Date().getTime()-now));
          return items;
        });
    }

    return $q.when(items);
  }

  return {
    load: load
  };

}]);


angular.module('cesium.map.registry.services', ['cesium.services'])

.factory('mapRegistry', ['$q', 'csHttp', 'esHttp', 'esSettings', 'csWot', 'BMA', 'esGeo', function($q, csHttp, esHttp, esSettings, csWot, BMA, esGeo) {
  'ngInject';

  var
    that = this,
    constants = {
      DEFAULT_LOAD_SIZE: 1000
    },
    fields = {
      record: ["title", "geoPoint", "avatar._content_type", "address", "city", "type", "pubkey", "issuer", "category"]
    };

  that.raw = {
    profile: {
      search: esHttp.post('/page/record/_search'),
      mixedSearch: esHttp.post('/user,page,group/profile,record/_search')
    }
  };

  function createFilterQuery(options) {
    options = options || {};
    var query = {
      bool: {}
    };

    // Limit to profile with geo point
    if (options.searchAddress) {
      query.bool.should = [
        {exists: {field: "geoPoint"}},
        {exists: {field: "city"}}
      ];
    }
    else {
      query.bool.must= [
        {exists: {field: "geoPoint"}}
      ];
    }

    // Filter on bounding box
    // see https://www.elastic.co/guide/en/elasticsearch/reference/2.4/geo-point.html
    if (options.bounds && options.bounds.northEast && options.bounds.southWest) {
      query.bool.should = query.bool.should || {};
      query.bool.should.geo_bounding_box = {
        "geoPoint" : {
          "top_left" : {
            "lat" : Math.max(Math.min(options.bounds.northEast.lat, 90), -90),
            "lon" : Math.max(Math.min(options.bounds.southWest.lng, 180), -180)
          },
          "bottom_right" : {
            "lat" : Math.max(Math.min(options.bounds.southWest.lat, 90), -90),
            "lon" : Math.max(Math.min(options.bounds.northEast.lng, 180), -180)
          }
        }
      };
    }
    return query;
  }

  function load(options) {
    options = options || {};
    options.from = options.from || 0;
    options.size = options.size || constants.DEFAULT_LOAD_SIZE;
    options.searchAddress = esGeo.google.isEnable() && (angular.isDefined(options.searchAddress) ? options.searchAddress : true);

    options.fields = options.fields || {};
    options.fields.description = angular.isDefined(options.fields.description) ? options.fields.description : true;

    var request = {
      query: createFilterQuery(options),
      from: 0,
      size: options.size,
      _source: options.fields.description ? fields.record.concat("description") : fields.record
    };

    // Search on profiles ?
    var mixedSearch = false;
    /*var mixedSearch = esSettings.registry.isMixedSearchEnable();
    if (mixedSearch) {
      console.debug("[ES] [map] Mixed search: enable");
    }*/

    var search = mixedSearch ? that.raw.profile.mixedSearch : that.raw.profile.search;

    return search(request)
      .then(function(res) {
        if (!res.hits || !res.hits.total) return [];

        var jobs = [
          processLoadHits(options, res)
        ];

        // Additional slice requests
        request.from += request.size;
        while (request.from < res.hits.total) {
          jobs.push(search(angular.copy(request))
            .then(function(res) {
              if (!res.hits || !res.hits.hits.length) return [];
              return processLoadHits(options, res);
            }));
          request.from += request.size;
        }
        return $q.all(jobs)
          .then(function(res){
            return res.reduce(function(res, items) {
              return res.concat(items);
            }, []);
          });
      });
  }

  function processLoadHits(options, res) {

    // Transform hits
    var commaRegexp = new RegExp('[,]');
    var searchAddressItems = [];
    var items = res.hits.hits.reduce(function(res, hit) {
      var pubkey =  hit._source.issuer;
      var item = {};
      item.issuer = pubkey;
      item.pubkey = hit._source.pubkey||item.issuer;
      item.id = hit._id;
      item.index = hit._index;
      item.type = hit._source.type;
      item.category = hit._source.category;
      if (item.category) {
        delete item.category.parent; // parent not need
      }

      // City & address
      item.city = hit._source.city;
      item.address = hit._source.address;

      // Set geo point
      item.geoPoint = hit._source.geoPoint;
      if (!item.geoPoint || !item.geoPoint.lat || !item.geoPoint.lon) {
        if (!options.searchAddress || !item.city) return res; // no city: exclude this item
        item.searchAddress = item.city && ((hit._source.address ? hit._source.address+ ', ' : '') + item.city);
        searchAddressItems.push(item);
      }
      else {
        // Convert lat/lon to float (if need)
        if (item.geoPoint.lat && typeof item.geoPoint.lat === 'string') {
          item.geoPoint.lat = parseFloat(item.geoPoint.lat.replace(commaRegexp, '.'));
        }
        if (item.geoPoint.lon && typeof item.geoPoint.lon === 'string') {
          item.geoPoint.lon = parseFloat(item.geoPoint.lon.replace(commaRegexp, '.'));
        }
      }

      // Avatar
      item.avatar = esHttp.image.fromHit(hit, 'avatar');

      // Name
      item.name = hit._source.title;
      // Avoid too long name (workaround for #308)
      if (item.name && item.name.length > 30) {
        item.name = item.name.substr(0, 27) + '...';
      }

      // Description
      item.description = hit._source.description && esHttp.util.parseAsHtml(hit._source.description);

      return item.geoPoint ? res.concat(item) : res;
    }, []);

    // Resolve missing positions by addresses (only if google API enable)
    if (searchAddressItems.length) {
      var now = new Date().getTime();
      console.debug('[map] [registry] Search positions of {0} addresses...'.format(searchAddressItems.length));
      var counter = 0;

      return $q.all(searchAddressItems.reduce(function(res, item) {
        return !item.city ? res : res.concat(esGeo.google.searchByAddress(item.searchAddress)
          .then(function(res) {
            if (!res || !res.length) return;
            item.geoPoint = res[0];
            // If search on city, add a randomized delta to avoid superposition
            if (item.city == item.searchAddress) {
              item.geoPoint.lon += Math.random() / 1000;
              item.geoPoint.lat += Math.random() / 1000;
            }
            delete item.searchAddress; // not need anymore
            items.push(item);
            counter++;
          })
          .catch(function() {/*silent*/}));
      }, []))
        .then(function(){
          console.debug('[map] [registry] Resolved {0}/{1} addresses in {2}ms'.format(counter, searchAddressItems.length, new Date().getTime()-now));
          return items;
        });
    }

    return $q.when(items);
  }

  return {
    load: load
  };

}]);


angular.module('cesium.map.utils.services', ['cesium.services', 'ui-leaflet'])

.factory('MapUtils', ['$timeout', '$q', '$translate', '$window', 'leafletData', 'csConfig', 'csSettings', 'esGeo', 'UIUtils', 'leafletHelpers', function($timeout, $q, $translate, $window, leafletData, csConfig, csSettings, esGeo, UIUtils, leafletHelpers) {
  'ngInject';


  var
    googleApiKey = csConfig.plugins && csConfig.plugins.es && csConfig.plugins.es.googleApiKey,
    constants = {
      locations: {
        FRANCE: {
          lat: 46.5588603, lng: 4.229736328124999, zoom: 6
        }
      },
      LOCALIZE_ZOOM: 15
    },
    data = {
      cache: {}
    };
  constants.DEFAULT_CENTER = csSettings.data && csSettings.data.plugins && csSettings.data.plugins.map && csSettings.data.plugins.map.center || constants.locations.FRANCE;

  function initMap(options){
    options = angular.merge({
      center: angular.copy(constants.DEFAULT_CENTER),
      cache: false,
      defaults: {
        scrollWheelZoom: true,
        tileLayerOptions: {
          attribution: 'Â© <a target=\"_blank\" href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }
      },
      layers: {
        baselayers: {
          osm: {
            name: 'OpenStreetMap',
            type: 'xyz',
            url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
            layerOptions: {
              subdomains: ["a", "b", "c"],
              attribution: "&copy; <a target=\"_blank\" href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a>",
              continuousWorld: true
            }
          },
          google: {
            name: "Google map",
            type: "xyz",
            url: ('https://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}&key='+googleApiKey),
            layerOptions: {
              subdomains: ['mt0','mt1','mt2','mt3'],
              attribution: "&copy; <a target=\"_blank\"  href=\"https://www.google.com/intl/fr_fr/help/terms_maps.html\">Google</a>",
              continuousWorld: true
            }
          }
        }
      },
      controls: {
        custom: []
      }
    }, options || {});

    // Restore existing map options
    if (options.cache && data.cache[options.cache]) {
      console.debug("[map] Restoring map from cache :", data.cache[options.cache]);
      options = angular.merge(options, data.cache[options.cache]);
    }

    // Translate overlays name, if any
    var overlaysNames;
    if (options.layers.overlays) {
      overlaysNames = _.keys(options.layers.overlays).reduce(function (res, key) {
        return res.concat(options.layers.overlays[key].name);
      }, []);

      $translate(overlaysNames).then(function (translations) {
        // Translate overlay names
        _.keys(options.layers.overlays || {}).forEach(function (key) {
          options.layers.overlays[key].name = translations[options.layers.overlays[key].name];
        });
      });
    }

    return options;
  }

  function updateMapCenter(map, center) {
    if (isSameCenter(center, map)) return $q.when();

    return $timeout(function () {
      map.invalidateSize();
      map._resetView(center, center.zoom, true);
    }, 300);
  }

  function bindMapOptions(scope, mapId, options) {
    options = options || {};
    if (!mapId || !options.layers || !scope) throw 'Illegal arguments';
    if (!options.cache) return; // no cache, so bind not need

    // Bind overlays visibility
    if (options.layers.overlays) {
      var overlayNames = _.keys(options.layers.overlays);

      // Init the cache if need
      if (!data.cache[options.cache]) {
        data.cache[options.cache] = {
            center: options.center,
            bounds: options.bounds,
            layers: angular.copy(options.layers)
          };
      }

      // Listen for changes
      leafletData.getMap(mapId)
        .then(function() {
          _($window.document.querySelectorAll('#{0} .leaflet-control-layers-overlays input[type=checkbox]'.format(mapId)))
            .forEach(function (element, index) {
              var overlayName = overlayNames[index];
              var state = options.layers.overlays[overlayName].visible;
              element.addEventListener('change', function (e) {
                state = !state; // update state
                // update cache
                data.cache[options.cache].layers.overlays[overlayName].visible = state;
              });
            });
        });
    }

    // Refresh center and bound, when leaving the view
    scope.$on('$ionicView.leave', function() {
      // update center and bounds
      data.cache[options.cache].center = options.center;
      data.cache[options.cache].bounds = options.bounds;
    });

  }


  function getCenter(options) {
    if (!options) return;
    var center;
    if (options.lat) {
      center = {};
      center.lat = parseFloat(options.lat);
    }
    if (options.lng || options.lon) {
      center = center || {};
      center.lng = parseFloat(options.lng || options.lon);
    }
    if (options.zoom) {
      center = center || {};
      center.zoom = parseFloat(options.zoom);
    }
    if (!center) return;

    // If missing some properties, complete with defaults
    if (!leafletHelpers.isValidCenter(center)) {
      center = angular.merge({}, constants.DEFAULT_CENTER, center);
    }
    return center;
  }

  function isSameCenter(center, map) {
    return leafletHelpers.isSameCenterOnMap(center, map);
  }

  function isDefaultCenter(centerModel) {
    var mapCenter = constants.DEFAULT_CENTER;
    if (centerModel.lat && centerModel.lng && mapCenter.lat.toFixed(4) === centerModel.lat.toFixed(4) && mapCenter.lng.toFixed(4) === centerModel.lng.toFixed(4) && mapCenter.zoom === centerModel.zoom) {
      return true;
    }
    return false;
  }

  // Set the id of a control (set the attribute 'id' of the HTML container)
  function setControlId(control, id) {
    if (!control || !id) throw 'Illegal arguments';

    // Control already added to map
    if (control._container) {
      control._container.id = id;
    }
    // Control not already added to the map (HTML element not exists yet)
    else {
      // Override onAdd() function
      var superOnAdd = control.onAdd;
      control.onAdd = function (map) {
        var container = superOnAdd.call(this, map);
        container.id = id;
        return container;
      };
    }
  }

  // Create a default serach control, with default options
  function initSearchControl(options) {

    options = options || {};
    options.initial = angular.isDefined(options.initial) ? options.initial : false;
    options.marker = angular.isDefined(options.marker) ? options.marker : false;
    options.propertyName = angular.isDefined(options.propertyName) ? options.propertyName : 'title';
    options.position = angular.isDefined(options.position) ? options.position : 'topleft';
    options.zoom = angular.isDefined(options.zoom) ? options.zoom : constants.LOCALIZE_ZOOM;
    options.markerLocation = angular.isDefined(options.markerLocation) ? options.markerLocation : true;

    var translatePromise = $translate(['MAP.COMMON.SEARCH_DOTS', 'COMMON.SEARCH_NO_RESULT']);

    return {
      // Simulate an addTo function, but wait for end of translations job
      addTo: function (map) {
        translatePromise.then(function (translations) {
          var control = L.control.search(angular.merge(options, {
            textPlaceholder: translations['MAP.COMMON.SEARCH_DOTS'],
            textErr: translations['COMMON.SEARCH_NO_RESULT']
          }));

          // Set the HTML element id
          if (options.id) {
            setControlId(control, options.id);
          }
          control.addTo(map);
        });
      }
    };
  }

  function initLocalizeMeControl(options) {
    options = options || {};
    return L.easyButton({
        position: 'topleft',      // inherited from L.Control -- the corner it goes in
        type: 'replace',          // set to animate when you're comfy with css
        leafletClasses: true,     // use leaflet classes to style the button?
        states:[{                 // specify different icons and responses for your button
          stateName: 'locate-me',
          onClick: function(btn, map){
            esGeo.point.current()
              .then(function(res) {
                map.setView({
                  lat: res.lat,
                  lng: res.lon
                }, constants.LOCALIZE_ZOOM);
              })
              .catch(function(err) {
                console.error(err);
                UIUtils.alert.error('MAP.ERROR.LOCALIZE_ME_FAILED');
              });
          },
          title: options.title,
          icon: 'icon ion-android-locate'
        }]
      });
  }

  return {
    map: initMap,
    updateCenter: updateMapCenter,
    center: {
      get: getCenter,
      isSame: isSameCenter,
      isDefault: isDefaultCenter
    },
    control: {
      search: initSearchControl,
      localizeMe: initLocalizeMeControl,
      setId: setControlId
    },
    cache: {
      bind: bindMapOptions
    },
    constants: constants
  };

}]);


MapWotViewController.$inject = ['$scope', '$filter', '$templateCache', '$interpolate', '$timeout', '$location', '$translate', '$q', '$controller', 'ionicReady', 'leafletData', 'UIUtils', 'csSettings', 'csWallet', 'MapUtils', 'mapWot'];
angular.module('cesium.map.wot.controllers', ['cesium.services', 'cesium.map.services', 'cesium.map.help.controllers'])

  .config(['$stateProvider', 'PluginServiceProvider', 'csConfig', function($stateProvider, PluginServiceProvider, csConfig) {
    'ngInject';

    var enable = csConfig.plugins && csConfig.plugins.es;
    if (enable) {

      PluginServiceProvider

        .extendState('app.wot_lookup.tab_search', {
          points: {
            'nav-buttons': {
              template: '<button class="button button-icon button-clear" ui-sref="app.view_wot_map"><i class="icon ion-ios-location"></i></button>'
            }
          }
        })

        .extendState('app.wot_lookup_lg', {
          points: {
            'filter-buttons': {
              templateUrl: "plugins/map/templates/wot/lookup_lg_extend.html",
              controller: "ESExtensionCtrl"
            }
          }
        });

      $stateProvider
        .state('app.view_wot_map', {
          url: "/wot/map?c&center",
          views: {
            'menuContent': {
              templateUrl: "plugins/map/templates/wot/view_map.html",
              controller: 'MapWotViewCtrl'
            }
          },
          // Seems to works without cache ??
          //cache: false,
          data: {
            silentLocationChange: true
          }
        });
    }
  }])

  // Map view of the WOT
  .controller('MapWotViewCtrl', MapWotViewController)

;


function MapWotViewController($scope, $filter, $templateCache, $interpolate, $timeout, $location, $translate, $q, $controller,
                              ionicReady,
                              leafletData, UIUtils, csSettings, csWallet, MapUtils, mapWot) {
  'ngInject';

  // Initialize the super classes and extend it.
  angular.extend(this, $controller('WotIdentityAbstractCtrl', { $scope: $scope}));
  angular.extend(this, $controller('ESWotIdentityViewCtrl', {$scope: $scope}));

  var
    // Create a  hidden layer, to hold search markers
    markersSearchLayer,
    icons= {
      member: {
        type: 'awesomeMarker',
        icon: 'person',
        markerColor: 'blue'
      },
      pending: {
        type: 'awesomeMarker',
        icon: 'clock',
        markerColor: 'lightgreen',
        iconColor: 'gray'
      },
      wallet: {
        type: 'awesomeMarker',
        icon: 'key',
        markerColor: 'lightgray'
      }
    };

  $scope.loading = true;
  $scope.mapId = 'map-wot-' + $scope.$id;

  $scope.map = MapUtils.map({
    cache: 'map-wot',
    layers: {
      overlays: {

        // User profile
        member: {
          type: 'featureGroup',
          name: 'MAP.WOT.VIEW.LAYER.MEMBER',
          visible: true
        },
        pending: {
          type: 'featureGroup',
          name: 'MAP.WOT.VIEW.LAYER.PENDING',
          visible: true
        },
        wallet: {
          type: 'featureGroup',
          name: 'MAP.WOT.VIEW.LAYER.WALLET',
          visible: true
        }
      }
    },
    bounds: {},
    markers: {},
    loading: true
  }, $scope.mapId);

  // Variables for marker
  $scope.showDescription = false;
  ionicReady().then(function() {
    $scope.enableDescription = !UIUtils.screen.isSmall() && ionic.Platform.grade.toLowerCase() === 'a';
    if (!$scope.enableDescription) {
     console.debug("[map] [wot] Disable profile description.", ionic.Platform.grade);
    }
  });

  $scope.$on('$ionicView.beforeEnter', function (event, viewData) {
    // Enable back button (workaround need for navigation outside tabs - https://stackoverflow.com/a/35064602)
    viewData.enableBack = UIUtils.screen.isSmall() ? true : viewData.enableBack;
  });

  $scope.enter = function(e, state) {

    if ($scope.loading) {

      // $translate.get('')
      //$ionicBackdrop.retain();
      UIUtils.loading.show({
        noBackdrop: true // avoid a too long release
      });
      if (state.stateParams && state.stateParams.c) {
        var cPart = state.stateParams.c.split(':');
        $scope.map.center.lat = parseFloat(cPart[0]);
        $scope.map.center.lng = parseFloat(cPart[1]);
        $scope.map.center.zoom = parseInt(cPart[2]);
      }

      $scope.$watch("map.center", function() {
        if (!$scope.loading) {
          return $timeout(function() {
            $scope.updateLocationHref();
          }, 300);
        }
      }, true);

      // Load the map (and init if need)
      var now = new Date().getTime();
      $scope.loadMap()
        .then($scope.load)
        .then(function() {
          console.debug("[map] [wot] Loaded in "+ (Date.now() - now) +"ms");

          $scope.showHelpTip();
        });
    }
    else {
      // Make sure to have previous center coordinate defined in the location URL
      $scope.updateLocationHref();
      $scope.showHelpTip();
    }
  };
  $scope.$on('$ionicView.enter', $scope.enter);

  $scope.loadMap = function() {
    return $q.all([
      $translate(['COMMON.BTN_HELP_TOUR_SCREEN', 'COMMON.BTN_REFRESH', 'MAP.COMMON.BTN_LOCALIZE_ME']),
      leafletData.getMap($scope.mapId)
    ]).then(function(res) {
      var translations = res[0];
      var map = res[1];
      if (!$scope.map.loading) return map; // already loaded

      if (!UIUtils.screen.isSmall()) {
        // Add a start tour button
        L.easyButton({
            position: 'topright',      // inherited from L.Control -- the corner it goes in
            type: 'replace',          // set to animate when you're comfy with css
            leafletClasses: true,     // use leaflet classes to style the button?
            states:[{                 // specify different icons and responses for your button
              stateName: 'show-help-tour',
              onClick: $scope.startHelpTour,
              title: translations['COMMON.BTN_HELP_TOUR_SCREEN'],
              icon: 'icon ion-easel'
            }]
          }
        ).addTo(map);

        // Add a refresh button
        L.easyButton({
            position: 'topright',      // inherited from L.Control -- the corner it goes in
            type: 'replace',          // set to animate when you're comfy with css
            leafletClasses: true,     // use leaflet classes to style the button?
            states:[{                 // specify different icons and responses for your button
              stateName: 'refresh',
              onClick: function(btn, map){
                return $scope.load(map);
              },
              title: translations['COMMON.BTN_REFRESH'],
              icon: 'icon ion-refresh'
            }]
          }
        ).addTo(map);
      }

      // Add loading control
      L.Control.loading({
        position: 'topright',
        separate: true
      }).addTo(map);

      // Add localize me control
      MapUtils.control.localizeMe({
          title: translations['MAP.COMMON.BTN_LOCALIZE_ME']
        })
        .addTo(map);

      // Add search control
      markersSearchLayer = L.layerGroup({visible: false});
      var searchTip = $interpolate($templateCache.get('plugins/map/templates/wot/item_search_tooltip.html'));
      MapUtils.control.search({
        layer: markersSearchLayer,
        propertyName: 'title',
        buildTip: function (text, val) {
          return searchTip(val.layer.options);
        },
        moveToLocation: function(lnglat, title, map) {
          if(this.options.zoom)
            this._map.setView(lnglat, this.options.zoom);
          else
            this._map.panTo(lnglat);
          var popupMarkerId = lnglat.layer && lnglat.layer.options && lnglat.layer.options.popupMarkerId;
          $timeout(function(){
            var popupMarker = popupMarkerId && _.find(map._layers, function(layer) {
                return (layer.options && layer.options.id === popupMarkerId);
              });
            popupMarker && popupMarker.openPopup();
          }, 400);
        },
        firstTipSubmit: true,
        tooltipLimit: 50
      }).addTo(map);

      // Add marker cluster layer
      var extractMarkerLayer = function(marker) {
        return marker.options && marker.options.layer;
      };
      var markerClusterLayer = L.markerClusterGroup({
        disableClusteringAtZoom: MapUtils.constants.LOCALIZE_ZOOM,
        maxClusterRadius: 65,
        showCoverageOnHover: false,
        iconCreateFunction: function (cluster) {
          var countByLayer = _.countBy(cluster.getAllChildMarkers(), extractMarkerLayer);
          var markerColor = countByLayer.member ? 'blue' : (countByLayer.pending ? 'lightgreen' : 'lightgray');
          var childCount = cluster.getChildCount();
          var className = 'marker-cluster ' + markerColor + ' marker-cluster-';
          if (childCount < 10) {
            className += 'small';
          } else if (childCount < 100) {
            className += 'medium';
          } else {
            className += 'large';
          }
          return L.divIcon({ html: '<div><span>' + childCount + '</span></div>', className: className, iconSize: new L.Point(40, 40) });
        }
      });
      map.eachLayer(function(layer) {
        // Add capabilities of 'featureGroup.subgroup', if layer is a group
        if (layer.addLayer){
          angular.extend(layer, L.featureGroup.subGroup(markerClusterLayer));
        }
      });
      markerClusterLayer.addTo(map);

      // Bind map with options (e.g. to received overlays visibility updates)
      // Cache no more need, as view is not cached
      //MapUtils.cache.bind($scope, $scope.mapId, $scope.map);

      $scope.map.loading = false;

      return map;
    });
  };

  // Load markers data
  $scope.load = function(map) {
    if (!map) {
      return leafletData.getMap($scope.mapId)
      // loop with the map object
        .then($scope.load);
    }

    $scope.loading = true;
    // Show loading indicator
    map.fire('dataloading');

    var options = {
      fields: {
        description: $scope.enableDescription
      }
    };

    // add bounding box
    if ($scope.map.bounds) {
      options.bounds = angular.copy($scope.map.bounds);
      delete options.bounds.options;
    }

    // Load wot data, from service
    return mapWot.load(options)

      .then(function(res) {
        var markers = {};

        // Clean search layer
        markersSearchLayer.clearLayers();

        if (res && res.length) {

          var formatPubkey = $filter('formatPubkey');
          var markerTemplate = $templateCache.get('plugins/map/templates/wot/popup_marker.html');

          _.forEach(res, function (hit) {
            var type = hit.pending ? 'pending' : (hit.uid ? 'member' : 'wallet');
            var shortPubkey = formatPubkey(hit.pubkey);
            var id = hit.index + '_' + (hit.id || (hit.uid ? (hit.uid + ':' + hit.pubkey) : hit.pubkey)).replace(/-/g, '_');
            var marker = {
              layer: type,
              icon: icons[type],
              opacity: hit.uid ? 1 : 0.7,
              title: hit.name + ' | ' + shortPubkey,
              lat: hit.geoPoint.lat,
              lng: hit.geoPoint.lon,
              getMessageScope: function () {
                $scope.loading = true;
                $scope.$applyAsync(function() {
                  $scope.formData = {
                    pubkey: hit.pubkey,
                    uid: hit.uid,
                    name: hit.name,
                    profile: hit
                  };
                  $scope.loading = false;
                });
                return $scope;
              },
              focus: false,
              message: markerTemplate,
              id: id
            };
            markers[id] = marker;

            // Create a search marker (will be hide)
            var searchText = hit.name + ((hit.uid && hit.uid != hit.name) ? (' | ' + hit.uid) : '') + ' | ' + shortPubkey;
            var searchMarker = angular.merge({
              type: type,
              opacity: 0,
              icon: L.divIcon({
                className: type + ' ng-hide',
                iconSize: L.point(0, 0)
              })
            }, {title: searchText, pubkey: hit.pubkey, uid: hit.uid, name: hit.name, pending: hit.pending, popupMarkerId: id});
            markersSearchLayer.addLayer(new L.Marker({
                lat: hit.geoPoint.lat,
                lng: hit.geoPoint.lon
              },
              searchMarker));
          });
        }

        $scope.map.markers = markers;

        return $timeout(function(){
          $scope.loading = false;

          // hide loading indicator
          map.fire('dataload');

          UIUtils.loading.hide();
        });
      })
      .catch(function(err) {
        $scope.map.markers = {};
        $scope.loading = false;
        UIUtils.onError('MAP.WOT.ERROR.LOAD_POSITION_FAILED')(err);
      });
  };

  // Update the browser location, to be able to refresh the page
  $scope.updateLocationHref = function(centerHash) {
    // removeIf(device)
    var params = $location.search() || {};
    if (!params.c || !MapUtils.center.isDefault($scope.map.center)) {
      centerHash = centerHash || '{0}:{1}:{2}'.format($scope.map.center.lat.toFixed(4), $scope.map.center.lng.toFixed(4), $scope.map.center.zoom);
      $location.search({c: centerHash}).replace();
    }
    // endRemoveIf(device)
  };

  /* -- help tip -- */

  // Show help tour
  $scope.startHelpTour = function() {
    return $scope.showHelpTip(0, true);
  };

  // Show help tip
  $scope.showHelpTip = function(index, isTour) {
    if (!isTour && !csWallet.isLogin()) return;

    index = angular.isDefined(index) ? index :
      (angular.isNumber(csSettings.data.helptip.mapwot) ? csSettings.data.helptip.mapwot : 0);
    isTour = angular.isDefined(isTour) ? isTour : false;

    if (index < 0 || index > 2/*max steps*/) return;

    // Create a new scope for the tour controller
    var helptipScope = $scope.createHelptipScope(isTour, 'MapHelpTipCtrl');
    if (!helptipScope) return; // could be undefined, if a global tour already is already started

    // Set isTour and mapId
    helptipScope.tour = isTour;
    helptipScope.mapId = $scope.mapId;

    return helptipScope.startMapWotTour(index, false)
      .then(function(endIndex) {
        helptipScope.$destroy();
        csSettings.data.helptip.mapwot = angular.isNumber(csSettings.data.helptip.mapwot) ?
          Math.max(endIndex, csSettings.data.helptip.mapwot) :
          endIndex;
        csSettings.store();
      });
  };
}


MapRegistryViewController.$inject = ['$scope', '$filter', '$templateCache', '$interpolate', '$timeout', '$location', '$translate', '$q', 'ionicReady', 'leafletData', 'UIUtils', 'csSettings', 'csWallet', 'MapUtils', 'mapRegistry'];
angular.module('cesium.map.registry.controllers', ['cesium.services', 'cesium.map.services', 'cesium.map.help.controllers'])

  .config(['$stateProvider', 'PluginServiceProvider', 'csConfig', function($stateProvider, PluginServiceProvider, csConfig) {
    'ngInject';

    var enable = csConfig.plugins && csConfig.plugins.es;
    if (enable) {

      PluginServiceProvider

        .extendState('app.wot_lookup.tab_registry', {
          points: {
            'nav-buttons': {
              template: '<button class="button button-icon button-clear" ui-sref="app.view_registry_map"><i class="icon ion-ios-location"></i></button>'
            }
          }
        })

        .extendState('app.registry_lookup_lg', {
          points: {
            'filter-buttons': {
              templateUrl: "plugins/map/templates/registry/lookup_lg_extend.html"
            }
          }
        });

      $stateProvider
        .state('app.view_registry_map', {
          url: "/wot/pagemap?c&center",
          views: {
            'menuContent': {
              templateUrl: "plugins/map/templates/registry/view_map.html",
              controller: 'MapRegistryViewCtrl'
            }
          },
          // Seems to works without cache ??
          //cache: false,
          data: {
            silentLocationChange: true
          }
        });
    }
  }])

  // Map view of the registry
  .controller('MapRegistryViewCtrl', MapRegistryViewController)

;


function MapRegistryViewController($scope, $filter, $templateCache, $interpolate, $timeout, $location, $translate, $q,
                                   ionicReady, leafletData,
                                   UIUtils, csSettings, csWallet, MapUtils, mapRegistry) {
  'ngInject';

  var
    // Create a  hidden layer, to hold search markers
    markersSearchLayer,
    icons= {
      shop: {
        type: 'awesomeMarker',
        icon: 'page-shop',
        markerColor: 'blue'
      },
      company: {
        type: 'awesomeMarker',
        icon: 'page-company',
        markerColor: 'blue'
      },
      association: {
        type: 'awesomeMarker',
        icon: 'page-association',
        markerColor: 'lightgreen',
        iconColor: 'gray'
      },
      institution: {
        type: 'awesomeMarker',
        icon: 'page-institution',
        markerColor: 'lightgray'
      }
    };

  $scope.loading = true;
  $scope.mapId = 'map-wot-' + $scope.$id;

  $scope.map = MapUtils.map({
    cache: 'map-registry',
    layers: {
      overlays: {
        // Pages
        shop: {
          type: 'featureGroup',
          name: 'MAP.REGISTRY.VIEW.LAYER.SHOP',
          visible: true
        },
        company: {
          type: 'featureGroup',
          name: 'MAP.REGISTRY.VIEW.LAYER.COMPANY',
          visible: true
        },
        association: {
          type: 'featureGroup',
          name: 'MAP.REGISTRY.VIEW.LAYER.ASSOCIATION',
          visible: true
        },
        institution: {
          type: 'featureGroup',
          name: 'MAP.REGISTRY.VIEW.LAYER.INSTITUTION',
          visible: true
        }
      }
    },
    bounds: {},
    markers: {},
    loading: true
  }, $scope.mapId);

  // Variables for marker
  $scope.formData = {};
  $scope.showDescription = false;
  ionicReady().then(function() {
    $scope.enableDescription = !UIUtils.screen.isSmall() && ionic.Platform.grade.toLowerCase() === 'a';
    if (!$scope.enableDescription) {
      console.debug("[map] [wot] Disable profile description.", ionic.Platform.grade);
    }
  });

  $scope.$on('$ionicView.beforeEnter', function (event, viewData) {
    // Enable back button (workaround need for navigation outside tabs - https://stackoverflow.com/a/35064602)
    viewData.enableBack = UIUtils.screen.isSmall() ? true : viewData.enableBack;
  });

  $scope.enter = function(e, state) {

    if ($scope.loading) {
      if (state.stateParams && state.stateParams.c) {
        var cPart = state.stateParams.c.split(':');
        $scope.map.center.lat = parseFloat(cPart[0]);
        $scope.map.center.lng = parseFloat(cPart[1]);
        $scope.map.center.zoom = parseInt(cPart[2]);
      }

      $scope.$watch("map.center", function() {
        if (!$scope.loading) {
          return $timeout(function() {
            $scope.updateLocationHref();
          }, 300);
        }
      }, true);

      // Load the map (and init if need)
      $scope.loadMap()
        .then(function() {
          if (csWallet.isLogin()) {
            $scope.showHelpTip();
          }
          return $scope.load();
        });
    }
    else {
      // Make sure to have previous center coordinate defined in the location URL
      $scope.updateLocationHref();
      if (csWallet.isLogin()) {
        $scope.showHelpTip();
      }
    }
  };
  $scope.$on('$ionicView.enter', $scope.enter);

  $scope.loadMap = function() {
    return $q.all([
      $translate(['COMMON.BTN_HELP_TOUR_SCREEN', 'COMMON.BTN_REFRESH', 'MAP.COMMON.BTN_LOCALIZE_ME']),
      leafletData.getMap($scope.mapId)
    ]).then(function(res) {
      var translations = res[0];
      var map = res[1];
      if (!$scope.map.loading) return map; // already loaded

      if (!UIUtils.screen.isSmall()) {

        // Add a refresh button
        L.easyButton({
            position: 'topright',      // inherited from L.Control -- the corner it goes in
            type: 'replace',          // set to animate when you're comfy with css
            leafletClasses: true,     // use leaflet classes to style the button?
            states:[{                 // specify different icons and responses for your button
              stateName: 'refresh',
              onClick: function(btn, map){
                return $scope.load(map);
              },
              title: translations['COMMON.BTN_REFRESH'],
              icon: 'icon ion-refresh'
            }]
          }
        ).addTo(map);
      }

      // Add loading control
      L.Control.loading({
        position: 'topright',
        separate: true
      }).addTo(map);

      // Add localize me control
      MapUtils.control.localizeMe({
          title: translations['MAP.COMMON.BTN_LOCALIZE_ME']
        })
        .addTo(map);

      // Add search control
      markersSearchLayer = L.layerGroup({visible: false});
      var searchTip = $interpolate($templateCache.get('plugins/map/templates/registry/item_search_tooltip.html'));
      MapUtils.control.search({
        layer: markersSearchLayer,
        propertyName: 'title',
        buildTip: function (text, val) {
          return searchTip(val.layer.options);
        },
        moveToLocation: function(lnglat, title, map) {
          if(this.options.zoom)
            this._map.setView(lnglat, this.options.zoom);
          else
            this._map.panTo(lnglat);
          var popupMarkerId = lnglat.layer && lnglat.layer.options && lnglat.layer.options.popupMarkerId;
          $timeout(function(){
            var popupMarker = popupMarkerId && _.find(map._layers, function(layer) {
                return (layer.options && layer.options.id === popupMarkerId);
              });
            popupMarker && popupMarker.openPopup();
          }, 400);
        },
        firstTipSubmit: true,
        tooltipLimit: 50
      }).addTo(map);

      // Add marker cluster layer
      var extractMarkerLayer = function(marker) {
        return marker.options && marker.options.layer;
      };
      var markerClusterLayer = L.markerClusterGroup({
        disableClusteringAtZoom: MapUtils.constants.LOCALIZE_ZOOM,
        maxClusterRadius: 65,
        showCoverageOnHover: false,
        iconCreateFunction: function (cluster) {
          var countByLayer = _.countBy(cluster.getAllChildMarkers(), extractMarkerLayer);
          var markerColor = countByLayer.shop||countByLayer.company ? 'blue' : (countByLayer.association ? 'lightgreen' : 'lightgray');
          var childCount = cluster.getChildCount();
          var className = 'marker-cluster ' + markerColor + ' marker-cluster-';
          if (childCount < 10) {
            className += 'small';
          } else if (childCount < 100) {
            className += 'medium';
          } else {
            className += 'large';
          }
          return L.divIcon({ html: '<div><span>' + childCount + '</span></div>', className: className, iconSize: new L.Point(40, 40) });
        }
      });
      map.eachLayer(function(layer) {
        // Add capabilities of 'featureGroup.subgroup', if layer is a group
        if (layer.addLayer){
          angular.extend(layer, L.featureGroup.subGroup(markerClusterLayer));
        }
      });
      markerClusterLayer.addTo(map);

      // Bind map with options (e.g. to received overlays visibility updates)
      // Cache no more need, as view is not cached
      //MapUtils.cache.bind($scope, $scope.mapId, $scope.map);

      $scope.map.loading = false;
      return map;
    });
  };

  // Load markers data
  $scope.load = function(map) {
    if (!map) {
      return leafletData.getMap($scope.mapId)
      // loop with the map object
        .then($scope.load);
    }

    $scope.loading = true;
    // Show loading indicator
    map.fire('dataloading');

    var options = {
      fields: {
        description: $scope.enableDescription
      }
    };

    // Load wot data, from service
    return mapRegistry.load(options)

      .then(function(res) {
        var markers = {};

        // Clean search layer
        markersSearchLayer.clearLayers();

        if (res && res.length) {

          var formatPubkey = $filter('formatPubkey');
          var pageMarkerTemplate = $templateCache.get('plugins/map/templates/registry/popup_marker.html');

          _.forEach(res, function (hit) {
            var shortPubkey = formatPubkey(hit.pubkey);
            var id = hit.index + '_' + (hit.id).replace(/-/g, '_');
            var marker = {
              layer: hit.type,
              icon: icons[hit.type],
              opacity: 1,
              title: hit.name + ' | ' + shortPubkey,
              lat: hit.geoPoint.lat,
              lng: hit.geoPoint.lon,
              getMessageScope: function () {
                $scope.loading = true;
                $scope.$applyAsync(function() {
                  angular.extend($scope.formData, hit);
                  $scope.loading = false;
                });
                return $scope;
              },
              focus: false,
              message: pageMarkerTemplate,
              id: id
            };
            markers[id] = marker;

            // Create a search marker (will be hide)
            var searchText = hit.name + ' | ' + shortPubkey;
            var searchMarker = angular.merge({
              type: hit.type,
              opacity: 0,
              icon: L.divIcon({
                className: hit.type + ' ng-hide',
                iconSize: L.point(0, 0)
              })
            }, {title: searchText, pubkey: hit.pubkey, name: hit.name, popupMarkerId: id});
            markersSearchLayer.addLayer(new L.Marker({
                lat: hit.geoPoint.lat,
                lng: hit.geoPoint.lon
              },
              searchMarker));
          });
        }

        $scope.map.markers = markers;

        $scope.loading = false;

        // hide loading indicator
        map.fire('dataload');
      })
      .catch(function(err) {
        $scope.map.markers = {};
        $scope.loading = false;
        UIUtils.onError('MAP.WOT.ERROR.LOAD_POSITION_FAILED')(err);
      });
  };

  // Update the browser location, to be able to refresh the page
  $scope.updateLocationHref = function(centerHash) {
    // removeIf(device)
    var params = $location.search() || {};
    if (!params.c || !MapUtils.center.isDefault($scope.map.center)) {
      centerHash = centerHash || '{0}:{1}:{2}'.format($scope.map.center.lat.toFixed(4), $scope.map.center.lng.toFixed(4), $scope.map.center.zoom);
      $location.search({c: centerHash}).replace();
    }
    // endRemoveIf(device)
  };

  // removeIf(device)
  // Update the browser location, to be able to refresh the page
  // FIXME: not need, should be removed
  $scope.$on("centerUrlHash", function(event, centerHash) {
    if (!$scope.loading) {

      return $timeout(function() {
        $scope.updateLocationHref(centerHash);
      }, 300);
    }
  });
  // endRemoveIf(device)


  /* -- help tip -- */

  // Show help tour
  $scope.startHelpTour = function() {
    return $scope.showHelpTip(0, true);
  };

  // Show help tip
  $scope.showHelpTip = function(index, isTour) {
    index = angular.isDefined(index) ? index :
      (angular.isNumber(csSettings.data.helptip.mapwot) ? csSettings.data.helptip.mapwot : 0);
    isTour = angular.isDefined(isTour) ? isTour : false;

    if (index < 0 || index > 2/*max steps*/) return;

    // Create a new scope for the tour controller
    var helptipScope = $scope.createHelptipScope(isTour, 'MapHelpTipCtrl');
    if (!helptipScope) return; // could be undefined, if a global tour already is already started

    // Set isTour and mapId
    helptipScope.tour = isTour;
    helptipScope.mapId = $scope.mapId;

    return helptipScope.startMapWotTour(index, false)
      .then(function(endIndex) {
        helptipScope.$destroy();
        csSettings.data.helptip.mapwot = angular.isNumber(csSettings.data.helptip.mapwot) ?
          Math.max(endIndex, csSettings.data.helptip.mapwot) :
          endIndex;
        csSettings.store();
      });
  };
}


angular.module('cesium.map.network.controllers', ['cesium.services', 'cesium.map.services'])

  .config(['$stateProvider', 'PluginServiceProvider', 'csConfig', function($stateProvider, PluginServiceProvider, csConfig) {
    'ngInject';

    var enable = csConfig.plugins && csConfig.plugins.es;
    if (enable) {

      PluginServiceProvider

        .extendState('app.network', {
          points: {
            'filter-buttons': {
              templateUrl: "plugins/map/templates/network/lookup_extend.html",
              controller: "ESExtensionCtrl"
            }
          }
        });

      $stateProvider
        .state('app.view_network_map', {
          url: "/network/map?c",
          views: {
            'menuContent': {
              templateUrl: "plugins/map/templates/network/view_map.html",
              controller: 'MapNetworkViewCtrl'
            }
          },
          data: {
            silentLocationChange: true
          }
        });
    }
  }])

  // [NEW] Manage events from the page #/app/wot/map
  .controller('MapNetworkViewCtrl', ['$scope', '$controller', '$q', '$interpolate', '$translate', '$filter', '$templateCache', '$timeout', '$location', 'esGeo', 'UIUtils', 'csNetwork', 'MapUtils', 'leafletData', function($scope, $controller, $q, $interpolate, $translate, $filter, $templateCache, $timeout, $location,
                                         esGeo, UIUtils, csNetwork, MapUtils, leafletData) {
    'ngInject';

    // Initialize the super class and extend it.
    angular.extend(this, $controller('NetworkLookupCtrl', {$scope: $scope}));

    var
      formatPubkey = $filter('formatPubkey'),
      markerMessageTemplate,
      markersSearchLayer,
      icons= {
        member: {
          type: 'awesomeMarker',
          icon: 'person',
          markerColor: 'green',
          iconColor: 'white'
        },
        mirror: {
          type: 'awesomeMarker',
          icon: 'radio-waves',
          markerColor: 'green',
          iconColor: 'white'
        },
        offline: {
          type: 'awesomeMarker',
          icon: 'ion-close-circled',
          markerColor: 'red',
          iconColor: 'white'
        }
      },
      markerIdByPeerId = {},
      markerCounter = 0
    ;

    // Init the template for marker popup
    markerMessageTemplate = '<div class="item item-peer item-icon-left no-border" ng-click="selectPeer(peer)">';
    markerMessageTemplate += $templateCache.get('templates/network/item_content_peer.html');
    markerMessageTemplate += '</div>';
    markerMessageTemplate = markerMessageTemplate.replace(/[:]rebind[:]|[:][:]/g, ''); // remove binding limitation

    $scope.loading = true;
    $scope.mapId = 'map-network-' + $scope.$id;
    $scope.helptipPrefix = 'helptip-' + $scope.mapId; //Override value from super controller (avoid error during help tour)

    $scope.map = MapUtils.map({
      cache: 'map-network',
      layers: {
        overlays: {
          member: {
            type: 'featureGroup',
            name: 'MAP.NETWORK.VIEW.LAYER.MEMBER',
            visible: true
          },
          mirror: {
            type: 'featureGroup',
            name: 'MAP.NETWORK.VIEW.LAYER.MIRROR',
            visible: true
          },
          offline: {
            type: 'featureGroup',
            name: 'MAP.NETWORK.VIEW.LAYER.OFFLINE',
            visible: false
          }
        }
      },
      bounds: {},
      loading: true,
      markers: {}
    });

    var inheritedEnter = $scope.enter;
    $scope.enter = function(e, state) {
      if ($scope.loading) {
        if (state.stateParams && state.stateParams.c) {
          var cPart = state.stateParams.c.split(':');
          $scope.map.center.lat = parseFloat(cPart[0]);
          $scope.map.center.lng = parseFloat(cPart[1]);
          $scope.map.center.zoom = parseInt(cPart[2]);
        }

        $scope.$watch("map.center", function() {
          if (!$scope.map.loading) {
            return $timeout(function() {
              $scope.updateLocationHref();
            }, 300);
          }
        }, true);

        // Load the map (and init if need)
        $scope.loadMap()
          .then(function(map){

            // Load indicator
            map.fire('dataloading');

            // inherited
            return inheritedEnter(e, state); // will call inherited load()
          });
      }

      else {
        // Make sur to have previous center coordinate defined in the location URL
        $scope.updateLocationHref();

        // inherited
        return inheritedEnter(e, state);
      }
    };
    $scope.$on('$ionicView.enter', $scope.enter);

    var inheritedComputeOptions = $scope.computeOptions;
    $scope.computeOptions = function() {
      var options = inheritedComputeOptions();
      options.filter.online = 'all';
      return options;
    };

    $scope.loadMap = function() {
      return leafletData.getMap($scope.mapId).then(function(map) {
        if (!$scope.map.loading) return map; // already loaded

        // Add loading control
        L.Control.loading({
          position: 'topright',
          separate: true
        }).addTo(map);

        // Add search control
        // Create a  hidden layer, to hold search markers
        markersSearchLayer = L.layerGroup({visible: false});
        var searchTip = $interpolate($templateCache.get('plugins/map/templates/network/item_search_tooltip.html'));
        MapUtils.control.search({
          layer: markersSearchLayer,
          propertyName: 'title',
          buildTip: function (text, val) {
            return searchTip(val.layer.options);
          },
          moveToLocation: function(lnglat, title, map) {
            if(this.options.zoom)
              this._map.setView(lnglat, this.options.zoom);
            else
              this._map.panTo(lnglat);
            var popupMarkerId = lnglat.layer && lnglat.layer.options && lnglat.layer.options.popupMarkerId;
            popupMarkerId && $timeout(function(){
              var popupMarker = _.find(map._layers, function(layer) {
                  return (layer.options && layer.options.id === popupMarkerId);
                });
              popupMarker && popupMarker.openPopup();
            }, 400);
          },
          firstTipSubmit: true,
          tooltipLimit: 50
        })
        .addTo(map);

        // Add marker cluster layer
        var _getMarkerColor = function(marker) {
          return marker.options && marker.options.icon.options.markerColor;
        };
        var markerClusterLayer = L.markerClusterGroup({
          disableClusteringAtZoom: MapUtils.constants.LOCALIZE_ZOOM,
          maxClusterRadius: 65,
          showCoverageOnHover: false,
          iconCreateFunction: function (cluster) {
            var countByColor = _.countBy(cluster.getAllChildMarkers(), _getMarkerColor);
            var markerColor = countByColor.green ? 'green' :
              (countByColor.lightgreen ? 'lightgreen' : (countByColor.lightgray ? 'lightgray' : 'red'));
            var childCount = cluster.getChildCount();
            var className = 'marker-cluster ' + markerColor + ' marker-cluster-';
            if (childCount < 10) {
              className += 'small';
            } else if (childCount < 100) {
              className += 'medium';
            } else {
              className += 'large';
            }
            return L.divIcon({ html: '<div><span>' + childCount + '</span></div>', className: className, iconSize: new L.Point(40, 40) });
          }
        });
        map.eachLayer(function(layer) {
          // Add capabilities of 'featureGroup.subgroup', if layer is a group
          if (layer.addLayer){
            angular.extend(layer, L.featureGroup.subGroup(markerClusterLayer));
          }
        });
        if (esGeo.point.ip.license) {
          markerClusterLayer.getAttribution = function() {
            return '<a target=\"_blank\" href="{0}">{1}</a>'.format(
              esGeo.point.ip.license.url,
              esGeo.point.ip.license.name);
          };
        }
        markerClusterLayer.addTo(map);

        //$scope.map.layers.overlays['offline'].visible=false;

        $scope.map.loading = false;
        return map;
      });
    };

    $scope.updateView = function(data) {
      console.debug("[map] [peers] Updating UI");

      // Always tru if network not started (e.g. after leave+renter the view)
      $scope.search.loading = !$scope.networkStarted || csNetwork.isBusy();

      // Store marker id, to be able to apply deletion
      var markerIdByPeerIdToRemove = angular.copy(markerIdByPeerId);

      _.forEach(data.peers||[], function(peer){
        // skip TOR peer
        if (peer.isTor()) return; // already define
        // get marker id
        var markerId = markerIdByPeerId[peer.id];

        // if already exists
        if (markerId && $scope.map.markers[markerId]) {
          $scope.updateMarker($scope.map.markers[markerId], peer);
          delete markerIdByPeerIdToRemove[peer.id];
          return;
        }

        // Get position by IP
        var bma = peer.bma;
        var address = peer.hasValid4(bma) ? bma.ipv4 : (bma.dns || bma.ipv6);
        esGeo.point.ip.search(address)

        // Create the marker
          .then(function(position){// Add marker to list
            markerId = '' + markerCounter++;
            var marker = $scope.updateMarker({
              position: position,
              getMessageScope: function() {
                var scope = $scope.$new();
                scope.peer = peer;
                return scope;
              },
              draggable: false,
              focus: false,
              message: markerMessageTemplate,
              id: markerId
            }, peer);


            $scope.map.markers[markerId] = marker;
            markerIdByPeerId[peer.id] = markerId;

            // Create a search marker (will be hide)
            var searchServer = peer.dns || peer.server;
            var searchText = searchServer +
              (peer.uid ? (' | ' + (peer.name||peer.uid)) : '') +
              ' | ' + formatPubkey(peer.pubkey);
            var searchIp;
            if (bma.ipv4 && !(peer.dns || peer.server).startsWith(bma.ipv4)) {
              searchIp = bma.ipv4;
              searchText += ' | ' + bma.ipv4;
            }
            markersSearchLayer.addLayer(new L.Marker({
                lat: position.lat,
                lng: position.lng
              },
              {
                opacity: 0,
                icon: L.divIcon({
                  className: 'ng-hide',
                  iconSize: L.point(0, 0)
                }),
                title: searchText,
                peer: angular.extend({ipv4: searchIp}, peer),
                popupMarkerId: markerId
              }));
          })
          .catch(function(err) {
            console.debug('No position found for address ['+address+']', err);
          });
      });

      // Remove old markers not found in the new result
      _.forEach(_.keys(markerIdByPeerIdToRemove), function(peerId) {
        delete markerIdByPeerId[peerId];
      });
      _.forEach(_.values(markerIdByPeerIdToRemove), function(markerId) {
        delete $scope.map.markers[markerId];
      });

      // Hide loading indicator, when finished
      if (!$scope.search.loading) {
        leafletData.getMap($scope.mapId)
          .then(function (map) {
            $scope.loading = false;
            map.fire('dataload');
          });
      }
    };

    $scope.updateMarker = function(marker, peer) {
      marker.layer = !peer.online ? 'offline' : (peer.uid ? 'member' : 'mirror');
      marker.icon = angular.copy(icons[marker.layer]);
      marker.opacity = peer.online ? 1 : 1;
      marker.title = peer.dns || peer.server;
      if (peer.online && !peer.hasMainConsensusBlock) {
        marker.icon.markerColor = peer.hasConsensusBlock ? 'lightgreen' : 'lightgray';
        marker.opacity = peer.hasConsensusBlock ? 0.9 : 0.8;
      }
      if (!marker.lng) {
        marker.lng = marker.position.lng + Math.random() / 1000;
        marker.lat = marker.position.lat + Math.random() / 1000;
      }

      return marker;
    };


    // Update the browser location, to be able to refresh the page
    $scope.updateLocationHref = function(centerHash) {
      // removeIf(device)
      var params = $location.search() || {};
      if (!params.c || !MapUtils.center.isDefault($scope.map.center)) {
        centerHash = centerHash || '{0}:{1}:{2}'.format($scope.map.center.lat.toFixed(4), $scope.map.center.lng.toFixed(4), $scope.map.center.zoom);
        $location.search({ c:  centerHash}).replace();
      }
      // endRemoveIf(device)
    };

    // removeIf(device)
    // Update the browser location, to be able to refresh the page
    // FIXME: not need, should be removed
    $scope.$on("centerUrlHash", function(event, centerHash) {
      if (!$scope.loading) {
        return $timeout(function() {
          $scope.updateLocationHref(centerHash);
        }, 300);
      }
    });
    // endRemoveIf(device)

    /* -- help tip -- */

    $scope.showHelpTip = function() {
      // override subclass
    };
  }]);


angular.module('cesium.map.user.controllers', ['cesium.services', 'cesium.map.services'])

  .config(['PluginServiceProvider', 'csConfig', function(PluginServiceProvider, csConfig) {
    'ngInject';

    var enable = csConfig.plugins && csConfig.plugins.es;
    if (enable) {

      PluginServiceProvider

        .extendState('app.user_edit_profile', {
          points: {
            'after-position': {
              templateUrl: 'plugins/map/templates/user/edit_profile_extend.html',
              controller: 'MapEditProfileViewCtrl'
            }
          }
        });
    }
  }])

  // [NEW] Manage events from the page #/app/wot/map
  .controller('MapEditProfileViewCtrl', ['$scope', '$timeout', '$q', 'MapUtils', '$translate', function($scope, $timeout, $q, MapUtils, $translate) {
    'ngInject';

    var listeners = [];
    $scope.mapId = 'map-user-profile-' + $scope.$id;
    $scope.map = MapUtils.map({
      markers: {},
      center: {
        zoom: 13
      }
    });
    $scope.loading = true;
    $scope.mapId = 'map-profile-' + $scope.$id;

    $scope.enter = function(e, state) {

      // Wait parent controller load the profile
      if (!$scope.formData || (!$scope.formData.title && !$scope.formData.geoPoint)) {
        return $timeout($scope.enter, 500);
      }

      $scope.loading = true;
      return $scope.load();
    };
    $scope.$on('$csExtension.enter', $scope.enter);
    $scope.$on('$ionicParentView.enter', $scope.enter);

    $scope.load = function() {

      // no position define: remove existing listener
      if (!$scope.formData.geoPoint || !$scope.formData.geoPoint.lat || !$scope.formData.geoPoint.lon) {
        _.forEach(listeners, function(listener){
          listener(); // unlisten
        });
        listeners = [];
        delete $scope.map.markers.geoPoint;
        $scope.loading = false;
        return $q.when();
      }

      // If no marker exists on map: create it
      if (!$scope.map.markers.geoPoint) {

        return $translate('MAP.PROFILE.MARKER_HELP')
          .then(function(helpText) {

            $scope.map.markers.geoPoint = {
              message: helpText,
              lat: parseFloat($scope.formData.geoPoint.lat),
              lng: parseFloat($scope.formData.geoPoint.lon),
              draggable: true,
              focus: true
            };
            angular.extend($scope.map.center, {
              lat: $scope.map.markers.geoPoint.lat,
              lng: $scope.map.markers.geoPoint.lng
            });

            // Listening changes
            var listener = $scope.$watch('map.markers.geoPoint', function() {
              if ($scope.loading) return;
              if ($scope.map.markers.geoPoint && $scope.map.markers.geoPoint.lat && $scope.map.markers.geoPoint.lng) {
                $scope.formData.geoPoint = $scope.formData.geoPoint || {};
                $scope.formData.geoPoint.lat = $scope.map.markers.geoPoint.lat;
                $scope.formData.geoPoint.lon = $scope.map.markers.geoPoint.lng;
              }
            }, true);
            listeners.push(listener);


            // Make sure map appear, if shown later
            if (!$scope.ionItemClass) {
              $scope.ionItemClass = 'done in';
            }

            $scope.loading = false;
          });
      }

      // Marker exists: update lat/lon
      else {
        $scope.map.markers.geoPoint.lat = $scope.formData.geoPoint.lat;
        $scope.map.markers.geoPoint.lng = $scope.formData.geoPoint.lon;
      }
    };


    $scope.$watch('formData.geoPoint', function() {
      if ($scope.loading) return;
      $scope.load();
    }, true);

  }]);

angular.module('cesium.map.settings.controllers', ['cesium.services'])

  // Configure menu items
  .config(['PluginServiceProvider', 'csConfig', function(PluginServiceProvider, csConfig) {
    'ngInject';

    var enable = csConfig.plugins && csConfig.plugins.es;
    if (enable) {
      // Extend settings via extension points
      PluginServiceProvider.extendState('app.es_settings', {
        points: {
          'common': {
            templateUrl: "plugins/map/templates/settings/es_settings_extend.html"
          }
        }
      });
    }
  }])

;




MapHelpTipController.$inject = ['$scope', '$controller'];
angular.module('cesium.map.help.controllers', ['cesium.services'])

  .controller('MapHelpTipCtrl', MapHelpTipController)
;


/* ----------------------------
*  Help Tip
* ---------------------------- */
function MapHelpTipController($scope, $controller) {

  // Initialize the super class and extend it.
  angular.extend(this, $controller('HelpTipCtrl', {$scope: $scope}));

  $scope.mapId = undefined; // should be set by caller controllers

  /**
   * Features tour on map WOT
   * @returns {*}
   */
  $scope.startMapWotTour = function(startIndex, hasNext) {

    var steps = [

      function(){
        return $scope.showHelpTip('helptip-map-wot', {
          bindings: {
            content: 'MAP.HELP.TIP.WOT',
            icon: {
              position: 'center',
              glyph: 'ion-information-circled'
            }
          }
        });
      },

      function(){
        return $scope.showHelpTip(null, {
          selector: '#{0} .leaflet-control-search'.format($scope.mapId),
          bindings: {
            content: 'MAP.HELP.TIP.WOT_BTN_SEARCH',
            icon: {
              position: 'center'
            }
          }
        });
      },

      function () {
        return $scope.showHelpTip(null, {
          selector: '#{0} .leaflet-control-layers'.format($scope.mapId),
          bindings: {
            content: 'MAP.HELP.TIP.WOT_BTN_LAYERS',
            icon: {
              position: 'right'
            },
            hasNext: hasNext
          }
        });
      }
    ];

    // Launch steps
    return $scope.executeStep('mapwot', steps, startIndex);
  };
}

// Ionic Starter App

// angular.module is a global place for creating, registering and retrieving Angular modules
// 'starter' is the name of this angular module example (also set in a <body> attribute in index.html)
// the 2nd parameter is an array of 'requires'
// 'starter.controllers' is found in controllers.js
angular.module('cesium', ['ionic', 'ionic-material', 'ngMessages', 'pascalprecht.translate',
  'ngApi', 'angular-cache', 'angular.screenmatch', 'angular.bind.notifier', 'ImageCropper', 'ion-digit-keyboard',
  // removeIf(no-plugin)
  'cesium.plugins',
  // endRemoveIf(no-plugin)
  'cesium.filters', 'cesium.config', 'cesium.platform', 'cesium.controllers', 'cesium.templates', 'cesium.translations', 'cesium.components', 'cesium.directives'
  ])

  // Override the automatic sync between location URL and state
  // (see watch event $locationChangeSuccess in the run() function bellow)
  .config(['$urlRouterProvider', function ($urlRouterProvider) {
    'ngInject';

    $urlRouterProvider.deferIntercept();
  }])

  .run(['$rootScope', '$translate', '$state', '$window', '$urlRouter', 'ionicReady', 'Device', 'UIUtils', '$ionicConfig', 'PluginService', 'csPlatform', 'csWallet', function($rootScope, $translate, $state, $window, $urlRouter, ionicReady,
                Device, UIUtils, $ionicConfig, PluginService, csPlatform, csWallet) {
    'ngInject';

    // Must be done before any other $stateChangeStart listeners
    csPlatform.disableChangeState();

    var preventStateChange = false; // usefull to avoid duplicate login, when a first page with auth
    $rootScope.$on('$stateChangeStart', function (event, next, nextParams, fromState) {
      if (event.defaultPrevented) return;

      var skip = !next.data || $rootScope.tour || event.currentScope.tour; // disabled for help tour
      if (skip) return;

      if (preventStateChange) {
        event.preventDefault();
        return;
      }

      var options;

      // removeIf(android)
      // removeIf(ios)
      // removeIf(firefoxos)
      // -- Automatic redirection to large state (if define) (keep this code for platforms web and ubuntu build)
      if (next.data.large && !UIUtils.screen.isSmall()) {
        event.preventDefault();
        $state.go(next.data.large, nextParams);
        return;
      }
      // endRemoveIf(firefoxos)
      // endRemoveIf(ios)
      // endRemoveIf(android)

      var wallet = nextParams.wallet && nextParams.wallet != "default" ? csWallet.children.get(nextParams.wallet) : csWallet;
      if (nextParams.wallet && !wallet) {
        console.warn("[app] Unable to find the children wallet: " + nextParams.wallet);
      }
      // If state need auth
      if (next.data.auth && !wallet.isAuth()) {
        event.preventDefault();
        options = next.data.minData ? {minData: true} : undefined;
        preventStateChange = true;
        return csWallet.auth(options)
          .then(function() {
            preventStateChange = false;
            return $state.go(next.name, nextParams);
          })
          .catch(function(err) {
            preventStateChange = false;
            // If cancel, redirect to home, if no current state
            if (err == 'CANCELLED' && !$state.current.name) {
              return $state.go('app.home');
            }
          });
      }

      // If state need login
      else if (next.data.login && !csWallet.isLogin()) {
        event.preventDefault();
        options = next.data.minData ? {minData: true} : undefined;
        preventStateChange = true;
        return csWallet.login(options)
          .then(function() {
            preventStateChange = false;
            return $state.go(next.name, nextParams);
          })
          .catch(function(err) {
            preventStateChange = false;
            // If cancel, redirect to home, if no current state
            if (err == 'CANCELLED' && !$state.current.name) {
              return $state.go('app.home');
            }
          });
      }

      // If state need login or auth, make sure to load wallet data
      else if (next.data.login || next.data.auth)  {
        options = next.data.minData ? {minData: true} : undefined;
        if (!wallet.isDataLoaded(options)) {
          event.preventDefault();
          // Show loading message, when full load
          if (!options || !options.minData) UIUtils.loading.show();
          return wallet.loadData(options)
            .then(function() {
              preventStateChange = false;
              return $state.go(next.name, nextParams);
            });
        }
      }
    });

    // Leave the current page, if auth was required to access it
    csWallet.api.data.on.unauth($rootScope, function() {
      if ($state.current && $state.current.data && $state.current.data.auth) {
        $state.go('app.home');
      }
    });

    // Prevent $urlRouter's default handler from firing (don't sync ui router)
    $rootScope.$on('$locationChangeSuccess', function(event, newUrl, oldUrl) {
      if ($state.current.data && $state.current.data.silentLocationChange === true) {
        // Skipping propagation, because same URL, and state configured with 'silentLocationChange' options
        var sameUrl = oldUrl && (oldUrl.split('?')[0] === newUrl.split('?')[0]);
        if (sameUrl) event.preventDefault();
      }
    });
    // Configures $urlRouter's listener *after* the previous listener
    $urlRouter.listen();

    // Start plugins eager services
    PluginService.start();
  }])
;

angular.module('cesium.components', [])

  .component('csBadgeCertification', {
    bindings: {
      requirements: '=',
      parameters: '<',
      csId: '@'
    },
    templateUrl: 'templates/common/badge_certification_count.html'
  })

  .component('csBadgeGivenCertification', {
    bindings: {
      identity: '=',
      parameters: '<',
      csId: '@'
    },
    templateUrl: 'templates/common/badge_given_certification_count.html'
  })

  .component('csSortIcon', {
    bindings: {
      asc: '=',
      sort: '=',
      toggle: '<'
    },
    template:
    '<i class="ion-chevron-up" ng-class="{gray: !$ctrl.asc || $ctrl.sort != $ctrl.toggle}" style="position: relative; left: 5px; top:-5px; font-size: 9px;"></i>' +
    '<i class="ion-chevron-down" ng-class="{gray : $ctrl.asc || $ctrl.sort != $ctrl.toggle}" style="position: relative; left: -2.6px; top: 3px; font-size: 9px;"></i>'
  })

;

angular.module('cesium.directives', [])

  // Add new compare-to directive (need for form validation)
  .directive("compareTo", function() {
      return {
          require: "?ngModel",
          link: function(scope, element, attributes, ngModel) {
            if (ngModel && attributes.compareTo) {
              ngModel.$validators.compareTo = function(modelValue) {
                  return modelValue == scope.$eval(attributes.compareTo);
              };

              scope.$watch(attributes.compareTo, function() {
                  ngModel.$validate();
              });
            }
          }
      };
  })

  // Add new different-to directive (need for form validation)
  .directive("differentTo", function() {
    return {
      require: "?ngModel",
      link: function(scope, element, attributes, ngModel) {
        if (ngModel && attributes.differentTo) {
          ngModel.$validators.differentTo = function(modelValue) {
            return modelValue != scope.$eval(attributes.differentTo);
          };

          scope.$watch(attributes.differentTo, function() {
            ngModel.$validate();
          });
        }
      }
    };
  })

  .directive('numberFloat', function() {
    var NUMBER_REGEXP = new RegExp('^[0-9]+([.,][0-9]+)?$');

    return {
      require: '?ngModel',
      link: function(scope, element, attributes, ngModel) {
        if (ngModel) {
          ngModel.$validators.numberFloat = function(value) {
            return ngModel.$isEmpty(value) || NUMBER_REGEXP.test(value);
          };
        }
      }
    };
  })

  .directive('numberInt', function() {
    var INT_REGEXP = new RegExp('^[0-9]+$');
    return {
      require: 'ngModel',
      link: function(scope, element, attrs, ngModel) {
        if (ngModel) {
          ngModel.$validators.numberInt = function (value) {
            return ngModel.$isEmpty(value) || INT_REGEXP.test(value);
          };
        }
      }
    };
  })

  .directive('email', function() {
    var EMAIL_REGEXP = new RegExp('^[a-z0-9!#$%&\'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&\'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$');
    return {
      require: 'ngModel',
      link: function(scope, element, attrs, ngModel) {
        if (ngModel) {
          ngModel.$validators.email = function (value) {
            return ngModel.$isEmpty(value) || EMAIL_REGEXP.test(value);
          };
        }
      }
    };
  })

  .directive('requiredIf', function() {
    return {
      require: '?ngModel',
      link: function(scope, element, attributes, ngModel) {
        if (ngModel && attributes.requiredIf) {
          ngModel.$validators.required = function(value) {
            return !(scope.$eval(attributes.requiredIf)) || !ngModel.$isEmpty(value);
          };

          scope.$watch(attributes.requiredIf, function() {
            ngModel.$validate();
          });
        }
      }
    };
  })

  .directive('geoPoint', function() {
    return {
      require: '?ngModel',
      link: function(scope, element, attributes, ngModel) {
        if (ngModel) {
          ngModel.$validators.geoPoint = function(value) {
            return ngModel.$isEmpty(value) || (angular.isDefined(value.lat) && angular.isDefined(value.lon));
          };
        }
      }
    };
  })

  // Add a copy-on-click directive
  .directive('copyOnClick', ['$window', '$document', 'Device', 'UIUtils', function ($window, $document, Device, UIUtils) {
    'ngInject';
    return {
      restrict: 'A',
      link: function (scope, element, attrs) {
        var showCopyPopover = function (event) {
          var value = attrs.copyOnClick;
          if (value && Device.clipboard.enable) {
            // copy to clipboard
            Device.clipboard.copy(value)
              .then(function(){
                 UIUtils.toast.show('INFO.COPY_TO_CLIPBOARD_DONE');
              })
              .catch(UIUtils.onError('ERROR.COPY_CLIPBOARD'));
          }
          else if (value) {
            var rows = value && value.indexOf('\n') >= 0 ? value.split('\n').length : 1;
            UIUtils.popover.show(event, {
              scope: scope,
              templateUrl: 'templates/common/popover_copy.html',
              bindings: {
                value: attrs.copyOnClick,
                rows: rows
              },
              autoselect: '.popover-copy ' + (rows <= 1 ? 'input' : 'textarea')
            });
          }
        };
        element.bind('click', showCopyPopover);
        element.bind('hold', showCopyPopover);
      }
    };
  }])

  // Add a select-on-click directive
  .directive('selectOnClick', ['$window', function ($window) {
    'ngInject';
      return {
          restrict: 'A',
          link: function (scope, element, attrs) {
              element.bind('click', function () {
                if ($window.getSelection && !$window.getSelection().toString() && this.value) {
                  this.setSelectionRange(0, this.value.length);
                }
              });
          }
      };
  }])

  .directive('activeLink', ['$location', function ($location) {
    'ngInject';
    return {
      restrict: 'A',
      link: function(scope, element, attrs, controller) {
        var clazz = attrs.activeLink;
        var path;
        if (attrs.activeLinkPathPrefix) {
          path = attrs.activeLinkPathPrefix.substring(1); //hack because path does not return including hashbang
          scope.location = $location;
          scope.$watch('location.path()', function (newPath) {
            if (newPath && newPath.indexOf(path) === 0) {
              element.addClass(clazz);
            } else {
              element.removeClass(clazz);
            }
          });
        }
        else if (attrs.href) {
          path = attrs.href.substring(1); //hack because path does not return including hashbang
          scope.location = $location;
          scope.$watch('location.path()', function (newPath) {
            if (newPath && newPath == path) {
              element.addClass(clazz);
            } else {
              element.removeClass(clazz);
            }
          });
        }
      }
    };
  }])

  // All this does is allow the message
  // to be sent when you tap return
  .directive('input', ['$timeout', function($timeout) {
    return {
      restrict: 'E',
      scope: {
        'returnClose': '=',
        'onReturn': '&',
        'onFocus': '&',
        'onBlur': '&'
      },
      link: function(scope, element, attr) {
        element.bind('focus', function(e) {
          if (scope.onFocus) {
            $timeout(function() {
              scope.onFocus();
            });
          }
        });
        element.bind('blur', function(e) {
          if (scope.onBlur) {
            $timeout(function() {
              scope.onBlur();
            });
          }
        });
        element.bind('keydown', function(e) {
          if (e.which == 13) {
            if (scope.returnClose) element[0].blur();
            if (scope.onReturn) {
              $timeout(function() {
                scope.onReturn();
              });
            }
          }
        });
      }
    };
  }])

  .directive('trustAsHtml', ['$sce', '$compile', '$parse', function($sce, $compile, $parse){
    return {
      restrict: 'A',
      compile: function (tElement, tAttrs) {
        var ngBindHtmlGetter = $parse(tAttrs.trustAsHtml);
        var ngBindHtmlWatch = $parse(tAttrs.trustAsHtml, function getStringValue(value) {
          return (value || '').toString();
        });
        $compile.$$addBindingClass(tElement);

        return function ngBindHtmlLink(scope, element, attr) {
          $compile.$$addBindingInfo(element, attr.trustAsHtml);

          scope.$watch(ngBindHtmlWatch, function ngBindHtmlWatchAction() {
            // we re-evaluate the expr because we want a TrustedValueHolderType
            // for $sce, not a string
            element.html($sce.getTrustedHtml($sce.trustAsHtml(ngBindHtmlGetter(scope))) || '');
            $compile(element.contents())(scope);
          });
        };
      }
    };
  }])

  /**
  * Close the current modal
  */
  .directive('modalClose', ['$ionicHistory', '$timeout', function($ionicHistory, $timeout) {
    return {
      restrict: 'AC',
      link: function($scope, $element) {
        $element.bind('click', function() {
          if ($scope.closeModal) {
            $ionicHistory.nextViewOptions({
              historyRoot: true,
              disableAnimate: true,
              expire: 300
            });
            // if no transition in 300ms, reset nextViewOptions
            // the expire should take care of it, but will be cancelled in some
            // cases. This directive is an exception to the rules of history.js
            $timeout( function() {
              $ionicHistory.nextViewOptions({
                historyRoot: false,
                disableAnimate: false
              });
            }, 300);
            $scope.closeModal();
          }
        });
      }
    };
  }])

  /**
  * Plugin extension point (see services/plugin-services.js)
  */
  .directive('csExtensionPoint', ['$state', '$compile', '$controller', '$templateCache', 'PluginService', function ($state, $compile, $controller, $templateCache, PluginService) {
    var getTemplate = function(extensionPoint) {
      var template = extensionPoint.templateUrl ? $templateCache.get(extensionPoint.templateUrl) : extensionPoint.template;
      if (!template) {
        console.error('[plugin] Could not found template for extension :' + (extensionPoint.templateUrl ? extensionPoint.templateUrl : extensionPoint.template));
        return '';
      }
      if (extensionPoint.controller) {
        template = '<ng-controller ng-controller="'+extensionPoint.controller+'">' + template + '</div>';
      }
      return template;
    };

    var compiler = function(tElement, tAttributes) {

      if (angular.isDefined(tAttributes.name)) {
        var extensionPoints = PluginService.extensions.points.getActivesByName(tAttributes.name);
        if (extensionPoints.length > 0) {
          tElement.html("");
          _.forEach(extensionPoints, function(extensionPoint){
            tElement.append(getTemplate(extensionPoint));
          });
        }
      }

      return {
        pre: function(scope, iElement, iAttrs){
          PluginService.extensions.points.current.set(iAttrs.name);
        },
        post: function(){
          PluginService.extensions.points.current.set();
        }
      };
    };


    return {
      restrict: "E",
      compile: compiler,
      scope: {
          content:'='
      }
    };
  }])

  .directive('onReadFile', ['$parse', function ($parse) {
    return {
      restrict: 'A',
      scope: false,
      link: function(scope, element, attrs) {
        var fn = $parse(attrs.onReadFile);

        element.on('change', function(onChangeEvent) {
          var reader = new FileReader();
          var fileData = {
            name: this.files[0].name,
            size: this.files[0].size,
            type: this.files[0].type
          };

          reader.onload = function(onLoadEvent) {
            scope.$applyAsync(function() {
              fn(scope, {
                file: {
                  fileContent: onLoadEvent.target.result,
                  fileData : fileData}
              });
            });
          };
          reader.readAsText((onChangeEvent.srcElement || onChangeEvent.target).files[0]);
        });
      }
    };
  }])

.directive("dropzone", ['$parse', function($parse) {
    return {
      restrict: 'A',
      scope: false,
        link: function(scope, elem, attrs) {
          var fn = $parse(attrs.dropzone);
          elem.bind('dragover', function (e) {
            e.stopPropagation();
            e.preventDefault();
          });
          elem.bind('dragenter', function(e) {
            e.stopPropagation();
            e.preventDefault();
          });
          elem.bind('dragleave', function(e) {
            e.stopPropagation();
            e.preventDefault();
          });
          elem.bind('drop', function(e) {
            e.stopPropagation();
            e.preventDefault();
            var fileData = {
              name: e.dataTransfer.files[0].name,
              size: e.dataTransfer.files[0].size,
              type: e.dataTransfer.files[0].type
            };

            var reader = new FileReader();
            reader.onload = function(onLoadEvent) {
              scope.$apply(function () {
                fn(scope, {
                  file: {
                    fileContent: onLoadEvent.target.result,
                    fileData : fileData}
                });
              });
            };
            reader.readAsText(e.dataTransfer.files[0]);
          });
      }
    };
  }])

  // Un-authenticate when window closed
  // see: https://stackoverflow.com/questions/28197316/javascript-or-angularjs-defer-browser-close-or-tab-close-between-refresh
  .directive('windowExitUnauth', ['$window', 'csWallet', function($window, csWallet) {
    return {
      restrict: 'AE',
      link: function(element, attrs){
        var myEvent = $window.attachEvent || $window.addEventListener,
          chkevent = $window.attachEvent ? 'onunload' : 'unload'; /// make IE7, IE8 compatable

        myEvent(chkevent, function (e) { // For >=IE7, Chrome, Firefox
          return csWallet.unauth();
        });
      }
    };
  }])
;

// Cesium filters
angular.module('cesium.filters', ['cesium.config', 'cesium.platform', 'pascalprecht.translate', 'cesium.translations'
])

  .factory('filterTranslations', ['$rootScope', '$q', 'csPlatform', 'csSettings', 'csCurrency', '$translate', function($rootScope, $q, csPlatform, csSettings, csCurrency, $translate) {
    'ngInject';

    var
      started = false,
      startPromise,
      that = this;

    that.MEDIAN_TIME_OFFSET = 3600 /*G1 default value*/;

    // Update some translations, when locale changed
    function onLocaleChange() {
      console.debug('[filter] Loading translations for locale [{0}]'.format($translate.use()));
      return $translate(['COMMON.DATE_PATTERN', 'COMMON.DATE_SHORT_PATTERN', 'COMMON.UD', 'COMMON.DAYS'])
        .then(function(translations) {
          that.DATE_PATTERN = translations['COMMON.DATE_PATTERN'];
          if (that.DATE_PATTERN === 'COMMON.DATE_PATTERN') {
            that.DATE_PATTERN = 'YYYY-MM-DD HH:mm';
          }
          that.DATE_SHORT_PATTERN = translations['COMMON.DATE_SHORT_PATTERN'];
          if (that.DATE_SHORT_PATTERN === 'COMMON.DATE_SHORT_PATTERN') {
            that.DATE_SHORT_PATTERN = 'YYYY-MM-DD';
          }
          that.DATE_MONTH_YEAR_PATTERN = translations['COMMON.DATE_MONTH_YEAR_PATTERN'];
          if (that.DATE_MONTH_YEAR_PATTERN === 'COMMON.DATE_MONTH_YEAR_PATTERN') {
            that.DATE_MONTH_YEAR_PATTERN = 'MMM YY';
          }
          that.DAYS = translations['COMMON.DAYS'];
          if (that.DAYS === 'COMMON.DAYS') {
            that.DAYS = 'days';
          }
          that.UD = translations['COMMON.UD'];
          if (that.UD === 'COMMON.UD') {
            that.UD = 'UD';
          }
        });
    }

    // Update some translations, when locale changed
    function onCurrencyChange() {
      console.debug('[filter] Computing constants from currency parameters');
      that.MEDIAN_TIME_OFFSET = csCurrency.data.medianTimeOffset || that.MEDIAN_TIME_OFFSET;
    }

    that.ready = function() {
      if (started) return $q.when();
      return startPromise || that.start();
    };

    that.start = function() {
      startPromise = csPlatform.ready()
        .then(onLocaleChange)
        .then(function() {
          onCurrencyChange();
          started = true;

          csSettings.api.locale.on.changed($rootScope, onLocaleChange, this);
          csCurrency.api.data.on.ready($rootScope, onCurrencyChange, this);
        });
      return startPromise;
    };

    // Default action
    that.start();

    return that;
  }])

  .filter('formatInteger', function() {
    return function(input) {
      return !input ? '0' : (input < 10000000 ? numeral(input).format('0,0') : numeral(input).format('0,0.000 a'));
    };
  })

  .filter('formatAmount', ['csConfig', 'csSettings', 'csCurrency', '$filter', function(csConfig, csSettings, csCurrency, $filter) {
    var pattern = '0,0.0' + Array(csConfig.decimalCount || 4).join('0');
    var patternBigNumber = '0,0.000 a';
    var currencySymbol = $filter('currencySymbol');

    // Always add one decimal for relative unit
    var patternRelative = pattern + '0';
    var minValueRelative = 1 / Math.pow(10, (csConfig.decimalCount || 4) + 1 /*add one decimal in relative*/);

    function formatRelative(input, options) {
      var currentUD = options && options.currentUD ? options.currentUD : csCurrency.data.currentUD;
      if (!currentUD) {
        console.warn("formatAmount: currentUD not defined");
        return;
      }
      var amount = input / currentUD;
      if (Math.abs(input) < minValueRelative && input !== 0) {
        amount = '~ 0';
      }
      else {
        amount = numeral(amount).format(patternRelative);
      }
      if (options && options.currency) {
        return amount + ' ' + currencySymbol(options.currency, true);
      }
      return amount;
    }

    function formatQuantitative(input, options) {
      var amount = numeral(input/100).format((input < -1000000000 || input > 1000000000) ? patternBigNumber : pattern);
      if (options && options.currency) {
        return amount + ' ' + currencySymbol(options.currency, false);
      }
      return amount;
    }

    return function(input, options) {
      if (input === undefined) return;
      return (options && angular.isDefined(options.useRelative) ? options.useRelative : csSettings.data.useRelative) ?
        formatRelative(input, options) :
        formatQuantitative(input, options);
    };
  }])

  .filter('formatAmountNoHtml', ['csConfig', 'csSettings', 'csCurrency', '$filter', function(csConfig, csSettings, csCurrency, $filter) {
    var minValue = 1 / Math.pow(10, csConfig.decimalCount || 4);
    var format = '0,0.0' + Array(csConfig.decimalCount || 4).join('0');
    var currencySymbol = $filter('currencySymbolNoHtml');

    function formatRelative(input, options) {
      var currentUD = options && options.currentUD ? options.currentUD : csCurrency.data.currentUD;
      if (!currentUD) {
        console.warn("formatAmount: currentUD not defined");
        return;
      }
      var amount = input / currentUD;
      if (Math.abs(amount) < minValue && input !== 0) {
        amount = '~ 0';
      }
      else {
        amount = numeral(amount).format(format);
      }
      if (options && options.currency) {
        return amount + ' ' + currencySymbol(options.currency, true);
      }
      return amount;
    }

    function formatQuantitative(input, options) {
      var amount = numeral(input/100).format((input > -1000000000 && input < 1000000000) ? '0,0.00' : '0,0.000 a');
      if (options && options.currency) {
        return amount + ' ' + currencySymbol(options.currency, false);
      }
      return amount;
    }

    return function(input, options) {
      if (input === undefined) return;
      return (options && angular.isDefined(options.useRelative) ? options.useRelative : csSettings.data.useRelative) ?
        formatRelative(input, options) :
        formatQuantitative(input, options);
    };
  }])


  .filter('currencySymbol', ['filterTranslations', '$filter', 'csSettings', function(filterTranslations, $filter, csSettings) {
    return function(input, useRelative) {
      if (!input) return '';
      return (angular.isDefined(useRelative) ? useRelative : csSettings.data.useRelative) ?
        (filterTranslations.UD + '<sub>' + $filter('abbreviate')(input) + '</sub>') :
        $filter('abbreviate')(input);
    };
  }])

  .filter('currencySymbolNoHtml', ['filterTranslations', '$filter', 'csSettings', function(filterTranslations, $filter, csSettings) {
    return function(input, useRelative) {
      if (!input) return '';
      return (angular.isDefined(useRelative) ? useRelative : csSettings.data.useRelative) ?
        (filterTranslations.UD + ' ' + $filter('abbreviate')(input)) :
        $filter('abbreviate')(input);
    };
  }])


  .filter('formatDecimal', ['csConfig', 'csCurrency', function(csConfig, csCurrency) {
    var minValue = 1 / Math.pow(10, csConfig.decimalCount || 4);
    var format = '0,0.0' + Array(csConfig.decimalCount || 4).join('0');

    return function(input) {
      if (input === undefined) return '0';
      if (input === Infinity || input === -Infinity) {
        console.warn("formatDecimal: division by zero ? (is currentUD defined ?) = "  + csCurrency.data.currentUD);
        return 'error';
      }
      if (Math.abs(input) < minValue) return '~ 0';
      return numeral(input/*-0.00005*/).format(format);
    };
  }])

  .filter('formatNumeral', function() {
    return function(input, pattern) {
      if (input === undefined) return '0';
      // for DEBUG only
      //if (isNaN(input)) {
      //    return 'NaN';
      //}
      if (Math.abs(input) < 0.0001) return '~ 0';
      return numeral(input).format(pattern);
    };
  })

  .filter('formatDate', ['filterTranslations', function(filterTranslations) {
    return function(input) {
      return input ? moment.unix(parseInt(input) + filterTranslations.MEDIAN_TIME_OFFSET).local().format(filterTranslations.DATE_PATTERN || 'YYYY-MM-DD HH:mm') : '';
    };
  }])

  .filter('formatDateShort', ['filterTranslations', function(filterTranslations) {
    return function(input) {
      return input ? moment.unix(parseInt(input) + filterTranslations.MEDIAN_TIME_OFFSET).local().format(filterTranslations.DATE_SHORT_PATTERN || 'YYYY-MM-DD') : '';
    };
  }])

  .filter('formatDateMonth', ['filterTranslations', function(filterTranslations) {
    return function(input) {
      return input ? moment.unix(parseInt(input)).local().format(filterTranslations.DATE_MONTH_YEAR_PATTERN || 'MMM YY') : '';
    };
  }])

  .filter('formatDateForFile', ['filterTranslations', function(filterTranslations) {
    return function(input) {
      return input ? moment.unix(parseInt(input)).local().format(filterTranslations.DATE_FILE_PATTERN || 'YYYY-MM-DD') : '';
    };
  }])

  .filter('formatTime', ['filterTranslations', function(filterTranslations) {
    return function(input) {
      console.log("Format time:", input);
      return input ? moment.unix(parseInt(input)+filterTranslations.MEDIAN_TIME_OFFSET).local().format('HH:mm') : '';
    };
  }])

  .filter('formatFromNow', ['filterTranslations', function(filterTranslations) {
    return function(input) {
      return input ? moment.unix(parseInt(input)+filterTranslations.MEDIAN_TIME_OFFSET).fromNow() : '';
    };
  }])


  .filter('formatDurationTo', function() {
    return function(input) {
      return input ? moment.unix(moment().utc().unix() + parseInt(input)).fromNow() : '';
    };
  })

  .filter('formatDuration', function() {
    return function(input) {
      return input ? moment(0).from(moment.unix(parseInt(input)), true) : '';
    };
  })


  .filter('formatDurationTime', ['filterTranslations', function(filterTranslations) {
    return function(input) {
      if (!input) return '';
      var sign = input && input < 0 ? '-' : '+';
      input = Math.abs(input);
      var day = Math.trunc(input/3600/24);
      var hour = Math.trunc(input/3600 - day*24);
      var min = Math.trunc(input/60 - day*24*60 - hour*60);
      return day > 0 ? (sign + day + ' ' + filterTranslations.DAYS + ' ' + hour + 'h ' + min + 'm') :
        (hour > 0 ? (sign + hour + 'h ' + min + 'm') : (sign + min + 'm')) ;
    };
  }])

  // Display time in ms or seconds (see i18n label 'COMMON.EXECUTION_TIME')
  .filter('formatDurationMs', function() {
    return function(input) {
      return input ? (
        (input < 1000) ?
          (input + 'ms') :
          (input/1000 + 's')
      ) : '';
    };
  })

  .filter('formatPeriod', function() {
    return function(input) {
      if (!input) {return null;}
      var duration = moment(0).from(moment.unix(parseInt(input)), true);
      return duration.split(' ').slice(-1)[0]; // keep only last words (e.g. remove "un" "a"...)
    };
  })

  .filter('formatFromNowShort', ['filterTranslations', function(filterTranslations) {
    return function(input) {
      return input ? moment.unix(parseInt(input)+filterTranslations.MEDIAN_TIME_OFFSET).fromNow(true) : '';
    };
  }])

  .filter('capitalize', function() {
    return function(input) {
      if (!input) return '';
      input = input.toLowerCase();
      return input.substring(0,1).toUpperCase()+input.substring(1);
    };
  })

  .filter('abbreviate', function() {
    var _cache = {};
    return function(input) {
      var currency = input || '';
      if (_cache[currency]) return _cache[currency];
      if (currency.length > 3) {
        var unit = '', sepChars = ['-', '_', ' '];
        for (var i = 0; i < currency.length; i++) {
          var c = currency[i];
          if (i === 0) {
            unit = (c === 'g' || c === 'G') ? 'Ä' : c ;
          }
          else if (i > 0 && sepChars.indexOf(currency[i-1]) != -1) {
            unit += c;
          }
        }
        currency = unit.toUpperCase();
      }
      else {
        currency = currency.toUpperCase();
        if (currency.charAt(0) === 'G') {
          currency = 'Ä' + (currency.length > 1 ? currency.substr(1) : '');
        }
      }

      _cache[input] = currency;
      return currency;
    };
  })

  .filter('upper', function() {
    return function(input) {
      if (!input) return '';
      return input.toUpperCase();
    };
  })

  .filter('formatPubkey', function() {
    return function(input) {
      return input ? input.substr(0,8) : '';
    };
  })

  .filter('formatHash', function() {
    return function(input) {
      return input ? input.substr(0,4) + input.substr(input.length-4) : '';
    };
  })

  .filter('formatCategory', function() {
    return function(input) {
      return input && input.length > 28 ? input.substr(0,25)+'...' : input;
    };
  })

  // Convert to user friendly URL (e.g. "Like - This" -> "like-this")
  .filter('formatSlug', function() {
    return function(input) {
      return input ? encodeURIComponent(input
        .toLowerCase()
        .replace(/<[^>]+>/g,'') // Remove tag (like HTML tag)
        .replace(/[^\w ]+/g,'')
        .replace(/ +/g,'-'))
        : '';
    };
  })

  // Convert a URI into parameter (e.g. "http://hos/path" -> "http%3A%2F%2Fhost%2Fpath")
  .filter('formatEncodeURI', function() {
    return function(input) {
      return input ? encodeURIComponent(input): '';
    };
  })

  .filter('truncText', function() {
    return function(input, size) {
      size = size || 500;
      return !input || input.length <= size ? input : (input.substr(0, size) + '...');
    };
  })

  .filter('truncUrl', function() {
    return function(input, size) {
      size = size || 25;
      var startIndex = input.startsWith('http://') ? 7 : (input.startsWith('https://') ? 8 : 0);
      startIndex = input.startsWith('www.', startIndex) ? startIndex + 4 : startIndex; // Remove sequence 'www.'
      return !input || (input.length-startIndex) <= size ? input.substr(startIndex) : (input.substr(startIndex, size) + '...');
    };
  })

  .filter('trustAsHtml', ['$sce', function($sce) {
    return function(html) {
      return $sce.trustAsHtml(html);
    };
  }])
;


angular.module('cesium.platform', ['ngIdle', 'cesium.config', 'cesium.services'])

  // Translation i18n
  .config(['$translateProvider', 'csConfig', function ($translateProvider, csConfig) {
    'ngInject';

    $translateProvider
      .uniformLanguageTag('bcp47')
      .determinePreferredLanguage()
      // Cela fait bugger les placeholder (pb d'affichage des accents en FR)
      //.useSanitizeValueStrategy('sanitize')
      .useSanitizeValueStrategy(null)
      .fallbackLanguage([csConfig.fallbackLanguage ? csConfig.fallbackLanguage : 'en'])
      .useLoaderCache(true);
  }])

  .config(['$httpProvider', 'csConfig', function($httpProvider, csConfig) {
    'ngInject';

    // Set default timeout
    $httpProvider.defaults.timeout = !!csConfig.timeout ? csConfig.timeout : 300000 /* default timeout */;

    //Enable cross domain calls
    $httpProvider.defaults.useXDomain = true;

    //Remove the header used to identify ajax call  that would prevent CORS from working
    delete $httpProvider.defaults.headers.common['X-Requested-With'];

    }])


  .config(['$compileProvider', 'csConfig', function($compileProvider, csConfig) {
    'ngInject';

    $compileProvider.debugInfoEnabled(!!csConfig.debug);
  }])

  .config(['$animateProvider', function($animateProvider) {
    'ngInject';

    $animateProvider.classNameFilter( /\banimate-/ );
  }])

  // Configure cache (used by HTTP requests) default max age
  .config(['CacheFactoryProvider', 'csConfig', function (CacheFactoryProvider, csConfig) {
    'ngInject';
    angular.extend(CacheFactoryProvider.defaults, { maxAge: csConfig.cacheTimeMs || 60 * 1000 /*1min*/});
  }])

  // Configure screen size detection
  .config(['screenmatchConfigProvider', function(screenmatchConfigProvider) {
    'ngInject';

    screenmatchConfigProvider.config.rules = 'bootstrap';
  }])

  .config(['$ionicConfigProvider', function($ionicConfigProvider) {
    'ngInject';

    // JS scrolling need for iOs (see http://blog.ionic.io/native-scrolling-in-ionic-a-tale-in-rhyme/)
    var enableJsScrolling = ionic.Platform.isIOS();
    $ionicConfigProvider.scrolling.jsScrolling(enableJsScrolling);

    // Configure the view cache
    $ionicConfigProvider.views.maxCache(5);
  }])

  .config(['IdleProvider', 'csConfig', function(IdleProvider, csConfig) {
    'ngInject';

    IdleProvider.idle(csConfig.logoutIdle||10*60/*10min*/);
    IdleProvider.timeout(csConfig.logoutTimeout||15); // display warning during 15s
  }])

  .factory('$exceptionHandler', function() {
    'ngInject';

    return function(exception, cause) {
      if (cause) console.error(exception, cause);
      else console.error(exception);
    };
  })


  .factory('csPlatform', ['ionicReady', '$rootScope', '$q', '$state', '$translate', '$timeout', 'UIUtils', 'BMA', 'Device', 'csHttp', 'csConfig', 'csSettings', 'csCurrency', 'csWallet', function (ionicReady, $rootScope, $q, $state, $translate, $timeout, UIUtils,
                                   BMA, Device, csHttp, csConfig, csSettings, csCurrency, csWallet) {

    'ngInject';
    var
      fallbackNodeIndex = 0,
      defaultSettingsNode,
      started = false,
      startPromise,
      listeners,
      removeChangeStateListener;

    function disableChangeState() {
      if (removeChangeStateListener) return; // make sure to call this once

      var remove = $rootScope.$on('$stateChangeStart', function (event, next, nextParams, fromState) {
        if (!event.defaultPrevented && next.name !== 'app.home' && next.name !== 'app.settings') {
          event.preventDefault();
          if (startPromise) {
            startPromise.then(function() {
              $state.go(next.name, nextParams);
            });
          }
          else {
            UIUtils.loading.hide();
          }
        }
      });

      // store remove listener function
      removeChangeStateListener = remove;
    }

    function enableChangeState() {
      if (removeChangeStateListener) removeChangeStateListener();
      removeChangeStateListener = null;
    }

    // Alert user if node not reached - fix issue #
    function checkBmaNodeAlive(alive) {
      if (alive) return true;

      // Remember the default node
      defaultSettingsNode = defaultSettingsNode || csSettings.data.node;

      var fallbackNode = csSettings.data.fallbackNodes && fallbackNodeIndex < csSettings.data.fallbackNodes.length && csSettings.data.fallbackNodes[fallbackNodeIndex++];
      if (!fallbackNode) {
        throw 'ERROR.CHECK_NETWORK_CONNECTION';
      }
      var newServer = fallbackNode.host + ((!fallbackNode.port && fallbackNode.port != 80 && fallbackNode.port != 443) ? (':' + fallbackNode.port) : '');
      return $translate('CONFIRM.USE_FALLBACK_NODE', {old: BMA.server, new: newServer})
        .then(function(msg) {
          return UIUtils.alert.confirm(msg);
        })
        .then(function (confirm) {
          if (!confirm) return;

          // FIXME: should not change settings, but only tha BMA content
          // in UI, display data form BMA object
          csSettings.data.node = fallbackNode;

          csSettings.data.node.temporary = true;
          csHttp.cache.clear();

          // loop
          return BMA.copy(fallbackNode)
            .then(checkBmaNodeAlive);
        });
    }

    function isStarted() {
      return started;
    }

    function getLatestRelease() {
      var latestRelease = csSettings.data.latestReleaseUrl && csHttp.uri.parse(csSettings.data.latestReleaseUrl);
      if (latestRelease) {
        return csHttp.get(latestRelease.host, latestRelease.protocol == 'https:' ? 443 : latestRelease.port, "/" + latestRelease.pathname)()
          .then(function (json) {
            if (json && json.name && json.tag_name && json.html_url) {
              return {
                version: json.name,
                url: json.html_url,
                isNewer: (csHttp.version.compare(csConfig.version, json.name) < 0)
              };
            }
          })
          .catch(function(err) {
            // silent (just log it)
            console.error('[platform] Failed to get Cesium latest version', err);
          })
          ;
      }
      return $q.when();
    }

    function addListeners() {
      listeners = [
        // Listen if node changed
        BMA.api.node.on.restart($rootScope, restart, this)
      ];
    }

    function removeListeners() {
      _.forEach(listeners, function(remove){
        remove();
      });
      listeners = [];
    }

    function ready() {
      if (started) return $q.when();
      return startPromise || start();
    }

    function restart() {
      console.debug('[platform] restarting csPlatform');
      return stop()
        .then(function () {
          return $timeout(start, 200);
        });
    }

    function start() {

      // Avoid change state
      disableChangeState();

      // We use 'ionicReady()' instead of '$ionicPlatform.ready()', because this one is callable many times
      startPromise = ionicReady()

        .then($q.all([
          // Load device
          Device.ready(),

          // Start settings
          csSettings.ready()
        ]))

        // Load BMA
        .then(function(){
          return BMA.ready().then(checkBmaNodeAlive);
        })

        // Load currency
        .then(csCurrency.ready)

        // Trying to restore wallet
        .then(csWallet.ready)

        .then(function(){
          enableChangeState();
          addListeners();
          startPromise = null;
          started = true;
        })
        .catch(function(err) {
          startPromise = null;
          started = false;
          if($state.current.name !== 'app.home') {
            $state.go('app.home', {error: 'peer'});
          }
          throw err;
        });

      return startPromise;
    }

    function stop() {
      if (!started) return $q.when();
      removeListeners();

      csWallet.stop();
      csCurrency.stop();
      BMA.stop();

      return $timeout(function() {
        enableChangeState();
        started = false;
        startPromise = null;
      }, 500);
    }

    return  {
      disableChangeState: disableChangeState,
      isStarted: isStarted,
      ready: ready,
      restart: restart,
      start: start,
      stop: stop,
      version: {
        latest: getLatestRelease
      }
    };
  }])

  .run(['$rootScope', '$translate', '$state', '$window', '$urlRouter', 'ionicReady', 'Device', 'UIUtils', '$ionicConfig', 'PluginService', 'csPlatform', 'csWallet', 'csSettings', 'csConfig', 'csCurrency', function($rootScope, $translate, $state, $window, $urlRouter, ionicReady,
                Device, UIUtils, $ionicConfig, PluginService, csPlatform, csWallet, csSettings, csConfig, csCurrency) {
    'ngInject';

    // Allow access to service data, from HTML templates
    $rootScope.config = csConfig;
    $rootScope.settings = csSettings.data;
    $rootScope.currency = csCurrency.data;
    $rootScope.device = Device;

    // Compute the root path
    var hashIndex = $window.location.href.indexOf('#');
    $rootScope.rootPath = (hashIndex != -1) ? $window.location.href.substr(0, hashIndex) : $window.location.href;
    console.debug('[app] Root path is [' + $rootScope.rootPath + ']');

    // removeIf(device)
    // -- Automatic redirection to HTTPS
    if ((csConfig.httpsMode === true || csConfig.httpsMode == 'true' ||csConfig.httpsMode === 'force') &&
      $window.location.protocol != 'https:') {
      $rootScope.$on('$stateChangeStart', function (event, next, nextParams, fromState) {
        var path = 'https' + $rootScope.rootPath.substr(4) + $state.href(next, nextParams);
        if (csConfig.httpsModeDebug) {
          console.debug('[app] [httpsMode] --- Should redirect to: ' + path);
          // continue
        }
        else {
          $window.location.href = path;
        }
      });
    }
    // endRemoveIf(device)

    // We use 'ionicReady()' instead of '$ionicPlatform.ready()', because this one is callable many times
    ionicReady().then(function() {

      // Keyboard
      if (Device.keyboard.enable) {
        // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard
        // for form inputs)
        Device.keyboard.hideKeyboardAccessoryBar(true);

        // iOS: do not push header up when opening keyboard
        // (see http://ionicframework.com/docs/api/page/keyboard/)
        if (ionic.Platform.isIOS()) {
          Device.keyboard.disableScroll(true);
        }
      }

      // Ionic Platform Grade is not A, disabling views transitions
      if (ionic.Platform.grade.toLowerCase() != 'a') {
        console.info('[app] Disabling UI effects, because plateform\'s grade is [' + ionic.Platform.grade + ']');
        UIUtils.setEffects(false);
      }

      // Status bar style
      if (window.StatusBar) {
        // org.apache.cordova.statusbar required
        StatusBar.styleDefault();
      }

      // Get latest release
      csPlatform.version.latest()
        .then(function(release) {
          if (release && release.isNewer) {
            console.info('[app] New release detected [{0}]'.format(release.version));
            $rootScope.newRelease = release;
          }
          else {
            console.info('[app] Current version [{0}] is the latest release'.format(csConfig.version));
          }
        });

      // Make sure platform is started
      return csPlatform.ready();
    });
  }])
;

// Workaround to add "".startsWith() if not present
if (typeof String.prototype.startsWith !== 'function') {
  console.debug("Adding String.prototype.startsWith() -> was missing on this platform");
  String.prototype.startsWith = function(prefix) {
    return this.indexOf(prefix) === 0;
  };
}

// Workaround to add "".startsWith() if not present
if (typeof String.prototype.trim !== 'function') {
  console.debug("Adding String.prototype.trim() -> was missing on this platform");
  // Make sure we trim BOM and NBSP
  var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
  String.prototype.trim = function() {
    return this.replace(rtrim, '');
  };
}

// Workaround to add Math.trunc() if not present - fix #144
if (Math && typeof Math.trunc !== 'function') {
  console.debug("Adding Math.trunc() -> was missing on this platform");
  Math.trunc = function(number) {
    return (number - 0.5).toFixed();
  };
}

// Workaround to add "".format() if not present
if (typeof String.prototype.format !== 'function') {
  console.debug("Adding String.prototype.format() -> was missing on this platform");
  String.prototype.format = function() {
    var args = arguments;
    return this.replace(/{(\d+)}/g, function(match, number) {
      return typeof args[number] != 'undefined' ? args[number] : match;
    });
  };
}
